   1               		.file	"hal_gpt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.gptInit,"ax",@progbits
  11               	.global	gptInit
  13               	gptInit:
  14               	.LFB168:
  15               		.file 1 "../../../os/hal/src/hal_gpt.c"
   1:../../../os/hal/src/hal_gpt.c **** /*
   2:../../../os/hal/src/hal_gpt.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_gpt.c **** 
   4:../../../os/hal/src/hal_gpt.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_gpt.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_gpt.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_gpt.c **** 
   8:../../../os/hal/src/hal_gpt.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_gpt.c **** 
  10:../../../os/hal/src/hal_gpt.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_gpt.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_gpt.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_gpt.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_gpt.c ****     limitations under the License.
  15:../../../os/hal/src/hal_gpt.c **** */
  16:../../../os/hal/src/hal_gpt.c **** 
  17:../../../os/hal/src/hal_gpt.c **** /**
  18:../../../os/hal/src/hal_gpt.c ****  * @file    hal_gpt.c
  19:../../../os/hal/src/hal_gpt.c ****  * @brief   GPT Driver code.
  20:../../../os/hal/src/hal_gpt.c ****  *
  21:../../../os/hal/src/hal_gpt.c ****  * @addtogroup GPT
  22:../../../os/hal/src/hal_gpt.c ****  * @{
  23:../../../os/hal/src/hal_gpt.c ****  */
  24:../../../os/hal/src/hal_gpt.c **** 
  25:../../../os/hal/src/hal_gpt.c **** #include "hal.h"
  26:../../../os/hal/src/hal_gpt.c **** 
  27:../../../os/hal/src/hal_gpt.c **** #if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_gpt.c **** 
  29:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_gpt.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_gpt.c **** 
  33:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_gpt.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_gpt.c **** 
  37:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_gpt.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_gpt.c **** 
  41:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_gpt.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_gpt.c **** 
  45:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_gpt.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_gpt.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_gpt.c **** 
  49:../../../os/hal/src/hal_gpt.c **** /**
  50:../../../os/hal/src/hal_gpt.c ****  * @brief   GPT Driver initialization.
  51:../../../os/hal/src/hal_gpt.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
  52:../../../os/hal/src/hal_gpt.c ****  *          no need to explicitly initialize the driver.
  53:../../../os/hal/src/hal_gpt.c ****  *
  54:../../../os/hal/src/hal_gpt.c ****  * @init
  55:../../../os/hal/src/hal_gpt.c ****  */
  56:../../../os/hal/src/hal_gpt.c **** void gptInit(void) {
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  57:../../../os/hal/src/hal_gpt.c **** 
  58:../../../os/hal/src/hal_gpt.c ****   gpt_lld_init();
  22               		.loc 1 58 0
  23 0000 0C94 0000 		jmp gpt_lld_init
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE168:
  28               		.section	.text.gptObjectInit,"ax",@progbits
  29               	.global	gptObjectInit
  31               	gptObjectInit:
  32               	.LFB169:
  59:../../../os/hal/src/hal_gpt.c **** }
  60:../../../os/hal/src/hal_gpt.c **** 
  61:../../../os/hal/src/hal_gpt.c **** /**
  62:../../../os/hal/src/hal_gpt.c ****  * @brief   Initializes the standard part of a @p GPTDriver structure.
  63:../../../os/hal/src/hal_gpt.c ****  *
  64:../../../os/hal/src/hal_gpt.c ****  * @param[out] gptp     pointer to the @p GPTDriver object
  65:../../../os/hal/src/hal_gpt.c ****  *
  66:../../../os/hal/src/hal_gpt.c ****  * @init
  67:../../../os/hal/src/hal_gpt.c ****  */
  68:../../../os/hal/src/hal_gpt.c **** void gptObjectInit(GPTDriver *gptp) {
  33               		.loc 1 68 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  69:../../../os/hal/src/hal_gpt.c **** 
  70:../../../os/hal/src/hal_gpt.c ****   gptp->state  = GPT_STOP;
  40               		.loc 1 70 0
  41 0000 21E0      		ldi r18,lo8(1)
  42 0002 FC01      		movw r30,r24
  43 0004 2083      		st Z,r18
  71:../../../os/hal/src/hal_gpt.c ****   gptp->config = NULL;
  44               		.loc 1 71 0
  45 0006 1282      		std Z+2,__zero_reg__
  46 0008 1182      		std Z+1,__zero_reg__
  47 000a 0895      		ret
  48               		.cfi_endproc
  49               	.LFE169:
  51               		.section	.text.gptStart,"ax",@progbits
  52               	.global	gptStart
  54               	gptStart:
  55               	.LFB170:
  72:../../../os/hal/src/hal_gpt.c **** }
  73:../../../os/hal/src/hal_gpt.c **** 
  74:../../../os/hal/src/hal_gpt.c **** /**
  75:../../../os/hal/src/hal_gpt.c ****  * @brief   Configures and activates the GPT peripheral.
  76:../../../os/hal/src/hal_gpt.c ****  *
  77:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
  78:../../../os/hal/src/hal_gpt.c ****  * @param[in] config    pointer to the @p GPTConfig object
  79:../../../os/hal/src/hal_gpt.c ****  *
  80:../../../os/hal/src/hal_gpt.c ****  * @api
  81:../../../os/hal/src/hal_gpt.c ****  */
  82:../../../os/hal/src/hal_gpt.c **** void gptStart(GPTDriver *gptp, const GPTConfig *config) {
  56               		.loc 1 82 0
  57               		.cfi_startproc
  58               	.LVL2:
  59 0000 CF93      		push r28
  60               	.LCFI0:
  61               		.cfi_def_cfa_offset 3
  62               		.cfi_offset 28, -2
  63 0002 DF93      		push r29
  64               	.LCFI1:
  65               		.cfi_def_cfa_offset 4
  66               		.cfi_offset 29, -3
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 2 */
  70               	.L__stack_usage = 2
  71 0004 EC01      		movw r28,r24
  72               	.LBB86:
  73               	.LBB87:
  74               	.LBB88:
  75               	.LBB89:
  76               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  77               		.loc 2 437 0
  78               	/* #APP */
  79               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  80 0006 F894      		cli
  81               	 ;  0 "" 2
  82               	/* #NOAPP */
  83               	.LBE89:
  84               	.LBE88:
  85               	.LBE87:
  86               	.LBE86:
  83:../../../os/hal/src/hal_gpt.c **** 
  84:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck((gptp != NULL) && (config != NULL));
  85:../../../os/hal/src/hal_gpt.c **** 
  86:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
  87:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
  88:../../../os/hal/src/hal_gpt.c ****               "invalid state");
  89:../../../os/hal/src/hal_gpt.c ****   gptp->config = config;
  87               		.loc 1 89 0
  88 0008 7A83      		std Y+2,r23
  89 000a 6983      		std Y+1,r22
  90:../../../os/hal/src/hal_gpt.c ****   gpt_lld_start(gptp);
  90               		.loc 1 90 0
  91 000c 0E94 0000 		call gpt_lld_start
  92               	.LVL3:
  91:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_READY;
  93               		.loc 1 91 0
  94 0010 82E0      		ldi r24,lo8(2)
  95 0012 8883      		st Y,r24
  96               	.LBB90:
  97               	.LBB91:
  98               	.LBB92:
  99               	.LBB93:
 100               	.LBB94:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 101               		.loc 2 447 0
 102               	/* #APP */
 103               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 104 0014 7894      		sei
 105               	 ;  0 "" 2
 106               	/* epilogue start */
 107               	/* #NOAPP */
 108               	.LBE94:
 109               	.LBE93:
 110               	.LBE92:
 111               	.LBE91:
 112               	.LBE90:
  92:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
  93:../../../os/hal/src/hal_gpt.c **** }
 113               		.loc 1 93 0
 114 0016 DF91      		pop r29
 115 0018 CF91      		pop r28
 116               	.LVL4:
 117 001a 0895      		ret
 118               		.cfi_endproc
 119               	.LFE170:
 121               		.section	.text.gptStop,"ax",@progbits
 122               	.global	gptStop
 124               	gptStop:
 125               	.LFB171:
  94:../../../os/hal/src/hal_gpt.c **** 
  95:../../../os/hal/src/hal_gpt.c **** /**
  96:../../../os/hal/src/hal_gpt.c ****  * @brief   Deactivates the GPT peripheral.
  97:../../../os/hal/src/hal_gpt.c ****  *
  98:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
  99:../../../os/hal/src/hal_gpt.c ****  *
 100:../../../os/hal/src/hal_gpt.c ****  * @api
 101:../../../os/hal/src/hal_gpt.c ****  */
 102:../../../os/hal/src/hal_gpt.c **** void gptStop(GPTDriver *gptp) {
 126               		.loc 1 102 0
 127               		.cfi_startproc
 128               	.LVL5:
 129 0000 CF93      		push r28
 130               	.LCFI2:
 131               		.cfi_def_cfa_offset 3
 132               		.cfi_offset 28, -2
 133 0002 DF93      		push r29
 134               	.LCFI3:
 135               		.cfi_def_cfa_offset 4
 136               		.cfi_offset 29, -3
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 2 */
 140               	.L__stack_usage = 2
 141 0004 EC01      		movw r28,r24
 142               	.LBB95:
 143               	.LBB96:
 144               	.LBB97:
 145               	.LBB98:
 437:../../../os/common/ports/AVR/chcore.h **** }
 146               		.loc 2 437 0
 147               	/* #APP */
 148               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 149 0006 F894      		cli
 150               	 ;  0 "" 2
 151               	/* #NOAPP */
 152               	.LBE98:
 153               	.LBE97:
 154               	.LBE96:
 155               	.LBE95:
 103:../../../os/hal/src/hal_gpt.c **** 
 104:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp != NULL);
 105:../../../os/hal/src/hal_gpt.c **** 
 106:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
 107:../../../os/hal/src/hal_gpt.c **** 
 108:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
 109:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 110:../../../os/hal/src/hal_gpt.c **** 
 111:../../../os/hal/src/hal_gpt.c ****   gpt_lld_stop(gptp);
 156               		.loc 1 111 0
 157 0008 0E94 0000 		call gpt_lld_stop
 158               	.LVL6:
 112:../../../os/hal/src/hal_gpt.c ****   gptp->config = NULL;
 159               		.loc 1 112 0
 160 000c 1A82      		std Y+2,__zero_reg__
 161 000e 1982      		std Y+1,__zero_reg__
 113:../../../os/hal/src/hal_gpt.c ****   gptp->state  = GPT_STOP;
 162               		.loc 1 113 0
 163 0010 81E0      		ldi r24,lo8(1)
 164 0012 8883      		st Y,r24
 165               	.LBB99:
 166               	.LBB100:
 167               	.LBB101:
 168               	.LBB102:
 169               	.LBB103:
 170               		.loc 2 447 0
 171               	/* #APP */
 172               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 173 0014 7894      		sei
 174               	 ;  0 "" 2
 175               	/* epilogue start */
 176               	/* #NOAPP */
 177               	.LBE103:
 178               	.LBE102:
 179               	.LBE101:
 180               	.LBE100:
 181               	.LBE99:
 114:../../../os/hal/src/hal_gpt.c **** 
 115:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
 116:../../../os/hal/src/hal_gpt.c **** }
 182               		.loc 1 116 0
 183 0016 DF91      		pop r29
 184 0018 CF91      		pop r28
 185               	.LVL7:
 186 001a 0895      		ret
 187               		.cfi_endproc
 188               	.LFE171:
 190               		.section	.text.gptChangeInterval,"ax",@progbits
 191               	.global	gptChangeInterval
 193               	gptChangeInterval:
 194               	.LFB172:
 117:../../../os/hal/src/hal_gpt.c **** 
 118:../../../os/hal/src/hal_gpt.c **** /**
 119:../../../os/hal/src/hal_gpt.c ****  * @brief   Changes the interval of GPT peripheral.
 120:../../../os/hal/src/hal_gpt.c ****  * @details This function changes the interval of a running GPT unit.
 121:../../../os/hal/src/hal_gpt.c ****  * @pre     The GPT unit must be running in continuous mode.
 122:../../../os/hal/src/hal_gpt.c ****  * @post    The GPT unit interval is changed to the new value.
 123:../../../os/hal/src/hal_gpt.c ****  *
 124:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to a @p GPTDriver object
 125:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  new cycle time in timer ticks
 126:../../../os/hal/src/hal_gpt.c ****  *
 127:../../../os/hal/src/hal_gpt.c ****  * @api
 128:../../../os/hal/src/hal_gpt.c ****  */
 129:../../../os/hal/src/hal_gpt.c **** void gptChangeInterval(GPTDriver *gptp, gptcnt_t interval) {
 195               		.loc 1 129 0
 196               		.cfi_startproc
 197               	.LVL8:
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
 202               	.LBB104:
 203               	.LBB105:
 204               	.LBB106:
 205               	.LBB107:
 437:../../../os/common/ports/AVR/chcore.h **** }
 206               		.loc 2 437 0
 207               	/* #APP */
 208               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 209 0000 F894      		cli
 210               	 ;  0 "" 2
 211               	/* #NOAPP */
 212               	.LBE107:
 213               	.LBE106:
 214               	.LBE105:
 215               	.LBE104:
 216               	.LBB108:
 217               	.LBB109:
 218               	.LBB110:
 219               	.LBB111:
 220               	.LBB112:
 221               		.loc 2 447 0
 222               	/* #APP */
 223               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 224 0002 7894      		sei
 225               	 ;  0 "" 2
 226               	/* #NOAPP */
 227 0004 0895      		ret
 228               	.LBE112:
 229               	.LBE111:
 230               	.LBE110:
 231               	.LBE109:
 232               	.LBE108:
 233               		.cfi_endproc
 234               	.LFE172:
 236               		.section	.text.gptStartContinuous,"ax",@progbits
 237               	.global	gptStartContinuous
 239               	gptStartContinuous:
 240               	.LFB173:
 130:../../../os/hal/src/hal_gpt.c **** 
 131:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp != NULL);
 132:../../../os/hal/src/hal_gpt.c **** 
 133:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
 134:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert(gptp->state == GPT_CONTINUOUS,
 135:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 136:../../../os/hal/src/hal_gpt.c ****   gptChangeIntervalI(gptp, interval);
 137:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
 138:../../../os/hal/src/hal_gpt.c **** }
 139:../../../os/hal/src/hal_gpt.c **** 
 140:../../../os/hal/src/hal_gpt.c **** /**
 141:../../../os/hal/src/hal_gpt.c ****  * @brief   Starts the timer in continuous mode.
 142:../../../os/hal/src/hal_gpt.c ****  *
 143:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 144:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  period in ticks
 145:../../../os/hal/src/hal_gpt.c ****  *
 146:../../../os/hal/src/hal_gpt.c ****  * @api
 147:../../../os/hal/src/hal_gpt.c ****  */
 148:../../../os/hal/src/hal_gpt.c **** void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
 241               		.loc 1 148 0
 242               		.cfi_startproc
 243               	.LVL9:
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 0 */
 247               	.L__stack_usage = 0
 248               	.LBB113:
 249               	.LBB114:
 250               	.LBB115:
 251               	.LBB116:
 437:../../../os/common/ports/AVR/chcore.h **** }
 252               		.loc 2 437 0
 253               	/* #APP */
 254               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 255 0000 F894      		cli
 256               	 ;  0 "" 2
 257               	.LVL10:
 258               	/* #NOAPP */
 259               	.LBE116:
 260               	.LBE115:
 261               	.LBE114:
 262               	.LBE113:
 263               	.LBB117:
 264               	.LBB118:
 149:../../../os/hal/src/hal_gpt.c **** 
 150:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
 151:../../../os/hal/src/hal_gpt.c ****   gptStartContinuousI(gptp, interval);
 152:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
 153:../../../os/hal/src/hal_gpt.c **** }
 154:../../../os/hal/src/hal_gpt.c **** 
 155:../../../os/hal/src/hal_gpt.c **** /**
 156:../../../os/hal/src/hal_gpt.c ****  * @brief   Starts the timer in continuous mode.
 157:../../../os/hal/src/hal_gpt.c ****  *
 158:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 159:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  period in ticks
 160:../../../os/hal/src/hal_gpt.c ****  *
 161:../../../os/hal/src/hal_gpt.c ****  * @iclass
 162:../../../os/hal/src/hal_gpt.c ****  */
 163:../../../os/hal/src/hal_gpt.c **** void gptStartContinuousI(GPTDriver *gptp, gptcnt_t interval) {
 164:../../../os/hal/src/hal_gpt.c **** 
 165:../../../os/hal/src/hal_gpt.c ****   osalDbgCheckClassI();
 166:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp != NULL);
 167:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert(gptp->state == GPT_READY,
 168:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 169:../../../os/hal/src/hal_gpt.c **** 
 170:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_CONTINUOUS;
 265               		.loc 1 170 0
 266 0002 23E0      		ldi r18,lo8(3)
 267 0004 FC01      		movw r30,r24
 268 0006 2083      		st Z,r18
 171:../../../os/hal/src/hal_gpt.c ****   gpt_lld_start_timer(gptp, interval);
 269               		.loc 1 171 0
 270 0008 0E94 0000 		call gpt_lld_start_timer
 271               	.LVL11:
 272               	.LBE118:
 273               	.LBE117:
 274               	.LBB119:
 275               	.LBB120:
 276               	.LBB121:
 277               	.LBB122:
 278               	.LBB123:
 279               		.loc 2 447 0
 280               	/* #APP */
 281               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 282 000c 7894      		sei
 283               	 ;  0 "" 2
 284               	/* #NOAPP */
 285 000e 0895      		ret
 286               	.LBE123:
 287               	.LBE122:
 288               	.LBE121:
 289               	.LBE120:
 290               	.LBE119:
 291               		.cfi_endproc
 292               	.LFE173:
 294               		.section	.text.gptStartContinuousI,"ax",@progbits
 295               	.global	gptStartContinuousI
 297               	gptStartContinuousI:
 298               	.LFB174:
 163:../../../os/hal/src/hal_gpt.c **** 
 299               		.loc 1 163 0
 300               		.cfi_startproc
 301               	.LVL12:
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
 170:../../../os/hal/src/hal_gpt.c ****   gpt_lld_start_timer(gptp, interval);
 306               		.loc 1 170 0
 307 0000 23E0      		ldi r18,lo8(3)
 308 0002 FC01      		movw r30,r24
 309 0004 2083      		st Z,r18
 310               		.loc 1 171 0
 311 0006 0C94 0000 		jmp gpt_lld_start_timer
 312               	.LVL13:
 313               		.cfi_endproc
 314               	.LFE174:
 316               		.section	.text.gptStartOneShot,"ax",@progbits
 317               	.global	gptStartOneShot
 319               	gptStartOneShot:
 320               	.LFB175:
 172:../../../os/hal/src/hal_gpt.c **** }
 173:../../../os/hal/src/hal_gpt.c **** 
 174:../../../os/hal/src/hal_gpt.c **** /**
 175:../../../os/hal/src/hal_gpt.c ****  * @brief   Starts the timer in one shot mode.
 176:../../../os/hal/src/hal_gpt.c ****  *
 177:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 178:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  time interval in ticks
 179:../../../os/hal/src/hal_gpt.c ****  *
 180:../../../os/hal/src/hal_gpt.c ****  * @api
 181:../../../os/hal/src/hal_gpt.c ****  */
 182:../../../os/hal/src/hal_gpt.c **** void gptStartOneShot(GPTDriver *gptp, gptcnt_t interval) {
 321               		.loc 1 182 0
 322               		.cfi_startproc
 323               	.LVL14:
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
 328               	.LBB124:
 329               	.LBB125:
 330               	.LBB126:
 331               	.LBB127:
 437:../../../os/common/ports/AVR/chcore.h **** }
 332               		.loc 2 437 0
 333               	/* #APP */
 334               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 335 0000 F894      		cli
 336               	 ;  0 "" 2
 337               	.LVL15:
 338               	/* #NOAPP */
 339               	.LBE127:
 340               	.LBE126:
 341               	.LBE125:
 342               	.LBE124:
 343               	.LBB128:
 344               	.LBB129:
 183:../../../os/hal/src/hal_gpt.c **** 
 184:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
 185:../../../os/hal/src/hal_gpt.c ****   gptStartOneShotI(gptp, interval);
 186:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
 187:../../../os/hal/src/hal_gpt.c **** }
 188:../../../os/hal/src/hal_gpt.c **** 
 189:../../../os/hal/src/hal_gpt.c **** /**
 190:../../../os/hal/src/hal_gpt.c ****  * @brief   Starts the timer in one shot mode.
 191:../../../os/hal/src/hal_gpt.c ****  *
 192:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 193:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  time interval in ticks
 194:../../../os/hal/src/hal_gpt.c ****  *
 195:../../../os/hal/src/hal_gpt.c ****  * @api
 196:../../../os/hal/src/hal_gpt.c ****  */
 197:../../../os/hal/src/hal_gpt.c **** void gptStartOneShotI(GPTDriver *gptp, gptcnt_t interval) {
 198:../../../os/hal/src/hal_gpt.c **** 
 199:../../../os/hal/src/hal_gpt.c ****   osalDbgCheckClassI();
 200:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp != NULL);
 201:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp->config->callback != NULL);
 202:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert(gptp->state == GPT_READY,
 203:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 204:../../../os/hal/src/hal_gpt.c **** 
 205:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_ONESHOT;
 345               		.loc 1 205 0
 346 0002 24E0      		ldi r18,lo8(4)
 347 0004 FC01      		movw r30,r24
 348 0006 2083      		st Z,r18
 206:../../../os/hal/src/hal_gpt.c ****   gpt_lld_start_timer(gptp, interval);
 349               		.loc 1 206 0
 350 0008 0E94 0000 		call gpt_lld_start_timer
 351               	.LVL16:
 352               	.LBE129:
 353               	.LBE128:
 354               	.LBB130:
 355               	.LBB131:
 356               	.LBB132:
 357               	.LBB133:
 358               	.LBB134:
 359               		.loc 2 447 0
 360               	/* #APP */
 361               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 362 000c 7894      		sei
 363               	 ;  0 "" 2
 364               	/* #NOAPP */
 365 000e 0895      		ret
 366               	.LBE134:
 367               	.LBE133:
 368               	.LBE132:
 369               	.LBE131:
 370               	.LBE130:
 371               		.cfi_endproc
 372               	.LFE175:
 374               		.section	.text.gptStartOneShotI,"ax",@progbits
 375               	.global	gptStartOneShotI
 377               	gptStartOneShotI:
 378               	.LFB176:
 197:../../../os/hal/src/hal_gpt.c **** 
 379               		.loc 1 197 0
 380               		.cfi_startproc
 381               	.LVL17:
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 0 */
 385               	.L__stack_usage = 0
 205:../../../os/hal/src/hal_gpt.c ****   gpt_lld_start_timer(gptp, interval);
 386               		.loc 1 205 0
 387 0000 24E0      		ldi r18,lo8(4)
 388 0002 FC01      		movw r30,r24
 389 0004 2083      		st Z,r18
 390               		.loc 1 206 0
 391 0006 0C94 0000 		jmp gpt_lld_start_timer
 392               	.LVL18:
 393               		.cfi_endproc
 394               	.LFE176:
 396               		.section	.text.gptStopTimer,"ax",@progbits
 397               	.global	gptStopTimer
 399               	gptStopTimer:
 400               	.LFB177:
 207:../../../os/hal/src/hal_gpt.c **** }
 208:../../../os/hal/src/hal_gpt.c **** 
 209:../../../os/hal/src/hal_gpt.c **** /**
 210:../../../os/hal/src/hal_gpt.c ****  * @brief   Stops the timer.
 211:../../../os/hal/src/hal_gpt.c ****  *
 212:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 213:../../../os/hal/src/hal_gpt.c ****  *
 214:../../../os/hal/src/hal_gpt.c ****  * @api
 215:../../../os/hal/src/hal_gpt.c ****  */
 216:../../../os/hal/src/hal_gpt.c **** void gptStopTimer(GPTDriver *gptp) {
 401               		.loc 1 216 0
 402               		.cfi_startproc
 403               	.LVL19:
 404               	/* prologue: function */
 405               	/* frame size = 0 */
 406               	/* stack size = 0 */
 407               	.L__stack_usage = 0
 408               	.LBB135:
 409               	.LBB136:
 410               	.LBB137:
 411               	.LBB138:
 437:../../../os/common/ports/AVR/chcore.h **** }
 412               		.loc 2 437 0
 413               	/* #APP */
 414               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 415 0000 F894      		cli
 416               	 ;  0 "" 2
 417               	.LVL20:
 418               	/* #NOAPP */
 419               	.LBE138:
 420               	.LBE137:
 421               	.LBE136:
 422               	.LBE135:
 423               	.LBB139:
 424               	.LBB140:
 217:../../../os/hal/src/hal_gpt.c **** 
 218:../../../os/hal/src/hal_gpt.c ****   osalSysLock();
 219:../../../os/hal/src/hal_gpt.c ****   gptStopTimerI(gptp);
 220:../../../os/hal/src/hal_gpt.c ****   osalSysUnlock();
 221:../../../os/hal/src/hal_gpt.c **** }
 222:../../../os/hal/src/hal_gpt.c **** 
 223:../../../os/hal/src/hal_gpt.c **** /**
 224:../../../os/hal/src/hal_gpt.c ****  * @brief   Stops the timer.
 225:../../../os/hal/src/hal_gpt.c ****  *
 226:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 227:../../../os/hal/src/hal_gpt.c ****  *
 228:../../../os/hal/src/hal_gpt.c ****  * @api
 229:../../../os/hal/src/hal_gpt.c ****  */
 230:../../../os/hal/src/hal_gpt.c **** void gptStopTimerI(GPTDriver *gptp) {
 231:../../../os/hal/src/hal_gpt.c **** 
 232:../../../os/hal/src/hal_gpt.c ****   osalDbgCheckClassI();
 233:../../../os/hal/src/hal_gpt.c ****   osalDbgCheck(gptp != NULL);
 234:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
 235:../../../os/hal/src/hal_gpt.c ****                 (gptp->state == GPT_ONESHOT),
 236:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 237:../../../os/hal/src/hal_gpt.c **** 
 238:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_READY;
 425               		.loc 1 238 0
 426 0002 22E0      		ldi r18,lo8(2)
 427 0004 FC01      		movw r30,r24
 428 0006 2083      		st Z,r18
 239:../../../os/hal/src/hal_gpt.c ****   gpt_lld_stop_timer(gptp);
 429               		.loc 1 239 0
 430 0008 0E94 0000 		call gpt_lld_stop_timer
 431               	.LVL21:
 432               	.LBE140:
 433               	.LBE139:
 434               	.LBB141:
 435               	.LBB142:
 436               	.LBB143:
 437               	.LBB144:
 438               	.LBB145:
 439               		.loc 2 447 0
 440               	/* #APP */
 441               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 442 000c 7894      		sei
 443               	 ;  0 "" 2
 444               	/* #NOAPP */
 445 000e 0895      		ret
 446               	.LBE145:
 447               	.LBE144:
 448               	.LBE143:
 449               	.LBE142:
 450               	.LBE141:
 451               		.cfi_endproc
 452               	.LFE177:
 454               		.section	.text.gptStopTimerI,"ax",@progbits
 455               	.global	gptStopTimerI
 457               	gptStopTimerI:
 458               	.LFB178:
 230:../../../os/hal/src/hal_gpt.c **** 
 459               		.loc 1 230 0
 460               		.cfi_startproc
 461               	.LVL22:
 462               	/* prologue: function */
 463               	/* frame size = 0 */
 464               	/* stack size = 0 */
 465               	.L__stack_usage = 0
 238:../../../os/hal/src/hal_gpt.c ****   gpt_lld_stop_timer(gptp);
 466               		.loc 1 238 0
 467 0000 22E0      		ldi r18,lo8(2)
 468 0002 FC01      		movw r30,r24
 469 0004 2083      		st Z,r18
 470               		.loc 1 239 0
 471 0006 0C94 0000 		jmp gpt_lld_stop_timer
 472               	.LVL23:
 473               		.cfi_endproc
 474               	.LFE178:
 476               		.section	.text.gptPolledDelay,"ax",@progbits
 477               	.global	gptPolledDelay
 479               	gptPolledDelay:
 480               	.LFB179:
 240:../../../os/hal/src/hal_gpt.c **** }
 241:../../../os/hal/src/hal_gpt.c **** 
 242:../../../os/hal/src/hal_gpt.c **** /**
 243:../../../os/hal/src/hal_gpt.c ****  * @brief   Starts the timer in one shot mode and waits for completion.
 244:../../../os/hal/src/hal_gpt.c ****  * @details This function specifically polls the timer waiting for completion
 245:../../../os/hal/src/hal_gpt.c ****  *          in order to not have extra delays caused by interrupt servicing,
 246:../../../os/hal/src/hal_gpt.c ****  *          this function is only recommended for short delays.
 247:../../../os/hal/src/hal_gpt.c ****  * @note    The configured callback is not invoked when using this function.
 248:../../../os/hal/src/hal_gpt.c ****  *
 249:../../../os/hal/src/hal_gpt.c ****  * @param[in] gptp      pointer to the @p GPTDriver object
 250:../../../os/hal/src/hal_gpt.c ****  * @param[in] interval  time interval in ticks
 251:../../../os/hal/src/hal_gpt.c ****  *
 252:../../../os/hal/src/hal_gpt.c ****  * @api
 253:../../../os/hal/src/hal_gpt.c ****  */
 254:../../../os/hal/src/hal_gpt.c **** void gptPolledDelay(GPTDriver *gptp, gptcnt_t interval) {
 481               		.loc 1 254 0
 482               		.cfi_startproc
 483               	.LVL24:
 484 0000 CF93      		push r28
 485               	.LCFI4:
 486               		.cfi_def_cfa_offset 3
 487               		.cfi_offset 28, -2
 488 0002 DF93      		push r29
 489               	.LCFI5:
 490               		.cfi_def_cfa_offset 4
 491               		.cfi_offset 29, -3
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 2 */
 495               	.L__stack_usage = 2
 496 0004 EC01      		movw r28,r24
 255:../../../os/hal/src/hal_gpt.c **** 
 256:../../../os/hal/src/hal_gpt.c ****   osalDbgAssert(gptp->state == GPT_READY,
 257:../../../os/hal/src/hal_gpt.c ****                 "invalid state");
 258:../../../os/hal/src/hal_gpt.c **** 
 259:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_ONESHOT;
 497               		.loc 1 259 0
 498 0006 84E0      		ldi r24,lo8(4)
 499               	.LVL25:
 500 0008 8883      		st Y,r24
 260:../../../os/hal/src/hal_gpt.c ****   gpt_lld_polled_delay(gptp, interval);
 501               		.loc 1 260 0
 502 000a CE01      		movw r24,r28
 503 000c 0E94 0000 		call gpt_lld_polled_delay
 504               	.LVL26:
 261:../../../os/hal/src/hal_gpt.c ****   gptp->state = GPT_READY;
 505               		.loc 1 261 0
 506 0010 82E0      		ldi r24,lo8(2)
 507 0012 8883      		st Y,r24
 508               	/* epilogue start */
 262:../../../os/hal/src/hal_gpt.c **** }
 509               		.loc 1 262 0
 510 0014 DF91      		pop r29
 511 0016 CF91      		pop r28
 512               	.LVL27:
 513 0018 0895      		ret
 514               		.cfi_endproc
 515               	.LFE179:
 517               		.text
 518               	.Letext0:
 519               		.file 3 "/usr/lib/avr/include/stdint.h"
 520               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 521               		.file 5 "../../../os/rt/include/chsystypes.h"
 522               		.file 6 "../../../os/rt/include/chschd.h"
 523               		.file 7 "../../../os/rt/include/chtime.h"
 524               		.file 8 "../../../os/rt/include/chsem.h"
 525               		.file 9 "../../../os/rt/include/chmtx.h"
 526               		.file 10 "../../../os/hal/include/hal_gpt.h"
 527               		.file 11 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_gpt_lld.h"
 528               		.file 12 "../../../os/rt/include/chsys.h"
 529               		.file 13 "../../../os/hal/osal/rt/osal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_gpt.c
     /tmp/ccMeFxmn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMeFxmn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMeFxmn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMeFxmn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMeFxmn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMeFxmn.s:13     .text.gptInit:0000000000000000 gptInit
     /tmp/ccMeFxmn.s:31     .text.gptObjectInit:0000000000000000 gptObjectInit
     /tmp/ccMeFxmn.s:54     .text.gptStart:0000000000000000 gptStart
     /tmp/ccMeFxmn.s:124    .text.gptStop:0000000000000000 gptStop
     /tmp/ccMeFxmn.s:193    .text.gptChangeInterval:0000000000000000 gptChangeInterval
     /tmp/ccMeFxmn.s:239    .text.gptStartContinuous:0000000000000000 gptStartContinuous
     /tmp/ccMeFxmn.s:297    .text.gptStartContinuousI:0000000000000000 gptStartContinuousI
     /tmp/ccMeFxmn.s:319    .text.gptStartOneShot:0000000000000000 gptStartOneShot
     /tmp/ccMeFxmn.s:377    .text.gptStartOneShotI:0000000000000000 gptStartOneShotI
     /tmp/ccMeFxmn.s:399    .text.gptStopTimer:0000000000000000 gptStopTimer
     /tmp/ccMeFxmn.s:457    .text.gptStopTimerI:0000000000000000 gptStopTimerI
     /tmp/ccMeFxmn.s:479    .text.gptPolledDelay:0000000000000000 gptPolledDelay

UNDEFINED SYMBOLS
gpt_lld_init
gpt_lld_start
gpt_lld_stop
gpt_lld_start_timer
gpt_lld_stop_timer
gpt_lld_polled_delay
