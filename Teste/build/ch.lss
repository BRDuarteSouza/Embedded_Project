
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001960  000019f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000182  00800140  00800140  00001a34  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000738  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012204  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000405e  00000000  00000000  000143c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004de5  00000000  00000000  00018422  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013b0  00000000  00000000  0001d208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bfb  00000000  00000000  0001e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e19  00000000  00000000  000201b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  00025fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c7       	rjmp	.+3842   	; 0xf30 <__vector_11>
      2e:	00 00       	nop
      30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c7       	rjmp	.+3724   	; 0xec6 <__vector_14>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d0 c7       	rjmp	.+4000   	; 0xfea <__vector_18>
      4a:	00 00       	nop
      4c:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_19>
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e0 e6       	ldi	r30, 0x60	; 96
      9e:	f9 e1       	ldi	r31, 0x19	; 25
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a0 34       	cpi	r26, 0x40	; 64
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 e4       	ldi	r26, 0x40	; 64
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a2 3c       	cpi	r26, 0xC2	; 194
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <main>
      c0:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
      c6:	ff cf       	rjmp	.-2      	; 0xc6 <_idle_thread>

000000c8 <chSysInit>:
      c8:	22 d1       	rcall	.+580    	; 0x30e <_scheduler_init>
      ca:	5c d0       	rcall	.+184    	; 0x184 <_vt_init>
      cc:	7a d3       	rcall	.+1780   	; 0x7c2 <_core_init>
      ce:	b1 d3       	rcall	.+1890   	; 0x832 <_heap_init>
      d0:	40 e8       	ldi	r20, 0x80	; 128
      d2:	60 e1       	ldi	r22, 0x10	; 16
      d4:	71 e0       	ldi	r23, 0x01	; 1
      d6:	8e e4       	ldi	r24, 0x4E	; 78
      d8:	92 e0       	ldi	r25, 0x02	; 2
      da:	30 d2       	rcall	.+1120   	; 0x53c <_thread_init>
      dc:	fc 01       	movw	r30, r24
      de:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ch+0xc>
      e2:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ch+0xb>
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	95 87       	std	Z+13, r25	; 0x0d
      ea:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <__avr_in_isr>
      ee:	78 94       	sei
      f0:	85 e0       	ldi	r24, 0x05	; 5
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	a6 c2       	rjmp	.+1356   	; 0x642 <chThdCreate>

000000f6 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
      fe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <ch+0x13>
     102:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <ch+0x14>
     106:	01 96       	adiw	r24, 0x01	; 1
     108:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <ch+0x14>
     10c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <ch+0x13>
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     110:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <ch+0xd>
     114:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <ch+0xe>
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	a4 34       	cpi	r26, 0x44	; 68
     11c:	b8 07       	cpc	r27, r24
     11e:	69 f1       	breq	.+90     	; 0x17a <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     120:	14 96       	adiw	r26, 0x04	; 4
     122:	8d 91       	ld	r24, X+
     124:	9c 91       	ld	r25, X
     126:	15 97       	sbiw	r26, 0x05	; 5
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	15 96       	adiw	r26, 0x05	; 5
     12c:	9c 93       	st	X, r25
     12e:	8e 93       	st	-X, r24
     130:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     132:	89 2b       	or	r24, r25
     134:	11 f5       	brne	.+68     	; 0x17a <chSysTimerHandlerI+0x84>
     136:	04 e4       	ldi	r16, 0x44	; 68
     138:	12 e0       	ldi	r17, 0x02	; 2
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     13a:	16 96       	adiw	r26, 0x06	; 6
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     142:	17 96       	adiw	r26, 0x07	; 7
     144:	1c 92       	st	X, r1
     146:	1e 92       	st	-X, r1
     148:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     14a:	cd 91       	ld	r28, X+
     14c:	dc 91       	ld	r29, X
     14e:	11 97       	sbiw	r26, 0x01	; 1
     150:	1b 83       	std	Y+3, r17	; 0x03
     152:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     154:	d0 93 45 02 	sts	0x0245, r29	; 0x800245 <ch+0xe>
     158:	c0 93 44 02 	sts	0x0244, r28	; 0x800244 <ch+0xd>
      chSysUnlockFromISR();
      fn(vtp->par);
     15c:	18 96       	adiw	r26, 0x08	; 8
     15e:	8d 91       	ld	r24, X+
     160:	9c 91       	ld	r25, X
     162:	19 97       	sbiw	r26, 0x09	; 9
     164:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     166:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <ch+0xd>
     16a:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <ch+0xe>
     16e:	14 96       	adiw	r26, 0x04	; 4
     170:	8d 91       	ld	r24, X+
     172:	9c 91       	ld	r25, X
     174:	15 97       	sbiw	r26, 0x05	; 5
     176:	89 2b       	or	r24, r25
     178:	01 f3       	breq	.-64     	; 0x13a <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	08 95       	ret

00000184 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     184:	e7 e3       	ldi	r30, 0x37	; 55
     186:	f2 e0       	ldi	r31, 0x02	; 2
     188:	84 e4       	ldi	r24, 0x44	; 68
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	96 87       	std	Z+14, r25	; 0x0e
     18e:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     190:	90 8b       	std	Z+16, r25	; 0x10
     192:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	9f ef       	ldi	r25, 0xFF	; 255
     198:	92 8b       	std	Z+18, r25	; 0x12
     19a:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     19c:	14 8a       	std	Z+20, r1	; 0x14
     19e:	13 8a       	std	Z+19, r1	; 0x13
     1a0:	08 95       	ret

000001a2 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	3c 93       	st	X, r19
     1ac:	2e 93       	st	-X, r18
     1ae:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     1b0:	17 96       	adiw	r26, 0x07	; 7
     1b2:	5c 93       	st	X, r21
     1b4:	4e 93       	st	-X, r20
     1b6:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     1b8:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <ch+0xd>
     1bc:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <ch+0xe>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1c0:	24 81       	ldd	r18, Z+4	; 0x04
     1c2:	35 81       	ldd	r19, Z+5	; 0x05
     1c4:	26 17       	cp	r18, r22
     1c6:	37 07       	cpc	r19, r23
     1c8:	50 f4       	brcc	.+20     	; 0x1de <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     1ca:	62 1b       	sub	r22, r18
     1cc:	73 0b       	sbc	r23, r19
    p = p->next;
     1ce:	01 90       	ld	r0, Z+
     1d0:	f0 81       	ld	r31, Z
     1d2:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1d4:	24 81       	ldd	r18, Z+4	; 0x04
     1d6:	35 81       	ldd	r19, Z+5	; 0x05
     1d8:	26 17       	cp	r18, r22
     1da:	37 07       	cpc	r19, r23
     1dc:	b0 f3       	brcs	.-20     	; 0x1ca <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	fc 93       	st	X, r31
     1e2:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     1e4:	c2 81       	ldd	r28, Z+2	; 0x02
     1e6:	d3 81       	ldd	r29, Z+3	; 0x03
     1e8:	13 96       	adiw	r26, 0x03	; 3
     1ea:	dc 93       	st	X, r29
     1ec:	ce 93       	st	-X, r28
     1ee:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     1f0:	b9 83       	std	Y+1, r27	; 0x01
     1f2:	a8 83       	st	Y, r26
  p->prev = vtp;
     1f4:	b3 83       	std	Z+3, r27	; 0x03
     1f6:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     1f8:	15 96       	adiw	r26, 0x05	; 5
     1fa:	7c 93       	st	X, r23
     1fc:	6e 93       	st	-X, r22
     1fe:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	95 81       	ldd	r25, Z+5	; 0x05
     204:	86 1b       	sub	r24, r22
     206:	97 0b       	sbc	r25, r23
     208:	95 83       	std	Z+5, r25	; 0x05
     20a:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	9f ef       	ldi	r25, 0xFF	; 255
     210:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <ch+0x12>
     214:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <ch+0x11>
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	14 96       	adiw	r26, 0x04	; 4
     22a:	2d 91       	ld	r18, X+
     22c:	3c 91       	ld	r19, X
     22e:	15 97       	sbiw	r26, 0x05	; 5
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	15 96       	adiw	r26, 0x05	; 5
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     240:	c2 81       	ldd	r28, Z+2	; 0x02
     242:	d3 81       	ldd	r29, Z+3	; 0x03
     244:	b9 83       	std	Y+1, r27	; 0x01
     246:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     248:	a0 81       	ld	r26, Z
     24a:	b1 81       	ldd	r27, Z+1	; 0x01
     24c:	13 96       	adiw	r26, 0x03	; 3
     24e:	dc 93       	st	X, r29
     250:	ce 93       	st	-X, r28
     252:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     254:	17 82       	std	Z+7, r1	; 0x07
     256:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <ch+0x12>
     260:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <ch+0x11>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	dc 01       	movw	r26, r24
     270:	1d 96       	adiw	r26, 0x0d	; 13
     272:	8c 91       	ld	r24, X
     274:	1d 97       	sbiw	r26, 0x0d	; 13
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	99 f1       	breq	.+102    	; 0x2e0 <wakeup+0x76>
     27a:	70 f5       	brcc	.+92     	; 0x2d8 <wakeup+0x6e>
     27c:	88 23       	and	r24, r24
     27e:	49 f1       	breq	.+82     	; 0x2d2 <wakeup+0x68>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	31 f4       	brne	.+12     	; 0x290 <wakeup+0x26>
     284:	50 96       	adiw	r26, 0x10	; 16
     286:	ed 91       	ld	r30, X+
     288:	fc 91       	ld	r31, X
     28a:	51 97       	sbiw	r26, 0x11	; 17
     28c:	11 82       	std	Z+1, r1	; 0x01
     28e:	10 82       	st	Z, r1
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	9f ef       	ldi	r25, 0xFF	; 255
     294:	51 96       	adiw	r26, 0x11	; 17
     296:	9c 93       	st	X, r25
     298:	8e 93       	st	-X, r24
     29a:	50 97       	sbiw	r26, 0x10	; 16
     29c:	1d 96       	adiw	r26, 0x0d	; 13
     29e:	1c 92       	st	X, r1
     2a0:	1d 97       	sbiw	r26, 0x0d	; 13
     2a2:	14 96       	adiw	r26, 0x04	; 4
     2a4:	2c 91       	ld	r18, X
     2a6:	14 97       	sbiw	r26, 0x04	; 4
     2a8:	e7 e3       	ldi	r30, 0x37	; 55
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	01 90       	ld	r0, Z+
     2ae:	f0 81       	ld	r31, Z
     2b0:	e0 2d       	mov	r30, r0
     2b2:	94 81       	ldd	r25, Z+4	; 0x04
     2b4:	92 17       	cp	r25, r18
     2b6:	d0 f7       	brcc	.-12     	; 0x2ac <wakeup+0x42>
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	fc 93       	st	X, r31
     2bc:	ee 93       	st	-X, r30
     2be:	c2 81       	ldd	r28, Z+2	; 0x02
     2c0:	d3 81       	ldd	r29, Z+3	; 0x03
     2c2:	13 96       	adiw	r26, 0x03	; 3
     2c4:	dc 93       	st	X, r29
     2c6:	ce 93       	st	-X, r28
     2c8:	12 97       	sbiw	r26, 0x02	; 2
     2ca:	b9 83       	std	Y+1, r27	; 0x01
     2cc:	a8 83       	st	Y, r26
     2ce:	b3 83       	std	Z+3, r27	; 0x03
     2d0:	a2 83       	std	Z+2, r26	; 0x02
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	89 f0       	breq	.+34     	; 0x2fe <wakeup+0x94>
     2dc:	87 30       	cpi	r24, 0x07	; 7
     2de:	c1 f6       	brne	.-80     	; 0x290 <wakeup+0x26>
     2e0:	12 96       	adiw	r26, 0x02	; 2
     2e2:	ed 91       	ld	r30, X+
     2e4:	fc 91       	ld	r31, X
     2e6:	13 97       	sbiw	r26, 0x03	; 3
     2e8:	8d 91       	ld	r24, X+
     2ea:	9c 91       	ld	r25, X
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24
     2f2:	cd 91       	ld	r28, X+
     2f4:	dc 91       	ld	r29, X
     2f6:	11 97       	sbiw	r26, 0x01	; 1
     2f8:	fb 83       	std	Y+3, r31	; 0x03
     2fa:	ea 83       	std	Y+2, r30	; 0x02
     2fc:	c9 cf       	rjmp	.-110    	; 0x290 <wakeup+0x26>
     2fe:	50 96       	adiw	r26, 0x10	; 16
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	51 97       	sbiw	r26, 0x11	; 17
     306:	84 81       	ldd	r24, Z+4	; 0x04
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	84 83       	std	Z+4, r24	; 0x04
     30c:	e9 cf       	rjmp	.-46     	; 0x2e0 <wakeup+0x76>

0000030e <_scheduler_init>:
     30e:	e7 e3       	ldi	r30, 0x37	; 55
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	f1 83       	std	Z+1, r31	; 0x01
     314:	e0 83       	st	Z, r30
     316:	f3 83       	std	Z+3, r31	; 0x03
     318:	e2 83       	std	Z+2, r30	; 0x02
     31a:	14 82       	std	Z+4, r1	; 0x04
     31c:	f0 87       	std	Z+8, r31	; 0x08
     31e:	e7 83       	std	Z+7, r30	; 0x07
     320:	f2 87       	std	Z+10, r31	; 0x0a
     322:	e1 87       	std	Z+9, r30	; 0x09
     324:	08 95       	ret

00000326 <chSchReadyI>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	dc 01       	movw	r26, r24
     32c:	1d 96       	adiw	r26, 0x0d	; 13
     32e:	1c 92       	st	X, r1
     330:	1d 97       	sbiw	r26, 0x0d	; 13
     332:	14 96       	adiw	r26, 0x04	; 4
     334:	2c 91       	ld	r18, X
     336:	14 97       	sbiw	r26, 0x04	; 4
     338:	e7 e3       	ldi	r30, 0x37	; 55
     33a:	f2 e0       	ldi	r31, 0x02	; 2
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	94 81       	ldd	r25, Z+4	; 0x04
     344:	92 17       	cp	r25, r18
     346:	d0 f7       	brcc	.-12     	; 0x33c <chSchReadyI+0x16>
     348:	11 96       	adiw	r26, 0x01	; 1
     34a:	fc 93       	st	X, r31
     34c:	ee 93       	st	-X, r30
     34e:	c2 81       	ldd	r28, Z+2	; 0x02
     350:	d3 81       	ldd	r29, Z+3	; 0x03
     352:	13 96       	adiw	r26, 0x03	; 3
     354:	dc 93       	st	X, r29
     356:	ce 93       	st	-X, r28
     358:	12 97       	sbiw	r26, 0x02	; 2
     35a:	b9 83       	std	Y+1, r27	; 0x01
     35c:	a8 83       	st	Y, r26
     35e:	b3 83       	std	Z+3, r27	; 0x03
     360:	a2 83       	std	Z+2, r26	; 0x02
     362:	cd 01       	movw	r24, r26
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <chSchGoSleepS>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	e7 e3       	ldi	r30, 0x37	; 55
     370:	f2 e0       	ldi	r31, 0x02	; 2
     372:	63 85       	ldd	r22, Z+11	; 0x0b
     374:	74 85       	ldd	r23, Z+12	; 0x0c
     376:	db 01       	movw	r26, r22
     378:	1d 96       	adiw	r26, 0x0d	; 13
     37a:	8c 93       	st	X, r24
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	ec 01       	movw	r28, r24
     382:	a8 81       	ld	r26, Y
     384:	b9 81       	ldd	r27, Y+1	; 0x01
     386:	b1 83       	std	Z+1, r27	; 0x01
     388:	a0 83       	st	Z, r26
     38a:	13 96       	adiw	r26, 0x03	; 3
     38c:	fc 93       	st	X, r31
     38e:	ee 93       	st	-X, r30
     390:	12 97       	sbiw	r26, 0x02	; 2
     392:	94 87       	std	Z+12, r25	; 0x0c
     394:	83 87       	std	Z+11, r24	; 0x0b
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	2d 87       	std	Y+13, r18	; 0x0d
     39a:	58 d2       	rcall	.+1200   	; 0x84c <_port_switch>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <chSchGoSleepTimeoutS>:
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	2a 97       	sbiw	r28, 0x0a	; 10
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	18 2f       	mov	r17, r24
     3ba:	6f 3f       	cpi	r22, 0xFF	; 255
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	78 07       	cpc	r23, r24
     3c0:	11 f1       	breq	.+68     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3c2:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <ch+0xb>
     3c6:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <ch+0xc>
     3ca:	45 e3       	ldi	r20, 0x35	; 53
     3cc:	51 e0       	ldi	r21, 0x01	; 1
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	e7 de       	rcall	.-562    	; 0x1a2 <chVTDoSetI>
     3d4:	81 2f       	mov	r24, r17
     3d6:	c9 df       	rcall	.-110    	; 0x36a <chSchGoSleepS>
     3d8:	8f 81       	ldd	r24, Y+7	; 0x07
     3da:	98 85       	ldd	r25, Y+8	; 0x08
     3dc:	89 2b       	or	r24, r25
     3de:	19 f0       	breq	.+6      	; 0x3e6 <chSchGoSleepTimeoutS+0x44>
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	1c df       	rcall	.-456    	; 0x21e <chVTDoResetI>
     3e6:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <ch+0xb>
     3ea:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <ch+0xc>
     3ee:	80 89       	ldd	r24, Z+16	; 0x10
     3f0:	91 89       	ldd	r25, Z+17	; 0x11
     3f2:	2a 96       	adiw	r28, 0x0a	; 10
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	08 95       	ret
     406:	81 2f       	mov	r24, r17
     408:	b0 df       	rcall	.-160    	; 0x36a <chSchGoSleepS>
     40a:	ed cf       	rjmp	.-38     	; 0x3e6 <chSchGoSleepTimeoutS+0x44>

0000040c <chSchWakeupS>:
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	dc 01       	movw	r26, r24
     412:	c0 91 42 02 	lds	r28, 0x0242	; 0x800242 <ch+0xb>
     416:	d0 91 43 02 	lds	r29, 0x0243	; 0x800243 <ch+0xc>
     41a:	51 96       	adiw	r26, 0x11	; 17
     41c:	7c 93       	st	X, r23
     41e:	6e 93       	st	-X, r22
     420:	50 97       	sbiw	r26, 0x10	; 16
     422:	14 96       	adiw	r26, 0x04	; 4
     424:	2c 91       	ld	r18, X
     426:	14 97       	sbiw	r26, 0x04	; 4
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	82 17       	cp	r24, r18
     42c:	d8 f0       	brcs	.+54     	; 0x464 <chSchWakeupS+0x58>
     42e:	1d 96       	adiw	r26, 0x0d	; 13
     430:	1c 92       	st	X, r1
     432:	1d 97       	sbiw	r26, 0x0d	; 13
     434:	e7 e3       	ldi	r30, 0x37	; 55
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	94 81       	ldd	r25, Z+4	; 0x04
     440:	92 17       	cp	r25, r18
     442:	d0 f7       	brcc	.-12     	; 0x438 <chSchWakeupS+0x2c>
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	fc 93       	st	X, r31
     448:	ee 93       	st	-X, r30
     44a:	c2 81       	ldd	r28, Z+2	; 0x02
     44c:	d3 81       	ldd	r29, Z+3	; 0x03
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	dc 93       	st	X, r29
     452:	ce 93       	st	-X, r28
     454:	12 97       	sbiw	r26, 0x02	; 2
     456:	b9 83       	std	Y+1, r27	; 0x01
     458:	a8 83       	st	Y, r26
     45a:	b3 83       	std	Z+3, r27	; 0x03
     45c:	a2 83       	std	Z+2, r26	; 0x02
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret
     464:	1d 86       	std	Y+13, r1	; 0x0d
     466:	e7 e3       	ldi	r30, 0x37	; 55
     468:	f2 e0       	ldi	r31, 0x02	; 2
     46a:	01 90       	ld	r0, Z+
     46c:	f0 81       	ld	r31, Z
     46e:	e0 2d       	mov	r30, r0
     470:	94 81       	ldd	r25, Z+4	; 0x04
     472:	98 17       	cp	r25, r24
     474:	d0 f7       	brcc	.-12     	; 0x46a <chSchWakeupS+0x5e>
     476:	cd 01       	movw	r24, r26
     478:	f9 83       	std	Y+1, r31	; 0x01
     47a:	e8 83       	st	Y, r30
     47c:	a2 81       	ldd	r26, Z+2	; 0x02
     47e:	b3 81       	ldd	r27, Z+3	; 0x03
     480:	bb 83       	std	Y+3, r27	; 0x03
     482:	aa 83       	std	Y+2, r26	; 0x02
     484:	cd 93       	st	X+, r28
     486:	dc 93       	st	X, r29
     488:	d3 83       	std	Z+3, r29	; 0x03
     48a:	c2 83       	std	Z+2, r28	; 0x02
     48c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ch+0xc>
     490:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ch+0xb>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	fc 01       	movw	r30, r24
     498:	25 87       	std	Z+13, r18	; 0x0d
     49a:	be 01       	movw	r22, r28
     49c:	d7 d1       	rcall	.+942    	; 0x84c <_port_switch>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <chSchIsPreemptionRequired>:
     4a4:	a0 91 37 02 	lds	r26, 0x0237	; 0x800237 <ch>
     4a8:	b0 91 38 02 	lds	r27, 0x0238	; 0x800238 <ch+0x1>
     4ac:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <ch+0xb>
     4b0:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <ch+0xc>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	14 96       	adiw	r26, 0x04	; 4
     4b8:	2c 91       	ld	r18, X
     4ba:	94 81       	ldd	r25, Z+4	; 0x04
     4bc:	92 17       	cp	r25, r18
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <chSchIsPreemptionRequired+0x1e>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
  thread_t *otp = currp;
     4c8:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <ch+0xb>
     4cc:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     4d0:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <ch>
     4d4:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <ch+0x1>

  tqp->next             = tp->queue.next;
     4d8:	ea 01       	movw	r28, r20
     4da:	e8 81       	ld	r30, Y
     4dc:	f9 81       	ldd	r31, Y+1	; 0x01
     4de:	f0 93 38 02 	sts	0x0238, r31	; 0x800238 <ch+0x1>
     4e2:	e0 93 37 02 	sts	0x0237, r30	; 0x800237 <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     4e6:	87 e3       	ldi	r24, 0x37	; 55
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	93 83       	std	Z+3, r25	; 0x03
     4ec:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     4ee:	50 93 43 02 	sts	0x0243, r21	; 0x800243 <ch+0xc>
     4f2:	40 93 42 02 	sts	0x0242, r20	; 0x800242 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     4fa:	1d 96       	adiw	r26, 0x0d	; 13
     4fc:	1c 92       	st	X, r1
     4fe:	1d 97       	sbiw	r26, 0x0d	; 13
     500:	14 96       	adiw	r26, 0x04	; 4
     502:	2c 91       	ld	r18, X
     504:	14 97       	sbiw	r26, 0x04	; 4
     506:	03 c0       	rjmp	.+6      	; 0x50e <chSchDoReschedule+0x4a>
     508:	01 90       	ld	r0, Z+
     50a:	f0 81       	ld	r31, Z
     50c:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     50e:	94 81       	ldd	r25, Z+4	; 0x04
     510:	29 17       	cp	r18, r25
     512:	d0 f3       	brcs	.-12     	; 0x508 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	fc 93       	st	X, r31
     518:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	93 81       	ldd	r25, Z+3	; 0x03
     51e:	13 96       	adiw	r26, 0x03	; 3
     520:	9c 93       	st	X, r25
     522:	8e 93       	st	-X, r24
     524:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     526:	ec 01       	movw	r28, r24
     528:	b9 83       	std	Y+1, r27	; 0x01
     52a:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     52c:	b3 83       	std	Z+3, r27	; 0x03
     52e:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     530:	bd 01       	movw	r22, r26
     532:	ca 01       	movw	r24, r20
     534:	8b d1       	rcall	.+790    	; 0x84c <_port_switch>
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	fc 01       	movw	r30, r24
     542:	44 83       	std	Z+4, r20	; 0x04
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	85 87       	std	Z+13, r24	; 0x0d
     548:	16 86       	std	Z+14, r1	; 0x0e
     54a:	43 8f       	std	Z+27, r20	; 0x1b
     54c:	12 8e       	std	Z+26, r1	; 0x1a
     54e:	11 8e       	std	Z+25, r1	; 0x19
     550:	10 8e       	std	Z+24, r1	; 0x18
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	87 87       	std	Z+15, r24	; 0x0f
     556:	74 87       	std	Z+12, r23	; 0x0c
     558:	63 87       	std	Z+11, r22	; 0x0b
     55a:	a7 e3       	ldi	r26, 0x37	; 55
     55c:	b2 e0       	ldi	r27, 0x02	; 2
     55e:	b0 87       	std	Z+8, r27	; 0x08
     560:	a7 83       	std	Z+7, r26	; 0x07
     562:	19 96       	adiw	r26, 0x09	; 9
     564:	cd 91       	ld	r28, X+
     566:	dc 91       	ld	r29, X
     568:	1a 97       	sbiw	r26, 0x0a	; 10
     56a:	d2 87       	std	Z+10, r29	; 0x0a
     56c:	c1 87       	std	Z+9, r28	; 0x09
     56e:	f8 87       	std	Y+8, r31	; 0x08
     570:	ef 83       	std	Y+7, r30	; 0x07
     572:	1a 96       	adiw	r26, 0x0a	; 10
     574:	fc 93       	st	X, r31
     576:	ee 93       	st	-X, r30
     578:	19 97       	sbiw	r26, 0x09	; 9
     57a:	cf 01       	movw	r24, r30
     57c:	42 96       	adiw	r24, 0x12	; 18
     57e:	93 8b       	std	Z+19, r25	; 0x13
     580:	82 8b       	std	Z+18, r24	; 0x12
     582:	02 96       	adiw	r24, 0x02	; 2
     584:	95 8b       	std	Z+21, r25	; 0x15
     586:	84 8b       	std	Z+20, r24	; 0x14
     588:	97 8b       	std	Z+23, r25	; 0x17
     58a:	86 8b       	std	Z+22, r24	; 0x16
     58c:	cf 01       	movw	r24, r30
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <chThdCreateSuspendedI>:
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	4c 81       	ldd	r20, Y+4	; 0x04
     59c:	5d 81       	ldd	r21, Y+5	; 0x05
     59e:	fa 01       	movw	r30, r20
     5a0:	7c 97       	sbiw	r30, 0x1c	; 28
     5a2:	ca 01       	movw	r24, r20
     5a4:	c1 97       	sbiw	r24, 0x31	; 49
     5a6:	96 83       	std	Z+6, r25	; 0x06
     5a8:	85 83       	std	Z+5, r24	; 0x05
     5aa:	2f 81       	ldd	r18, Y+7	; 0x07
     5ac:	dc 01       	movw	r26, r24
     5ae:	52 96       	adiw	r26, 0x12	; 18
     5b0:	2c 93       	st	X, r18
     5b2:	52 97       	sbiw	r26, 0x12	; 18
     5b4:	28 85       	ldd	r18, Y+8	; 0x08
     5b6:	51 96       	adiw	r26, 0x11	; 17
     5b8:	2c 93       	st	X, r18
     5ba:	51 97       	sbiw	r26, 0x11	; 17
     5bc:	29 85       	ldd	r18, Y+9	; 0x09
     5be:	50 96       	adiw	r26, 0x10	; 16
     5c0:	2c 93       	st	X, r18
     5c2:	50 97       	sbiw	r26, 0x10	; 16
     5c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     5c6:	1f 96       	adiw	r26, 0x0f	; 15
     5c8:	2c 93       	st	X, r18
     5ca:	1f 97       	sbiw	r26, 0x0f	; 15
     5cc:	25 e5       	ldi	r18, 0x55	; 85
     5ce:	34 e0       	ldi	r19, 0x04	; 4
     5d0:	53 96       	adiw	r26, 0x13	; 19
     5d2:	3c 93       	st	X, r19
     5d4:	53 97       	sbiw	r26, 0x13	; 19
     5d6:	54 96       	adiw	r26, 0x14	; 20
     5d8:	2c 93       	st	X, r18
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	28 81       	ld	r18, Y
     5de:	39 81       	ldd	r19, Y+1	; 0x01
     5e0:	84 83       	std	Z+4, r24	; 0x04
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	95 87       	std	Z+13, r25	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	83 8f       	std	Z+27, r24	; 0x1b
     5ea:	12 8e       	std	Z+26, r1	; 0x1a
     5ec:	11 8e       	std	Z+25, r1	; 0x19
     5ee:	10 8e       	std	Z+24, r1	; 0x18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	87 87       	std	Z+15, r24	; 0x0f
     5f4:	34 87       	std	Z+12, r19	; 0x0c
     5f6:	23 87       	std	Z+11, r18	; 0x0b
     5f8:	c7 e3       	ldi	r28, 0x37	; 55
     5fa:	d2 e0       	ldi	r29, 0x02	; 2
     5fc:	d0 87       	std	Z+8, r29	; 0x08
     5fe:	c7 83       	std	Z+7, r28	; 0x07
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	92 87       	std	Z+10, r25	; 0x0a
     606:	81 87       	std	Z+9, r24	; 0x09
     608:	dc 01       	movw	r26, r24
     60a:	18 96       	adiw	r26, 0x08	; 8
     60c:	fc 93       	st	X, r31
     60e:	ee 93       	st	-X, r30
     610:	17 97       	sbiw	r26, 0x07	; 7
     612:	fa 87       	std	Y+10, r31	; 0x0a
     614:	e9 87       	std	Y+9, r30	; 0x09
     616:	ea 01       	movw	r28, r20
     618:	2a 97       	sbiw	r28, 0x0a	; 10
     61a:	d9 83       	std	Y+1, r29	; 0x01
     61c:	c8 83       	st	Y, r28
     61e:	da 01       	movw	r26, r20
     620:	18 97       	sbiw	r26, 0x08	; 8
     622:	0b 2e       	mov	r0, r27
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	0c 92       	st	X, r0
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	ac 93       	st	X, r26
     62c:	0a 2e       	mov	r0, r26
     62e:	1b 2e       	mov	r1, r27
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	1c 92       	st	X, r1
     634:	0e 92       	st	-X, r0
     636:	11 24       	eor	r1, r1
     638:	12 97       	sbiw	r26, 0x02	; 2
     63a:	cf 01       	movw	r24, r30
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <chThdCreate>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	f8 94       	cli
     648:	a5 df       	rcall	.-182    	; 0x594 <chThdCreateSuspendedI>
     64a:	ec 01       	movw	r28, r24
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	dd de       	rcall	.-582    	; 0x40c <chSchWakeupS>
     652:	78 94       	sei
     654:	ce 01       	movw	r24, r28
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <chThdExitS>:
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	c0 91 42 02 	lds	r28, 0x0242	; 0x800242 <ch+0xb>
     668:	d0 91 43 02 	lds	r29, 0x0243	; 0x800243 <ch+0xc>
     66c:	99 8b       	std	Y+17, r25	; 0x11
     66e:	88 8b       	std	Y+16, r24	; 0x10
     670:	8e 01       	movw	r16, r28
     672:	0e 5e       	subi	r16, 0xEE	; 238
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	8a 89       	ldd	r24, Y+18	; 0x12
     678:	9b 89       	ldd	r25, Y+19	; 0x13
     67a:	08 17       	cp	r16, r24
     67c:	19 07       	cpc	r17, r25
     67e:	59 f0       	breq	.+22     	; 0x696 <chThdExitS+0x3a>
     680:	fc 01       	movw	r30, r24
     682:	20 81       	ld	r18, Z
     684:	31 81       	ldd	r19, Z+1	; 0x01
     686:	3b 8b       	std	Y+19, r19	; 0x13
     688:	2a 8b       	std	Y+18, r18	; 0x12
     68a:	4d de       	rcall	.-870    	; 0x326 <chSchReadyI>
     68c:	8a 89       	ldd	r24, Y+18	; 0x12
     68e:	9b 89       	ldd	r25, Y+19	; 0x13
     690:	80 17       	cp	r24, r16
     692:	91 07       	cpc	r25, r17
     694:	a9 f7       	brne	.-22     	; 0x680 <chThdExitS+0x24>
     696:	8f 85       	ldd	r24, Y+15	; 0x0f
     698:	81 11       	cpse	r24, r1
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <chThdExitS+0x58>
     69c:	e9 85       	ldd	r30, Y+9	; 0x09
     69e:	fa 85       	ldd	r31, Y+10	; 0x0a
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	98 85       	ldd	r25, Y+8	; 0x08
     6a4:	90 87       	std	Z+8, r25	; 0x08
     6a6:	87 83       	std	Z+7, r24	; 0x07
     6a8:	af 81       	ldd	r26, Y+7	; 0x07
     6aa:	b8 85       	ldd	r27, Y+8	; 0x08
     6ac:	1a 96       	adiw	r26, 0x0a	; 10
     6ae:	fc 93       	st	X, r31
     6b0:	ee 93       	st	-X, r30
     6b2:	19 97       	sbiw	r26, 0x09	; 9
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	55 ce       	rjmp	.-854    	; 0x36a <chSchGoSleepS>

000006c0 <chThdExit>:
     6c0:	f8 94       	cli
     6c2:	cc cf       	rjmp	.-104    	; 0x65c <chThdExitS>

000006c4 <chThdSleep>:
     6c4:	f8 94       	cli
     6c6:	bc 01       	movw	r22, r24
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	6b de       	rcall	.-810    	; 0x3a2 <chSchGoSleepTimeoutS>
     6cc:	78 94       	sei
     6ce:	08 95       	ret

000006d0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     6d4:	61 15       	cp	r22, r1
     6d6:	71 05       	cpc	r23, r1
     6d8:	99 f0       	breq	.+38     	; 0x700 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     6da:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <ch+0xb>
     6de:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     6e6:	ec 01       	movw	r28, r24
     6e8:	aa 81       	ldd	r26, Y+2	; 0x02
     6ea:	bb 81       	ldd	r27, Y+3	; 0x03
     6ec:	b3 83       	std	Z+3, r27	; 0x03
     6ee:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     6f0:	ed 93       	st	X+, r30
     6f2:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     6f4:	fb 83       	std	Y+3, r31	; 0x03
     6f6:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     6f8:	84 e0       	ldi	r24, 0x04	; 4
}
     6fa:	df 91       	pop	r29
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     6fc:	cf 91       	pop	r28
}
     6fe:	51 ce       	rjmp	.-862    	; 0x3a2 <chSchGoSleepTimeoutS>
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     714:	e8 17       	cp	r30, r24
     716:	f9 07       	cpc	r31, r25
     718:	71 f0       	breq	.+28     	; 0x736 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     71a:	ec 01       	movw	r28, r24
     71c:	a8 81       	ld	r26, Y
     71e:	b9 81       	ldd	r27, Y+1	; 0x01
     720:	b1 83       	std	Z+1, r27	; 0x01
     722:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     724:	13 96       	adiw	r26, 0x03	; 3
     726:	fc 93       	st	X, r31
     728:	ee 93       	st	-X, r30
     72a:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     72c:	79 8b       	std	Y+17, r23	; 0x11
     72e:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     730:	df 91       	pop	r29
  (void) chSchReadyI(tp);
     732:	cf 91       	pop	r28
     734:	f8 cd       	rjmp	.-1040   	; 0x326 <chSchReadyI>
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     73c:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     742:	93 83       	std	Z+3, r25	; 0x03
     744:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     746:	15 82       	std	Z+5, r1	; 0x05
     748:	14 82       	std	Z+4, r1	; 0x04
     74a:	08 95       	ret

0000074c <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     74c:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     74e:	90 8d       	ldd	r25, Z+24	; 0x18
     750:	69 2b       	or	r22, r25
     752:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     754:	85 85       	ldd	r24, Z+13	; 0x0d
     756:	8a 30       	cpi	r24, 0x0A	; 10
     758:	59 f0       	breq	.+22     	; 0x770 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	09 f0       	breq	.+2      	; 0x760 <chEvtSignalI+0x14>
     75e:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     760:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     762:	68 23       	and	r22, r24
     764:	86 13       	cpse	r24, r22
     766:	fb cf       	rjmp	.-10     	; 0x75e <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     768:	11 8a       	std	Z+17, r1	; 0x11
     76a:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     76c:	cf 01       	movw	r24, r30
     76e:	db cd       	rjmp	.-1098   	; 0x326 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     770:	80 89       	ldd	r24, Z+16	; 0x10
     772:	68 23       	and	r22, r24
     774:	c9 f7       	brne	.-14     	; 0x768 <chEvtSignalI+0x1c>
     776:	08 95       	ret

00000778 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	7c 01       	movw	r14, r24
     784:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     786:	fc 01       	movw	r30, r24
     788:	c0 81       	ld	r28, Z
     78a:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     78c:	8c 17       	cp	r24, r28
     78e:	9d 07       	cpc	r25, r29
     790:	91 f0       	breq	.+36     	; 0x7b6 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     792:	8d 81       	ldd	r24, Y+5	; 0x05
     794:	81 2b       	or	r24, r17
     796:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     798:	11 23       	and	r17, r17
     79a:	19 f0       	breq	.+6      	; 0x7a2 <chEvtBroadcastFlagsI+0x2a>
     79c:	9e 81       	ldd	r25, Y+6	; 0x06
     79e:	89 23       	and	r24, r25
     7a0:	21 f0       	breq	.+8      	; 0x7aa <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     7a2:	6c 81       	ldd	r22, Y+4	; 0x04
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	9b 81       	ldd	r25, Y+3	; 0x03
     7a8:	d1 df       	rcall	.-94     	; 0x74c <chEvtSignalI>
    }
    elp = elp->next;
     7aa:	09 90       	ld	r0, Y+
     7ac:	d8 81       	ld	r29, Y
     7ae:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     7b0:	ec 16       	cp	r14, r28
     7b2:	fd 06       	cpc	r15, r29
     7b4:	71 f7       	brne	.-36     	; 0x792 <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	08 95       	ret

000007c2 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     7c2:	ea e6       	ldi	r30, 0x6A	; 106
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	80 83       	st	Z, r24
     7ce:	80 ec       	ldi	r24, 0xC0	; 192
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	93 83       	std	Z+3, r25	; 0x03
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	08 95       	ret

000007d8 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     7d8:	f8 94       	cli
     7da:	9b 01       	movw	r18, r22
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     7e0:	71 95       	neg	r23
     7e2:	61 95       	neg	r22
     7e4:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     7e6:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <ch_memcore>
     7ea:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <ch_memcore+0x1>
     7ee:	4e 0f       	add	r20, r30
     7f0:	5f 1f       	adc	r21, r31
     7f2:	42 0f       	add	r20, r18
     7f4:	53 1f       	adc	r21, r19
     7f6:	46 23       	and	r20, r22
     7f8:	57 23       	and	r21, r23
  next = p + size;
     7fa:	82 0f       	add	r24, r18
     7fc:	93 1f       	adc	r25, r19
     7fe:	68 23       	and	r22, r24
     800:	79 23       	and	r23, r25
     802:	ca 01       	movw	r24, r20
     804:	86 0f       	add	r24, r22
     806:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     808:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <ch_memcore+0x2>
     80c:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <ch_memcore+0x3>
     810:	28 17       	cp	r18, r24
     812:	39 07       	cpc	r19, r25
     814:	50 f0       	brcs	.+20     	; 0x82a <chCoreAllocAlignedWithOffset+0x52>
     816:	8e 17       	cp	r24, r30
     818:	9f 07       	cpc	r25, r31
     81a:	38 f0       	brcs	.+14     	; 0x82a <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     81c:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <ch_memcore+0x1>
     820:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <ch_memcore>

  return p;
     824:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     826:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     828:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     830:	08 95       	ret

00000832 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     832:	e0 ec       	ldi	r30, 0xC0	; 192
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	8c ee       	ldi	r24, 0xEC	; 236
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     83e:	13 82       	std	Z+3, r1	; 0x03
     840:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     842:	15 82       	std	Z+5, r1	; 0x05
     844:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     846:	86 ec       	ldi	r24, 0xC6	; 198
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	78 cf       	rjmp	.-272    	; 0x73c <chMtxObjectInit>

0000084c <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     84c:	2f 92       	push	r2
  asm volatile ("push    r3");
     84e:	3f 92       	push	r3
  asm volatile ("push    r4");
     850:	4f 92       	push	r4
  asm volatile ("push    r5");
     852:	5f 92       	push	r5
  asm volatile ("push    r6");
     854:	6f 92       	push	r6
  asm volatile ("push    r7");
     856:	7f 92       	push	r7
  asm volatile ("push    r8");
     858:	8f 92       	push	r8
  asm volatile ("push    r9");
     85a:	9f 92       	push	r9
  asm volatile ("push    r10");
     85c:	af 92       	push	r10
  asm volatile ("push    r11");
     85e:	bf 92       	push	r11
  asm volatile ("push    r12");
     860:	cf 92       	push	r12
  asm volatile ("push    r13");
     862:	df 92       	push	r13
  asm volatile ("push    r14");
     864:	ef 92       	push	r14
  asm volatile ("push    r15");
     866:	ff 92       	push	r15
  asm volatile ("push    r16");
     868:	0f 93       	push	r16
  asm volatile ("push    r17");
     86a:	1f 93       	push	r17
  asm volatile ("push    r28");
     86c:	cf 93       	push	r28
  asm volatile ("push    r29");
     86e:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     870:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     872:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     874:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     876:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     878:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     87a:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     87c:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     87e:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     880:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     882:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     884:	df 91       	pop	r29
  asm volatile ("pop     r28");
     886:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     888:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     88a:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     88c:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     88e:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     890:	df 90       	pop	r13
  asm volatile ("pop     r12");
     892:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     894:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     896:	af 90       	pop	r10
  asm volatile ("pop     r9");
     898:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     89a:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     89c:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     89e:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     8a0:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     8a2:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     8a4:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     8a6:	2f 90       	pop	r2
  asm volatile ("ret");
     8a8:	08 95       	ret

000008aa <_port_thread_start>:
     8aa:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     8ac:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     8ae:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     8b0:	09 95       	icall
     8b2:	06 cf       	rjmp	.-500    	; 0x6c0 <chThdExit>

000008b4 <halInit>:
     8b4:	d5 d2       	rcall	.+1450   	; 0xe60 <hal_lld_init>
     8b6:	8a e3       	ldi	r24, 0x3A	; 58
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	d3 d2       	rcall	.+1446   	; 0xe62 <_pal_lld_init>
     8bc:	45 d2       	rcall	.+1162   	; 0xd48 <gptInit>
     8be:	66 d2       	rcall	.+1228   	; 0xd8c <sdInit>
     8c0:	13 d4       	rcall	.+2086   	; 0x10e8 <boardInit>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <stInit>

000008c4 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
     8c4:	2b c3       	rjmp	.+1622   	; 0xf1c <st_lld_init>

000008c6 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
     8dc:	6b 01       	movw	r12, r22
     8de:	8a 01       	movw	r16, r20
     8e0:	8c 81       	ldd	r24, Y+4	; 0x04
     8e2:	9d 81       	ldd	r25, Y+5	; 0x05
     8e4:	84 17       	cp	r24, r20
     8e6:	95 07       	cpc	r25, r21
     8e8:	10 f4       	brcc	.+4      	; 0x8ee <iq_read+0x28>
     8ea:	0c 81       	ldd	r16, Y+4	; 0x04
     8ec:	1d 81       	ldd	r17, Y+5	; 0x05
     8ee:	6c 85       	ldd	r22, Y+12	; 0x0c
     8f0:	7d 85       	ldd	r23, Y+13	; 0x0d
     8f2:	e8 84       	ldd	r14, Y+8	; 0x08
     8f4:	f9 84       	ldd	r15, Y+9	; 0x09
     8f6:	e6 1a       	sub	r14, r22
     8f8:	f7 0a       	sbc	r15, r23
     8fa:	0e 15       	cp	r16, r14
     8fc:	1f 05       	cpc	r17, r15
     8fe:	80 f1       	brcs	.+96     	; 0x960 <__stack+0x61>
     900:	e0 16       	cp	r14, r16
     902:	f1 06       	cpc	r15, r17
     904:	c8 f0       	brcs	.+50     	; 0x938 <__stack+0x39>
     906:	a8 01       	movw	r20, r16
     908:	c6 01       	movw	r24, r12
     90a:	2b d7       	rcall	.+3670   	; 0x1762 <memcpy>
     90c:	8e 81       	ldd	r24, Y+6	; 0x06
     90e:	9f 81       	ldd	r25, Y+7	; 0x07
     910:	9d 87       	std	Y+13, r25	; 0x0d
     912:	8c 87       	std	Y+12, r24	; 0x0c
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	9d 81       	ldd	r25, Y+5	; 0x05
     918:	80 1b       	sub	r24, r16
     91a:	91 0b       	sbc	r25, r17
     91c:	9d 83       	std	Y+5, r25	; 0x05
     91e:	8c 83       	std	Y+4, r24	; 0x04
     920:	c8 01       	movw	r24, r16
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	bf 90       	pop	r11
     934:	af 90       	pop	r10
     936:	08 95       	ret
     938:	a7 01       	movw	r20, r14
     93a:	c6 01       	movw	r24, r12
     93c:	12 d7       	rcall	.+3620   	; 0x1762 <memcpy>
     93e:	58 01       	movw	r10, r16
     940:	ae 18       	sub	r10, r14
     942:	bf 08       	sbc	r11, r15
     944:	6e 81       	ldd	r22, Y+6	; 0x06
     946:	7f 81       	ldd	r23, Y+7	; 0x07
     948:	a5 01       	movw	r20, r10
     94a:	c6 01       	movw	r24, r12
     94c:	8e 0d       	add	r24, r14
     94e:	9f 1d       	adc	r25, r15
     950:	08 d7       	rcall	.+3600   	; 0x1762 <memcpy>
     952:	8e 81       	ldd	r24, Y+6	; 0x06
     954:	9f 81       	ldd	r25, Y+7	; 0x07
     956:	a8 0e       	add	r10, r24
     958:	b9 1e       	adc	r11, r25
     95a:	bd 86       	std	Y+13, r11	; 0x0d
     95c:	ac 86       	std	Y+12, r10	; 0x0c
     95e:	da cf       	rjmp	.-76     	; 0x914 <__stack+0x15>
     960:	a8 01       	movw	r20, r16
     962:	c6 01       	movw	r24, r12
     964:	fe d6       	rcall	.+3580   	; 0x1762 <memcpy>
     966:	8c 85       	ldd	r24, Y+12	; 0x0c
     968:	9d 85       	ldd	r25, Y+13	; 0x0d
     96a:	80 0f       	add	r24, r16
     96c:	91 1f       	adc	r25, r17
     96e:	9d 87       	std	Y+13, r25	; 0x0d
     970:	8c 87       	std	Y+12, r24	; 0x0c
     972:	d0 cf       	rjmp	.-96     	; 0x914 <__stack+0x15>

00000974 <oq_write>:
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	6b 01       	movw	r12, r22
     98c:	8a 01       	movw	r16, r20
     98e:	8c 81       	ldd	r24, Y+4	; 0x04
     990:	9d 81       	ldd	r25, Y+5	; 0x05
     992:	84 17       	cp	r24, r20
     994:	95 07       	cpc	r25, r21
     996:	10 f4       	brcc	.+4      	; 0x99c <oq_write+0x28>
     998:	0c 81       	ldd	r16, Y+4	; 0x04
     99a:	1d 81       	ldd	r17, Y+5	; 0x05
     99c:	8a 85       	ldd	r24, Y+10	; 0x0a
     99e:	9b 85       	ldd	r25, Y+11	; 0x0b
     9a0:	e8 84       	ldd	r14, Y+8	; 0x08
     9a2:	f9 84       	ldd	r15, Y+9	; 0x09
     9a4:	e8 1a       	sub	r14, r24
     9a6:	f9 0a       	sbc	r15, r25
     9a8:	0e 15       	cp	r16, r14
     9aa:	1f 05       	cpc	r17, r15
     9ac:	80 f1       	brcs	.+96     	; 0xa0e <oq_write+0x9a>
     9ae:	e0 16       	cp	r14, r16
     9b0:	f1 06       	cpc	r15, r17
     9b2:	c8 f0       	brcs	.+50     	; 0x9e6 <oq_write+0x72>
     9b4:	a8 01       	movw	r20, r16
     9b6:	b6 01       	movw	r22, r12
     9b8:	d4 d6       	rcall	.+3496   	; 0x1762 <memcpy>
     9ba:	8e 81       	ldd	r24, Y+6	; 0x06
     9bc:	9f 81       	ldd	r25, Y+7	; 0x07
     9be:	9b 87       	std	Y+11, r25	; 0x0b
     9c0:	8a 87       	std	Y+10, r24	; 0x0a
     9c2:	8c 81       	ldd	r24, Y+4	; 0x04
     9c4:	9d 81       	ldd	r25, Y+5	; 0x05
     9c6:	80 1b       	sub	r24, r16
     9c8:	91 0b       	sbc	r25, r17
     9ca:	9d 83       	std	Y+5, r25	; 0x05
     9cc:	8c 83       	std	Y+4, r24	; 0x04
     9ce:	c8 01       	movw	r24, r16
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	08 95       	ret
     9e6:	a7 01       	movw	r20, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	bb d6       	rcall	.+3446   	; 0x1762 <memcpy>
     9ec:	58 01       	movw	r10, r16
     9ee:	ae 18       	sub	r10, r14
     9f0:	bf 08       	sbc	r11, r15
     9f2:	b6 01       	movw	r22, r12
     9f4:	6e 0d       	add	r22, r14
     9f6:	7f 1d       	adc	r23, r15
     9f8:	a5 01       	movw	r20, r10
     9fa:	8e 81       	ldd	r24, Y+6	; 0x06
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	b1 d6       	rcall	.+3426   	; 0x1762 <memcpy>
     a00:	8e 81       	ldd	r24, Y+6	; 0x06
     a02:	9f 81       	ldd	r25, Y+7	; 0x07
     a04:	a8 0e       	add	r10, r24
     a06:	b9 1e       	adc	r11, r25
     a08:	bb 86       	std	Y+11, r11	; 0x0b
     a0a:	aa 86       	std	Y+10, r10	; 0x0a
     a0c:	da cf       	rjmp	.-76     	; 0x9c2 <oq_write+0x4e>
     a0e:	a8 01       	movw	r20, r16
     a10:	b6 01       	movw	r22, r12
     a12:	a7 d6       	rcall	.+3406   	; 0x1762 <memcpy>
     a14:	8a 85       	ldd	r24, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	80 0f       	add	r24, r16
     a1a:	91 1f       	adc	r25, r17
     a1c:	9b 87       	std	Y+11, r25	; 0x0b
     a1e:	8a 87       	std	Y+10, r24	; 0x0a
     a20:	d0 cf       	rjmp	.-96     	; 0x9c2 <oq_write+0x4e>

00000a22 <iqObjectInit>:
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	fc 01       	movw	r30, r24
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	93 83       	std	Z+3, r25	; 0x03
     a2e:	82 83       	std	Z+2, r24	; 0x02
     a30:	15 82       	std	Z+5, r1	; 0x05
     a32:	14 82       	std	Z+4, r1	; 0x04
     a34:	77 83       	std	Z+7, r23	; 0x07
     a36:	66 83       	std	Z+6, r22	; 0x06
     a38:	75 87       	std	Z+13, r23	; 0x0d
     a3a:	64 87       	std	Z+12, r22	; 0x0c
     a3c:	73 87       	std	Z+11, r23	; 0x0b
     a3e:	62 87       	std	Z+10, r22	; 0x0a
     a40:	64 0f       	add	r22, r20
     a42:	75 1f       	adc	r23, r21
     a44:	71 87       	std	Z+9, r23	; 0x09
     a46:	60 87       	std	Z+8, r22	; 0x08
     a48:	37 87       	std	Z+15, r19	; 0x0f
     a4a:	26 87       	std	Z+14, r18	; 0x0e
     a4c:	11 8b       	std	Z+17, r17	; 0x11
     a4e:	00 8b       	std	Z+16, r16	; 0x10
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <iqPutI>:
     a56:	fc 01       	movw	r30, r24
     a58:	a2 85       	ldd	r26, Z+10	; 0x0a
     a5a:	b3 85       	ldd	r27, Z+11	; 0x0b
     a5c:	84 85       	ldd	r24, Z+12	; 0x0c
     a5e:	95 85       	ldd	r25, Z+13	; 0x0d
     a60:	a8 17       	cp	r26, r24
     a62:	b9 07       	cpc	r27, r25
     a64:	e1 f0       	breq	.+56     	; 0xa9e <iqPutI+0x48>
     a66:	84 81       	ldd	r24, Z+4	; 0x04
     a68:	95 81       	ldd	r25, Z+5	; 0x05
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	95 83       	std	Z+5, r25	; 0x05
     a6e:	84 83       	std	Z+4, r24	; 0x04
     a70:	cd 01       	movw	r24, r26
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	93 87       	std	Z+11, r25	; 0x0b
     a76:	82 87       	std	Z+10, r24	; 0x0a
     a78:	6c 93       	st	X, r22
     a7a:	22 85       	ldd	r18, Z+10	; 0x0a
     a7c:	33 85       	ldd	r19, Z+11	; 0x0b
     a7e:	80 85       	ldd	r24, Z+8	; 0x08
     a80:	91 85       	ldd	r25, Z+9	; 0x09
     a82:	28 17       	cp	r18, r24
     a84:	39 07       	cpc	r19, r25
     a86:	20 f0       	brcs	.+8      	; 0xa90 <iqPutI+0x3a>
     a88:	86 81       	ldd	r24, Z+6	; 0x06
     a8a:	97 81       	ldd	r25, Z+7	; 0x07
     a8c:	93 87       	std	Z+11, r25	; 0x0b
     a8e:	82 87       	std	Z+10, r24	; 0x0a
     a90:	cf 01       	movw	r24, r30
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	39 de       	rcall	.-910    	; 0x70a <chThdDequeueNextI>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	08 95       	ret
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	95 81       	ldd	r25, Z+5	; 0x05
     aa2:	89 2b       	or	r24, r25
     aa4:	01 f3       	breq	.-64     	; 0xa66 <iqPutI+0x10>
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	08 95       	ret

00000aac <iqGetTimeout>:
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	8b 01       	movw	r16, r22
     ab8:	f8 94       	cli
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <iqGetTimeout+0x1a>
     abc:	b8 01       	movw	r22, r16
     abe:	ce 01       	movw	r24, r28
     ac0:	07 de       	rcall	.-1010   	; 0x6d0 <chThdEnqueueTimeoutS>
     ac2:	97 fd       	sbrc	r25, 7
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <iqGetTimeout+0x68>
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	9d 81       	ldd	r25, Y+5	; 0x05
     aca:	89 2b       	or	r24, r25
     acc:	b9 f3       	breq	.-18     	; 0xabc <iqGetTimeout+0x10>
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9d 83       	std	Y+5, r25	; 0x05
     ad6:	8c 83       	std	Y+4, r24	; 0x04
     ad8:	ec 85       	ldd	r30, Y+12	; 0x0c
     ada:	fd 85       	ldd	r31, Y+13	; 0x0d
     adc:	cf 01       	movw	r24, r30
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	9d 87       	std	Y+13, r25	; 0x0d
     ae2:	8c 87       	std	Y+12, r24	; 0x0c
     ae4:	10 81       	ld	r17, Z
     ae6:	28 85       	ldd	r18, Y+8	; 0x08
     ae8:	39 85       	ldd	r19, Y+9	; 0x09
     aea:	82 17       	cp	r24, r18
     aec:	93 07       	cpc	r25, r19
     aee:	20 f0       	brcs	.+8      	; 0xaf8 <iqGetTimeout+0x4c>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	9f 81       	ldd	r25, Y+7	; 0x07
     af4:	9d 87       	std	Y+13, r25	; 0x0d
     af6:	8c 87       	std	Y+12, r24	; 0x0c
     af8:	ee 85       	ldd	r30, Y+14	; 0x0e
     afa:	ff 85       	ldd	r31, Y+15	; 0x0f
     afc:	30 97       	sbiw	r30, 0x00	; 0
     afe:	11 f0       	breq	.+4      	; 0xb04 <iqGetTimeout+0x58>
     b00:	ce 01       	movw	r24, r28
     b02:	09 95       	icall
     b04:	78 94       	sei
     b06:	81 2f       	mov	r24, r17
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret
     b14:	78 94       	sei
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <iqReadTimeout>:
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	4c 01       	movw	r8, r24
     b3e:	7b 01       	movw	r14, r22
     b40:	6a 01       	movw	r12, r20
     b42:	39 01       	movw	r6, r18
     b44:	fc 01       	movw	r30, r24
     b46:	a6 84       	ldd	r10, Z+14	; 0x0e
     b48:	b7 84       	ldd	r11, Z+15	; 0x0f
     b4a:	f8 94       	cli
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	45 2b       	or	r20, r21
     b52:	81 f4       	brne	.+32     	; 0xb74 <iqReadTimeout+0x54>
     b54:	1b c0       	rjmp	.+54     	; 0xb8c <iqReadTimeout+0x6c>
     b56:	a1 14       	cp	r10, r1
     b58:	b1 04       	cpc	r11, r1
     b5a:	19 f0       	breq	.+6      	; 0xb62 <iqReadTimeout+0x42>
     b5c:	c4 01       	movw	r24, r8
     b5e:	f5 01       	movw	r30, r10
     b60:	09 95       	icall
     b62:	78 94       	sei
     b64:	0c 0f       	add	r16, r28
     b66:	1d 1f       	adc	r17, r29
     b68:	ec 0e       	add	r14, r28
     b6a:	fd 1e       	adc	r15, r29
     b6c:	f8 94       	cli
     b6e:	0c 15       	cp	r16, r12
     b70:	1d 05       	cpc	r17, r13
     b72:	60 f4       	brcc	.+24     	; 0xb8c <iqReadTimeout+0x6c>
     b74:	a6 01       	movw	r20, r12
     b76:	b7 01       	movw	r22, r14
     b78:	c4 01       	movw	r24, r8
     b7a:	a5 de       	rcall	.-694    	; 0x8c6 <iq_read>
     b7c:	ec 01       	movw	r28, r24
     b7e:	89 2b       	or	r24, r25
     b80:	51 f7       	brne	.-44     	; 0xb56 <iqReadTimeout+0x36>
     b82:	b3 01       	movw	r22, r6
     b84:	c4 01       	movw	r24, r8
     b86:	a4 dd       	rcall	.-1208   	; 0x6d0 <chThdEnqueueTimeoutS>
     b88:	89 2b       	or	r24, r25
     b8a:	89 f3       	breq	.-30     	; 0xb6e <iqReadTimeout+0x4e>
     b8c:	78 94       	sei
     b8e:	c8 01       	movw	r24, r16
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	08 95       	ret

00000bae <oqObjectInit>:
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	fc 01       	movw	r30, r24
     bb4:	91 83       	std	Z+1, r25	; 0x01
     bb6:	80 83       	st	Z, r24
     bb8:	93 83       	std	Z+3, r25	; 0x03
     bba:	82 83       	std	Z+2, r24	; 0x02
     bbc:	55 83       	std	Z+5, r21	; 0x05
     bbe:	44 83       	std	Z+4, r20	; 0x04
     bc0:	77 83       	std	Z+7, r23	; 0x07
     bc2:	66 83       	std	Z+6, r22	; 0x06
     bc4:	75 87       	std	Z+13, r23	; 0x0d
     bc6:	64 87       	std	Z+12, r22	; 0x0c
     bc8:	73 87       	std	Z+11, r23	; 0x0b
     bca:	62 87       	std	Z+10, r22	; 0x0a
     bcc:	46 0f       	add	r20, r22
     bce:	57 1f       	adc	r21, r23
     bd0:	51 87       	std	Z+9, r21	; 0x09
     bd2:	40 87       	std	Z+8, r20	; 0x08
     bd4:	37 87       	std	Z+15, r19	; 0x0f
     bd6:	26 87       	std	Z+14, r18	; 0x0e
     bd8:	11 8b       	std	Z+17, r17	; 0x11
     bda:	00 8b       	std	Z+16, r16	; 0x10
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <oqPutTimeout>:
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	ec 01       	movw	r28, r24
     bee:	f6 2e       	mov	r15, r22
     bf0:	8a 01       	movw	r16, r20
     bf2:	f8 94       	cli
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <oqPutTimeout+0x1e>
     bf6:	b8 01       	movw	r22, r16
     bf8:	ce 01       	movw	r24, r28
     bfa:	6a dd       	rcall	.-1324   	; 0x6d0 <chThdEnqueueTimeoutS>
     bfc:	97 fd       	sbrc	r25, 7
     bfe:	2a c0       	rjmp	.+84     	; 0xc54 <oqPutTimeout+0x72>
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	89 2b       	or	r24, r25
     c06:	b9 f3       	breq	.-18     	; 0xbf6 <oqPutTimeout+0x14>
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	9d 81       	ldd	r25, Y+5	; 0x05
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9d 83       	std	Y+5, r25	; 0x05
     c10:	8c 83       	std	Y+4, r24	; 0x04
     c12:	ea 85       	ldd	r30, Y+10	; 0x0a
     c14:	fb 85       	ldd	r31, Y+11	; 0x0b
     c16:	cf 01       	movw	r24, r30
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	9b 87       	std	Y+11, r25	; 0x0b
     c1c:	8a 87       	std	Y+10, r24	; 0x0a
     c1e:	f0 82       	st	Z, r15
     c20:	2a 85       	ldd	r18, Y+10	; 0x0a
     c22:	3b 85       	ldd	r19, Y+11	; 0x0b
     c24:	88 85       	ldd	r24, Y+8	; 0x08
     c26:	99 85       	ldd	r25, Y+9	; 0x09
     c28:	28 17       	cp	r18, r24
     c2a:	39 07       	cpc	r19, r25
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <oqPutTimeout+0x54>
     c2e:	8e 81       	ldd	r24, Y+6	; 0x06
     c30:	9f 81       	ldd	r25, Y+7	; 0x07
     c32:	9b 87       	std	Y+11, r25	; 0x0b
     c34:	8a 87       	std	Y+10, r24	; 0x0a
     c36:	ee 85       	ldd	r30, Y+14	; 0x0e
     c38:	ff 85       	ldd	r31, Y+15	; 0x0f
     c3a:	30 97       	sbiw	r30, 0x00	; 0
     c3c:	11 f0       	breq	.+4      	; 0xc42 <oqPutTimeout+0x60>
     c3e:	ce 01       	movw	r24, r28
     c40:	09 95       	icall
     c42:	78 94       	sei
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	08 95       	ret
     c54:	78 94       	sei
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	08 95       	ret

00000c62 <oqGetI>:
     c62:	cf 93       	push	r28
     c64:	fc 01       	movw	r30, r24
     c66:	a4 85       	ldd	r26, Z+12	; 0x0c
     c68:	b5 85       	ldd	r27, Z+13	; 0x0d
     c6a:	82 85       	ldd	r24, Z+10	; 0x0a
     c6c:	93 85       	ldd	r25, Z+11	; 0x0b
     c6e:	8a 17       	cp	r24, r26
     c70:	9b 07       	cpc	r25, r27
     c72:	e1 f0       	breq	.+56     	; 0xcac <oqGetI+0x4a>
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	95 83       	std	Z+5, r25	; 0x05
     c7c:	84 83       	std	Z+4, r24	; 0x04
     c7e:	cd 01       	movw	r24, r26
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	95 87       	std	Z+13, r25	; 0x0d
     c84:	84 87       	std	Z+12, r24	; 0x0c
     c86:	cc 91       	ld	r28, X
     c88:	20 85       	ldd	r18, Z+8	; 0x08
     c8a:	31 85       	ldd	r19, Z+9	; 0x09
     c8c:	82 17       	cp	r24, r18
     c8e:	93 07       	cpc	r25, r19
     c90:	40 f4       	brcc	.+16     	; 0xca2 <oqGetI+0x40>
     c92:	cf 01       	movw	r24, r30
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	38 dd       	rcall	.-1424   	; 0x70a <chThdDequeueNextI>
     c9a:	8c 2f       	mov	r24, r28
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret
     ca2:	86 81       	ldd	r24, Z+6	; 0x06
     ca4:	97 81       	ldd	r25, Z+7	; 0x07
     ca6:	95 87       	std	Z+13, r25	; 0x0d
     ca8:	84 87       	std	Z+12, r24	; 0x0c
     caa:	f3 cf       	rjmp	.-26     	; 0xc92 <oqGetI+0x30>
     cac:	84 81       	ldd	r24, Z+4	; 0x04
     cae:	95 81       	ldd	r25, Z+5	; 0x05
     cb0:	89 2b       	or	r24, r25
     cb2:	01 f3       	breq	.-64     	; 0xc74 <oqGetI+0x12>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
     cb8:	f2 cf       	rjmp	.-28     	; 0xc9e <oqGetI+0x3c>

00000cba <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	4c 01       	movw	r8, r24
     cd8:	7b 01       	movw	r14, r22
     cda:	6a 01       	movw	r12, r20
     cdc:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     cde:	fc 01       	movw	r30, r24
     ce0:	a6 84       	ldd	r10, Z+14	; 0x0e
     ce2:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     ce4:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     ce6:	00 e0       	ldi	r16, 0x00	; 0
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	45 2b       	or	r20, r21
     cec:	81 f4       	brne	.+32     	; 0xd0e <oqWriteTimeout+0x54>
     cee:	1b c0       	rjmp	.+54     	; 0xd26 <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     cf0:	a1 14       	cp	r10, r1
     cf2:	b1 04       	cpc	r11, r1
     cf4:	19 f0       	breq	.+6      	; 0xcfc <oqWriteTimeout+0x42>
        nfy(oqp);
     cf6:	c4 01       	movw	r24, r8
     cf8:	f5 01       	movw	r30, r10
     cfa:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     cfc:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
     cfe:	0c 0f       	add	r16, r28
     d00:	1d 1f       	adc	r17, r29
      bp += done;
     d02:	ec 0e       	add	r14, r28
     d04:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     d06:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     d08:	0c 15       	cp	r16, r12
     d0a:	1d 05       	cpc	r17, r13
     d0c:	60 f4       	brcc	.+24     	; 0xd26 <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
     d0e:	a6 01       	movw	r20, r12
     d10:	b7 01       	movw	r22, r14
     d12:	c4 01       	movw	r24, r8
     d14:	2f de       	rcall	.-930    	; 0x974 <oq_write>
     d16:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     d18:	89 2b       	or	r24, r25
     d1a:	51 f7       	brne	.-44     	; 0xcf0 <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     d1c:	b3 01       	movw	r22, r6
     d1e:	c4 01       	movw	r24, r8
     d20:	d7 dc       	rcall	.-1618   	; 0x6d0 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     d22:	89 2b       	or	r24, r25
     d24:	89 f3       	breq	.-30     	; 0xd08 <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     d26:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
     d28:	c8 01       	movw	r24, r16
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	bf 90       	pop	r11
     d3c:	af 90       	pop	r10
     d3e:	9f 90       	pop	r9
     d40:	8f 90       	pop	r8
     d42:	7f 90       	pop	r7
     d44:	6f 90       	pop	r6
     d46:	08 95       	ret

00000d48 <gptInit>:
     d48:	47 c1       	rjmp	.+654    	; 0xfd8 <gpt_lld_init>

00000d4a <gptObjectInit>:
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
     d50:	12 82       	std	Z+2, r1	; 0x02
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	08 95       	ret

00000d56 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     d56:	05 96       	adiw	r24, 0x05	; 5
     d58:	e3 ce       	rjmp	.-570    	; 0xb20 <iqReadTimeout>

00000d5a <_read>:
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	05 96       	adiw	r24, 0x05	; 5
     d60:	df ce       	rjmp	.-578    	; 0xb20 <iqReadTimeout>

00000d62 <_writet>:
     d62:	47 96       	adiw	r24, 0x17	; 23
     d64:	aa cf       	rjmp	.-172    	; 0xcba <oqWriteTimeout>

00000d66 <_write>:
     d66:	2f ef       	ldi	r18, 0xFF	; 255
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	47 96       	adiw	r24, 0x17	; 23
     d6c:	a6 cf       	rjmp	.-180    	; 0xcba <oqWriteTimeout>

00000d6e <_gett>:
     d6e:	05 96       	adiw	r24, 0x05	; 5
     d70:	9d ce       	rjmp	.-710    	; 0xaac <iqGetTimeout>

00000d72 <_get>:
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	05 96       	adiw	r24, 0x05	; 5
     d78:	99 ce       	rjmp	.-718    	; 0xaac <iqGetTimeout>

00000d7a <_putt>:
     d7a:	47 96       	adiw	r24, 0x17	; 23
     d7c:	32 cf       	rjmp	.-412    	; 0xbe2 <oqPutTimeout>

00000d7e <_put>:
     d7e:	4f ef       	ldi	r20, 0xFF	; 255
     d80:	5f ef       	ldi	r21, 0xFF	; 255
     d82:	47 96       	adiw	r24, 0x17	; 23
     d84:	2e cf       	rjmp	.-420    	; 0xbe2 <oqPutTimeout>

00000d86 <_ctl>:
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	08 95       	ret

00000d8c <sdInit>:
     d8c:	a6 c1       	rjmp	.+844    	; 0x10da <sd_lld_init>

00000d8e <sdObjectInit>:
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	ec 01       	movw	r28, r24
     d9c:	9b 01       	movw	r18, r22
     d9e:	7a 01       	movw	r14, r20
     da0:	fc 01       	movw	r30, r24
     da2:	86 e2       	ldi	r24, 0x26	; 38
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	81 93       	st	Z+, r24
     da8:	91 93       	st	Z+, r25
     daa:	fb 83       	std	Y+3, r31	; 0x03
     dac:	ea 83       	std	Y+2, r30	; 0x02
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	8c 83       	std	Y+4, r24	; 0x04
     db2:	be 01       	movw	r22, r28
     db4:	67 5d       	subi	r22, 0xD7	; 215
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	8e 01       	movw	r16, r28
     dba:	40 e1       	ldi	r20, 0x10	; 16
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	ce 01       	movw	r24, r28
     dc0:	05 96       	adiw	r24, 0x05	; 5
     dc2:	2f de       	rcall	.-930    	; 0xa22 <iqObjectInit>
     dc4:	be 01       	movw	r22, r28
     dc6:	67 5c       	subi	r22, 0xC7	; 199
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	97 01       	movw	r18, r14
     dcc:	40 e1       	ldi	r20, 0x10	; 16
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	ce 01       	movw	r24, r28
     dd2:	47 96       	adiw	r24, 0x17	; 23
     dd4:	ec de       	rcall	.-552    	; 0xbae <oqObjectInit>
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	89 2b       	or	r24, r25
     df4:	51 f0       	breq	.+20     	; 0xe0a <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     df6:	61 2f       	mov	r22, r17
     df8:	ce 01       	movw	r24, r28
     dfa:	05 96       	adiw	r24, 0x05	; 5
     dfc:	2c de       	rcall	.-936    	; 0xa56 <iqPutI>
     dfe:	97 fd       	sbrc	r25, 7
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     e0a:	64 e0       	ldi	r22, 0x04	; 4
     e0c:	ce 01       	movw	r24, r28
     e0e:	02 96       	adiw	r24, 0x02	; 2
     e10:	b3 dc       	rcall	.-1690   	; 0x778 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     e12:	61 2f       	mov	r22, r17
     e14:	ce 01       	movw	r24, r28
     e16:	05 96       	adiw	r24, 0x05	; 5
     e18:	1e de       	rcall	.-964    	; 0xa56 <iqPutI>
     e1a:	97 ff       	sbrs	r25, 7
     e1c:	f2 cf       	rjmp	.-28     	; 0xe02 <sdIncomingDataI+0x1e>
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	ce 01       	movw	r24, r28
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     e22:	02 96       	adiw	r24, 0x02	; 2
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
     e2a:	a6 cc       	rjmp	.-1716   	; 0x778 <chEvtBroadcastFlagsI>

00000e2c <sdRequestDataI>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	8c 01       	movw	r16, r24
     e36:	47 96       	adiw	r24, 0x17	; 23
     e38:	14 df       	rcall	.-472    	; 0xc62 <oqGetI>
     e3a:	ec 01       	movw	r28, r24
     e3c:	97 fd       	sbrc	r25, 7
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <sdRequestDataI+0x20>
     e40:	ce 01       	movw	r24, r28
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret
     e4c:	68 e0       	ldi	r22, 0x08	; 8
     e4e:	c8 01       	movw	r24, r16
     e50:	02 96       	adiw	r24, 0x02	; 2
     e52:	92 dc       	rcall	.-1756   	; 0x778 <chEvtBroadcastFlagsI>
     e54:	ce 01       	movw	r24, r28
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     e60:	08 95       	ret

00000e62 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     e62:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     e64:	80 81       	ld	r24, Z
     e66:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     e74:	84 81       	ldd	r24, Z+4	; 0x04
     e76:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     e78:	85 81       	ldd	r24, Z+5	; 0x05
     e7a:	8a b9       	out	0x0a, r24	; 10
     e7c:	08 95       	ret

00000e7e <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     e7e:	fc 01       	movw	r30, r24

  switch (mode) {
     e80:	42 30       	cpi	r20, 0x02	; 2
     e82:	c9 f0       	breq	.+50     	; 0xeb6 <_pal_lld_setgroupmode+0x38>
     e84:	98 f0       	brcs	.+38     	; 0xeac <_pal_lld_setgroupmode+0x2e>
     e86:	45 30       	cpi	r20, 0x05	; 5
     e88:	b1 f0       	breq	.+44     	; 0xeb6 <_pal_lld_setgroupmode+0x38>
     e8a:	46 30       	cpi	r20, 0x06	; 6
     e8c:	21 f4       	brne	.+8      	; 0xe96 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     e8e:	81 81       	ldd	r24, Z+1	; 0x01
     e90:	68 2b       	or	r22, r24
     e92:	61 83       	std	Z+1, r22	; 0x01
     e94:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     e96:	43 30       	cpi	r20, 0x03	; 3
     e98:	e9 f7       	brne	.-6      	; 0xe94 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	96 2f       	mov	r25, r22
     e9e:	90 95       	com	r25
     ea0:	89 23       	and	r24, r25
     ea2:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	68 2b       	or	r22, r24
     ea8:	62 83       	std	Z+2, r22	; 0x02
    break;
     eaa:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     eac:	44 23       	and	r20, r20
     eae:	19 f0       	breq	.+6      	; 0xeb6 <_pal_lld_setgroupmode+0x38>
     eb0:	41 30       	cpi	r20, 0x01	; 1
     eb2:	99 f3       	breq	.-26     	; 0xe9a <_pal_lld_setgroupmode+0x1c>
     eb4:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	60 95       	com	r22
     eba:	86 23       	and	r24, r22
     ebc:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	68 23       	and	r22, r24
     ec2:	62 83       	std	Z+2, r22	; 0x02
    break;
     ec4:	08 95       	ret

00000ec6 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__avr_in_isr>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     eee:	03 d9       	rcall	.-3578   	; 0xf6 <chSysTimerHandlerI>
     ef0:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__avr_in_isr>
     ef4:	d7 da       	rcall	.-2642   	; 0x4a4 <chSchIsPreemptionRequired>
     ef6:	81 11       	cpse	r24, r1
}
     ef8:	e5 da       	rcall	.-2614   	; 0x4c4 <chSchDoReschedule>
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     f20:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     f22:	9f e7       	ldi	r25, 0x7F	; 127
     f24:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     f26:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     f28:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     f2a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     f2e:	08 95       	ret

00000f30 <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
     f58:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <GPTD1+0x6>
     f5c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <GPTD1+0x7>
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <GPTD1+0x7>
     f66:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
     f6a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <GPTD1+0x4>
     f6e:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <GPTD1+0x5>
     f72:	82 17       	cp	r24, r18
     f74:	93 07       	cpc	r25, r19
     f76:	b1 f0       	breq	.+44     	; 0xfa4 <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
     f78:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__avr_in_isr>
     f7c:	93 da       	rcall	.-2778   	; 0x4a4 <chSchIsPreemptionRequired>
     f7e:	81 11       	cpse	r24, r1
     f80:	a1 da       	rcall	.-2750   	; 0x4c4 <chSchDoReschedule>
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
     fa4:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <GPTD1+0x7>
     fa8:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <GPTD1+0x6>
    if (gptp->state == GPT_ONESHOT) {
     fac:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <GPTD1>
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <__vector_11+0x94>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
     fb4:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <GPTD1+0x8>
     fb8:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <GPTD1+0x9>
     fbc:	8f e6       	ldi	r24, 0x6F	; 111
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	09 95       	icall
     fc2:	da cf       	rjmp	.-76     	; 0xf78 <__vector_11+0x48>

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <GPTD1>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
     fca:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     fce:	88 7f       	andi	r24, 0xF8	; 248
     fd0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  *regs_table[i].tifr = (1 << OCF1A);
     fd4:	96 bb       	out	0x16, r25	; 22
     fd6:	ee cf       	rjmp	.-36     	; 0xfb4 <__vector_11+0x84>

00000fd8 <gpt_lld_init>:
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
     fd8:	8f e6       	ldi	r24, 0x6F	; 111
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	b6 ce       	rjmp	.-660    	; 0xd4a <gptObjectInit>

00000fde <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     fde:	e1 ec       	ldi	r30, 0xC1	; 193
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	80 83       	st	Z, r24
     fe8:	08 95       	ret

00000fea <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__avr_in_isr>

  sra = UCSR0A;
    1012:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1016:	98 2f       	mov	r25, r24
    1018:	9c 71       	andi	r25, 0x1C	; 28
    101a:	d9 f4       	brne	.+54     	; 0x1052 <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    101c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1020:	89 e7       	ldi	r24, 0x79	; 121
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	df de       	rcall	.-578    	; 0xde4 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1026:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__avr_in_isr>
    102a:	3c da       	rcall	.-2952   	; 0x4a4 <chSchIsPreemptionRequired>
    102c:	81 11       	cpse	r24, r1
    102e:	4a da       	rcall	.-2924   	; 0x4c4 <chSchDoReschedule>
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    1052:	83 fd       	sbrc	r24, 3
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    1056:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    1058:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    105a:	60 62       	ori	r22, 0x20	; 32
    105c:	84 fd       	sbrc	r24, 4
    105e:	60 64       	ori	r22, 0x40	; 64
    1060:	8b e7       	ldi	r24, 0x7B	; 123
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	89 db       	rcall	.-2286   	; 0x778 <chEvtBroadcastFlagsI>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1066:	da cf       	rjmp	.-76     	; 0x101c <__vector_18+0x32>
    1068:	60 e8       	ldi	r22, 0x80	; 128
    106a:	f6 cf       	rjmp	.-20     	; 0x1058 <__vector_18+0x6e>

0000106c <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	2f 93       	push	r18
    1078:	3f 93       	push	r19
    107a:	4f 93       	push	r20
    107c:	5f 93       	push	r21
    107e:	6f 93       	push	r22
    1080:	7f 93       	push	r23
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
    108a:	ef 93       	push	r30
    108c:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1094:	89 e7       	ldi	r24, 0x79	; 121
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	c9 de       	rcall	.-622    	; 0xe2c <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    109a:	97 fd       	sbrc	r25, 7
    109c:	18 c0       	rjmp	.+48     	; 0x10ce <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    109e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    10a2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__avr_in_isr>
    10a6:	fe d9       	rcall	.-3076   	; 0x4a4 <chSchIsPreemptionRequired>
    10a8:	81 11       	cpse	r24, r1
    10aa:	0c da       	rcall	.-3048   	; 0x4c4 <chSchDoReschedule>
}
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    10ce:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10d2:	8f 7d       	andi	r24, 0xDF	; 223
    10d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10d8:	e4 cf       	rjmp	.-56     	; 0x10a2 <__vector_19+0x36>

000010da <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    10da:	4f ee       	ldi	r20, 0xEF	; 239
    10dc:	57 e0       	ldi	r21, 0x07	; 7
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	89 e7       	ldi	r24, 0x79	; 121
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	53 ce       	rjmp	.-858    	; 0xd8e <sdObjectInit>

000010e8 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    10e8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    10ec:	1d ba       	out	0x1d, r1	; 29
    10ee:	08 95       	ret

000010f0 <main>:
    10f0:	e1 db       	rcall	.-2110   	; 0x8b4 <halInit>
    10f2:	0e 94 64 00 	call	0xc8	; 0xc8 <chSysInit>
    10f6:	46 e0       	ldi	r20, 0x06	; 6
    10f8:	60 e1       	ldi	r22, 0x10	; 16
    10fa:	89 e2       	ldi	r24, 0x29	; 41
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	bf de       	rcall	.-642    	; 0xe7e <_pal_lld_setgroupmode>
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	60 e2       	ldi	r22, 0x20	; 32
    1104:	89 e2       	ldi	r24, 0x29	; 41
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	ba de       	rcall	.-652    	; 0xe7e <_pal_lld_setgroupmode>
    110a:	09 c0       	rjmp	.+18     	; 0x111e <main+0x2e>
    110c:	2d 9a       	sbi	0x05, 5	; 5
    110e:	5c 9a       	sbi	0x0b, 4	; 11
    1110:	84 e8       	ldi	r24, 0x84	; 132
    1112:	9e e1       	ldi	r25, 0x1E	; 30
    1114:	d7 da       	rcall	.-2642   	; 0x6c4 <chThdSleep>
    1116:	5c 98       	cbi	0x0b, 4	; 11
    1118:	84 e8       	ldi	r24, 0x84	; 132
    111a:	9e e1       	ldi	r25, 0x1E	; 30
    111c:	d3 da       	rcall	.-2650   	; 0x6c4 <chThdSleep>
    111e:	4d 99       	sbic	0x09, 5	; 9
    1120:	f5 cf       	rjmp	.-22     	; 0x110c <main+0x1c>
    1122:	2d 98       	cbi	0x05, 5	; 5
    1124:	f4 cf       	rjmp	.-24     	; 0x110e <main+0x1e>

00001126 <vfprintf>:
    1126:	ab e0       	ldi	r26, 0x0B	; 11
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e8 e9       	ldi	r30, 0x98	; 152
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	d3 c2       	rjmp	.+1446   	; 0x16d6 <__prologue_saves__+0x8>
    1130:	6c 01       	movw	r12, r24
    1132:	7b 01       	movw	r14, r22
    1134:	3a 01       	movw	r6, r20
    1136:	fc 01       	movw	r30, r24
    1138:	17 82       	std	Z+7, r1	; 0x07
    113a:	16 82       	std	Z+6, r1	; 0x06
    113c:	83 81       	ldd	r24, Z+3	; 0x03
    113e:	81 ff       	sbrs	r24, 1
    1140:	f9 c0       	rjmp	.+498    	; 0x1334 <vfprintf+0x20e>
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	4c 01       	movw	r8, r24
    1148:	f6 01       	movw	r30, r12
    114a:	b3 80       	ldd	r11, Z+3	; 0x03
    114c:	f7 01       	movw	r30, r14
    114e:	b3 fc       	sbrc	r11, 3
    1150:	05 91       	lpm	r16, Z+
    1152:	b3 fe       	sbrs	r11, 3
    1154:	01 91       	ld	r16, Z+
    1156:	7f 01       	movw	r14, r30
    1158:	00 23       	and	r16, r16
    115a:	09 f4       	brne	.+2      	; 0x115e <vfprintf+0x38>
    115c:	e7 c0       	rjmp	.+462    	; 0x132c <vfprintf+0x206>
    115e:	05 32       	cpi	r16, 0x25	; 37
    1160:	49 f4       	brne	.+18     	; 0x1174 <vfprintf+0x4e>
    1162:	b3 fc       	sbrc	r11, 3
    1164:	05 91       	lpm	r16, Z+
    1166:	b3 fe       	sbrs	r11, 3
    1168:	01 91       	ld	r16, Z+
    116a:	7f 01       	movw	r14, r30
    116c:	05 32       	cpi	r16, 0x25	; 37
    116e:	11 f0       	breq	.+4      	; 0x1174 <vfprintf+0x4e>
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <vfprintf+0x7c>
    1174:	b6 01       	movw	r22, r12
    1176:	80 2f       	mov	r24, r16
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	3a d3       	rcall	.+1652   	; 0x17f0 <fputc>
    117c:	53 01       	movw	r10, r6
    117e:	35 01       	movw	r6, r10
    1180:	e3 cf       	rjmp	.-58     	; 0x1148 <vfprintf+0x22>
    1182:	00 23       	and	r16, r16
    1184:	09 f4       	brne	.+2      	; 0x1188 <vfprintf+0x62>
    1186:	d2 c0       	rjmp	.+420    	; 0x132c <vfprintf+0x206>
    1188:	60 2f       	mov	r22, r16
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	8f e6       	ldi	r24, 0x6F	; 111
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	dd d2       	rcall	.+1466   	; 0x174c <strchr_P>
    1192:	89 2b       	or	r24, r25
    1194:	49 f0       	breq	.+18     	; 0x11a8 <vfprintf+0x82>
    1196:	f7 01       	movw	r30, r14
    1198:	b3 fc       	sbrc	r11, 3
    119a:	05 91       	lpm	r16, Z+
    119c:	b3 fe       	sbrs	r11, 3
    119e:	01 91       	ld	r16, Z+
    11a0:	7f 01       	movw	r14, r30
    11a2:	17 ff       	sbrs	r17, 7
    11a4:	ee cf       	rjmp	.-36     	; 0x1182 <vfprintf+0x5c>
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <vfprintf+0x8a>
    11a8:	03 32       	cpi	r16, 0x23	; 35
    11aa:	39 f0       	breq	.+14     	; 0x11ba <vfprintf+0x94>
    11ac:	0c 36       	cpi	r16, 0x6C	; 108
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <vfprintf+0x90>
    11b0:	01 11       	cpse	r16, r1
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <vfprintf+0x98>
    11b4:	bb c0       	rjmp	.+374    	; 0x132c <vfprintf+0x206>
    11b6:	10 68       	ori	r17, 0x80	; 128
    11b8:	ee cf       	rjmp	.-36     	; 0x1196 <vfprintf+0x70>
    11ba:	10 e1       	ldi	r17, 0x10	; 16
    11bc:	ec cf       	rjmp	.-40     	; 0x1196 <vfprintf+0x70>
    11be:	60 2f       	mov	r22, r16
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	88 e6       	ldi	r24, 0x68	; 104
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	c2 d2       	rcall	.+1412   	; 0x174c <strchr_P>
    11c8:	89 2b       	or	r24, r25
    11ca:	41 f0       	breq	.+16     	; 0x11dc <vfprintf+0xb6>
    11cc:	53 01       	movw	r10, r6
    11ce:	f4 e0       	ldi	r31, 0x04	; 4
    11d0:	af 0e       	add	r10, r31
    11d2:	b1 1c       	adc	r11, r1
    11d4:	b6 01       	movw	r22, r12
    11d6:	8f e3       	ldi	r24, 0x3F	; 63
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	10 c0       	rjmp	.+32     	; 0x11fc <vfprintf+0xd6>
    11dc:	03 36       	cpi	r16, 0x63	; 99
    11de:	31 f0       	breq	.+12     	; 0x11ec <vfprintf+0xc6>
    11e0:	03 37       	cpi	r16, 0x73	; 115
    11e2:	71 f0       	breq	.+28     	; 0x1200 <vfprintf+0xda>
    11e4:	03 35       	cpi	r16, 0x53	; 83
    11e6:	01 f5       	brne	.+64     	; 0x1228 <vfprintf+0x102>
    11e8:	11 60       	ori	r17, 0x01	; 1
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <vfprintf+0xda>
    11ec:	53 01       	movw	r10, r6
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	a8 0e       	add	r10, r24
    11f2:	b1 1c       	adc	r11, r1
    11f4:	b6 01       	movw	r22, r12
    11f6:	f3 01       	movw	r30, r6
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	f9 d2       	rcall	.+1522   	; 0x17f0 <fputc>
    11fe:	bf cf       	rjmp	.-130    	; 0x117e <vfprintf+0x58>
    1200:	53 01       	movw	r10, r6
    1202:	f2 e0       	ldi	r31, 0x02	; 2
    1204:	af 0e       	add	r10, r31
    1206:	b1 1c       	adc	r11, r1
    1208:	f3 01       	movw	r30, r6
    120a:	60 80       	ld	r6, Z
    120c:	71 80       	ldd	r7, Z+1	; 0x01
    120e:	f3 01       	movw	r30, r6
    1210:	10 fd       	sbrc	r17, 0
    1212:	85 91       	lpm	r24, Z+
    1214:	10 ff       	sbrs	r17, 0
    1216:	81 91       	ld	r24, Z+
    1218:	3f 01       	movw	r6, r30
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <vfprintf+0xfa>
    121e:	af cf       	rjmp	.-162    	; 0x117e <vfprintf+0x58>
    1220:	b6 01       	movw	r22, r12
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	e5 d2       	rcall	.+1482   	; 0x17f0 <fputc>
    1226:	f3 cf       	rjmp	.-26     	; 0x120e <vfprintf+0xe8>
    1228:	04 36       	cpi	r16, 0x64	; 100
    122a:	11 f0       	breq	.+4      	; 0x1230 <vfprintf+0x10a>
    122c:	09 36       	cpi	r16, 0x69	; 105
    122e:	21 f5       	brne	.+72     	; 0x1278 <vfprintf+0x152>
    1230:	53 01       	movw	r10, r6
    1232:	17 ff       	sbrs	r17, 7
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <vfprintf+0x122>
    1236:	f4 e0       	ldi	r31, 0x04	; 4
    1238:	af 0e       	add	r10, r31
    123a:	b1 1c       	adc	r11, r1
    123c:	f3 01       	movw	r30, r6
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	0a c0       	rjmp	.+20     	; 0x125c <vfprintf+0x136>
    1248:	f2 e0       	ldi	r31, 0x02	; 2
    124a:	af 0e       	add	r10, r31
    124c:	b1 1c       	adc	r11, r1
    124e:	f3 01       	movw	r30, r6
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	07 2e       	mov	r0, r23
    1256:	00 0c       	add	r0, r0
    1258:	88 0b       	sbc	r24, r24
    125a:	99 0b       	sbc	r25, r25
    125c:	1f 7e       	andi	r17, 0xEF	; 239
    125e:	97 ff       	sbrs	r25, 7
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <vfprintf+0x14c>
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	10 64       	ori	r17, 0x40	; 64
    1272:	2a e0       	ldi	r18, 0x0A	; 10
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	30 c0       	rjmp	.+96     	; 0x12d8 <vfprintf+0x1b2>
    1278:	00 37       	cpi	r16, 0x70	; 112
    127a:	91 f0       	breq	.+36     	; 0x12a0 <vfprintf+0x17a>
    127c:	40 f4       	brcc	.+16     	; 0x128e <vfprintf+0x168>
    127e:	08 35       	cpi	r16, 0x58	; 88
    1280:	a1 f0       	breq	.+40     	; 0x12aa <vfprintf+0x184>
    1282:	0f 36       	cpi	r16, 0x6F	; 111
    1284:	09 f0       	breq	.+2      	; 0x1288 <vfprintf+0x162>
    1286:	52 c0       	rjmp	.+164    	; 0x132c <vfprintf+0x206>
    1288:	28 e0       	ldi	r18, 0x08	; 8
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	11 c0       	rjmp	.+34     	; 0x12b0 <vfprintf+0x18a>
    128e:	05 37       	cpi	r16, 0x75	; 117
    1290:	19 f0       	breq	.+6      	; 0x1298 <vfprintf+0x172>
    1292:	08 37       	cpi	r16, 0x78	; 120
    1294:	31 f0       	breq	.+12     	; 0x12a2 <vfprintf+0x17c>
    1296:	4a c0       	rjmp	.+148    	; 0x132c <vfprintf+0x206>
    1298:	1f 7e       	andi	r17, 0xEF	; 239
    129a:	2a e0       	ldi	r18, 0x0A	; 10
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <vfprintf+0x18a>
    12a0:	10 61       	ori	r17, 0x10	; 16
    12a2:	14 62       	ori	r17, 0x24	; 36
    12a4:	20 e1       	ldi	r18, 0x10	; 16
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vfprintf+0x18a>
    12aa:	14 60       	ori	r17, 0x04	; 4
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	32 e0       	ldi	r19, 0x02	; 2
    12b0:	53 01       	movw	r10, r6
    12b2:	17 ff       	sbrs	r17, 7
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <vfprintf+0x1a2>
    12b6:	f4 e0       	ldi	r31, 0x04	; 4
    12b8:	af 0e       	add	r10, r31
    12ba:	b1 1c       	adc	r11, r1
    12bc:	f3 01       	movw	r30, r6
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x1b2>
    12c8:	f2 e0       	ldi	r31, 0x02	; 2
    12ca:	af 0e       	add	r10, r31
    12cc:	b1 1c       	adc	r11, r1
    12ce:	f3 01       	movw	r30, r6
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a4 01       	movw	r20, r8
    12da:	df d2       	rcall	.+1470   	; 0x189a <__ultoa_invert>
    12dc:	08 2f       	mov	r16, r24
    12de:	08 19       	sub	r16, r8
    12e0:	16 ff       	sbrs	r17, 6
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <vfprintf+0x1c6>
    12e4:	b6 01       	movw	r22, r12
    12e6:	8d e2       	ldi	r24, 0x2D	; 45
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	82 d2       	rcall	.+1284   	; 0x17f0 <fputc>
    12ec:	14 ff       	sbrs	r17, 4
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <vfprintf+0x1f0>
    12f0:	fe 01       	movw	r30, r28
    12f2:	e0 0f       	add	r30, r16
    12f4:	f1 1d       	adc	r31, r1
    12f6:	80 81       	ld	r24, Z
    12f8:	80 33       	cpi	r24, 0x30	; 48
    12fa:	69 f0       	breq	.+26     	; 0x1316 <vfprintf+0x1f0>
    12fc:	b6 01       	movw	r22, r12
    12fe:	80 e3       	ldi	r24, 0x30	; 48
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	76 d2       	rcall	.+1260   	; 0x17f0 <fputc>
    1304:	12 ff       	sbrs	r17, 2
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <vfprintf+0x1f0>
    1308:	10 72       	andi	r17, 0x20	; 32
    130a:	81 2f       	mov	r24, r17
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	b6 01       	movw	r22, r12
    1310:	88 5a       	subi	r24, 0xA8	; 168
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	6d d2       	rcall	.+1242   	; 0x17f0 <fputc>
    1316:	01 50       	subi	r16, 0x01	; 1
    1318:	f4 01       	movw	r30, r8
    131a:	e0 0f       	add	r30, r16
    131c:	f1 1d       	adc	r31, r1
    131e:	80 81       	ld	r24, Z
    1320:	b6 01       	movw	r22, r12
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	65 d2       	rcall	.+1226   	; 0x17f0 <fputc>
    1326:	01 11       	cpse	r16, r1
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <vfprintf+0x1f0>
    132a:	29 cf       	rjmp	.-430    	; 0x117e <vfprintf+0x58>
    132c:	f6 01       	movw	r30, r12
    132e:	86 81       	ldd	r24, Z+6	; 0x06
    1330:	97 81       	ldd	r25, Z+7	; 0x07
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <vfprintf+0x212>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	2b 96       	adiw	r28, 0x0b	; 11
    133a:	ee e0       	ldi	r30, 0x0E	; 14
    133c:	e8 c1       	rjmp	.+976    	; 0x170e <__epilogue_restores__+0x8>

0000133e <putval>:
    133e:	20 fd       	sbrc	r18, 0
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <putval+0x16>
    1342:	fc 01       	movw	r30, r24
    1344:	23 fd       	sbrc	r18, 3
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <putval+0x14>
    1348:	22 ff       	sbrs	r18, 2
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <putval+0x12>
    134c:	73 83       	std	Z+3, r23	; 0x03
    134e:	62 83       	std	Z+2, r22	; 0x02
    1350:	51 83       	std	Z+1, r21	; 0x01
    1352:	40 83       	st	Z, r20
    1354:	08 95       	ret

00001356 <mulacc>:
    1356:	44 fd       	sbrc	r20, 4
    1358:	17 c0       	rjmp	.+46     	; 0x1388 <mulacc+0x32>
    135a:	46 fd       	sbrc	r20, 6
    135c:	17 c0       	rjmp	.+46     	; 0x138c <mulacc+0x36>
    135e:	ab 01       	movw	r20, r22
    1360:	bc 01       	movw	r22, r24
    1362:	da 01       	movw	r26, r20
    1364:	fb 01       	movw	r30, r22
    1366:	aa 0f       	add	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	ee 1f       	adc	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	10 94       	com	r1
    1370:	d1 f7       	brne	.-12     	; 0x1366 <mulacc+0x10>
    1372:	4a 0f       	add	r20, r26
    1374:	5b 1f       	adc	r21, r27
    1376:	6e 1f       	adc	r22, r30
    1378:	7f 1f       	adc	r23, r31
    137a:	cb 01       	movw	r24, r22
    137c:	ba 01       	movw	r22, r20
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	09 c0       	rjmp	.+18     	; 0x139a <mulacc+0x44>
    1388:	33 e0       	ldi	r19, 0x03	; 3
    138a:	01 c0       	rjmp	.+2      	; 0x138e <mulacc+0x38>
    138c:	34 e0       	ldi	r19, 0x04	; 4
    138e:	66 0f       	add	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	31 50       	subi	r19, 0x01	; 1
    1398:	d1 f7       	brne	.-12     	; 0x138e <mulacc+0x38>
    139a:	62 0f       	add	r22, r18
    139c:	71 1d       	adc	r23, r1
    139e:	81 1d       	adc	r24, r1
    13a0:	91 1d       	adc	r25, r1
    13a2:	08 95       	ret

000013a4 <skip_spaces>:
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	8c 01       	movw	r16, r24
    13ae:	c8 01       	movw	r24, r16
    13b0:	e1 d1       	rcall	.+962    	; 0x1774 <fgetc>
    13b2:	ec 01       	movw	r28, r24
    13b4:	97 fd       	sbrc	r25, 7
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <skip_spaces+0x20>
    13b8:	c1 d1       	rcall	.+898    	; 0x173c <isspace>
    13ba:	89 2b       	or	r24, r25
    13bc:	c1 f7       	brne	.-16     	; 0x13ae <skip_spaces+0xa>
    13be:	b8 01       	movw	r22, r16
    13c0:	ce 01       	movw	r24, r28
    13c2:	52 d2       	rcall	.+1188   	; 0x1868 <ungetc>
    13c4:	ce 01       	movw	r24, r28
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <conv_int>:
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	8c 01       	movw	r16, r24
    13e6:	d6 2f       	mov	r29, r22
    13e8:	7a 01       	movw	r14, r20
    13ea:	b2 2e       	mov	r11, r18
    13ec:	c3 d1       	rcall	.+902    	; 0x1774 <fgetc>
    13ee:	9c 01       	movw	r18, r24
    13f0:	33 27       	eor	r19, r19
    13f2:	2b 32       	cpi	r18, 0x2B	; 43
    13f4:	31 05       	cpc	r19, r1
    13f6:	31 f0       	breq	.+12     	; 0x1404 <conv_int+0x34>
    13f8:	2d 32       	cpi	r18, 0x2D	; 45
    13fa:	31 05       	cpc	r19, r1
    13fc:	59 f4       	brne	.+22     	; 0x1414 <conv_int+0x44>
    13fe:	8b 2d       	mov	r24, r11
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	b8 2e       	mov	r11, r24
    1404:	d1 50       	subi	r29, 0x01	; 1
    1406:	11 f4       	brne	.+4      	; 0x140c <conv_int+0x3c>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	61 c0       	rjmp	.+194    	; 0x14ce <conv_int+0xfe>
    140c:	c8 01       	movw	r24, r16
    140e:	b2 d1       	rcall	.+868    	; 0x1774 <fgetc>
    1410:	97 fd       	sbrc	r25, 7
    1412:	fa cf       	rjmp	.-12     	; 0x1408 <conv_int+0x38>
    1414:	cb 2d       	mov	r28, r11
    1416:	cd 7f       	andi	r28, 0xFD	; 253
    1418:	2b 2d       	mov	r18, r11
    141a:	20 73       	andi	r18, 0x30	; 48
    141c:	f9 f4       	brne	.+62     	; 0x145c <conv_int+0x8c>
    141e:	80 33       	cpi	r24, 0x30	; 48
    1420:	e9 f4       	brne	.+58     	; 0x145c <conv_int+0x8c>
    1422:	aa 24       	eor	r10, r10
    1424:	aa 94       	dec	r10
    1426:	ad 0e       	add	r10, r29
    1428:	09 f4       	brne	.+2      	; 0x142c <conv_int+0x5c>
    142a:	3e c0       	rjmp	.+124    	; 0x14a8 <conv_int+0xd8>
    142c:	c8 01       	movw	r24, r16
    142e:	a2 d1       	rcall	.+836    	; 0x1774 <fgetc>
    1430:	97 fd       	sbrc	r25, 7
    1432:	3a c0       	rjmp	.+116    	; 0x14a8 <conv_int+0xd8>
    1434:	9c 01       	movw	r18, r24
    1436:	2f 7d       	andi	r18, 0xDF	; 223
    1438:	33 27       	eor	r19, r19
    143a:	28 35       	cpi	r18, 0x58	; 88
    143c:	31 05       	cpc	r19, r1
    143e:	41 f4       	brne	.+16     	; 0x1450 <conv_int+0x80>
    1440:	c2 64       	ori	r28, 0x42	; 66
    1442:	d2 50       	subi	r29, 0x02	; 2
    1444:	89 f1       	breq	.+98     	; 0x14a8 <conv_int+0xd8>
    1446:	c8 01       	movw	r24, r16
    1448:	95 d1       	rcall	.+810    	; 0x1774 <fgetc>
    144a:	97 ff       	sbrs	r25, 7
    144c:	07 c0       	rjmp	.+14     	; 0x145c <conv_int+0x8c>
    144e:	2c c0       	rjmp	.+88     	; 0x14a8 <conv_int+0xd8>
    1450:	b6 fe       	sbrs	r11, 6
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <conv_int+0x88>
    1454:	c2 60       	ori	r28, 0x02	; 2
    1456:	01 c0       	rjmp	.+2      	; 0x145a <conv_int+0x8a>
    1458:	c2 61       	ori	r28, 0x12	; 18
    145a:	da 2d       	mov	r29, r10
    145c:	81 2c       	mov	r8, r1
    145e:	91 2c       	mov	r9, r1
    1460:	54 01       	movw	r10, r8
    1462:	20 ed       	ldi	r18, 0xD0	; 208
    1464:	28 0f       	add	r18, r24
    1466:	28 30       	cpi	r18, 0x08	; 8
    1468:	78 f0       	brcs	.+30     	; 0x1488 <conv_int+0xb8>
    146a:	c4 ff       	sbrs	r28, 4
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <conv_int+0xa4>
    146e:	b8 01       	movw	r22, r16
    1470:	fb d1       	rcall	.+1014   	; 0x1868 <ungetc>
    1472:	17 c0       	rjmp	.+46     	; 0x14a2 <conv_int+0xd2>
    1474:	2a 30       	cpi	r18, 0x0A	; 10
    1476:	40 f0       	brcs	.+16     	; 0x1488 <conv_int+0xb8>
    1478:	c6 ff       	sbrs	r28, 6
    147a:	f9 cf       	rjmp	.-14     	; 0x146e <conv_int+0x9e>
    147c:	2f 7d       	andi	r18, 0xDF	; 223
    147e:	3f ee       	ldi	r19, 0xEF	; 239
    1480:	32 0f       	add	r19, r18
    1482:	36 30       	cpi	r19, 0x06	; 6
    1484:	a0 f7       	brcc	.-24     	; 0x146e <conv_int+0x9e>
    1486:	27 50       	subi	r18, 0x07	; 7
    1488:	4c 2f       	mov	r20, r28
    148a:	c5 01       	movw	r24, r10
    148c:	b4 01       	movw	r22, r8
    148e:	63 df       	rcall	.-314    	; 0x1356 <mulacc>
    1490:	4b 01       	movw	r8, r22
    1492:	5c 01       	movw	r10, r24
    1494:	c2 60       	ori	r28, 0x02	; 2
    1496:	d1 50       	subi	r29, 0x01	; 1
    1498:	51 f0       	breq	.+20     	; 0x14ae <conv_int+0xde>
    149a:	c8 01       	movw	r24, r16
    149c:	6b d1       	rcall	.+726    	; 0x1774 <fgetc>
    149e:	97 ff       	sbrs	r25, 7
    14a0:	e0 cf       	rjmp	.-64     	; 0x1462 <conv_int+0x92>
    14a2:	c1 fd       	sbrc	r28, 1
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <conv_int+0xde>
    14a6:	b0 cf       	rjmp	.-160    	; 0x1408 <conv_int+0x38>
    14a8:	81 2c       	mov	r8, r1
    14aa:	91 2c       	mov	r9, r1
    14ac:	54 01       	movw	r10, r8
    14ae:	c7 ff       	sbrs	r28, 7
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <conv_int+0xf2>
    14b2:	b0 94       	com	r11
    14b4:	a0 94       	com	r10
    14b6:	90 94       	com	r9
    14b8:	80 94       	com	r8
    14ba:	81 1c       	adc	r8, r1
    14bc:	91 1c       	adc	r9, r1
    14be:	a1 1c       	adc	r10, r1
    14c0:	b1 1c       	adc	r11, r1
    14c2:	2c 2f       	mov	r18, r28
    14c4:	b5 01       	movw	r22, r10
    14c6:	a4 01       	movw	r20, r8
    14c8:	c7 01       	movw	r24, r14
    14ca:	39 df       	rcall	.-398    	; 0x133e <putval>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	08 95       	ret

000014e4 <vfscanf>:
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e7       	ldi	r30, 0x77	; 119
    14ea:	fa e0       	ldi	r31, 0x0A	; 10
    14ec:	f3 c0       	rjmp	.+486    	; 0x16d4 <__prologue_saves__+0x6>
    14ee:	6c 01       	movw	r12, r24
    14f0:	eb 01       	movw	r28, r22
    14f2:	5a 01       	movw	r10, r20
    14f4:	fc 01       	movw	r30, r24
    14f6:	17 82       	std	Z+7, r1	; 0x07
    14f8:	16 82       	std	Z+6, r1	; 0x06
    14fa:	51 2c       	mov	r5, r1
    14fc:	f6 01       	movw	r30, r12
    14fe:	f3 80       	ldd	r15, Z+3	; 0x03
    1500:	fe 01       	movw	r30, r28
    1502:	f3 fc       	sbrc	r15, 3
    1504:	85 91       	lpm	r24, Z+
    1506:	f3 fe       	sbrs	r15, 3
    1508:	81 91       	ld	r24, Z+
    150a:	18 2f       	mov	r17, r24
    150c:	ef 01       	movw	r28, r30
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <vfscanf+0x30>
    1512:	d4 c0       	rjmp	.+424    	; 0x16bc <vfscanf+0x1d8>
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	12 d1       	rcall	.+548    	; 0x173c <isspace>
    1518:	89 2b       	or	r24, r25
    151a:	19 f0       	breq	.+6      	; 0x1522 <vfscanf+0x3e>
    151c:	c6 01       	movw	r24, r12
    151e:	42 df       	rcall	.-380    	; 0x13a4 <skip_spaces>
    1520:	ed cf       	rjmp	.-38     	; 0x14fc <vfscanf+0x18>
    1522:	15 32       	cpi	r17, 0x25	; 37
    1524:	41 f4       	brne	.+16     	; 0x1536 <vfscanf+0x52>
    1526:	fe 01       	movw	r30, r28
    1528:	f3 fc       	sbrc	r15, 3
    152a:	15 91       	lpm	r17, Z+
    152c:	f3 fe       	sbrs	r15, 3
    152e:	11 91       	ld	r17, Z+
    1530:	ef 01       	movw	r28, r30
    1532:	15 32       	cpi	r17, 0x25	; 37
    1534:	71 f4       	brne	.+28     	; 0x1552 <vfscanf+0x6e>
    1536:	c6 01       	movw	r24, r12
    1538:	1d d1       	rcall	.+570    	; 0x1774 <fgetc>
    153a:	97 fd       	sbrc	r25, 7
    153c:	bd c0       	rjmp	.+378    	; 0x16b8 <vfscanf+0x1d4>
    153e:	41 2f       	mov	r20, r17
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	9c 01       	movw	r18, r24
    1544:	33 27       	eor	r19, r19
    1546:	24 17       	cp	r18, r20
    1548:	35 07       	cpc	r19, r21
    154a:	c1 f2       	breq	.-80     	; 0x14fc <vfscanf+0x18>
    154c:	b6 01       	movw	r22, r12
    154e:	8c d1       	rcall	.+792    	; 0x1868 <ungetc>
    1550:	b5 c0       	rjmp	.+362    	; 0x16bc <vfscanf+0x1d8>
    1552:	1a 32       	cpi	r17, 0x2A	; 42
    1554:	39 f4       	brne	.+14     	; 0x1564 <vfscanf+0x80>
    1556:	f3 fc       	sbrc	r15, 3
    1558:	15 91       	lpm	r17, Z+
    155a:	f3 fe       	sbrs	r15, 3
    155c:	11 91       	ld	r17, Z+
    155e:	ef 01       	movw	r28, r30
    1560:	01 e0       	ldi	r16, 0x01	; 1
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <vfscanf+0x82>
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	e1 2c       	mov	r14, r1
    1568:	20 ed       	ldi	r18, 0xD0	; 208
    156a:	21 0f       	add	r18, r17
    156c:	2a 30       	cpi	r18, 0x0A	; 10
    156e:	78 f4       	brcc	.+30     	; 0x158e <vfscanf+0xaa>
    1570:	02 60       	ori	r16, 0x02	; 2
    1572:	6e 2d       	mov	r22, r14
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	ec de       	rcall	.-552    	; 0x1356 <mulacc>
    157e:	e6 2e       	mov	r14, r22
    1580:	fe 01       	movw	r30, r28
    1582:	f3 fc       	sbrc	r15, 3
    1584:	15 91       	lpm	r17, Z+
    1586:	f3 fe       	sbrs	r15, 3
    1588:	11 91       	ld	r17, Z+
    158a:	ef 01       	movw	r28, r30
    158c:	ed cf       	rjmp	.-38     	; 0x1568 <vfscanf+0x84>
    158e:	01 ff       	sbrs	r16, 1
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <vfscanf+0xb4>
    1592:	e1 10       	cpse	r14, r1
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfscanf+0xb8>
    1596:	92 c0       	rjmp	.+292    	; 0x16bc <vfscanf+0x1d8>
    1598:	ee 24       	eor	r14, r14
    159a:	ea 94       	dec	r14
    159c:	18 36       	cpi	r17, 0x68	; 104
    159e:	19 f0       	breq	.+6      	; 0x15a6 <vfscanf+0xc2>
    15a0:	1c 36       	cpi	r17, 0x6C	; 108
    15a2:	51 f0       	breq	.+20     	; 0x15b8 <vfscanf+0xd4>
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <vfscanf+0xe2>
    15a6:	fe 01       	movw	r30, r28
    15a8:	f3 fc       	sbrc	r15, 3
    15aa:	15 91       	lpm	r17, Z+
    15ac:	f3 fe       	sbrs	r15, 3
    15ae:	11 91       	ld	r17, Z+
    15b0:	ef 01       	movw	r28, r30
    15b2:	18 36       	cpi	r17, 0x68	; 104
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <vfscanf+0xe2>
    15b6:	08 60       	ori	r16, 0x08	; 8
    15b8:	04 60       	ori	r16, 0x04	; 4
    15ba:	fe 01       	movw	r30, r28
    15bc:	f3 fc       	sbrc	r15, 3
    15be:	15 91       	lpm	r17, Z+
    15c0:	f3 fe       	sbrs	r15, 3
    15c2:	11 91       	ld	r17, Z+
    15c4:	ef 01       	movw	r28, r30
    15c6:	11 23       	and	r17, r17
    15c8:	09 f4       	brne	.+2      	; 0x15cc <vfscanf+0xe8>
    15ca:	78 c0       	rjmp	.+240    	; 0x16bc <vfscanf+0x1d8>
    15cc:	61 2f       	mov	r22, r17
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	8f e7       	ldi	r24, 0x7F	; 127
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	bb d0       	rcall	.+374    	; 0x174c <strchr_P>
    15d6:	89 2b       	or	r24, r25
    15d8:	09 f4       	brne	.+2      	; 0x15dc <vfscanf+0xf8>
    15da:	70 c0       	rjmp	.+224    	; 0x16bc <vfscanf+0x1d8>
    15dc:	00 fd       	sbrc	r16, 0
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <vfscanf+0x10a>
    15e0:	f5 01       	movw	r30, r10
    15e2:	80 80       	ld	r8, Z
    15e4:	91 80       	ldd	r9, Z+1	; 0x01
    15e6:	c5 01       	movw	r24, r10
    15e8:	02 96       	adiw	r24, 0x02	; 2
    15ea:	5c 01       	movw	r10, r24
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfscanf+0x10e>
    15ee:	81 2c       	mov	r8, r1
    15f0:	91 2c       	mov	r9, r1
    15f2:	1e 36       	cpi	r17, 0x6E	; 110
    15f4:	49 f4       	brne	.+18     	; 0x1608 <vfscanf+0x124>
    15f6:	f6 01       	movw	r30, r12
    15f8:	46 81       	ldd	r20, Z+6	; 0x06
    15fa:	57 81       	ldd	r21, Z+7	; 0x07
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	20 2f       	mov	r18, r16
    1602:	c4 01       	movw	r24, r8
    1604:	9c de       	rcall	.-712    	; 0x133e <putval>
    1606:	7a cf       	rjmp	.-268    	; 0x14fc <vfscanf+0x18>
    1608:	13 36       	cpi	r17, 0x63	; 99
    160a:	a1 f4       	brne	.+40     	; 0x1634 <vfscanf+0x150>
    160c:	01 fd       	sbrc	r16, 1
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <vfscanf+0x130>
    1610:	ee 24       	eor	r14, r14
    1612:	e3 94       	inc	r14
    1614:	c6 01       	movw	r24, r12
    1616:	ae d0       	rcall	.+348    	; 0x1774 <fgetc>
    1618:	97 fd       	sbrc	r25, 7
    161a:	4e c0       	rjmp	.+156    	; 0x16b8 <vfscanf+0x1d4>
    161c:	81 14       	cp	r8, r1
    161e:	91 04       	cpc	r9, r1
    1620:	29 f0       	breq	.+10     	; 0x162c <vfscanf+0x148>
    1622:	f4 01       	movw	r30, r8
    1624:	80 83       	st	Z, r24
    1626:	c4 01       	movw	r24, r8
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	4c 01       	movw	r8, r24
    162c:	ea 94       	dec	r14
    162e:	e1 10       	cpse	r14, r1
    1630:	f1 cf       	rjmp	.-30     	; 0x1614 <vfscanf+0x130>
    1632:	3e c0       	rjmp	.+124    	; 0x16b0 <vfscanf+0x1cc>
    1634:	c6 01       	movw	r24, r12
    1636:	b6 de       	rcall	.-660    	; 0x13a4 <skip_spaces>
    1638:	97 fd       	sbrc	r25, 7
    163a:	3e c0       	rjmp	.+124    	; 0x16b8 <vfscanf+0x1d4>
    163c:	1f 36       	cpi	r17, 0x6F	; 111
    163e:	49 f1       	breq	.+82     	; 0x1692 <vfscanf+0x1ae>
    1640:	28 f4       	brcc	.+10     	; 0x164c <vfscanf+0x168>
    1642:	14 36       	cpi	r17, 0x64	; 100
    1644:	21 f1       	breq	.+72     	; 0x168e <vfscanf+0x1aa>
    1646:	19 36       	cpi	r17, 0x69	; 105
    1648:	39 f1       	breq	.+78     	; 0x1698 <vfscanf+0x1b4>
    164a:	25 c0       	rjmp	.+74     	; 0x1696 <vfscanf+0x1b2>
    164c:	13 37       	cpi	r17, 0x73	; 115
    164e:	71 f0       	breq	.+28     	; 0x166c <vfscanf+0x188>
    1650:	15 37       	cpi	r17, 0x75	; 117
    1652:	e9 f0       	breq	.+58     	; 0x168e <vfscanf+0x1aa>
    1654:	20 c0       	rjmp	.+64     	; 0x1696 <vfscanf+0x1b2>
    1656:	81 14       	cp	r8, r1
    1658:	91 04       	cpc	r9, r1
    165a:	29 f0       	breq	.+10     	; 0x1666 <vfscanf+0x182>
    165c:	f4 01       	movw	r30, r8
    165e:	60 82       	st	Z, r6
    1660:	c4 01       	movw	r24, r8
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	4c 01       	movw	r8, r24
    1666:	ea 94       	dec	r14
    1668:	ee 20       	and	r14, r14
    166a:	59 f0       	breq	.+22     	; 0x1682 <vfscanf+0x19e>
    166c:	c6 01       	movw	r24, r12
    166e:	82 d0       	rcall	.+260    	; 0x1774 <fgetc>
    1670:	3c 01       	movw	r6, r24
    1672:	97 fd       	sbrc	r25, 7
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfscanf+0x19e>
    1676:	62 d0       	rcall	.+196    	; 0x173c <isspace>
    1678:	89 2b       	or	r24, r25
    167a:	69 f3       	breq	.-38     	; 0x1656 <vfscanf+0x172>
    167c:	b6 01       	movw	r22, r12
    167e:	c3 01       	movw	r24, r6
    1680:	f3 d0       	rcall	.+486    	; 0x1868 <ungetc>
    1682:	81 14       	cp	r8, r1
    1684:	91 04       	cpc	r9, r1
    1686:	a1 f0       	breq	.+40     	; 0x16b0 <vfscanf+0x1cc>
    1688:	f4 01       	movw	r30, r8
    168a:	10 82       	st	Z, r1
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <vfscanf+0x1cc>
    168e:	00 62       	ori	r16, 0x20	; 32
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <vfscanf+0x1b4>
    1692:	00 61       	ori	r16, 0x10	; 16
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <vfscanf+0x1b4>
    1696:	00 64       	ori	r16, 0x40	; 64
    1698:	20 2f       	mov	r18, r16
    169a:	a4 01       	movw	r20, r8
    169c:	6e 2d       	mov	r22, r14
    169e:	c6 01       	movw	r24, r12
    16a0:	97 de       	rcall	.-722    	; 0x13d0 <conv_int>
    16a2:	81 11       	cpse	r24, r1
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfscanf+0x1cc>
    16a6:	f6 01       	movw	r30, r12
    16a8:	83 81       	ldd	r24, Z+3	; 0x03
    16aa:	80 73       	andi	r24, 0x30	; 48
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <vfscanf+0x1d4>
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfscanf+0x1d8>
    16b0:	00 fd       	sbrc	r16, 0
    16b2:	24 cf       	rjmp	.-440    	; 0x14fc <vfscanf+0x18>
    16b4:	53 94       	inc	r5
    16b6:	22 cf       	rjmp	.-444    	; 0x14fc <vfscanf+0x18>
    16b8:	55 20       	and	r5, r5
    16ba:	19 f0       	breq	.+6      	; 0x16c2 <vfscanf+0x1de>
    16bc:	85 2d       	mov	r24, r5
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfscanf+0x1e2>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	9f ef       	ldi	r25, 0xFF	; 255
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	ef e0       	ldi	r30, 0x0F	; 15
    16cc:	1f c0       	rjmp	.+62     	; 0x170c <__epilogue_restores__+0x6>

000016ce <__prologue_saves__>:
    16ce:	2f 92       	push	r2
    16d0:	3f 92       	push	r3
    16d2:	4f 92       	push	r4
    16d4:	5f 92       	push	r5
    16d6:	6f 92       	push	r6
    16d8:	7f 92       	push	r7
    16da:	8f 92       	push	r8
    16dc:	9f 92       	push	r9
    16de:	af 92       	push	r10
    16e0:	bf 92       	push	r11
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	ca 1b       	sub	r28, r26
    16f8:	db 0b       	sbc	r29, r27
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	09 94       	ijmp

00001706 <__epilogue_restores__>:
    1706:	2a 88       	ldd	r2, Y+18	; 0x12
    1708:	39 88       	ldd	r3, Y+17	; 0x11
    170a:	48 88       	ldd	r4, Y+16	; 0x10
    170c:	5f 84       	ldd	r5, Y+15	; 0x0f
    170e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1710:	7d 84       	ldd	r7, Y+13	; 0x0d
    1712:	8c 84       	ldd	r8, Y+12	; 0x0c
    1714:	9b 84       	ldd	r9, Y+11	; 0x0b
    1716:	aa 84       	ldd	r10, Y+10	; 0x0a
    1718:	b9 84       	ldd	r11, Y+9	; 0x09
    171a:	c8 84       	ldd	r12, Y+8	; 0x08
    171c:	df 80       	ldd	r13, Y+7	; 0x07
    171e:	ee 80       	ldd	r14, Y+6	; 0x06
    1720:	fd 80       	ldd	r15, Y+5	; 0x05
    1722:	0c 81       	ldd	r16, Y+4	; 0x04
    1724:	1b 81       	ldd	r17, Y+3	; 0x03
    1726:	aa 81       	ldd	r26, Y+2	; 0x02
    1728:	b9 81       	ldd	r27, Y+1	; 0x01
    172a:	ce 0f       	add	r28, r30
    172c:	d1 1d       	adc	r29, r1
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	ed 01       	movw	r28, r26
    173a:	08 95       	ret

0000173c <isspace>:
    173c:	91 11       	cpse	r25, r1
    173e:	0b c1       	rjmp	.+534    	; 0x1956 <__ctype_isfalse>
    1740:	80 32       	cpi	r24, 0x20	; 32
    1742:	19 f0       	breq	.+6      	; 0x174a <isspace+0xe>
    1744:	89 50       	subi	r24, 0x09	; 9
    1746:	85 50       	subi	r24, 0x05	; 5
    1748:	d0 f7       	brcc	.-12     	; 0x173e <isspace+0x2>
    174a:	08 95       	ret

0000174c <strchr_P>:
    174c:	fc 01       	movw	r30, r24
    174e:	05 90       	lpm	r0, Z+
    1750:	06 16       	cp	r0, r22
    1752:	21 f0       	breq	.+8      	; 0x175c <strchr_P+0x10>
    1754:	00 20       	and	r0, r0
    1756:	d9 f7       	brne	.-10     	; 0x174e <strchr_P+0x2>
    1758:	c0 01       	movw	r24, r0
    175a:	08 95       	ret
    175c:	31 97       	sbiw	r30, 0x01	; 1
    175e:	cf 01       	movw	r24, r30
    1760:	08 95       	ret

00001762 <memcpy>:
    1762:	fb 01       	movw	r30, r22
    1764:	dc 01       	movw	r26, r24
    1766:	02 c0       	rjmp	.+4      	; 0x176c <memcpy+0xa>
    1768:	01 90       	ld	r0, Z+
    176a:	0d 92       	st	X+, r0
    176c:	41 50       	subi	r20, 0x01	; 1
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	d8 f7       	brcc	.-10     	; 0x1768 <memcpy+0x6>
    1772:	08 95       	ret

00001774 <fgetc>:
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ec 01       	movw	r28, r24
    177a:	2b 81       	ldd	r18, Y+3	; 0x03
    177c:	20 ff       	sbrs	r18, 0
    177e:	33 c0       	rjmp	.+102    	; 0x17e6 <fgetc+0x72>
    1780:	26 ff       	sbrs	r18, 6
    1782:	0a c0       	rjmp	.+20     	; 0x1798 <fgetc+0x24>
    1784:	2f 7b       	andi	r18, 0xBF	; 191
    1786:	2b 83       	std	Y+3, r18	; 0x03
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	9f 81       	ldd	r25, Y+7	; 0x07
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	9f 83       	std	Y+7, r25	; 0x07
    1790:	8e 83       	std	Y+6, r24	; 0x06
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	29 c0       	rjmp	.+82     	; 0x17ea <fgetc+0x76>
    1798:	22 ff       	sbrs	r18, 2
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <fgetc+0x46>
    179c:	e8 81       	ld	r30, Y
    179e:	f9 81       	ldd	r31, Y+1	; 0x01
    17a0:	80 81       	ld	r24, Z
    17a2:	08 2e       	mov	r0, r24
    17a4:	00 0c       	add	r0, r0
    17a6:	99 0b       	sbc	r25, r25
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <fgetc+0x3e>
    17ac:	20 62       	ori	r18, 0x20	; 32
    17ae:	2b 83       	std	Y+3, r18	; 0x03
    17b0:	1a c0       	rjmp	.+52     	; 0x17e6 <fgetc+0x72>
    17b2:	31 96       	adiw	r30, 0x01	; 1
    17b4:	f9 83       	std	Y+1, r31	; 0x01
    17b6:	e8 83       	st	Y, r30
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <fgetc+0x62>
    17ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    17bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    17be:	09 95       	icall
    17c0:	97 ff       	sbrs	r25, 7
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <fgetc+0x62>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	11 f0       	breq	.+4      	; 0x17ce <fgetc+0x5a>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <fgetc+0x5c>
    17ce:	80 e1       	ldi	r24, 0x10	; 16
    17d0:	82 2b       	or	r24, r18
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <fgetc+0x72>
    17d6:	2e 81       	ldd	r18, Y+6	; 0x06
    17d8:	3f 81       	ldd	r19, Y+7	; 0x07
    17da:	2f 5f       	subi	r18, 0xFF	; 255
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	3f 83       	std	Y+7, r19	; 0x07
    17e0:	2e 83       	std	Y+6, r18	; 0x06
    17e2:	99 27       	eor	r25, r25
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <fgetc+0x76>
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <fputc>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	fb 01       	movw	r30, r22
    17fa:	23 81       	ldd	r18, Z+3	; 0x03
    17fc:	21 fd       	sbrc	r18, 1
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <fputc+0x16>
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	9f ef       	ldi	r25, 0xFF	; 255
    1804:	2c c0       	rjmp	.+88     	; 0x185e <fputc+0x6e>
    1806:	22 ff       	sbrs	r18, 2
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <fputc+0x46>
    180a:	46 81       	ldd	r20, Z+6	; 0x06
    180c:	57 81       	ldd	r21, Z+7	; 0x07
    180e:	24 81       	ldd	r18, Z+4	; 0x04
    1810:	35 81       	ldd	r19, Z+5	; 0x05
    1812:	42 17       	cp	r20, r18
    1814:	53 07       	cpc	r21, r19
    1816:	44 f4       	brge	.+16     	; 0x1828 <fputc+0x38>
    1818:	a0 81       	ld	r26, Z
    181a:	b1 81       	ldd	r27, Z+1	; 0x01
    181c:	9d 01       	movw	r18, r26
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    1826:	8c 93       	st	X, r24
    1828:	26 81       	ldd	r18, Z+6	; 0x06
    182a:	37 81       	ldd	r19, Z+7	; 0x07
    182c:	2f 5f       	subi	r18, 0xFF	; 255
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	37 83       	std	Z+7, r19	; 0x07
    1832:	26 83       	std	Z+6, r18	; 0x06
    1834:	14 c0       	rjmp	.+40     	; 0x185e <fputc+0x6e>
    1836:	8b 01       	movw	r16, r22
    1838:	ec 01       	movw	r28, r24
    183a:	fb 01       	movw	r30, r22
    183c:	00 84       	ldd	r0, Z+8	; 0x08
    183e:	f1 85       	ldd	r31, Z+9	; 0x09
    1840:	e0 2d       	mov	r30, r0
    1842:	09 95       	icall
    1844:	89 2b       	or	r24, r25
    1846:	e1 f6       	brne	.-72     	; 0x1800 <fputc+0x10>
    1848:	d8 01       	movw	r26, r16
    184a:	16 96       	adiw	r26, 0x06	; 6
    184c:	8d 91       	ld	r24, X+
    184e:	9c 91       	ld	r25, X
    1850:	17 97       	sbiw	r26, 0x07	; 7
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	17 96       	adiw	r26, 0x07	; 7
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
    185a:	16 97       	sbiw	r26, 0x06	; 6
    185c:	ce 01       	movw	r24, r28
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <ungetc>:
    1868:	fb 01       	movw	r30, r22
    186a:	23 81       	ldd	r18, Z+3	; 0x03
    186c:	20 ff       	sbrs	r18, 0
    186e:	12 c0       	rjmp	.+36     	; 0x1894 <ungetc+0x2c>
    1870:	26 fd       	sbrc	r18, 6
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <ungetc+0x2c>
    1874:	8f 3f       	cpi	r24, 0xFF	; 255
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	93 07       	cpc	r25, r19
    187a:	61 f0       	breq	.+24     	; 0x1894 <ungetc+0x2c>
    187c:	82 83       	std	Z+2, r24	; 0x02
    187e:	2f 7d       	andi	r18, 0xDF	; 223
    1880:	20 64       	ori	r18, 0x40	; 64
    1882:	23 83       	std	Z+3, r18	; 0x03
    1884:	26 81       	ldd	r18, Z+6	; 0x06
    1886:	37 81       	ldd	r19, Z+7	; 0x07
    1888:	21 50       	subi	r18, 0x01	; 1
    188a:	31 09       	sbc	r19, r1
    188c:	37 83       	std	Z+7, r19	; 0x07
    188e:	26 83       	std	Z+6, r18	; 0x06
    1890:	99 27       	eor	r25, r25
    1892:	08 95       	ret
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	9f ef       	ldi	r25, 0xFF	; 255
    1898:	08 95       	ret

0000189a <__ultoa_invert>:
    189a:	fa 01       	movw	r30, r20
    189c:	aa 27       	eor	r26, r26
    189e:	28 30       	cpi	r18, 0x08	; 8
    18a0:	51 f1       	breq	.+84     	; 0x18f6 <__ultoa_invert+0x5c>
    18a2:	20 31       	cpi	r18, 0x10	; 16
    18a4:	81 f1       	breq	.+96     	; 0x1906 <__ultoa_invert+0x6c>
    18a6:	e8 94       	clt
    18a8:	6f 93       	push	r22
    18aa:	6e 7f       	andi	r22, 0xFE	; 254
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	af 4f       	sbci	r26, 0xFF	; 255
    18b6:	b1 e0       	ldi	r27, 0x01	; 1
    18b8:	3e d0       	rcall	.+124    	; 0x1936 <__ultoa_invert+0x9c>
    18ba:	b4 e0       	ldi	r27, 0x04	; 4
    18bc:	3c d0       	rcall	.+120    	; 0x1936 <__ultoa_invert+0x9c>
    18be:	67 0f       	add	r22, r23
    18c0:	78 1f       	adc	r23, r24
    18c2:	89 1f       	adc	r24, r25
    18c4:	9a 1f       	adc	r25, r26
    18c6:	a1 1d       	adc	r26, r1
    18c8:	68 0f       	add	r22, r24
    18ca:	79 1f       	adc	r23, r25
    18cc:	8a 1f       	adc	r24, r26
    18ce:	91 1d       	adc	r25, r1
    18d0:	a1 1d       	adc	r26, r1
    18d2:	6a 0f       	add	r22, r26
    18d4:	71 1d       	adc	r23, r1
    18d6:	81 1d       	adc	r24, r1
    18d8:	91 1d       	adc	r25, r1
    18da:	a1 1d       	adc	r26, r1
    18dc:	20 d0       	rcall	.+64     	; 0x191e <__ultoa_invert+0x84>
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__ultoa_invert+0x48>
    18e0:	68 94       	set
    18e2:	3f 91       	pop	r19
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	26 9f       	mul	r18, r22
    18e8:	11 24       	eor	r1, r1
    18ea:	30 19       	sub	r19, r0
    18ec:	30 5d       	subi	r19, 0xD0	; 208
    18ee:	31 93       	st	Z+, r19
    18f0:	de f6       	brtc	.-74     	; 0x18a8 <__ultoa_invert+0xe>
    18f2:	cf 01       	movw	r24, r30
    18f4:	08 95       	ret
    18f6:	46 2f       	mov	r20, r22
    18f8:	47 70       	andi	r20, 0x07	; 7
    18fa:	40 5d       	subi	r20, 0xD0	; 208
    18fc:	41 93       	st	Z+, r20
    18fe:	b3 e0       	ldi	r27, 0x03	; 3
    1900:	0f d0       	rcall	.+30     	; 0x1920 <__ultoa_invert+0x86>
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__ultoa_invert+0x5c>
    1904:	f6 cf       	rjmp	.-20     	; 0x18f2 <__ultoa_invert+0x58>
    1906:	46 2f       	mov	r20, r22
    1908:	4f 70       	andi	r20, 0x0F	; 15
    190a:	40 5d       	subi	r20, 0xD0	; 208
    190c:	4a 33       	cpi	r20, 0x3A	; 58
    190e:	18 f0       	brcs	.+6      	; 0x1916 <__ultoa_invert+0x7c>
    1910:	49 5d       	subi	r20, 0xD9	; 217
    1912:	31 fd       	sbrc	r19, 1
    1914:	40 52       	subi	r20, 0x20	; 32
    1916:	41 93       	st	Z+, r20
    1918:	02 d0       	rcall	.+4      	; 0x191e <__ultoa_invert+0x84>
    191a:	a9 f7       	brne	.-22     	; 0x1906 <__ultoa_invert+0x6c>
    191c:	ea cf       	rjmp	.-44     	; 0x18f2 <__ultoa_invert+0x58>
    191e:	b4 e0       	ldi	r27, 0x04	; 4
    1920:	a6 95       	lsr	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	ba 95       	dec	r27
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__ultoa_invert+0x86>
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	61 05       	cpc	r22, r1
    1932:	71 05       	cpc	r23, r1
    1934:	08 95       	ret
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	0a 2e       	mov	r0, r26
    193c:	06 94       	lsr	r0
    193e:	57 95       	ror	r21
    1940:	47 95       	ror	r20
    1942:	37 95       	ror	r19
    1944:	27 95       	ror	r18
    1946:	ba 95       	dec	r27
    1948:	c9 f7       	brne	.-14     	; 0x193c <__ultoa_invert+0xa2>
    194a:	62 0f       	add	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	a0 1d       	adc	r26, r0
    1954:	08 95       	ret

00001956 <__ctype_isfalse>:
    1956:	99 27       	eor	r25, r25
    1958:	88 27       	eor	r24, r24

0000195a <__ctype_istrue>:
    195a:	08 95       	ret

0000195c <_exit>:
    195c:	f8 94       	cli

0000195e <__stop_program>:
    195e:	ff cf       	rjmp	.-2      	; 0x195e <__stop_program>
