
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800100  000028d8  0000296c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019d  008002ca  008002ca  00002b36  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002b36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014053  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004554  00000000  00000000  0001735b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a12  00000000  00000000  0001b8af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001688  00000000  00000000  000212c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fa7  00000000  00000000  0002294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075d0  00000000  00000000  000248f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0002bec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c7       	rjmp	.+4080   	; 0x101e <__vector_11>
      2e:	00 00       	nop
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c7       	rjmp	.+3962   	; 0xfb4 <__vector_14>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_18>
      4c:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_19>
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	7b 0b       	sbc	r23, r27
      6a:	d9 09       	sbc	r29, r9
      6c:	d9 09       	sbc	r29, r9
      6e:	d9 09       	sbc	r29, r9
      70:	d9 09       	sbc	r29, r9
      72:	7b 0b       	sbc	r23, r27
      74:	d9 09       	sbc	r29, r9
      76:	d9 09       	sbc	r29, r9
      78:	d9 09       	sbc	r29, r9
      7a:	d9 09       	sbc	r29, r9
      7c:	d9 09       	sbc	r29, r9
      7e:	3a 0b       	sbc	r19, r26
      80:	d9 09       	sbc	r29, r9
      82:	d9 09       	sbc	r29, r9
      84:	d9 09       	sbc	r29, r9
      86:	d9 09       	sbc	r29, r9
      88:	d9 09       	sbc	r29, r9
      8a:	d7 0a       	sbc	r13, r23
      8c:	d9 09       	sbc	r29, r9
      8e:	d9 09       	sbc	r29, r9
      90:	76 0b       	sbc	r23, r22
      92:	d9 09       	sbc	r29, r9
      94:	d9 09       	sbc	r29, r9
      96:	d9 09       	sbc	r29, r9
      98:	d9 09       	sbc	r29, r9
      9a:	d9 09       	sbc	r29, r9
      9c:	d9 09       	sbc	r29, r9
      9e:	d9 09       	sbc	r29, r9
      a0:	d9 09       	sbc	r29, r9
      a2:	d9 09       	sbc	r29, r9
      a4:	d9 09       	sbc	r29, r9
      a6:	c4 0a       	sbc	r12, r20
      a8:	7b 0b       	sbc	r23, r27
      aa:	d9 09       	sbc	r29, r9
      ac:	d9 09       	sbc	r29, r9
      ae:	d9 09       	sbc	r29, r9
      b0:	d9 09       	sbc	r29, r9
      b2:	7b 0b       	sbc	r23, r27
      b4:	d9 09       	sbc	r29, r9
      b6:	d9 09       	sbc	r29, r9
      b8:	d9 09       	sbc	r29, r9
      ba:	d9 09       	sbc	r29, r9
      bc:	d9 09       	sbc	r29, r9
      be:	3a 0b       	sbc	r19, r26
      c0:	d9 09       	sbc	r29, r9
      c2:	d9 09       	sbc	r29, r9
      c4:	d9 09       	sbc	r29, r9
      c6:	8e 0a       	sbc	r8, r30
      c8:	d9 09       	sbc	r29, r9
      ca:	d7 0a       	sbc	r13, r23
      cc:	d9 09       	sbc	r29, r9
      ce:	d9 09       	sbc	r29, r9
      d0:	76 0b       	sbc	r23, r22
      d2:	d7 0b       	sbc	r29, r23
      d4:	59 0a       	sbc	r5, r25
      d6:	59 0a       	sbc	r5, r25
      d8:	59 0a       	sbc	r5, r25
      da:	59 0a       	sbc	r5, r25
      dc:	d7 0b       	sbc	r29, r23
      de:	59 0a       	sbc	r5, r25
      e0:	59 0a       	sbc	r5, r25
      e2:	59 0a       	sbc	r5, r25
      e4:	59 0a       	sbc	r5, r25
      e6:	59 0a       	sbc	r5, r25
      e8:	39 0b       	sbc	r19, r25
      ea:	59 0a       	sbc	r5, r25
      ec:	59 0a       	sbc	r5, r25
      ee:	59 0a       	sbc	r5, r25
      f0:	59 0a       	sbc	r5, r25
      f2:	59 0a       	sbc	r5, r25
      f4:	d6 0a       	sbc	r13, r22
      f6:	59 0a       	sbc	r5, r25
      f8:	59 0a       	sbc	r5, r25
      fa:	f3 0b       	sbc	r31, r19
      fc:	59 0a       	sbc	r5, r25
      fe:	59 0a       	sbc	r5, r25
     100:	59 0a       	sbc	r5, r25
     102:	59 0a       	sbc	r5, r25
     104:	59 0a       	sbc	r5, r25
     106:	59 0a       	sbc	r5, r25
     108:	59 0a       	sbc	r5, r25
     10a:	59 0a       	sbc	r5, r25
     10c:	59 0a       	sbc	r5, r25
     10e:	59 0a       	sbc	r5, r25
     110:	c4 0a       	sbc	r12, r20
     112:	d7 0b       	sbc	r29, r23
     114:	59 0a       	sbc	r5, r25
     116:	59 0a       	sbc	r5, r25
     118:	59 0a       	sbc	r5, r25
     11a:	59 0a       	sbc	r5, r25
     11c:	d7 0b       	sbc	r29, r23
     11e:	59 0a       	sbc	r5, r25
     120:	59 0a       	sbc	r5, r25
     122:	59 0a       	sbc	r5, r25
     124:	59 0a       	sbc	r5, r25
     126:	59 0a       	sbc	r5, r25
     128:	39 0b       	sbc	r19, r25
     12a:	59 0a       	sbc	r5, r25
     12c:	59 0a       	sbc	r5, r25
     12e:	59 0a       	sbc	r5, r25
     130:	8e 0a       	sbc	r8, r30
     132:	59 0a       	sbc	r5, r25
     134:	d6 0a       	sbc	r13, r22
     136:	59 0a       	sbc	r5, r25
     138:	59 0a       	sbc	r5, r25
     13a:	f3 0b       	sbc	r31, r19

0000013c <__trampolines_end>:
     13c:	45 46       	sbci	r20, 0x65	; 101
     13e:	47 65       	ori	r20, 0x57	; 87
     140:	66 67       	ori	r22, 0x76	; 118
	...

00000143 <__c.2314>:
     143:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000153 <__c.2449>:
     153:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	12 e0       	ldi	r17, 0x02	; 2
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e8 ed       	ldi	r30, 0xD8	; 216
     172:	f8 e2       	ldi	r31, 0x28	; 40
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	aa 3c       	cpi	r26, 0xCA	; 202
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	24 e0       	ldi	r18, 0x04	; 4
     182:	aa ec       	ldi	r26, 0xCA	; 202
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a7 36       	cpi	r26, 0x67	; 103
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <main>
     194:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     19a:	ff cf       	rjmp	.-2      	; 0x19a <_idle_thread>

0000019c <chSysInit>:
     19c:	22 d1       	rcall	.+580    	; 0x3e2 <_scheduler_init>
     19e:	5c d0       	rcall	.+184    	; 0x258 <_vt_init>
     1a0:	74 d3       	rcall	.+1768   	; 0x88a <_core_init>
     1a2:	ab d3       	rcall	.+1878   	; 0x8fa <_heap_init>
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	60 e1       	ldi	r22, 0x10	; 16
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	89 ed       	ldi	r24, 0xD9	; 217
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	30 d2       	rcall	.+1120   	; 0x610 <_thread_init>
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <ch+0xc>
     1b6:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <ch+0xb>
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	95 87       	std	Z+13, r25	; 0x0d
     1be:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <__avr_in_isr>
     1c2:	78 94       	sei
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	a6 c2       	rjmp	.+1356   	; 0x716 <chThdCreate>

000001ca <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
     1d2:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
     1d6:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <ch+0x14>
     1e0:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <ch+0x13>
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     1e4:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <ch+0xd>
     1e8:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <ch+0xe>
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	af 3c       	cpi	r26, 0xCF	; 207
     1f0:	b8 07       	cpc	r27, r24
     1f2:	69 f1       	breq	.+90     	; 0x24e <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     1f4:	14 96       	adiw	r26, 0x04	; 4
     1f6:	8d 91       	ld	r24, X+
     1f8:	9c 91       	ld	r25, X
     1fa:	15 97       	sbiw	r26, 0x05	; 5
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	15 96       	adiw	r26, 0x05	; 5
     200:	9c 93       	st	X, r25
     202:	8e 93       	st	-X, r24
     204:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     206:	89 2b       	or	r24, r25
     208:	11 f5       	brne	.+68     	; 0x24e <chSysTimerHandlerI+0x84>
     20a:	0f ec       	ldi	r16, 0xCF	; 207
     20c:	13 e0       	ldi	r17, 0x03	; 3
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     20e:	16 96       	adiw	r26, 0x06	; 6
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     216:	17 96       	adiw	r26, 0x07	; 7
     218:	1c 92       	st	X, r1
     21a:	1e 92       	st	-X, r1
     21c:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     21e:	cd 91       	ld	r28, X+
     220:	dc 91       	ld	r29, X
     222:	11 97       	sbiw	r26, 0x01	; 1
     224:	1b 83       	std	Y+3, r17	; 0x03
     226:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     228:	d0 93 d0 03 	sts	0x03D0, r29	; 0x8003d0 <ch+0xe>
     22c:	c0 93 cf 03 	sts	0x03CF, r28	; 0x8003cf <ch+0xd>
      chSysUnlockFromISR();
      fn(vtp->par);
     230:	18 96       	adiw	r26, 0x08	; 8
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	19 97       	sbiw	r26, 0x09	; 9
     238:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     23a:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <ch+0xd>
     23e:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <ch+0xe>
     242:	14 96       	adiw	r26, 0x04	; 4
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	15 97       	sbiw	r26, 0x05	; 5
     24a:	89 2b       	or	r24, r25
     24c:	01 f3       	breq	.-64     	; 0x20e <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     258:	e2 ec       	ldi	r30, 0xC2	; 194
     25a:	f3 e0       	ldi	r31, 0x03	; 3
     25c:	8f ec       	ldi	r24, 0xCF	; 207
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	96 87       	std	Z+14, r25	; 0x0e
     262:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     264:	90 8b       	std	Z+16, r25	; 0x10
     266:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	9f ef       	ldi	r25, 0xFF	; 255
     26c:	92 8b       	std	Z+18, r25	; 0x12
     26e:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     270:	14 8a       	std	Z+20, r1	; 0x14
     272:	13 8a       	std	Z+19, r1	; 0x13
     274:	08 95       	ret

00000276 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     27c:	19 96       	adiw	r26, 0x09	; 9
     27e:	3c 93       	st	X, r19
     280:	2e 93       	st	-X, r18
     282:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     284:	17 96       	adiw	r26, 0x07	; 7
     286:	5c 93       	st	X, r21
     288:	4e 93       	st	-X, r20
     28a:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     28c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <ch+0xd>
     290:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <ch+0xe>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     294:	24 81       	ldd	r18, Z+4	; 0x04
     296:	35 81       	ldd	r19, Z+5	; 0x05
     298:	26 17       	cp	r18, r22
     29a:	37 07       	cpc	r19, r23
     29c:	50 f4       	brcc	.+20     	; 0x2b2 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     29e:	62 1b       	sub	r22, r18
     2a0:	73 0b       	sbc	r23, r19
    p = p->next;
     2a2:	01 90       	ld	r0, Z+
     2a4:	f0 81       	ld	r31, Z
     2a6:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     2a8:	24 81       	ldd	r18, Z+4	; 0x04
     2aa:	35 81       	ldd	r19, Z+5	; 0x05
     2ac:	26 17       	cp	r18, r22
     2ae:	37 07       	cpc	r19, r23
     2b0:	b0 f3       	brcs	.-20     	; 0x29e <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	fc 93       	st	X, r31
     2b6:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     2b8:	c2 81       	ldd	r28, Z+2	; 0x02
     2ba:	d3 81       	ldd	r29, Z+3	; 0x03
     2bc:	13 96       	adiw	r26, 0x03	; 3
     2be:	dc 93       	st	X, r29
     2c0:	ce 93       	st	-X, r28
     2c2:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     2c4:	b9 83       	std	Y+1, r27	; 0x01
     2c6:	a8 83       	st	Y, r26
  p->prev = vtp;
     2c8:	b3 83       	std	Z+3, r27	; 0x03
     2ca:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     2cc:	15 96       	adiw	r26, 0x05	; 5
     2ce:	7c 93       	st	X, r23
     2d0:	6e 93       	st	-X, r22
     2d2:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	95 81       	ldd	r25, Z+5	; 0x05
     2d8:	86 1b       	sub	r24, r22
     2da:	97 0b       	sbc	r25, r23
     2dc:	95 83       	std	Z+5, r25	; 0x05
     2de:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <ch+0x12>
     2e8:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <ch+0x11>
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     2f8:	a0 81       	ld	r26, Z
     2fa:	b1 81       	ldd	r27, Z+1	; 0x01
     2fc:	14 96       	adiw	r26, 0x04	; 4
     2fe:	2d 91       	ld	r18, X+
     300:	3c 91       	ld	r19, X
     302:	15 97       	sbiw	r26, 0x05	; 5
     304:	84 81       	ldd	r24, Z+4	; 0x04
     306:	95 81       	ldd	r25, Z+5	; 0x05
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	15 96       	adiw	r26, 0x05	; 5
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     314:	c2 81       	ldd	r28, Z+2	; 0x02
     316:	d3 81       	ldd	r29, Z+3	; 0x03
     318:	b9 83       	std	Y+1, r27	; 0x01
     31a:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     31c:	a0 81       	ld	r26, Z
     31e:	b1 81       	ldd	r27, Z+1	; 0x01
     320:	13 96       	adiw	r26, 0x03	; 3
     322:	dc 93       	st	X, r29
     324:	ce 93       	st	-X, r28
     326:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     328:	17 82       	std	Z+7, r1	; 0x07
     32a:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	9f ef       	ldi	r25, 0xFF	; 255
     330:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <ch+0x12>
     334:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <ch+0x11>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	dc 01       	movw	r26, r24
     344:	1d 96       	adiw	r26, 0x0d	; 13
     346:	8c 91       	ld	r24, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	99 f1       	breq	.+102    	; 0x3b4 <wakeup+0x76>
     34e:	70 f5       	brcc	.+92     	; 0x3ac <wakeup+0x6e>
     350:	88 23       	and	r24, r24
     352:	49 f1       	breq	.+82     	; 0x3a6 <wakeup+0x68>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	31 f4       	brne	.+12     	; 0x364 <wakeup+0x26>
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	11 82       	std	Z+1, r1	; 0x01
     362:	10 82       	st	Z, r1
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	9f ef       	ldi	r25, 0xFF	; 255
     368:	51 96       	adiw	r26, 0x11	; 17
     36a:	9c 93       	st	X, r25
     36c:	8e 93       	st	-X, r24
     36e:	50 97       	sbiw	r26, 0x10	; 16
     370:	1d 96       	adiw	r26, 0x0d	; 13
     372:	1c 92       	st	X, r1
     374:	1d 97       	sbiw	r26, 0x0d	; 13
     376:	14 96       	adiw	r26, 0x04	; 4
     378:	2c 91       	ld	r18, X
     37a:	14 97       	sbiw	r26, 0x04	; 4
     37c:	e2 ec       	ldi	r30, 0xC2	; 194
     37e:	f3 e0       	ldi	r31, 0x03	; 3
     380:	01 90       	ld	r0, Z+
     382:	f0 81       	ld	r31, Z
     384:	e0 2d       	mov	r30, r0
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	92 17       	cp	r25, r18
     38a:	d0 f7       	brcc	.-12     	; 0x380 <wakeup+0x42>
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	fc 93       	st	X, r31
     390:	ee 93       	st	-X, r30
     392:	c2 81       	ldd	r28, Z+2	; 0x02
     394:	d3 81       	ldd	r29, Z+3	; 0x03
     396:	13 96       	adiw	r26, 0x03	; 3
     398:	dc 93       	st	X, r29
     39a:	ce 93       	st	-X, r28
     39c:	12 97       	sbiw	r26, 0x02	; 2
     39e:	b9 83       	std	Y+1, r27	; 0x01
     3a0:	a8 83       	st	Y, r26
     3a2:	b3 83       	std	Z+3, r27	; 0x03
     3a4:	a2 83       	std	Z+2, r26	; 0x02
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <wakeup+0x94>
     3b0:	87 30       	cpi	r24, 0x07	; 7
     3b2:	c1 f6       	brne	.-80     	; 0x364 <wakeup+0x26>
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	8d 91       	ld	r24, X+
     3be:	9c 91       	ld	r25, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	cd 91       	ld	r28, X+
     3c8:	dc 91       	ld	r29, X
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	fb 83       	std	Y+3, r31	; 0x03
     3ce:	ea 83       	std	Y+2, r30	; 0x02
     3d0:	c9 cf       	rjmp	.-110    	; 0x364 <wakeup+0x26>
     3d2:	50 96       	adiw	r26, 0x10	; 16
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	51 97       	sbiw	r26, 0x11	; 17
     3da:	84 81       	ldd	r24, Z+4	; 0x04
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	e9 cf       	rjmp	.-46     	; 0x3b4 <wakeup+0x76>

000003e2 <_scheduler_init>:
     3e2:	e2 ec       	ldi	r30, 0xC2	; 194
     3e4:	f3 e0       	ldi	r31, 0x03	; 3
     3e6:	f1 83       	std	Z+1, r31	; 0x01
     3e8:	e0 83       	st	Z, r30
     3ea:	f3 83       	std	Z+3, r31	; 0x03
     3ec:	e2 83       	std	Z+2, r30	; 0x02
     3ee:	14 82       	std	Z+4, r1	; 0x04
     3f0:	f0 87       	std	Z+8, r31	; 0x08
     3f2:	e7 83       	std	Z+7, r30	; 0x07
     3f4:	f2 87       	std	Z+10, r31	; 0x0a
     3f6:	e1 87       	std	Z+9, r30	; 0x09
     3f8:	08 95       	ret

000003fa <chSchReadyI>:
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	dc 01       	movw	r26, r24
     400:	1d 96       	adiw	r26, 0x0d	; 13
     402:	1c 92       	st	X, r1
     404:	1d 97       	sbiw	r26, 0x0d	; 13
     406:	14 96       	adiw	r26, 0x04	; 4
     408:	2c 91       	ld	r18, X
     40a:	14 97       	sbiw	r26, 0x04	; 4
     40c:	e2 ec       	ldi	r30, 0xC2	; 194
     40e:	f3 e0       	ldi	r31, 0x03	; 3
     410:	01 90       	ld	r0, Z+
     412:	f0 81       	ld	r31, Z
     414:	e0 2d       	mov	r30, r0
     416:	94 81       	ldd	r25, Z+4	; 0x04
     418:	92 17       	cp	r25, r18
     41a:	d0 f7       	brcc	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     41c:	11 96       	adiw	r26, 0x01	; 1
     41e:	fc 93       	st	X, r31
     420:	ee 93       	st	-X, r30
     422:	c2 81       	ldd	r28, Z+2	; 0x02
     424:	d3 81       	ldd	r29, Z+3	; 0x03
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	dc 93       	st	X, r29
     42a:	ce 93       	st	-X, r28
     42c:	12 97       	sbiw	r26, 0x02	; 2
     42e:	b9 83       	std	Y+1, r27	; 0x01
     430:	a8 83       	st	Y, r26
     432:	b3 83       	std	Z+3, r27	; 0x03
     434:	a2 83       	std	Z+2, r26	; 0x02
     436:	cd 01       	movw	r24, r26
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <chSchGoSleepS>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	e2 ec       	ldi	r30, 0xC2	; 194
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	63 85       	ldd	r22, Z+11	; 0x0b
     448:	74 85       	ldd	r23, Z+12	; 0x0c
     44a:	db 01       	movw	r26, r22
     44c:	1d 96       	adiw	r26, 0x0d	; 13
     44e:	8c 93       	st	X, r24
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	ec 01       	movw	r28, r24
     456:	a8 81       	ld	r26, Y
     458:	b9 81       	ldd	r27, Y+1	; 0x01
     45a:	b1 83       	std	Z+1, r27	; 0x01
     45c:	a0 83       	st	Z, r26
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	fc 93       	st	X, r31
     462:	ee 93       	st	-X, r30
     464:	12 97       	sbiw	r26, 0x02	; 2
     466:	94 87       	std	Z+12, r25	; 0x0c
     468:	83 87       	std	Z+11, r24	; 0x0b
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	2d 87       	std	Y+13, r18	; 0x0d
     46e:	52 d2       	rcall	.+1188   	; 0x914 <_port_switch>
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <chSchGoSleepTimeoutS>:
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	2a 97       	sbiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	18 2f       	mov	r17, r24
     48e:	6f 3f       	cpi	r22, 0xFF	; 255
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	78 07       	cpc	r23, r24
     494:	11 f1       	breq	.+68     	; 0x4da <chSchGoSleepTimeoutS+0x64>
     496:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <ch+0xb>
     49a:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <ch+0xc>
     49e:	4f e9       	ldi	r20, 0x9F	; 159
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	e7 de       	rcall	.-562    	; 0x276 <chVTDoSetI>
     4a8:	81 2f       	mov	r24, r17
     4aa:	c9 df       	rcall	.-110    	; 0x43e <chSchGoSleepS>
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	89 2b       	or	r24, r25
     4b2:	19 f0       	breq	.+6      	; 0x4ba <chSchGoSleepTimeoutS+0x44>
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	1c df       	rcall	.-456    	; 0x2f2 <chVTDoResetI>
     4ba:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <ch+0xb>
     4be:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <ch+0xc>
     4c2:	80 89       	ldd	r24, Z+16	; 0x10
     4c4:	91 89       	ldd	r25, Z+17	; 0x11
     4c6:	2a 96       	adiw	r28, 0x0a	; 10
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret
     4da:	81 2f       	mov	r24, r17
     4dc:	b0 df       	rcall	.-160    	; 0x43e <chSchGoSleepS>
     4de:	ed cf       	rjmp	.-38     	; 0x4ba <chSchGoSleepTimeoutS+0x44>

000004e0 <chSchWakeupS>:
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	dc 01       	movw	r26, r24
     4e6:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <ch+0xb>
     4ea:	d0 91 ce 03 	lds	r29, 0x03CE	; 0x8003ce <ch+0xc>
     4ee:	51 96       	adiw	r26, 0x11	; 17
     4f0:	7c 93       	st	X, r23
     4f2:	6e 93       	st	-X, r22
     4f4:	50 97       	sbiw	r26, 0x10	; 16
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	2c 91       	ld	r18, X
     4fa:	14 97       	sbiw	r26, 0x04	; 4
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	82 17       	cp	r24, r18
     500:	d8 f0       	brcs	.+54     	; 0x538 <chSchWakeupS+0x58>
     502:	1d 96       	adiw	r26, 0x0d	; 13
     504:	1c 92       	st	X, r1
     506:	1d 97       	sbiw	r26, 0x0d	; 13
     508:	e2 ec       	ldi	r30, 0xC2	; 194
     50a:	f3 e0       	ldi	r31, 0x03	; 3
     50c:	01 90       	ld	r0, Z+
     50e:	f0 81       	ld	r31, Z
     510:	e0 2d       	mov	r30, r0
     512:	94 81       	ldd	r25, Z+4	; 0x04
     514:	92 17       	cp	r25, r18
     516:	d0 f7       	brcc	.-12     	; 0x50c <chSchWakeupS+0x2c>
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	fc 93       	st	X, r31
     51c:	ee 93       	st	-X, r30
     51e:	c2 81       	ldd	r28, Z+2	; 0x02
     520:	d3 81       	ldd	r29, Z+3	; 0x03
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	dc 93       	st	X, r29
     526:	ce 93       	st	-X, r28
     528:	12 97       	sbiw	r26, 0x02	; 2
     52a:	b9 83       	std	Y+1, r27	; 0x01
     52c:	a8 83       	st	Y, r26
     52e:	b3 83       	std	Z+3, r27	; 0x03
     530:	a2 83       	std	Z+2, r26	; 0x02
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret
     538:	1d 86       	std	Y+13, r1	; 0x0d
     53a:	e2 ec       	ldi	r30, 0xC2	; 194
     53c:	f3 e0       	ldi	r31, 0x03	; 3
     53e:	01 90       	ld	r0, Z+
     540:	f0 81       	ld	r31, Z
     542:	e0 2d       	mov	r30, r0
     544:	94 81       	ldd	r25, Z+4	; 0x04
     546:	98 17       	cp	r25, r24
     548:	d0 f7       	brcc	.-12     	; 0x53e <chSchWakeupS+0x5e>
     54a:	cd 01       	movw	r24, r26
     54c:	f9 83       	std	Y+1, r31	; 0x01
     54e:	e8 83       	st	Y, r30
     550:	a2 81       	ldd	r26, Z+2	; 0x02
     552:	b3 81       	ldd	r27, Z+3	; 0x03
     554:	bb 83       	std	Y+3, r27	; 0x03
     556:	aa 83       	std	Y+2, r26	; 0x02
     558:	cd 93       	st	X+, r28
     55a:	dc 93       	st	X, r29
     55c:	d3 83       	std	Z+3, r29	; 0x03
     55e:	c2 83       	std	Z+2, r28	; 0x02
     560:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <ch+0xc>
     564:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <ch+0xb>
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	fc 01       	movw	r30, r24
     56c:	25 87       	std	Z+13, r18	; 0x0d
     56e:	be 01       	movw	r22, r28
     570:	d1 d1       	rcall	.+930    	; 0x914 <_port_switch>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <chSchIsPreemptionRequired>:
     578:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <ch>
     57c:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <ch+0x1>
     580:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <ch+0xb>
     584:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <ch+0xc>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	2c 91       	ld	r18, X
     58e:	94 81       	ldd	r25, Z+4	; 0x04
     590:	92 17       	cp	r25, r18
     592:	08 f0       	brcs	.+2      	; 0x596 <chSchIsPreemptionRequired+0x1e>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 95       	ret

00000598 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
  thread_t *otp = currp;
     59c:	a0 91 cd 03 	lds	r26, 0x03CD	; 0x8003cd <ch+0xb>
     5a0:	b0 91 ce 03 	lds	r27, 0x03CE	; 0x8003ce <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     5a4:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <ch>
     5a8:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <ch+0x1>

  tqp->next             = tp->queue.next;
     5ac:	ea 01       	movw	r28, r20
     5ae:	e8 81       	ld	r30, Y
     5b0:	f9 81       	ldd	r31, Y+1	; 0x01
     5b2:	f0 93 c3 03 	sts	0x03C3, r31	; 0x8003c3 <ch+0x1>
     5b6:	e0 93 c2 03 	sts	0x03C2, r30	; 0x8003c2 <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     5ba:	82 ec       	ldi	r24, 0xC2	; 194
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	93 83       	std	Z+3, r25	; 0x03
     5c0:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     5c2:	50 93 ce 03 	sts	0x03CE, r21	; 0x8003ce <ch+0xc>
     5c6:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     5ce:	1d 96       	adiw	r26, 0x0d	; 13
     5d0:	1c 92       	st	X, r1
     5d2:	1d 97       	sbiw	r26, 0x0d	; 13
     5d4:	14 96       	adiw	r26, 0x04	; 4
     5d6:	2c 91       	ld	r18, X
     5d8:	14 97       	sbiw	r26, 0x04	; 4
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <chSchDoReschedule+0x4a>
     5dc:	01 90       	ld	r0, Z+
     5de:	f0 81       	ld	r31, Z
     5e0:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     5e2:	94 81       	ldd	r25, Z+4	; 0x04
     5e4:	29 17       	cp	r18, r25
     5e6:	d0 f3       	brcs	.-12     	; 0x5dc <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	fc 93       	st	X, r31
     5ec:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	9c 93       	st	X, r25
     5f6:	8e 93       	st	-X, r24
     5f8:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     5fa:	ec 01       	movw	r28, r24
     5fc:	b9 83       	std	Y+1, r27	; 0x01
     5fe:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     600:	b3 83       	std	Z+3, r27	; 0x03
     602:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     604:	bd 01       	movw	r22, r26
     606:	ca 01       	movw	r24, r20
     608:	85 d1       	rcall	.+778    	; 0x914 <_port_switch>
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	fc 01       	movw	r30, r24
     616:	44 83       	std	Z+4, r20	; 0x04
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	85 87       	std	Z+13, r24	; 0x0d
     61c:	16 86       	std	Z+14, r1	; 0x0e
     61e:	43 8f       	std	Z+27, r20	; 0x1b
     620:	12 8e       	std	Z+26, r1	; 0x1a
     622:	11 8e       	std	Z+25, r1	; 0x19
     624:	10 8e       	std	Z+24, r1	; 0x18
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	87 87       	std	Z+15, r24	; 0x0f
     62a:	74 87       	std	Z+12, r23	; 0x0c
     62c:	63 87       	std	Z+11, r22	; 0x0b
     62e:	a2 ec       	ldi	r26, 0xC2	; 194
     630:	b3 e0       	ldi	r27, 0x03	; 3
     632:	b0 87       	std	Z+8, r27	; 0x08
     634:	a7 83       	std	Z+7, r26	; 0x07
     636:	19 96       	adiw	r26, 0x09	; 9
     638:	cd 91       	ld	r28, X+
     63a:	dc 91       	ld	r29, X
     63c:	1a 97       	sbiw	r26, 0x0a	; 10
     63e:	d2 87       	std	Z+10, r29	; 0x0a
     640:	c1 87       	std	Z+9, r28	; 0x09
     642:	f8 87       	std	Y+8, r31	; 0x08
     644:	ef 83       	std	Y+7, r30	; 0x07
     646:	1a 96       	adiw	r26, 0x0a	; 10
     648:	fc 93       	st	X, r31
     64a:	ee 93       	st	-X, r30
     64c:	19 97       	sbiw	r26, 0x09	; 9
     64e:	cf 01       	movw	r24, r30
     650:	42 96       	adiw	r24, 0x12	; 18
     652:	93 8b       	std	Z+19, r25	; 0x13
     654:	82 8b       	std	Z+18, r24	; 0x12
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	95 8b       	std	Z+21, r25	; 0x15
     65a:	84 8b       	std	Z+20, r24	; 0x14
     65c:	97 8b       	std	Z+23, r25	; 0x17
     65e:	86 8b       	std	Z+22, r24	; 0x16
     660:	cf 01       	movw	r24, r30
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <chThdCreateSuspendedI>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	4c 81       	ldd	r20, Y+4	; 0x04
     670:	5d 81       	ldd	r21, Y+5	; 0x05
     672:	fa 01       	movw	r30, r20
     674:	7c 97       	sbiw	r30, 0x1c	; 28
     676:	ca 01       	movw	r24, r20
     678:	c1 97       	sbiw	r24, 0x31	; 49
     67a:	96 83       	std	Z+6, r25	; 0x06
     67c:	85 83       	std	Z+5, r24	; 0x05
     67e:	2f 81       	ldd	r18, Y+7	; 0x07
     680:	dc 01       	movw	r26, r24
     682:	52 96       	adiw	r26, 0x12	; 18
     684:	2c 93       	st	X, r18
     686:	52 97       	sbiw	r26, 0x12	; 18
     688:	28 85       	ldd	r18, Y+8	; 0x08
     68a:	51 96       	adiw	r26, 0x11	; 17
     68c:	2c 93       	st	X, r18
     68e:	51 97       	sbiw	r26, 0x11	; 17
     690:	29 85       	ldd	r18, Y+9	; 0x09
     692:	50 96       	adiw	r26, 0x10	; 16
     694:	2c 93       	st	X, r18
     696:	50 97       	sbiw	r26, 0x10	; 16
     698:	2a 85       	ldd	r18, Y+10	; 0x0a
     69a:	1f 96       	adiw	r26, 0x0f	; 15
     69c:	2c 93       	st	X, r18
     69e:	1f 97       	sbiw	r26, 0x0f	; 15
     6a0:	29 eb       	ldi	r18, 0xB9	; 185
     6a2:	34 e0       	ldi	r19, 0x04	; 4
     6a4:	53 96       	adiw	r26, 0x13	; 19
     6a6:	3c 93       	st	X, r19
     6a8:	53 97       	sbiw	r26, 0x13	; 19
     6aa:	54 96       	adiw	r26, 0x14	; 20
     6ac:	2c 93       	st	X, r18
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	28 81       	ld	r18, Y
     6b2:	39 81       	ldd	r19, Y+1	; 0x01
     6b4:	84 83       	std	Z+4, r24	; 0x04
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	95 87       	std	Z+13, r25	; 0x0d
     6ba:	16 86       	std	Z+14, r1	; 0x0e
     6bc:	83 8f       	std	Z+27, r24	; 0x1b
     6be:	12 8e       	std	Z+26, r1	; 0x1a
     6c0:	11 8e       	std	Z+25, r1	; 0x19
     6c2:	10 8e       	std	Z+24, r1	; 0x18
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	87 87       	std	Z+15, r24	; 0x0f
     6c8:	34 87       	std	Z+12, r19	; 0x0c
     6ca:	23 87       	std	Z+11, r18	; 0x0b
     6cc:	c2 ec       	ldi	r28, 0xC2	; 194
     6ce:	d3 e0       	ldi	r29, 0x03	; 3
     6d0:	d0 87       	std	Z+8, r29	; 0x08
     6d2:	c7 83       	std	Z+7, r28	; 0x07
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	92 87       	std	Z+10, r25	; 0x0a
     6da:	81 87       	std	Z+9, r24	; 0x09
     6dc:	dc 01       	movw	r26, r24
     6de:	18 96       	adiw	r26, 0x08	; 8
     6e0:	fc 93       	st	X, r31
     6e2:	ee 93       	st	-X, r30
     6e4:	17 97       	sbiw	r26, 0x07	; 7
     6e6:	fa 87       	std	Y+10, r31	; 0x0a
     6e8:	e9 87       	std	Y+9, r30	; 0x09
     6ea:	ea 01       	movw	r28, r20
     6ec:	2a 97       	sbiw	r28, 0x0a	; 10
     6ee:	d9 83       	std	Y+1, r29	; 0x01
     6f0:	c8 83       	st	Y, r28
     6f2:	da 01       	movw	r26, r20
     6f4:	18 97       	sbiw	r26, 0x08	; 8
     6f6:	0b 2e       	mov	r0, r27
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	0c 92       	st	X, r0
     6fc:	11 97       	sbiw	r26, 0x01	; 1
     6fe:	ac 93       	st	X, r26
     700:	0a 2e       	mov	r0, r26
     702:	1b 2e       	mov	r1, r27
     704:	13 96       	adiw	r26, 0x03	; 3
     706:	1c 92       	st	X, r1
     708:	0e 92       	st	-X, r0
     70a:	11 24       	eor	r1, r1
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	cf 01       	movw	r24, r30
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <chThdCreate>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	f8 94       	cli
     71c:	a5 df       	rcall	.-182    	; 0x668 <chThdCreateSuspendedI>
     71e:	ec 01       	movw	r28, r24
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	dd de       	rcall	.-582    	; 0x4e0 <chSchWakeupS>
     726:	78 94       	sei
     728:	ce 01       	movw	r24, r28
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <chThdExitS>:
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <ch+0xb>
     73c:	d0 91 ce 03 	lds	r29, 0x03CE	; 0x8003ce <ch+0xc>
     740:	99 8b       	std	Y+17, r25	; 0x11
     742:	88 8b       	std	Y+16, r24	; 0x10
     744:	8e 01       	movw	r16, r28
     746:	0e 5e       	subi	r16, 0xEE	; 238
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	8a 89       	ldd	r24, Y+18	; 0x12
     74c:	9b 89       	ldd	r25, Y+19	; 0x13
     74e:	08 17       	cp	r16, r24
     750:	19 07       	cpc	r17, r25
     752:	59 f0       	breq	.+22     	; 0x76a <chThdExitS+0x3a>
     754:	fc 01       	movw	r30, r24
     756:	20 81       	ld	r18, Z
     758:	31 81       	ldd	r19, Z+1	; 0x01
     75a:	3b 8b       	std	Y+19, r19	; 0x13
     75c:	2a 8b       	std	Y+18, r18	; 0x12
     75e:	4d de       	rcall	.-870    	; 0x3fa <chSchReadyI>
     760:	8a 89       	ldd	r24, Y+18	; 0x12
     762:	9b 89       	ldd	r25, Y+19	; 0x13
     764:	80 17       	cp	r24, r16
     766:	91 07       	cpc	r25, r17
     768:	a9 f7       	brne	.-22     	; 0x754 <chThdExitS+0x24>
     76a:	8f 85       	ldd	r24, Y+15	; 0x0f
     76c:	81 11       	cpse	r24, r1
     76e:	0c c0       	rjmp	.+24     	; 0x788 <chThdExitS+0x58>
     770:	e9 85       	ldd	r30, Y+9	; 0x09
     772:	fa 85       	ldd	r31, Y+10	; 0x0a
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	90 87       	std	Z+8, r25	; 0x08
     77a:	87 83       	std	Z+7, r24	; 0x07
     77c:	af 81       	ldd	r26, Y+7	; 0x07
     77e:	b8 85       	ldd	r27, Y+8	; 0x08
     780:	1a 96       	adiw	r26, 0x0a	; 10
     782:	fc 93       	st	X, r31
     784:	ee 93       	st	-X, r30
     786:	19 97       	sbiw	r26, 0x09	; 9
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	55 ce       	rjmp	.-854    	; 0x43e <chSchGoSleepS>

00000794 <chThdExit>:
     794:	f8 94       	cli
     796:	cc cf       	rjmp	.-104    	; 0x730 <chThdExitS>

00000798 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     79c:	61 15       	cp	r22, r1
     79e:	71 05       	cpc	r23, r1
     7a0:	99 f0       	breq	.+38     	; 0x7c8 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     7a2:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <ch+0xb>
     7a6:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     7ae:	ec 01       	movw	r28, r24
     7b0:	aa 81       	ldd	r26, Y+2	; 0x02
     7b2:	bb 81       	ldd	r27, Y+3	; 0x03
     7b4:	b3 83       	std	Z+3, r27	; 0x03
     7b6:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     7b8:	ed 93       	st	X+, r30
     7ba:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     7bc:	fb 83       	std	Y+3, r31	; 0x03
     7be:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7c0:	84 e0       	ldi	r24, 0x04	; 4
}
     7c2:	df 91       	pop	r29
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7c4:	cf 91       	pop	r28
}
     7c6:	57 ce       	rjmp	.-850    	; 0x476 <chSchGoSleepTimeoutS>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     7dc:	e8 17       	cp	r30, r24
     7de:	f9 07       	cpc	r31, r25
     7e0:	71 f0       	breq	.+28     	; 0x7fe <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     7e2:	ec 01       	movw	r28, r24
     7e4:	a8 81       	ld	r26, Y
     7e6:	b9 81       	ldd	r27, Y+1	; 0x01
     7e8:	b1 83       	std	Z+1, r27	; 0x01
     7ea:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     7ec:	13 96       	adiw	r26, 0x03	; 3
     7ee:	fc 93       	st	X, r31
     7f0:	ee 93       	st	-X, r30
     7f2:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     7f4:	79 8b       	std	Y+17, r23	; 0x11
     7f6:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     7f8:	df 91       	pop	r29
  (void) chSchReadyI(tp);
     7fa:	cf 91       	pop	r28
     7fc:	fe cd       	rjmp	.-1028   	; 0x3fa <chSchReadyI>
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     804:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     80a:	93 83       	std	Z+3, r25	; 0x03
     80c:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     80e:	15 82       	std	Z+5, r1	; 0x05
     810:	14 82       	std	Z+4, r1	; 0x04
     812:	08 95       	ret

00000814 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     814:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     816:	90 8d       	ldd	r25, Z+24	; 0x18
     818:	69 2b       	or	r22, r25
     81a:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     81c:	85 85       	ldd	r24, Z+13	; 0x0d
     81e:	8a 30       	cpi	r24, 0x0A	; 10
     820:	59 f0       	breq	.+22     	; 0x838 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     822:	8b 30       	cpi	r24, 0x0B	; 11
     824:	09 f0       	breq	.+2      	; 0x828 <chEvtSignalI+0x14>
     826:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     828:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     82a:	68 23       	and	r22, r24
     82c:	86 13       	cpse	r24, r22
     82e:	fb cf       	rjmp	.-10     	; 0x826 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     830:	11 8a       	std	Z+17, r1	; 0x11
     832:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     834:	cf 01       	movw	r24, r30
     836:	e1 cd       	rjmp	.-1086   	; 0x3fa <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     838:	80 89       	ldd	r24, Z+16	; 0x10
     83a:	68 23       	and	r22, r24
     83c:	c9 f7       	brne	.-14     	; 0x830 <chEvtSignalI+0x1c>
     83e:	08 95       	ret

00000840 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	7c 01       	movw	r14, r24
     84c:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     84e:	fc 01       	movw	r30, r24
     850:	c0 81       	ld	r28, Z
     852:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     854:	8c 17       	cp	r24, r28
     856:	9d 07       	cpc	r25, r29
     858:	91 f0       	breq	.+36     	; 0x87e <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	81 2b       	or	r24, r17
     85e:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     860:	11 23       	and	r17, r17
     862:	19 f0       	breq	.+6      	; 0x86a <chEvtBroadcastFlagsI+0x2a>
     864:	9e 81       	ldd	r25, Y+6	; 0x06
     866:	89 23       	and	r24, r25
     868:	21 f0       	breq	.+8      	; 0x872 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     86a:	6c 81       	ldd	r22, Y+4	; 0x04
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	9b 81       	ldd	r25, Y+3	; 0x03
     870:	d1 df       	rcall	.-94     	; 0x814 <chEvtSignalI>
    }
    elp = elp->next;
     872:	09 90       	ld	r0, Y+
     874:	d8 81       	ld	r29, Y
     876:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     878:	ec 16       	cp	r14, r28
     87a:	fd 06       	cpc	r15, r29
     87c:	71 f7       	brne	.-36     	; 0x85a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	08 95       	ret

0000088a <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     88a:	e5 ef       	ldi	r30, 0xF5	; 245
     88c:	f3 e0       	ldi	r31, 0x03	; 3
     88e:	8a ec       	ldi	r24, 0xCA	; 202
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
     896:	8a e4       	ldi	r24, 0x4A	; 74
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	93 83       	std	Z+3, r25	; 0x03
     89c:	82 83       	std	Z+2, r24	; 0x02
     89e:	08 95       	ret

000008a0 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     8a0:	f8 94       	cli
     8a2:	9b 01       	movw	r18, r22
     8a4:	21 50       	subi	r18, 0x01	; 1
     8a6:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     8a8:	71 95       	neg	r23
     8aa:	61 95       	neg	r22
     8ac:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     8ae:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <ch_memcore>
     8b2:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <ch_memcore+0x1>
     8b6:	4e 0f       	add	r20, r30
     8b8:	5f 1f       	adc	r21, r31
     8ba:	42 0f       	add	r20, r18
     8bc:	53 1f       	adc	r21, r19
     8be:	46 23       	and	r20, r22
     8c0:	57 23       	and	r21, r23
  next = p + size;
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	68 23       	and	r22, r24
     8c8:	79 23       	and	r23, r25
     8ca:	ca 01       	movw	r24, r20
     8cc:	86 0f       	add	r24, r22
     8ce:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     8d0:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <ch_memcore+0x2>
     8d4:	30 91 f8 03 	lds	r19, 0x03F8	; 0x8003f8 <ch_memcore+0x3>
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	50 f0       	brcs	.+20     	; 0x8f2 <chCoreAllocAlignedWithOffset+0x52>
     8de:	8e 17       	cp	r24, r30
     8e0:	9f 07       	cpc	r25, r31
     8e2:	38 f0       	brcs	.+14     	; 0x8f2 <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     8e4:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <ch_memcore+0x1>
     8e8:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <ch_memcore>

  return p;
     8ec:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     8ee:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     8f0:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     8f8:	08 95       	ret

000008fa <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     8fa:	ea e4       	ldi	r30, 0x4A	; 74
     8fc:	f3 e0       	ldi	r31, 0x03	; 3
     8fe:	80 e5       	ldi	r24, 0x50	; 80
     900:	94 e0       	ldi	r25, 0x04	; 4
     902:	91 83       	std	Z+1, r25	; 0x01
     904:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     906:	13 82       	std	Z+3, r1	; 0x03
     908:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     90a:	15 82       	std	Z+5, r1	; 0x05
     90c:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     90e:	80 e5       	ldi	r24, 0x50	; 80
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	78 cf       	rjmp	.-272    	; 0x804 <chMtxObjectInit>

00000914 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     914:	2f 92       	push	r2
  asm volatile ("push    r3");
     916:	3f 92       	push	r3
  asm volatile ("push    r4");
     918:	4f 92       	push	r4
  asm volatile ("push    r5");
     91a:	5f 92       	push	r5
  asm volatile ("push    r6");
     91c:	6f 92       	push	r6
  asm volatile ("push    r7");
     91e:	7f 92       	push	r7
  asm volatile ("push    r8");
     920:	8f 92       	push	r8
  asm volatile ("push    r9");
     922:	9f 92       	push	r9
  asm volatile ("push    r10");
     924:	af 92       	push	r10
  asm volatile ("push    r11");
     926:	bf 92       	push	r11
  asm volatile ("push    r12");
     928:	cf 92       	push	r12
  asm volatile ("push    r13");
     92a:	df 92       	push	r13
  asm volatile ("push    r14");
     92c:	ef 92       	push	r14
  asm volatile ("push    r15");
     92e:	ff 92       	push	r15
  asm volatile ("push    r16");
     930:	0f 93       	push	r16
  asm volatile ("push    r17");
     932:	1f 93       	push	r17
  asm volatile ("push    r28");
     934:	cf 93       	push	r28
  asm volatile ("push    r29");
     936:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     938:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     93a:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     93c:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     93e:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     940:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     942:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     944:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     946:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     948:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     94a:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     94c:	df 91       	pop	r29
  asm volatile ("pop     r28");
     94e:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     950:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     952:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     954:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     956:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     958:	df 90       	pop	r13
  asm volatile ("pop     r12");
     95a:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     95c:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     95e:	af 90       	pop	r10
  asm volatile ("pop     r9");
     960:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     962:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     964:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     966:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     968:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     96a:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     96c:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     96e:	2f 90       	pop	r2
  asm volatile ("ret");
     970:	08 95       	ret

00000972 <_port_thread_start>:
     972:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     974:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     976:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     978:	09 95       	icall
     97a:	0c cf       	rjmp	.-488    	; 0x794 <chThdExit>

0000097c <halInit>:
     97c:	e8 d2       	rcall	.+1488   	; 0xf4e <hal_lld_init>
     97e:	8d e3       	ldi	r24, 0x3D	; 61
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	e6 d2       	rcall	.+1484   	; 0xf50 <_pal_lld_init>
     984:	4d d2       	rcall	.+1178   	; 0xe20 <gptInit>
     986:	6e d2       	rcall	.+1244   	; 0xe64 <sdInit>
     988:	57 d4       	rcall	.+2222   	; 0x1238 <boardInit>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <stInit>

0000098c <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
     98c:	3e c3       	rjmp	.+1660   	; 0x100a <st_lld_init>

0000098e <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	6b 01       	movw	r12, r22
     9a6:	8a 01       	movw	r16, r20
     9a8:	8c 81       	ldd	r24, Y+4	; 0x04
     9aa:	9d 81       	ldd	r25, Y+5	; 0x05
     9ac:	84 17       	cp	r24, r20
     9ae:	95 07       	cpc	r25, r21
     9b0:	10 f4       	brcc	.+4      	; 0x9b6 <iq_read+0x28>
     9b2:	0c 81       	ldd	r16, Y+4	; 0x04
     9b4:	1d 81       	ldd	r17, Y+5	; 0x05
     9b6:	6c 85       	ldd	r22, Y+12	; 0x0c
     9b8:	7d 85       	ldd	r23, Y+13	; 0x0d
     9ba:	e8 84       	ldd	r14, Y+8	; 0x08
     9bc:	f9 84       	ldd	r15, Y+9	; 0x09
     9be:	e6 1a       	sub	r14, r22
     9c0:	f7 0a       	sbc	r15, r23
     9c2:	0e 15       	cp	r16, r14
     9c4:	1f 05       	cpc	r17, r15
     9c6:	98 f1       	brcs	.+102    	; 0xa2e <iq_read+0xa0>
     9c8:	e0 16       	cp	r14, r16
     9ca:	f1 06       	cpc	r15, r17
     9cc:	d0 f0       	brcs	.+52     	; 0xa02 <iq_read+0x74>
     9ce:	a8 01       	movw	r20, r16
     9d0:	c6 01       	movw	r24, r12
     9d2:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     9d6:	8e 81       	ldd	r24, Y+6	; 0x06
     9d8:	9f 81       	ldd	r25, Y+7	; 0x07
     9da:	9d 87       	std	Y+13, r25	; 0x0d
     9dc:	8c 87       	std	Y+12, r24	; 0x0c
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	9d 81       	ldd	r25, Y+5	; 0x05
     9e2:	80 1b       	sub	r24, r16
     9e4:	91 0b       	sbc	r25, r17
     9e6:	9d 83       	std	Y+5, r25	; 0x05
     9e8:	8c 83       	std	Y+4, r24	; 0x04
     9ea:	c8 01       	movw	r24, r16
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	08 95       	ret
     a02:	a7 01       	movw	r20, r14
     a04:	c6 01       	movw	r24, r12
     a06:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     a0a:	58 01       	movw	r10, r16
     a0c:	ae 18       	sub	r10, r14
     a0e:	bf 08       	sbc	r11, r15
     a10:	6e 81       	ldd	r22, Y+6	; 0x06
     a12:	7f 81       	ldd	r23, Y+7	; 0x07
     a14:	a5 01       	movw	r20, r10
     a16:	c6 01       	movw	r24, r12
     a18:	8e 0d       	add	r24, r14
     a1a:	9f 1d       	adc	r25, r15
     a1c:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     a20:	8e 81       	ldd	r24, Y+6	; 0x06
     a22:	9f 81       	ldd	r25, Y+7	; 0x07
     a24:	a8 0e       	add	r10, r24
     a26:	b9 1e       	adc	r11, r25
     a28:	bd 86       	std	Y+13, r11	; 0x0d
     a2a:	ac 86       	std	Y+12, r10	; 0x0c
     a2c:	d8 cf       	rjmp	.-80     	; 0x9de <iq_read+0x50>
     a2e:	a8 01       	movw	r20, r16
     a30:	c6 01       	movw	r24, r12
     a32:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	9d 85       	ldd	r25, Y+13	; 0x0d
     a3a:	80 0f       	add	r24, r16
     a3c:	91 1f       	adc	r25, r17
     a3e:	9d 87       	std	Y+13, r25	; 0x0d
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	cd cf       	rjmp	.-102    	; 0x9de <iq_read+0x50>

00000a44 <oq_write>:
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ec 01       	movw	r28, r24
     a5a:	6b 01       	movw	r12, r22
     a5c:	8a 01       	movw	r16, r20
     a5e:	8c 81       	ldd	r24, Y+4	; 0x04
     a60:	9d 81       	ldd	r25, Y+5	; 0x05
     a62:	84 17       	cp	r24, r20
     a64:	95 07       	cpc	r25, r21
     a66:	10 f4       	brcc	.+4      	; 0xa6c <oq_write+0x28>
     a68:	0c 81       	ldd	r16, Y+4	; 0x04
     a6a:	1d 81       	ldd	r17, Y+5	; 0x05
     a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a70:	e8 84       	ldd	r14, Y+8	; 0x08
     a72:	f9 84       	ldd	r15, Y+9	; 0x09
     a74:	e8 1a       	sub	r14, r24
     a76:	f9 0a       	sbc	r15, r25
     a78:	0e 15       	cp	r16, r14
     a7a:	1f 05       	cpc	r17, r15
     a7c:	98 f1       	brcs	.+102    	; 0xae4 <oq_write+0xa0>
     a7e:	e0 16       	cp	r14, r16
     a80:	f1 06       	cpc	r15, r17
     a82:	d0 f0       	brcs	.+52     	; 0xab8 <oq_write+0x74>
     a84:	a8 01       	movw	r20, r16
     a86:	b6 01       	movw	r22, r12
     a88:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     a8c:	8e 81       	ldd	r24, Y+6	; 0x06
     a8e:	9f 81       	ldd	r25, Y+7	; 0x07
     a90:	9b 87       	std	Y+11, r25	; 0x0b
     a92:	8a 87       	std	Y+10, r24	; 0x0a
     a94:	8c 81       	ldd	r24, Y+4	; 0x04
     a96:	9d 81       	ldd	r25, Y+5	; 0x05
     a98:	80 1b       	sub	r24, r16
     a9a:	91 0b       	sbc	r25, r17
     a9c:	9d 83       	std	Y+5, r25	; 0x05
     a9e:	8c 83       	std	Y+4, r24	; 0x04
     aa0:	c8 01       	movw	r24, r16
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	08 95       	ret
     ab8:	a7 01       	movw	r20, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     ac0:	58 01       	movw	r10, r16
     ac2:	ae 18       	sub	r10, r14
     ac4:	bf 08       	sbc	r11, r15
     ac6:	b6 01       	movw	r22, r12
     ac8:	6e 0d       	add	r22, r14
     aca:	7f 1d       	adc	r23, r15
     acc:	a5 01       	movw	r20, r10
     ace:	8e 81       	ldd	r24, Y+6	; 0x06
     ad0:	9f 81       	ldd	r25, Y+7	; 0x07
     ad2:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	9f 81       	ldd	r25, Y+7	; 0x07
     ada:	a8 0e       	add	r10, r24
     adc:	b9 1e       	adc	r11, r25
     ade:	bb 86       	std	Y+11, r11	; 0x0b
     ae0:	aa 86       	std	Y+10, r10	; 0x0a
     ae2:	d8 cf       	rjmp	.-80     	; 0xa94 <oq_write+0x50>
     ae4:	a8 01       	movw	r20, r16
     ae6:	b6 01       	movw	r22, r12
     ae8:	0e 94 6d 13 	call	0x26da	; 0x26da <memcpy>
     aec:	8a 85       	ldd	r24, Y+10	; 0x0a
     aee:	9b 85       	ldd	r25, Y+11	; 0x0b
     af0:	80 0f       	add	r24, r16
     af2:	91 1f       	adc	r25, r17
     af4:	9b 87       	std	Y+11, r25	; 0x0b
     af6:	8a 87       	std	Y+10, r24	; 0x0a
     af8:	cd cf       	rjmp	.-102    	; 0xa94 <oq_write+0x50>

00000afa <iqObjectInit>:
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	fc 01       	movw	r30, r24
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
     b04:	93 83       	std	Z+3, r25	; 0x03
     b06:	82 83       	std	Z+2, r24	; 0x02
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	14 82       	std	Z+4, r1	; 0x04
     b0c:	77 83       	std	Z+7, r23	; 0x07
     b0e:	66 83       	std	Z+6, r22	; 0x06
     b10:	75 87       	std	Z+13, r23	; 0x0d
     b12:	64 87       	std	Z+12, r22	; 0x0c
     b14:	73 87       	std	Z+11, r23	; 0x0b
     b16:	62 87       	std	Z+10, r22	; 0x0a
     b18:	64 0f       	add	r22, r20
     b1a:	75 1f       	adc	r23, r21
     b1c:	71 87       	std	Z+9, r23	; 0x09
     b1e:	60 87       	std	Z+8, r22	; 0x08
     b20:	37 87       	std	Z+15, r19	; 0x0f
     b22:	26 87       	std	Z+14, r18	; 0x0e
     b24:	11 8b       	std	Z+17, r17	; 0x11
     b26:	00 8b       	std	Z+16, r16	; 0x10
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <iqPutI>:
     b2e:	fc 01       	movw	r30, r24
     b30:	a2 85       	ldd	r26, Z+10	; 0x0a
     b32:	b3 85       	ldd	r27, Z+11	; 0x0b
     b34:	84 85       	ldd	r24, Z+12	; 0x0c
     b36:	95 85       	ldd	r25, Z+13	; 0x0d
     b38:	a8 17       	cp	r26, r24
     b3a:	b9 07       	cpc	r27, r25
     b3c:	e1 f0       	breq	.+56     	; 0xb76 <iqPutI+0x48>
     b3e:	84 81       	ldd	r24, Z+4	; 0x04
     b40:	95 81       	ldd	r25, Z+5	; 0x05
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	95 83       	std	Z+5, r25	; 0x05
     b46:	84 83       	std	Z+4, r24	; 0x04
     b48:	cd 01       	movw	r24, r26
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	93 87       	std	Z+11, r25	; 0x0b
     b4e:	82 87       	std	Z+10, r24	; 0x0a
     b50:	6c 93       	st	X, r22
     b52:	22 85       	ldd	r18, Z+10	; 0x0a
     b54:	33 85       	ldd	r19, Z+11	; 0x0b
     b56:	80 85       	ldd	r24, Z+8	; 0x08
     b58:	91 85       	ldd	r25, Z+9	; 0x09
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	20 f0       	brcs	.+8      	; 0xb68 <iqPutI+0x3a>
     b60:	86 81       	ldd	r24, Z+6	; 0x06
     b62:	97 81       	ldd	r25, Z+7	; 0x07
     b64:	93 87       	std	Z+11, r25	; 0x0b
     b66:	82 87       	std	Z+10, r24	; 0x0a
     b68:	cf 01       	movw	r24, r30
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	31 de       	rcall	.-926    	; 0x7d2 <chThdDequeueNextI>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	08 95       	ret
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	89 2b       	or	r24, r25
     b7c:	01 f3       	breq	.-64     	; 0xb3e <iqPutI+0x10>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	08 95       	ret

00000b84 <iqGetTimeout>:
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	ec 01       	movw	r28, r24
     b8e:	8b 01       	movw	r16, r22
     b90:	f8 94       	cli
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <iqGetTimeout+0x1a>
     b94:	b8 01       	movw	r22, r16
     b96:	ce 01       	movw	r24, r28
     b98:	ff dd       	rcall	.-1026   	; 0x798 <chThdEnqueueTimeoutS>
     b9a:	97 fd       	sbrc	r25, 7
     b9c:	27 c0       	rjmp	.+78     	; 0xbec <iqGetTimeout+0x68>
     b9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ba0:	9d 81       	ldd	r25, Y+5	; 0x05
     ba2:	89 2b       	or	r24, r25
     ba4:	b9 f3       	breq	.-18     	; 0xb94 <iqGetTimeout+0x10>
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	9d 81       	ldd	r25, Y+5	; 0x05
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9d 83       	std	Y+5, r25	; 0x05
     bae:	8c 83       	std	Y+4, r24	; 0x04
     bb0:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb2:	fd 85       	ldd	r31, Y+13	; 0x0d
     bb4:	cf 01       	movw	r24, r30
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	9d 87       	std	Y+13, r25	; 0x0d
     bba:	8c 87       	std	Y+12, r24	; 0x0c
     bbc:	10 81       	ld	r17, Z
     bbe:	28 85       	ldd	r18, Y+8	; 0x08
     bc0:	39 85       	ldd	r19, Y+9	; 0x09
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	20 f0       	brcs	.+8      	; 0xbd0 <iqGetTimeout+0x4c>
     bc8:	8e 81       	ldd	r24, Y+6	; 0x06
     bca:	9f 81       	ldd	r25, Y+7	; 0x07
     bcc:	9d 87       	std	Y+13, r25	; 0x0d
     bce:	8c 87       	std	Y+12, r24	; 0x0c
     bd0:	ee 85       	ldd	r30, Y+14	; 0x0e
     bd2:	ff 85       	ldd	r31, Y+15	; 0x0f
     bd4:	30 97       	sbiw	r30, 0x00	; 0
     bd6:	11 f0       	breq	.+4      	; 0xbdc <iqGetTimeout+0x58>
     bd8:	ce 01       	movw	r24, r28
     bda:	09 95       	icall
     bdc:	78 94       	sei
     bde:	81 2f       	mov	r24, r17
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret
     bec:	78 94       	sei
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <iqReadTimeout>:
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	4c 01       	movw	r8, r24
     c16:	7b 01       	movw	r14, r22
     c18:	6a 01       	movw	r12, r20
     c1a:	39 01       	movw	r6, r18
     c1c:	fc 01       	movw	r30, r24
     c1e:	a6 84       	ldd	r10, Z+14	; 0x0e
     c20:	b7 84       	ldd	r11, Z+15	; 0x0f
     c22:	f8 94       	cli
     c24:	00 e0       	ldi	r16, 0x00	; 0
     c26:	10 e0       	ldi	r17, 0x00	; 0
     c28:	45 2b       	or	r20, r21
     c2a:	81 f4       	brne	.+32     	; 0xc4c <iqReadTimeout+0x54>
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <iqReadTimeout+0x6c>
     c2e:	a1 14       	cp	r10, r1
     c30:	b1 04       	cpc	r11, r1
     c32:	19 f0       	breq	.+6      	; 0xc3a <iqReadTimeout+0x42>
     c34:	c4 01       	movw	r24, r8
     c36:	f5 01       	movw	r30, r10
     c38:	09 95       	icall
     c3a:	78 94       	sei
     c3c:	0c 0f       	add	r16, r28
     c3e:	1d 1f       	adc	r17, r29
     c40:	ec 0e       	add	r14, r28
     c42:	fd 1e       	adc	r15, r29
     c44:	f8 94       	cli
     c46:	0c 15       	cp	r16, r12
     c48:	1d 05       	cpc	r17, r13
     c4a:	60 f4       	brcc	.+24     	; 0xc64 <iqReadTimeout+0x6c>
     c4c:	a6 01       	movw	r20, r12
     c4e:	b7 01       	movw	r22, r14
     c50:	c4 01       	movw	r24, r8
     c52:	9d de       	rcall	.-710    	; 0x98e <iq_read>
     c54:	ec 01       	movw	r28, r24
     c56:	89 2b       	or	r24, r25
     c58:	51 f7       	brne	.-44     	; 0xc2e <iqReadTimeout+0x36>
     c5a:	b3 01       	movw	r22, r6
     c5c:	c4 01       	movw	r24, r8
     c5e:	9c dd       	rcall	.-1224   	; 0x798 <chThdEnqueueTimeoutS>
     c60:	89 2b       	or	r24, r25
     c62:	89 f3       	breq	.-30     	; 0xc46 <iqReadTimeout+0x4e>
     c64:	78 94       	sei
     c66:	c8 01       	movw	r24, r16
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	8f 90       	pop	r8
     c80:	7f 90       	pop	r7
     c82:	6f 90       	pop	r6
     c84:	08 95       	ret

00000c86 <oqObjectInit>:
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	fc 01       	movw	r30, r24
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
     c90:	93 83       	std	Z+3, r25	; 0x03
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	55 83       	std	Z+5, r21	; 0x05
     c96:	44 83       	std	Z+4, r20	; 0x04
     c98:	77 83       	std	Z+7, r23	; 0x07
     c9a:	66 83       	std	Z+6, r22	; 0x06
     c9c:	75 87       	std	Z+13, r23	; 0x0d
     c9e:	64 87       	std	Z+12, r22	; 0x0c
     ca0:	73 87       	std	Z+11, r23	; 0x0b
     ca2:	62 87       	std	Z+10, r22	; 0x0a
     ca4:	46 0f       	add	r20, r22
     ca6:	57 1f       	adc	r21, r23
     ca8:	51 87       	std	Z+9, r21	; 0x09
     caa:	40 87       	std	Z+8, r20	; 0x08
     cac:	37 87       	std	Z+15, r19	; 0x0f
     cae:	26 87       	std	Z+14, r18	; 0x0e
     cb0:	11 8b       	std	Z+17, r17	; 0x11
     cb2:	00 8b       	std	Z+16, r16	; 0x10
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <oqPutTimeout>:
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
     cc6:	f6 2e       	mov	r15, r22
     cc8:	8a 01       	movw	r16, r20
     cca:	f8 94       	cli
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <oqPutTimeout+0x1e>
     cce:	b8 01       	movw	r22, r16
     cd0:	ce 01       	movw	r24, r28
     cd2:	62 dd       	rcall	.-1340   	; 0x798 <chThdEnqueueTimeoutS>
     cd4:	97 fd       	sbrc	r25, 7
     cd6:	2a c0       	rjmp	.+84     	; 0xd2c <oqPutTimeout+0x72>
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	89 2b       	or	r24, r25
     cde:	b9 f3       	breq	.-18     	; 0xcce <oqPutTimeout+0x14>
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9d 83       	std	Y+5, r25	; 0x05
     ce8:	8c 83       	std	Y+4, r24	; 0x04
     cea:	ea 85       	ldd	r30, Y+10	; 0x0a
     cec:	fb 85       	ldd	r31, Y+11	; 0x0b
     cee:	cf 01       	movw	r24, r30
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9b 87       	std	Y+11, r25	; 0x0b
     cf4:	8a 87       	std	Y+10, r24	; 0x0a
     cf6:	f0 82       	st	Z, r15
     cf8:	2a 85       	ldd	r18, Y+10	; 0x0a
     cfa:	3b 85       	ldd	r19, Y+11	; 0x0b
     cfc:	88 85       	ldd	r24, Y+8	; 0x08
     cfe:	99 85       	ldd	r25, Y+9	; 0x09
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	20 f0       	brcs	.+8      	; 0xd0e <oqPutTimeout+0x54>
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	9f 81       	ldd	r25, Y+7	; 0x07
     d0a:	9b 87       	std	Y+11, r25	; 0x0b
     d0c:	8a 87       	std	Y+10, r24	; 0x0a
     d0e:	ee 85       	ldd	r30, Y+14	; 0x0e
     d10:	ff 85       	ldd	r31, Y+15	; 0x0f
     d12:	30 97       	sbiw	r30, 0x00	; 0
     d14:	11 f0       	breq	.+4      	; 0xd1a <oqPutTimeout+0x60>
     d16:	ce 01       	movw	r24, r28
     d18:	09 95       	icall
     d1a:	78 94       	sei
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	08 95       	ret
     d2c:	78 94       	sei
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	08 95       	ret

00000d3a <oqGetI>:
     d3a:	cf 93       	push	r28
     d3c:	fc 01       	movw	r30, r24
     d3e:	a4 85       	ldd	r26, Z+12	; 0x0c
     d40:	b5 85       	ldd	r27, Z+13	; 0x0d
     d42:	82 85       	ldd	r24, Z+10	; 0x0a
     d44:	93 85       	ldd	r25, Z+11	; 0x0b
     d46:	8a 17       	cp	r24, r26
     d48:	9b 07       	cpc	r25, r27
     d4a:	e1 f0       	breq	.+56     	; 0xd84 <oqGetI+0x4a>
     d4c:	84 81       	ldd	r24, Z+4	; 0x04
     d4e:	95 81       	ldd	r25, Z+5	; 0x05
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	95 83       	std	Z+5, r25	; 0x05
     d54:	84 83       	std	Z+4, r24	; 0x04
     d56:	cd 01       	movw	r24, r26
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	95 87       	std	Z+13, r25	; 0x0d
     d5c:	84 87       	std	Z+12, r24	; 0x0c
     d5e:	cc 91       	ld	r28, X
     d60:	20 85       	ldd	r18, Z+8	; 0x08
     d62:	31 85       	ldd	r19, Z+9	; 0x09
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	40 f4       	brcc	.+16     	; 0xd7a <oqGetI+0x40>
     d6a:	cf 01       	movw	r24, r30
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	30 dd       	rcall	.-1440   	; 0x7d2 <chThdDequeueNextI>
     d72:	8c 2f       	mov	r24, r28
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret
     d7a:	86 81       	ldd	r24, Z+6	; 0x06
     d7c:	97 81       	ldd	r25, Z+7	; 0x07
     d7e:	95 87       	std	Z+13, r25	; 0x0d
     d80:	84 87       	std	Z+12, r24	; 0x0c
     d82:	f3 cf       	rjmp	.-26     	; 0xd6a <oqGetI+0x30>
     d84:	84 81       	ldd	r24, Z+4	; 0x04
     d86:	95 81       	ldd	r25, Z+5	; 0x05
     d88:	89 2b       	or	r24, r25
     d8a:	01 f3       	breq	.-64     	; 0xd4c <oqGetI+0x12>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	f2 cf       	rjmp	.-28     	; 0xd76 <oqGetI+0x3c>

00000d92 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     d92:	6f 92       	push	r6
     d94:	7f 92       	push	r7
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	4c 01       	movw	r8, r24
     db0:	7b 01       	movw	r14, r22
     db2:	6a 01       	movw	r12, r20
     db4:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     db6:	fc 01       	movw	r30, r24
     db8:	a6 84       	ldd	r10, Z+14	; 0x0e
     dba:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     dbc:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	45 2b       	or	r20, r21
     dc4:	81 f4       	brne	.+32     	; 0xde6 <oqWriteTimeout+0x54>
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     dc8:	a1 14       	cp	r10, r1
     dca:	b1 04       	cpc	r11, r1
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <oqWriteTimeout+0x42>
        nfy(oqp);
     dce:	c4 01       	movw	r24, r8
     dd0:	f5 01       	movw	r30, r10
     dd2:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     dd4:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
     dd6:	0c 0f       	add	r16, r28
     dd8:	1d 1f       	adc	r17, r29
      bp += done;
     dda:	ec 0e       	add	r14, r28
     ddc:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     dde:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     de0:	0c 15       	cp	r16, r12
     de2:	1d 05       	cpc	r17, r13
     de4:	60 f4       	brcc	.+24     	; 0xdfe <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
     de6:	a6 01       	movw	r20, r12
     de8:	b7 01       	movw	r22, r14
     dea:	c4 01       	movw	r24, r8
     dec:	2b de       	rcall	.-938    	; 0xa44 <oq_write>
     dee:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     df0:	89 2b       	or	r24, r25
     df2:	51 f7       	brne	.-44     	; 0xdc8 <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     df4:	b3 01       	movw	r22, r6
     df6:	c4 01       	movw	r24, r8
     df8:	cf dc       	rcall	.-1634   	; 0x798 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     dfa:	89 2b       	or	r24, r25
     dfc:	89 f3       	breq	.-30     	; 0xde0 <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     dfe:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
     e00:	c8 01       	movw	r24, r16
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	9f 90       	pop	r9
     e18:	8f 90       	pop	r8
     e1a:	7f 90       	pop	r7
     e1c:	6f 90       	pop	r6
     e1e:	08 95       	ret

00000e20 <gptInit>:
     e20:	52 c1       	rjmp	.+676    	; 0x10c6 <gpt_lld_init>

00000e22 <gptObjectInit>:
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
     e28:	12 82       	std	Z+2, r1	; 0x02
     e2a:	11 82       	std	Z+1, r1	; 0x01
     e2c:	08 95       	ret

00000e2e <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     e2e:	05 96       	adiw	r24, 0x05	; 5
     e30:	e3 ce       	rjmp	.-570    	; 0xbf8 <iqReadTimeout>

00000e32 <_read>:
     e32:	2f ef       	ldi	r18, 0xFF	; 255
     e34:	3f ef       	ldi	r19, 0xFF	; 255
     e36:	05 96       	adiw	r24, 0x05	; 5
     e38:	df ce       	rjmp	.-578    	; 0xbf8 <iqReadTimeout>

00000e3a <_writet>:
     e3a:	47 96       	adiw	r24, 0x17	; 23
     e3c:	aa cf       	rjmp	.-172    	; 0xd92 <oqWriteTimeout>

00000e3e <_write>:
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	47 96       	adiw	r24, 0x17	; 23
     e44:	a6 cf       	rjmp	.-180    	; 0xd92 <oqWriteTimeout>

00000e46 <_gett>:
     e46:	05 96       	adiw	r24, 0x05	; 5
     e48:	9d ce       	rjmp	.-710    	; 0xb84 <iqGetTimeout>

00000e4a <_get>:
     e4a:	6f ef       	ldi	r22, 0xFF	; 255
     e4c:	7f ef       	ldi	r23, 0xFF	; 255
     e4e:	05 96       	adiw	r24, 0x05	; 5
     e50:	99 ce       	rjmp	.-718    	; 0xb84 <iqGetTimeout>

00000e52 <_putt>:
     e52:	47 96       	adiw	r24, 0x17	; 23
     e54:	32 cf       	rjmp	.-412    	; 0xcba <oqPutTimeout>

00000e56 <_put>:
     e56:	4f ef       	ldi	r20, 0xFF	; 255
     e58:	5f ef       	ldi	r21, 0xFF	; 255
     e5a:	47 96       	adiw	r24, 0x17	; 23
     e5c:	2e cf       	rjmp	.-420    	; 0xcba <oqPutTimeout>

00000e5e <_ctl>:
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret

00000e64 <sdInit>:
     e64:	b1 c1       	rjmp	.+866    	; 0x11c8 <sd_lld_init>

00000e66 <sdObjectInit>:
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
     e74:	9b 01       	movw	r18, r22
     e76:	7a 01       	movw	r14, r20
     e78:	fc 01       	movw	r30, r24
     e7a:	86 e2       	ldi	r24, 0x26	; 38
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	81 93       	st	Z+, r24
     e80:	91 93       	st	Z+, r25
     e82:	fb 83       	std	Y+3, r31	; 0x03
     e84:	ea 83       	std	Y+2, r30	; 0x02
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	8c 83       	std	Y+4, r24	; 0x04
     e8a:	be 01       	movw	r22, r28
     e8c:	67 5d       	subi	r22, 0xD7	; 215
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8e 01       	movw	r16, r28
     e92:	40 e1       	ldi	r20, 0x10	; 16
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	ce 01       	movw	r24, r28
     e98:	05 96       	adiw	r24, 0x05	; 5
     e9a:	2f de       	rcall	.-930    	; 0xafa <iqObjectInit>
     e9c:	be 01       	movw	r22, r28
     e9e:	67 5c       	subi	r22, 0xC7	; 199
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	97 01       	movw	r18, r14
     ea4:	40 e1       	ldi	r20, 0x10	; 16
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	ce 01       	movw	r24, r28
     eaa:	47 96       	adiw	r24, 0x17	; 23
     eac:	ec de       	rcall	.-552    	; 0xc86 <oqObjectInit>
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	08 95       	ret

00000ebc <sdStart>:
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
     ec2:	f8 94       	cli
     ec4:	88 d1       	rcall	.+784    	; 0x11d6 <sd_lld_start>
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	8c 83       	std	Y+4, r24	; 0x04
     eca:	78 94       	sei
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ec 01       	movw	r28, r24
     eda:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	89 2b       	or	r24, r25
     ee2:	51 f0       	breq	.+20     	; 0xef8 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     ee4:	61 2f       	mov	r22, r17
     ee6:	ce 01       	movw	r24, r28
     ee8:	05 96       	adiw	r24, 0x05	; 5
     eea:	21 de       	rcall	.-958    	; 0xb2e <iqPutI>
     eec:	97 fd       	sbrc	r25, 7
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     ef8:	64 e0       	ldi	r22, 0x04	; 4
     efa:	ce 01       	movw	r24, r28
     efc:	02 96       	adiw	r24, 0x02	; 2
     efe:	a0 dc       	rcall	.-1728   	; 0x840 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f00:	61 2f       	mov	r22, r17
     f02:	ce 01       	movw	r24, r28
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	13 de       	rcall	.-986    	; 0xb2e <iqPutI>
     f08:	97 ff       	sbrs	r25, 7
     f0a:	f2 cf       	rjmp	.-28     	; 0xef0 <sdIncomingDataI+0x1e>
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	ce 01       	movw	r24, r28
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f10:	02 96       	adiw	r24, 0x02	; 2
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
     f18:	93 cc       	rjmp	.-1754   	; 0x840 <chEvtBroadcastFlagsI>

00000f1a <sdRequestDataI>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	8c 01       	movw	r16, r24
     f24:	47 96       	adiw	r24, 0x17	; 23
     f26:	09 df       	rcall	.-494    	; 0xd3a <oqGetI>
     f28:	ec 01       	movw	r28, r24
     f2a:	97 fd       	sbrc	r25, 7
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <sdRequestDataI+0x20>
     f2e:	ce 01       	movw	r24, r28
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret
     f3a:	68 e0       	ldi	r22, 0x08	; 8
     f3c:	c8 01       	movw	r24, r16
     f3e:	02 96       	adiw	r24, 0x02	; 2
     f40:	7f dc       	rcall	.-1794   	; 0x840 <chEvtBroadcastFlagsI>
     f42:	ce 01       	movw	r24, r28
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     f4e:	08 95       	ret

00000f50 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     f50:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     f52:	80 81       	ld	r24, Z
     f54:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     f56:	81 81       	ldd	r24, Z+1	; 0x01
     f58:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     f5e:	83 81       	ldd	r24, Z+3	; 0x03
     f60:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     f62:	84 81       	ldd	r24, Z+4	; 0x04
     f64:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     f66:	85 81       	ldd	r24, Z+5	; 0x05
     f68:	8a b9       	out	0x0a, r24	; 10
     f6a:	08 95       	ret

00000f6c <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     f6c:	fc 01       	movw	r30, r24

  switch (mode) {
     f6e:	42 30       	cpi	r20, 0x02	; 2
     f70:	c9 f0       	breq	.+50     	; 0xfa4 <_pal_lld_setgroupmode+0x38>
     f72:	98 f0       	brcs	.+38     	; 0xf9a <_pal_lld_setgroupmode+0x2e>
     f74:	45 30       	cpi	r20, 0x05	; 5
     f76:	b1 f0       	breq	.+44     	; 0xfa4 <_pal_lld_setgroupmode+0x38>
     f78:	46 30       	cpi	r20, 0x06	; 6
     f7a:	21 f4       	brne	.+8      	; 0xf84 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	68 2b       	or	r22, r24
     f80:	61 83       	std	Z+1, r22	; 0x01
     f82:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     f84:	43 30       	cpi	r20, 0x03	; 3
     f86:	e9 f7       	brne	.-6      	; 0xf82 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	96 2f       	mov	r25, r22
     f8c:	90 95       	com	r25
     f8e:	89 23       	and	r24, r25
     f90:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	68 2b       	or	r22, r24
     f96:	62 83       	std	Z+2, r22	; 0x02
    break;
     f98:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     f9a:	44 23       	and	r20, r20
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <_pal_lld_setgroupmode+0x38>
     f9e:	41 30       	cpi	r20, 0x01	; 1
     fa0:	99 f3       	breq	.-26     	; 0xf88 <_pal_lld_setgroupmode+0x1c>
     fa2:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	60 95       	com	r22
     fa8:	86 23       	and	r24, r22
     faa:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	68 23       	and	r22, r24
     fb0:	62 83       	std	Z+2, r22	; 0x02
    break;
     fb2:	08 95       	ret

00000fb4 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <__avr_in_isr>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     fdc:	f6 d8       	rcall	.-3604   	; 0x1ca <chSysTimerHandlerI>
     fde:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__avr_in_isr>
     fe2:	ca da       	rcall	.-2668   	; 0x578 <chSchIsPreemptionRequired>
     fe4:	81 11       	cpse	r24, r1
}
     fe6:	d8 da       	rcall	.-2640   	; 0x598 <chSchDoReschedule>
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
    100e:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
    1010:	9f e7       	ldi	r25, 0x7F	; 127
    1012:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
    1014:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
    1016:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
    1018:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    101c:	08 95       	ret

0000101e <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
    1046:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <GPTD1+0x6>
    104a:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <GPTD1+0x7>
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <GPTD1+0x7>
    1054:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
    1058:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <GPTD1+0x4>
    105c:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <GPTD1+0x5>
    1060:	82 17       	cp	r24, r18
    1062:	93 07       	cpc	r25, r19
    1064:	b1 f0       	breq	.+44     	; 0x1092 <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
    1066:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__avr_in_isr>
    106a:	86 da       	rcall	.-2804   	; 0x578 <chSchIsPreemptionRequired>
    106c:	81 11       	cpse	r24, r1
    106e:	94 da       	rcall	.-2776   	; 0x598 <chSchDoReschedule>
}
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    1092:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <GPTD1+0x7>
    1096:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <GPTD1+0x6>
    if (gptp->state == GPT_ONESHOT) {
    109a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <GPTD1>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	41 f0       	breq	.+16     	; 0x10b2 <__vector_11+0x94>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
    10a2:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <GPTD1+0x8>
    10a6:	f0 91 03 04 	lds	r31, 0x0403	; 0x800403 <GPTD1+0x9>
    10aa:	8a ef       	ldi	r24, 0xFA	; 250
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	09 95       	icall
    10b0:	da cf       	rjmp	.-76     	; 0x1066 <__vector_11+0x48>

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <GPTD1>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
    10b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    10bc:	88 7f       	andi	r24, 0xF8	; 248
    10be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  *regs_table[i].tifr = (1 << OCF1A);
    10c2:	96 bb       	out	0x16, r25	; 22
    10c4:	ee cf       	rjmp	.-36     	; 0x10a2 <__vector_11+0x84>

000010c6 <gpt_lld_init>:
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
    10c6:	8a ef       	ldi	r24, 0xFA	; 250
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	ab ce       	rjmp	.-682    	; 0xe22 <gptObjectInit>

000010cc <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    10cc:	e1 ec       	ldi	r30, 0xC1	; 193
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	80 83       	st	Z, r24
    10d6:	08 95       	ret

000010d8 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <__avr_in_isr>

  sra = UCSR0A;
    1100:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1104:	98 2f       	mov	r25, r24
    1106:	9c 71       	andi	r25, 0x1C	; 28
    1108:	d9 f4       	brne	.+54     	; 0x1140 <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    110a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	df de       	rcall	.-578    	; 0xed2 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1114:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__avr_in_isr>
    1118:	2f da       	rcall	.-2978   	; 0x578 <chSchIsPreemptionRequired>
    111a:	81 11       	cpse	r24, r1
    111c:	3d da       	rcall	.-2950   	; 0x598 <chSchDoReschedule>
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    1140:	83 fd       	sbrc	r24, 3
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    1144:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    1146:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    1148:	60 62       	ori	r22, 0x20	; 32
    114a:	84 fd       	sbrc	r24, 4
    114c:	60 64       	ori	r22, 0x40	; 64
    114e:	86 e0       	ldi	r24, 0x06	; 6
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	76 db       	rcall	.-2324   	; 0x840 <chEvtBroadcastFlagsI>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1154:	da cf       	rjmp	.-76     	; 0x110a <__vector_18+0x32>
    1156:	60 e8       	ldi	r22, 0x80	; 128
    1158:	f6 cf       	rjmp	.-20     	; 0x1146 <__vector_18+0x6e>

0000115a <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	2f 93       	push	r18
    1166:	3f 93       	push	r19
    1168:	4f 93       	push	r20
    116a:	5f 93       	push	r21
    116c:	6f 93       	push	r22
    116e:	7f 93       	push	r23
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	94 e0       	ldi	r25, 0x04	; 4
    1186:	c9 de       	rcall	.-622    	; 0xf1a <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1188:	97 fd       	sbrc	r25, 7
    118a:	18 c0       	rjmp	.+48     	; 0x11bc <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    118c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    1190:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__avr_in_isr>
    1194:	f1 d9       	rcall	.-3102   	; 0x578 <chSchIsPreemptionRequired>
    1196:	81 11       	cpse	r24, r1
    1198:	ff d9       	rcall	.-3074   	; 0x598 <chSchDoReschedule>
}
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    11bc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11c0:	8f 7d       	andi	r24, 0xDF	; 223
    11c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11c6:	e4 cf       	rjmp	.-56     	; 0x1190 <__vector_19+0x36>

000011c8 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    11c8:	46 e6       	ldi	r20, 0x66	; 102
    11ca:	58 e0       	ldi	r21, 0x08	; 8
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	48 ce       	rjmp	.-880    	; 0xe66 <sdObjectInit>

000011d6 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    11d6:	61 15       	cp	r22, r1
    11d8:	71 05       	cpc	r23, r1
    11da:	19 f1       	breq	.+70     	; 0x1222 <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    11dc:	84 50       	subi	r24, 0x04	; 4
    11de:	94 40       	sbci	r25, 0x04	; 4
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <sd_lld_start+0xe>
    11e2:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    11e4:	fb 01       	movw	r30, r22
    11e6:	80 81       	ld	r24, Z
    11e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
    11ee:	8f 70       	andi	r24, 0x0F	; 15
    11f0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    11fa:	88 e9       	ldi	r24, 0x98	; 152
    11fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	b9 f0       	breq	.+46     	; 0x1234 <sd_lld_start+0x5e>
    1206:	a0 f0       	brcs	.+40     	; 0x1230 <sd_lld_start+0x5a>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	71 f0       	breq	.+28     	; 0x1228 <sd_lld_start+0x52>
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	71 f4       	brne	.+28     	; 0x122c <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    1210:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1214:	84 60       	ori	r24, 0x04	; 4
    1216:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    121a:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    121c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1220:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    1222:	6a e3       	ldi	r22, 0x3A	; 58
    1224:	71 e0       	ldi	r23, 0x01	; 1
    1226:	da cf       	rjmp	.-76     	; 0x11dc <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	f8 cf       	rjmp	.-16     	; 0x121c <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	f6 cf       	rjmp	.-20     	; 0x121c <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	f4 cf       	rjmp	.-24     	; 0x121c <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	f2 cf       	rjmp	.-28     	; 0x121c <sd_lld_start+0x46>

00001238 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    1238:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    123c:	1d ba       	out	0x1d, r1	; 29
    123e:	08 95       	ret

00001240 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	a2 97       	sbiw	r28, 0x22	; 34
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	1c 01       	movw	r2, r24
    1276:	6b 01       	movw	r12, r22
    1278:	58 8f       	std	Y+24, r21	; 0x18
    127a:	4f 8b       	std	Y+23, r20	; 0x17
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    127c:	1e 8a       	std	Y+22, r1	; 0x16
    127e:	1d 8a       	std	Y+21, r1	; 0x15
    1280:	9e 01       	movw	r18, r28
    1282:	2e 5f       	subi	r18, 0xFE	; 254
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	3e 87       	std	Y+14, r19	; 0x0e
    1288:	2d 87       	std	Y+13, r18	; 0x0d
    128a:	ae 01       	movw	r20, r28
    128c:	4f 5f       	subi	r20, 0xFF	; 255
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	58 8b       	std	Y+16, r21	; 0x10
    1292:	4f 87       	std	Y+15, r20	; 0x0f
    1294:	24 1b       	sub	r18, r20
    1296:	35 0b       	sbc	r19, r21
    1298:	38 a3       	std	Y+32, r19	; 0x20
    129a:	2f 8f       	std	Y+31, r18	; 0x1f
    129c:	21 50       	subi	r18, 0x01	; 1
    129e:	31 09       	sbc	r19, r1
    12a0:	3a a3       	std	Y+34, r19	; 0x22
    12a2:	29 a3       	std	Y+33, r18	; 0x21
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    12a4:	ce 01       	movw	r24, r28
    12a6:	0c 96       	adiw	r24, 0x0c	; 12
    12a8:	9a 8b       	std	Y+18, r25	; 0x12
    12aa:	89 8b       	std	Y+17, r24	; 0x11
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    12ac:	86 01       	movw	r16, r12
    12ae:	0f 5f       	subi	r16, 0xFF	; 255
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	d6 01       	movw	r26, r12
    12b4:	6c 91       	ld	r22, X
    if (c == 0)
    12b6:	66 23       	and	r22, r22
    12b8:	b9 f0       	breq	.+46     	; 0x12e8 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    12ba:	65 32       	cpi	r22, 0x25	; 37
    12bc:	81 f1       	breq	.+96     	; 0x131e <chvprintf+0xde>
      streamPut(chp, (uint8_t)c);
    12be:	d1 01       	movw	r26, r2
    12c0:	ed 91       	ld	r30, X+
    12c2:	fc 91       	ld	r31, X
    12c4:	06 80       	ldd	r0, Z+6	; 0x06
    12c6:	f7 81       	ldd	r31, Z+7	; 0x07
    12c8:	e0 2d       	mov	r30, r0
    12ca:	c1 01       	movw	r24, r2
    12cc:	09 95       	icall
      n++;
    12ce:	ed 89       	ldd	r30, Y+21	; 0x15
    12d0:	fe 89       	ldd	r31, Y+22	; 0x16
    12d2:	31 96       	adiw	r30, 0x01	; 1
    12d4:	fe 8b       	std	Y+22, r31	; 0x16
    12d6:	ed 8b       	std	Y+21, r30	; 0x15
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    12d8:	68 01       	movw	r12, r16
    12da:	86 01       	movw	r16, r12
    12dc:	0f 5f       	subi	r16, 0xFF	; 255
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	d6 01       	movw	r26, r12
    12e2:	6c 91       	ld	r22, X
    if (c == 0)
    12e4:	61 11       	cpse	r22, r1
    12e6:	e9 cf       	rjmp	.-46     	; 0x12ba <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    12e8:	8d 89       	ldd	r24, Y+21	; 0x15
    12ea:	9e 89       	ldd	r25, Y+22	; 0x16
    12ec:	a2 96       	adiw	r28, 0x22	; 34
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	3f 90       	pop	r3
    131a:	2f 90       	pop	r2
    131c:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    131e:	d6 01       	movw	r26, r12
    1320:	11 96       	adiw	r26, 0x01	; 1
    1322:	8c 91       	ld	r24, X
    1324:	11 97       	sbiw	r26, 0x01	; 1
    1326:	8d 32       	cpi	r24, 0x2D	; 45
    1328:	09 f4       	brne	.+2      	; 0x132c <chvprintf+0xec>
    132a:	ec c0       	rjmp	.+472    	; 0x1504 <chvprintf+0x2c4>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    132c:	1a 8e       	std	Y+26, r1	; 0x1a
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    132e:	80 33       	cpi	r24, 0x30	; 48
    1330:	09 f4       	brne	.+2      	; 0x1334 <chvprintf+0xf4>
    1332:	e1 c0       	rjmp	.+450    	; 0x14f6 <chvprintf+0x2b6>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    1334:	20 e2       	ldi	r18, 0x20	; 32
    1336:	29 8f       	std	Y+25, r18	; 0x19
    1338:	a8 01       	movw	r20, r16
    133a:	4f 5f       	subi	r20, 0xFF	; 255
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    133e:	00 e0       	ldi	r16, 0x00	; 0
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	ef 89       	ldd	r30, Y+23	; 0x17
    1344:	f8 8d       	ldd	r31, Y+24	; 0x18
    1346:	13 c0       	rjmp	.+38     	; 0x136e <chvprintf+0x12e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    1348:	90 81       	ld	r25, Z
    134a:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    134c:	98 01       	movw	r18, r16
    134e:	22 0f       	add	r18, r18
    1350:	33 1f       	adc	r19, r19
    1352:	00 0f       	add	r16, r16
    1354:	11 1f       	adc	r17, r17
    1356:	00 0f       	add	r16, r16
    1358:	11 1f       	adc	r17, r17
    135a:	00 0f       	add	r16, r16
    135c:	11 1f       	adc	r17, r17
    135e:	02 0f       	add	r16, r18
    1360:	13 1f       	adc	r17, r19
    1362:	09 0f       	add	r16, r25
    1364:	11 1d       	adc	r17, r1
    1366:	4f 5f       	subi	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	d6 01       	movw	r26, r12
    136c:	8c 91       	ld	r24, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    136e:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    1370:	90 ed       	ldi	r25, 0xD0	; 208
    1372:	98 0f       	add	r25, r24
    1374:	9a 30       	cpi	r25, 0x0A	; 10
    1376:	50 f3       	brcs	.-44     	; 0x134c <chvprintf+0x10c>
        c -= '0';
      else if (c == '*')
    1378:	8a 32       	cpi	r24, 0x2A	; 42
    137a:	31 f3       	breq	.-52     	; 0x1348 <chvprintf+0x108>
    137c:	f8 8f       	std	Y+24, r31	; 0x18
    137e:	ef 8b       	std	Y+23, r30	; 0x17
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    1384:	8e 32       	cpi	r24, 0x2E	; 46
    1386:	09 f4       	brne	.+2      	; 0x138a <chvprintf+0x14a>
    1388:	96 c0       	rjmp	.+300    	; 0x14b6 <chvprintf+0x276>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    138a:	98 2f       	mov	r25, r24
    138c:	9f 7d       	andi	r25, 0xDF	; 223
    138e:	9c 34       	cpi	r25, 0x4C	; 76
    1390:	09 f4       	brne	.+2      	; 0x1394 <chvprintf+0x154>
    1392:	7e c0       	rjmp	.+252    	; 0x1490 <chvprintf+0x250>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    1394:	af eb       	ldi	r26, 0xBF	; 191
    1396:	a8 0f       	add	r26, r24
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	aa 31       	cpi	r26, 0x1A	; 26
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <chvprintf+0x160>
    139e:	90 e0       	ldi	r25, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    13a0:	48 2f       	mov	r20, r24
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	fa 01       	movw	r30, r20
    13a6:	e4 54       	subi	r30, 0x44	; 68
    13a8:	f1 09       	sbc	r31, r1
    13aa:	e5 33       	cpi	r30, 0x35	; 53
    13ac:	f1 05       	cpc	r31, r1
    13ae:	08 f4       	brcc	.+2      	; 0x13b2 <chvprintf+0x172>
    13b0:	b1 c0       	rjmp	.+354    	; 0x1514 <chvprintf+0x2d4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13b6:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    13b8:	89 a0       	ldd	r8, Y+33	; 0x21
    13ba:	9a a0       	ldd	r9, Y+34	; 0x22
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    13bc:	ae 01       	movw	r20, r28
    13be:	4f 5f       	subi	r20, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	7a 01       	movw	r14, r20
    13c4:	58 01       	movw	r10, r16
    13c6:	ae 1a       	sub	r10, r30
    13c8:	bf 0a       	sbc	r11, r31
    13ca:	b7 fc       	sbrc	r11, 7
    13cc:	da c0       	rjmp	.+436    	; 0x1582 <chvprintf+0x342>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    13ce:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13d0:	51 11       	cpse	r21, r1
    13d2:	5b c0       	rjmp	.+182    	; 0x148a <chvprintf+0x24a>
      width = -width;
    13d4:	00 27       	eor	r16, r16
    13d6:	11 27       	eor	r17, r17
    13d8:	0a 19       	sub	r16, r10
    13da:	1b 09       	sbc	r17, r11
    if (width < 0) {
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <chvprintf+0x1a0>
    13de:	5c c1       	rjmp	.+696    	; 0x1698 <chvprintf+0x458>
      if (*s == '-' && filler == '0') {
    13e0:	d7 01       	movw	r26, r14
    13e2:	8c 91       	ld	r24, X
    13e4:	8d 32       	cpi	r24, 0x2D	; 45
    13e6:	09 f4       	brne	.+2      	; 0x13ea <chvprintf+0x1aa>
    13e8:	60 c1       	rjmp	.+704    	; 0x16aa <chvprintf+0x46a>
    13ea:	79 8c       	ldd	r7, Y+25	; 0x19
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    13ec:	d1 01       	movw	r26, r2
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	06 80       	ldd	r0, Z+6	; 0x06
    13f4:	f7 81       	ldd	r31, Z+7	; 0x07
    13f6:	e0 2d       	mov	r30, r0
    13f8:	67 2d       	mov	r22, r7
    13fa:	c1 01       	movw	r24, r2
    13fc:	09 95       	icall
        n++;
      } while (++width != 0);
    13fe:	0f 5f       	subi	r16, 0xFF	; 255
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	a1 f7       	brne	.-24     	; 0x13ec <chvprintf+0x1ac>
    1404:	2d 89       	ldd	r18, Y+21	; 0x15
    1406:	3e 89       	ldd	r19, Y+22	; 0x16
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	8a 19       	sub	r24, r10
    1412:	9b 09       	sbc	r25, r11
    1414:	a9 01       	movw	r20, r18
    1416:	48 1b       	sub	r20, r24
    1418:	59 0b       	sbc	r21, r25
    141a:	5e 8b       	std	Y+22, r21	; 0x16
    141c:	4d 8b       	std	Y+21, r20	; 0x15
    }
    while (--i >= 0) {
    141e:	97 fc       	sbrc	r9, 7
    1420:	45 cf       	rjmp	.-374    	; 0x12ac <chvprintf+0x6c>
    1422:	a1 2c       	mov	r10, r1
    1424:	b1 2c       	mov	r11, r1
    1426:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)*s++);
    1428:	f7 01       	movw	r30, r14
    142a:	61 91       	ld	r22, Z+
    142c:	7f 01       	movw	r14, r30
    142e:	d1 01       	movw	r26, r2
    1430:	ed 91       	ld	r30, X+
    1432:	fc 91       	ld	r31, X
    1434:	06 80       	ldd	r0, Z+6	; 0x06
    1436:	f7 81       	ldd	r31, Z+7	; 0x07
    1438:	e0 2d       	mov	r30, r0
    143a:	c1 01       	movw	r24, r2
    143c:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    143e:	01 50       	subi	r16, 0x01	; 1
    1440:	11 09       	sbc	r17, r1
    1442:	90 f7       	brcc	.-28     	; 0x1428 <chvprintf+0x1e8>
    1444:	8d 89       	ldd	r24, Y+21	; 0x15
    1446:	9e 89       	ldd	r25, Y+22	; 0x16
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	97 fc       	sbrc	r9, 7
    144c:	2b c1       	rjmp	.+598    	; 0x16a4 <chvprintf+0x464>
    144e:	f4 01       	movw	r30, r8
    1450:	e8 0f       	add	r30, r24
    1452:	f9 1f       	adc	r31, r25
    1454:	fe 8b       	std	Y+22, r31	; 0x16
    1456:	ed 8b       	std	Y+21, r30	; 0x15
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1458:	a1 14       	cp	r10, r1
    145a:	b1 04       	cpc	r11, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <chvprintf+0x220>
    145e:	26 cf       	rjmp	.-436    	; 0x12ac <chvprintf+0x6c>
    1460:	85 01       	movw	r16, r10
    1462:	f9 8c       	ldd	r15, Y+25	; 0x19
      streamPut(chp, (uint8_t)filler);
    1464:	d1 01       	movw	r26, r2
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	06 80       	ldd	r0, Z+6	; 0x06
    146c:	f7 81       	ldd	r31, Z+7	; 0x07
    146e:	e0 2d       	mov	r30, r0
    1470:	6f 2d       	mov	r22, r15
    1472:	c1 01       	movw	r24, r2
    1474:	09 95       	icall
      n++;
      width--;
    1476:	01 50       	subi	r16, 0x01	; 1
    1478:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    147a:	a1 f7       	brne	.-24     	; 0x1464 <chvprintf+0x224>
    147c:	ed 89       	ldd	r30, Y+21	; 0x15
    147e:	fe 89       	ldd	r31, Y+22	; 0x16
    1480:	ea 0d       	add	r30, r10
    1482:	fb 1d       	adc	r31, r11
    1484:	fe 8b       	std	Y+22, r31	; 0x16
    1486:	ed 8b       	std	Y+21, r30	; 0x15
    1488:	11 cf       	rjmp	.-478    	; 0x12ac <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    148a:	97 fe       	sbrs	r9, 7
    148c:	cc cf       	rjmp	.-104    	; 0x1426 <chvprintf+0x1e6>
    148e:	e4 cf       	rjmp	.-56     	; 0x1458 <chvprintf+0x218>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    1490:	d6 01       	movw	r26, r12
    1492:	4c 91       	ld	r20, X
    1494:	44 23       	and	r20, r20
    1496:	09 f4       	brne	.+2      	; 0x149a <chvprintf+0x25a>
    1498:	8c cf       	rjmp	.-232    	; 0x13b2 <chvprintf+0x172>
        c = *fmt++;
    149a:	ff ef       	ldi	r31, 0xFF	; 255
    149c:	cf 1a       	sub	r12, r31
    149e:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    14a0:	84 2f       	mov	r24, r20
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	fc 01       	movw	r30, r24
    14a6:	e4 54       	subi	r30, 0x44	; 68
    14a8:	f1 09       	sbc	r31, r1
    14aa:	e5 33       	cpi	r30, 0x35	; 53
    14ac:	f1 05       	cpc	r31, r1
    14ae:	08 f4       	brcc	.+2      	; 0x14b2 <chvprintf+0x272>
    14b0:	f6 c0       	rjmp	.+492    	; 0x169e <chvprintf+0x45e>
    14b2:	84 2f       	mov	r24, r20
    14b4:	7e cf       	rjmp	.-260    	; 0x13b2 <chvprintf+0x172>
    14b6:	df 01       	movw	r26, r30
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <chvprintf+0x298>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    14ba:	9c 91       	ld	r25, X
    14bc:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    14be:	a9 01       	movw	r20, r18
    14c0:	44 0f       	add	r20, r20
    14c2:	55 1f       	adc	r21, r21
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	24 0f       	add	r18, r20
    14d2:	35 1f       	adc	r19, r21
        precision += c;
    14d4:	29 0f       	add	r18, r25
    14d6:	31 1d       	adc	r19, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    14d8:	ef ef       	ldi	r30, 0xFF	; 255
    14da:	ce 1a       	sub	r12, r30
    14dc:	de 0a       	sbc	r13, r30
    14de:	f6 01       	movw	r30, r12
    14e0:	31 97       	sbiw	r30, 0x01	; 1
    14e2:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    14e4:	90 ed       	ldi	r25, 0xD0	; 208
    14e6:	98 0f       	add	r25, r24
    14e8:	9a 30       	cpi	r25, 0x0A	; 10
    14ea:	48 f3       	brcs	.-46     	; 0x14be <chvprintf+0x27e>
          c -= '0';
        else if (c == '*')
    14ec:	8a 32       	cpi	r24, 0x2A	; 42
    14ee:	29 f3       	breq	.-54     	; 0x14ba <chvprintf+0x27a>
    14f0:	b8 8f       	std	Y+24, r27	; 0x18
    14f2:	af 8b       	std	Y+23, r26	; 0x17
    14f4:	4a cf       	rjmp	.-364    	; 0x138a <chvprintf+0x14a>
    14f6:	f8 01       	movw	r30, r16
    14f8:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    14fa:	0f 5f       	subi	r16, 0xFF	; 255
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    14fe:	f0 e3       	ldi	r31, 0x30	; 48
    1500:	f9 8f       	std	Y+25, r31	; 0x19
    1502:	1a cf       	rjmp	.-460    	; 0x1338 <chvprintf+0xf8>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    1504:	86 01       	movw	r16, r12
    1506:	0e 5f       	subi	r16, 0xFE	; 254
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	8c 91       	ld	r24, X
      left_align = TRUE;
    150e:	b1 e0       	ldi	r27, 0x01	; 1
    1510:	ba 8f       	std	Y+26, r27	; 0x1a
    1512:	0d cf       	rjmp	.-486    	; 0x132e <chvprintf+0xee>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1514:	ec 5c       	subi	r30, 0xCC	; 204
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    151c:	8f 89       	ldd	r24, Y+23	; 0x17
    151e:	98 8d       	ldd	r25, Y+24	; 0x18
    1520:	02 96       	adiw	r24, 0x02	; 2
    1522:	af 89       	ldd	r26, Y+23	; 0x17
    1524:	b8 8d       	ldd	r27, Y+24	; 0x18
    1526:	ed 90       	ld	r14, X+
    1528:	fc 90       	ld	r15, X
    152a:	e1 14       	cp	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <chvprintf+0x2f2>
    1530:	6a c1       	rjmp	.+724    	; 0x1806 <chvprintf+0x5c6>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1532:	f7 01       	movw	r30, r14
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    1534:	21 15       	cp	r18, r1
    1536:	31 05       	cpc	r19, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <chvprintf+0x2fc>
    153a:	d1 c0       	rjmp	.+418    	; 0x16de <chvprintf+0x49e>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    153c:	40 81       	ld	r20, Z
    153e:	44 23       	and	r20, r20
    1540:	09 f4       	brne	.+2      	; 0x1544 <chvprintf+0x304>
    1542:	66 c1       	rjmp	.+716    	; 0x1810 <chvprintf+0x5d0>
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	31 09       	sbc	r19, r1
    1548:	f7 01       	movw	r30, r14
    154a:	31 96       	adiw	r30, 0x01	; 1
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <chvprintf+0x318>
    154e:	21 50       	subi	r18, 0x01	; 1
    1550:	31 09       	sbc	r19, r1
    1552:	08 f4       	brcc	.+2      	; 0x1556 <chvprintf+0x316>
    1554:	4d c1       	rjmp	.+666    	; 0x17f0 <chvprintf+0x5b0>
    1556:	fb 01       	movw	r30, r22
    1558:	bf 01       	movw	r22, r30
    155a:	6f 5f       	subi	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	40 81       	ld	r20, Z
    1560:	41 11       	cpse	r20, r1
    1562:	f5 cf       	rjmp	.-22     	; 0x154e <chvprintf+0x30e>
    1564:	ee 19       	sub	r30, r14
    1566:	ff 09       	sbc	r31, r15
    1568:	4f 01       	movw	r8, r30
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	82 1a       	sub	r8, r18
    156e:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1570:	98 8f       	std	Y+24, r25	; 0x18
    1572:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1574:	30 e2       	ldi	r19, 0x20	; 32
    1576:	39 8f       	std	Y+25, r19	; 0x19
    1578:	58 01       	movw	r10, r16
    157a:	ae 1a       	sub	r10, r30
    157c:	bf 0a       	sbc	r11, r31
    157e:	b7 fe       	sbrs	r11, 7
    1580:	26 cf       	rjmp	.-436    	; 0x13ce <chvprintf+0x18e>
    1582:	a1 2c       	mov	r10, r1
    1584:	b1 2c       	mov	r11, r1
    1586:	23 cf       	rjmp	.-442    	; 0x13ce <chvprintf+0x18e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1588:	af 89       	ldd	r26, Y+23	; 0x17
    158a:	b8 8d       	ldd	r27, Y+24	; 0x18
    158c:	8c 91       	ld	r24, X
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1592:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1594:	89 a0       	ldd	r8, Y+33	; 0x21
    1596:	9a a0       	ldd	r9, Y+34	; 0x22

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	b8 8f       	std	Y+24, r27	; 0x18
    159c:	af 8b       	std	Y+23, r26	; 0x17
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    159e:	b0 e2       	ldi	r27, 0x20	; 32
    15a0:	b9 8f       	std	Y+25, r27	; 0x19
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    15a2:	9e 01       	movw	r18, r28
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    15aa:	0c cf       	rjmp	.-488    	; 0x13c4 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    15ac:	91 e0       	ldi	r25, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    15ae:	4a e0       	ldi	r20, 0x0A	; 10
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    15b6:	91 11       	cpse	r25, r1
    15b8:	64 c0       	rjmp	.+200    	; 0x1682 <chvprintf+0x442>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    15ba:	ef 89       	ldd	r30, Y+23	; 0x17
    15bc:	f8 8d       	ldd	r31, Y+24	; 0x18
    15be:	80 80       	ld	r8, Z
    15c0:	91 80       	ldd	r9, Z+1	; 0x01
    15c2:	a1 2c       	mov	r10, r1
    15c4:	b1 2c       	mov	r11, r1
    15c6:	32 96       	adiw	r30, 0x02	; 2
    15c8:	f8 8f       	std	Y+24, r31	; 0x18
    15ca:	ef 8b       	std	Y+23, r30	; 0x17
    15cc:	24 01       	movw	r4, r8
    15ce:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    15d0:	9e 01       	movw	r18, r28
    15d2:	24 5f       	subi	r18, 0xF4	; 244
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	3c 8b       	std	Y+20, r19	; 0x14
    15d8:	2b 8b       	std	Y+19, r18	; 0x13
    15da:	1c 8f       	std	Y+28, r17	; 0x1c
    15dc:	0b 8f       	std	Y+27, r16	; 0x1b
    15de:	7a 01       	movw	r14, r20
    15e0:	8b 01       	movw	r16, r22
    15e2:	de 8e       	std	Y+30, r13	; 0x1e
    15e4:	cd 8e       	std	Y+29, r12	; 0x1d
  do {
    i = (int)(l % radix);
    15e6:	c5 01       	movw	r24, r10
    15e8:	b4 01       	movw	r22, r8
    15ea:	a8 01       	movw	r20, r16
    15ec:	97 01       	movw	r18, r14
    15ee:	f4 d7       	rcall	.+4072   	; 0x25d8 <__divmodsi4>
    i += '0';
    15f0:	9b 01       	movw	r18, r22
    15f2:	20 5d       	subi	r18, 0xD0	; 208
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    15f6:	2a 33       	cpi	r18, 0x3A	; 58
    15f8:	31 05       	cpc	r19, r1
    15fa:	14 f0       	brlt	.+4      	; 0x1600 <chvprintf+0x3c0>
      i += 'A' - '0' - 10;
    15fc:	29 5f       	subi	r18, 0xF9	; 249
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    *--q = i;
    1600:	d2 2e       	mov	r13, r18
    1602:	ab 89       	ldd	r26, Y+19	; 0x13
    1604:	bc 89       	ldd	r27, Y+20	; 0x14
    1606:	2e 93       	st	-X, r18
    1608:	bc 8b       	std	Y+20, r27	; 0x14
    160a:	ab 8b       	std	Y+19, r26	; 0x13
    l /= radix;
    160c:	c5 01       	movw	r24, r10
    160e:	b4 01       	movw	r22, r8
    1610:	a8 01       	movw	r20, r16
    1612:	97 01       	movw	r18, r14
    1614:	e1 d7       	rcall	.+4034   	; 0x25d8 <__divmodsi4>
    1616:	49 01       	movw	r8, r18
    1618:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    161a:	c3 01       	movw	r24, r6
    161c:	b2 01       	movw	r22, r4
    161e:	a8 01       	movw	r20, r16
    1620:	97 01       	movw	r18, r14
    1622:	da d7       	rcall	.+4020   	; 0x25d8 <__divmodsi4>
    1624:	29 01       	movw	r4, r18
    1626:	3a 01       	movw	r6, r20
    1628:	23 2b       	or	r18, r19
    162a:	24 2b       	or	r18, r20
    162c:	25 2b       	or	r18, r21
    162e:	d9 f6       	brne	.-74     	; 0x15e6 <chvprintf+0x3a6>
    1630:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1632:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1634:	fd 2c       	mov	r15, r13
    1636:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1638:	de 8c       	ldd	r13, Y+30	; 0x1e

  i = (int)(p + MAX_FILLER - q);
    163a:	89 89       	ldd	r24, Y+17	; 0x11
    163c:	9a 89       	ldd	r25, Y+18	; 0x12
    163e:	eb 89       	ldd	r30, Y+19	; 0x13
    1640:	fc 89       	ldd	r31, Y+20	; 0x14
    1642:	8e 1b       	sub	r24, r30
    1644:	9f 0b       	sbc	r25, r31
    1646:	de 01       	movw	r26, r28
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	9d 01       	movw	r18, r26
    164e:	28 0f       	add	r18, r24
    1650:	39 1f       	adc	r19, r25
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <chvprintf+0x416>
    1654:	f1 90       	ld	r15, Z+
  do
    *p++ = *q++;
    1656:	fd 92       	st	X+, r15
  while (--i);
    1658:	a2 17       	cp	r26, r18
    165a:	b3 07       	cpc	r27, r19
    165c:	d9 f7       	brne	.-10     	; 0x1654 <chvprintf+0x414>
    165e:	4c 01       	movw	r8, r24
    1660:	f1 e0       	ldi	r31, 0x01	; 1
    1662:	8f 1a       	sub	r8, r31
    1664:	91 08       	sbc	r9, r1
    1666:	fc 01       	movw	r30, r24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1668:	9e 01       	movw	r18, r28
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	79 01       	movw	r14, r18
    1670:	a9 ce       	rjmp	.-686    	; 0x13c4 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	48 e0       	ldi	r20, 0x08	; 8
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    167c:	99 23       	and	r25, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <chvprintf+0x442>
    1680:	9c cf       	rjmp	.-200    	; 0x15ba <chvprintf+0x37a>
        l = va_arg(ap, unsigned long);
    1682:	af 89       	ldd	r26, Y+23	; 0x17
    1684:	b8 8d       	ldd	r27, Y+24	; 0x18
    1686:	8d 90       	ld	r8, X+
    1688:	9d 90       	ld	r9, X+
    168a:	ad 90       	ld	r10, X+
    168c:	bc 90       	ld	r11, X
    168e:	13 97       	sbiw	r26, 0x03	; 3
    1690:	14 96       	adiw	r26, 0x04	; 4
    1692:	b8 8f       	std	Y+24, r27	; 0x18
    1694:	af 8b       	std	Y+23, r26	; 0x17
    1696:	9a cf       	rjmp	.-204    	; 0x15cc <chvprintf+0x38c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1698:	97 fe       	sbrs	r9, 7
    169a:	c3 ce       	rjmp	.-634    	; 0x1422 <chvprintf+0x1e2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    169c:	07 ce       	rjmp	.-1010   	; 0x12ac <chvprintf+0x6c>
    169e:	e7 59       	subi	r30, 0x97	; 151
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	b6 c7       	rjmp	.+3948   	; 0x2610 <__tablejump2__>
    16a4:	81 2c       	mov	r8, r1
    16a6:	91 2c       	mov	r9, r1
    16a8:	d2 ce       	rjmp	.-604    	; 0x144e <chvprintf+0x20e>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    16aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    16ac:	b0 33       	cpi	r27, 0x30	; 48
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <chvprintf+0x472>
    16b0:	9c ce       	rjmp	.-712    	; 0x13ea <chvprintf+0x1aa>
        streamPut(chp, (uint8_t)*s++);
    16b2:	ef ef       	ldi	r30, 0xFF	; 255
    16b4:	ee 1a       	sub	r14, r30
    16b6:	fe 0a       	sbc	r15, r30
    16b8:	d1 01       	movw	r26, r2
    16ba:	ed 91       	ld	r30, X+
    16bc:	fc 91       	ld	r31, X
    16be:	06 80       	ldd	r0, Z+6	; 0x06
    16c0:	f7 81       	ldd	r31, Z+7	; 0x07
    16c2:	e0 2d       	mov	r30, r0
    16c4:	6d e2       	ldi	r22, 0x2D	; 45
    16c6:	c1 01       	movw	r24, r2
    16c8:	09 95       	icall
        n++;
    16ca:	ed 89       	ldd	r30, Y+21	; 0x15
    16cc:	fe 89       	ldd	r31, Y+22	; 0x16
    16ce:	31 96       	adiw	r30, 0x01	; 1
    16d0:	fe 8b       	std	Y+22, r31	; 0x16
    16d2:	ed 8b       	std	Y+21, r30	; 0x15
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	8f 1a       	sub	r8, r31
    16d8:	91 08       	sbc	r9, r1
    16da:	79 8c       	ldd	r7, Y+25	; 0x19
    16dc:	87 ce       	rjmp	.-754    	; 0x13ec <chvprintf+0x1ac>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    16de:	20 81       	ld	r18, Z
    16e0:	22 23       	and	r18, r18
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <chvprintf+0x4a6>
    16e4:	95 c0       	rjmp	.+298    	; 0x1810 <chvprintf+0x5d0>
    16e6:	2e ef       	ldi	r18, 0xFE	; 254
    16e8:	3f e7       	ldi	r19, 0x7F	; 127
    16ea:	2e cf       	rjmp	.-420    	; 0x1548 <chvprintf+0x308>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    16ec:	40 e1       	ldi	r20, 0x10	; 16
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	60 cf       	rjmp	.-320    	; 0x15b6 <chvprintf+0x376>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    16f6:	aa 31       	cpi	r26, 0x1A	; 26
    16f8:	08 f4       	brcc	.+2      	; 0x16fc <chvprintf+0x4bc>
    16fa:	59 c0       	rjmp	.+178    	; 0x17ae <chvprintf+0x56e>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    16fc:	ef 89       	ldd	r30, Y+23	; 0x17
    16fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    1700:	80 80       	ld	r8, Z
    1702:	91 80       	ldd	r9, Z+1	; 0x01
    1704:	09 2c       	mov	r0, r9
    1706:	00 0c       	add	r0, r0
    1708:	aa 08       	sbc	r10, r10
    170a:	bb 08       	sbc	r11, r11
    170c:	32 96       	adiw	r30, 0x02	; 2
    170e:	f8 8f       	std	Y+24, r31	; 0x18
    1710:	ef 8b       	std	Y+23, r30	; 0x17
      if (l < 0) {
    1712:	b7 fc       	sbrc	r11, 7
    1714:	58 c0       	rjmp	.+176    	; 0x17c6 <chvprintf+0x586>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1716:	ae 01       	movw	r20, r28
    1718:	4f 5f       	subi	r20, 0xFF	; 255
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	5c 8f       	std	Y+28, r21	; 0x1c
    171e:	4b 8f       	std	Y+27, r20	; 0x1b
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1724:	0b 96       	adiw	r24, 0x0b	; 11
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	24 01       	movw	r4, r8
    172c:	35 01       	movw	r6, r10
    172e:	1e 8f       	std	Y+30, r17	; 0x1e
    1730:	0d 8f       	std	Y+29, r16	; 0x1d
    1732:	7c 01       	movw	r14, r24
  do {
    i = (int)(l % radix);
    1734:	c5 01       	movw	r24, r10
    1736:	b4 01       	movw	r22, r8
    1738:	2a e0       	ldi	r18, 0x0A	; 10
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	4b d7       	rcall	.+3734   	; 0x25d8 <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1742:	60 5d       	subi	r22, 0xD0	; 208
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	16 2f       	mov	r17, r22
    1748:	d7 01       	movw	r26, r14
    174a:	6e 93       	st	-X, r22
    174c:	7d 01       	movw	r14, r26
    l /= radix;
    174e:	49 01       	movw	r8, r18
    1750:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1752:	c3 01       	movw	r24, r6
    1754:	b2 01       	movw	r22, r4
    1756:	2a e0       	ldi	r18, 0x0A	; 10
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	3c d7       	rcall	.+3704   	; 0x25d8 <__divmodsi4>
    1760:	29 01       	movw	r4, r18
    1762:	3a 01       	movw	r6, r20
    1764:	23 2b       	or	r18, r19
    1766:	24 2b       	or	r18, r20
    1768:	25 2b       	or	r18, r21
    176a:	21 f7       	brne	.-56     	; 0x1734 <chvprintf+0x4f4>
    176c:	c7 01       	movw	r24, r14
    176e:	f1 2e       	mov	r15, r17
    1770:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1772:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1774:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1776:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1778:	dc 01       	movw	r26, r24
    177a:	11 96       	adiw	r26, 0x01	; 1
    177c:	2b 89       	ldd	r18, Y+19	; 0x13
    177e:	3c 89       	ldd	r19, Y+20	; 0x14
    1780:	28 1b       	sub	r18, r24
    1782:	39 0b       	sbc	r19, r25
    1784:	c9 01       	movw	r24, r18
    1786:	8e 0f       	add	r24, r30
    1788:	9f 1f       	adc	r25, r31
    178a:	01 c0       	rjmp	.+2      	; 0x178e <chvprintf+0x54e>
    178c:	fd 90       	ld	r15, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    178e:	f1 92       	st	Z+, r15
  while (--i);
    1790:	e8 17       	cp	r30, r24
    1792:	f9 07       	cpc	r31, r25
    1794:	d9 f7       	brne	.-10     	; 0x178c <chvprintf+0x54c>
    1796:	4f 85       	ldd	r20, Y+15	; 0x0f
    1798:	58 89       	ldd	r21, Y+16	; 0x10
    179a:	e4 1b       	sub	r30, r20
    179c:	f5 0b       	sbc	r31, r21
    179e:	4f 01       	movw	r8, r30
    17a0:	51 e0       	ldi	r21, 0x01	; 1
    17a2:	85 1a       	sub	r8, r21
    17a4:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	7c 01       	movw	r14, r24
    17ac:	0b ce       	rjmp	.-1002   	; 0x13c4 <chvprintf+0x184>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    17ae:	af 89       	ldd	r26, Y+23	; 0x17
    17b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    17b2:	8d 90       	ld	r8, X+
    17b4:	9d 90       	ld	r9, X+
    17b6:	ad 90       	ld	r10, X+
    17b8:	bc 90       	ld	r11, X
    17ba:	13 97       	sbiw	r26, 0x03	; 3
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	b8 8f       	std	Y+24, r27	; 0x18
    17c0:	af 8b       	std	Y+23, r26	; 0x17
      else
        l = va_arg(ap, int);
      if (l < 0) {
    17c2:	b7 fe       	sbrs	r11, 7
    17c4:	a8 cf       	rjmp	.-176    	; 0x1716 <chvprintf+0x4d6>
        *p++ = '-';
    17c6:	8d e2       	ldi	r24, 0x2D	; 45
    17c8:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    17ca:	b0 94       	com	r11
    17cc:	a0 94       	com	r10
    17ce:	90 94       	com	r9
    17d0:	80 94       	com	r8
    17d2:	81 1c       	adc	r8, r1
    17d4:	91 1c       	adc	r9, r1
    17d6:	a1 1c       	adc	r10, r1
    17d8:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    17da:	9e 01       	movw	r18, r28
    17dc:	2e 5f       	subi	r18, 0xFE	; 254
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	3c 8f       	std	Y+28, r19	; 0x1c
    17e2:	2b 8f       	std	Y+27, r18	; 0x1b
    17e4:	9d cf       	rjmp	.-198    	; 0x1720 <chvprintf+0x4e0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    17e6:	40 e1       	ldi	r20, 0x10	; 16
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	49 cf       	rjmp	.-366    	; 0x1682 <chvprintf+0x442>
    17f0:	ee 19       	sub	r30, r14
    17f2:	ff 09       	sbc	r31, r15
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    17f4:	4f 01       	movw	r8, r30
    17f6:	51 e0       	ldi	r21, 0x01	; 1
    17f8:	85 1a       	sub	r8, r21
    17fa:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    17fc:	98 8f       	std	Y+24, r25	; 0x18
    17fe:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	89 8f       	std	Y+25, r24	; 0x19
    1804:	df cd       	rjmp	.-1090   	; 0x13c4 <chvprintf+0x184>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    1806:	43 e4       	ldi	r20, 0x43	; 67
    1808:	e4 2e       	mov	r14, r20
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	f4 2e       	mov	r15, r20
    180e:	91 ce       	rjmp	.-734    	; 0x1532 <chvprintf+0x2f2>
    1810:	58 01       	movw	r10, r16
    1812:	17 fd       	sbrc	r17, 7
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <chvprintf+0x5f2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1816:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1818:	98 8f       	std	Y+24, r25	; 0x18
    181a:	8f 8b       	std	Y+23, r24	; 0x17
    181c:	51 11       	cpse	r21, r1
    181e:	06 c0       	rjmp	.+12     	; 0x182c <chvprintf+0x5ec>
    1820:	88 24       	eor	r8, r8
    1822:	8a 94       	dec	r8
    1824:	98 2c       	mov	r9, r8
    1826:	80 e2       	ldi	r24, 0x20	; 32
    1828:	89 8f       	std	Y+25, r24	; 0x19
    182a:	d4 cd       	rjmp	.-1112   	; 0x13d4 <chvprintf+0x194>
    182c:	f0 e2       	ldi	r31, 0x20	; 32
    182e:	f9 8f       	std	Y+25, r31	; 0x19
    1830:	13 ce       	rjmp	.-986    	; 0x1458 <chvprintf+0x218>
    1832:	a1 2c       	mov	r10, r1
    1834:	b1 2c       	mov	r11, r1
    1836:	ef cf       	rjmp	.-34     	; 0x1816 <chvprintf+0x5d6>

00001838 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1840:	ae 01       	movw	r20, r28
    1842:	47 5f       	subi	r20, 0xF7	; 247
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	f8 dc       	rcall	.-1552   	; 0x1240 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <starting>:


/* Functions*/
void starting(){
  // Output
  palSetPadMode(IOPORT2, SECA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1856:	46 e0       	ldi	r20, 0x06	; 6
    1858:	60 e2       	ldi	r22, 0x20	; 32
    185a:	83 e2       	ldi	r24, 0x23	; 35
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	86 db       	rcall	.-2292   	; 0xf6c <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1860:	46 e0       	ldi	r20, 0x06	; 6
    1862:	60 e1       	ldi	r22, 0x10	; 16
    1864:	83 e2       	ldi	r24, 0x23	; 35
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	81 db       	rcall	.-2302   	; 0xf6c <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
    186a:	46 e0       	ldi	r20, 0x06	; 6
    186c:	68 e0       	ldi	r22, 0x08	; 8
    186e:	83 e2       	ldi	r24, 0x23	; 35
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	7c db       	rcall	.-2312   	; 0xf6c <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1874:	46 e0       	ldi	r20, 0x06	; 6
    1876:	64 e0       	ldi	r22, 0x04	; 4
    1878:	83 e2       	ldi	r24, 0x23	; 35
    187a:	90 e0       	ldi	r25, 0x00	; 0
  palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
    187c:	77 db       	rcall	.-2322   	; 0xf6c <_pal_lld_setgroupmode>
    187e:	46 e0       	ldi	r20, 0x06	; 6
    1880:	62 e0       	ldi	r22, 0x02	; 2
    1882:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	72 db       	rcall	.-2332   	; 0xf6c <_pal_lld_setgroupmode>
    1888:	46 e0       	ldi	r20, 0x06	; 6
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	6d db       	rcall	.-2342   	; 0xf6c <_pal_lld_setgroupmode>
    1892:	46 e0       	ldi	r20, 0x06	; 6
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	68 db       	rcall	.-2352   	; 0xf6c <_pal_lld_setgroupmode>
    189c:	46 e0       	ldi	r20, 0x06	; 6
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	63 db       	rcall	.-2362   	; 0xf6c <_pal_lld_setgroupmode>
    18a6:	46 e0       	ldi	r20, 0x06	; 6
    18a8:	60 e8       	ldi	r22, 0x80	; 128


  // Input
  palSetPadMode(IOPORT4, EMER, PAL_MODE_INPUT);
    18aa:	89 e2       	ldi	r24, 0x29	; 41
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	5e db       	rcall	.-2372   	; 0xf6c <_pal_lld_setgroupmode>
    18b0:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	89 e2       	ldi	r24, 0x29	; 41
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	59 db       	rcall	.-2382   	; 0xf6c <_pal_lld_setgroupmode>
    18ba:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
    18bc:	68 e0       	ldi	r22, 0x08	; 8
    18be:	89 e2       	ldi	r24, 0x29	; 41
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	54 db       	rcall	.-2392   	; 0xf6c <_pal_lld_setgroupmode>
    18c4:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
    18c6:	60 e1       	ldi	r22, 0x10	; 16
    18c8:	89 e2       	ldi	r24, 0x29	; 41
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	4f db       	rcall	.-2402   	; 0xf6c <_pal_lld_setgroupmode>
    18ce:	42 e0       	ldi	r20, 0x02	; 2
    18d0:	60 e2       	ldi	r22, 0x20	; 32
  palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
    18d2:	89 e2       	ldi	r24, 0x29	; 41
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	4a db       	rcall	.-2412   	; 0xf6c <_pal_lld_setgroupmode>
    18d8:	42 e0       	ldi	r20, 0x02	; 2
    18da:	60 e4       	ldi	r22, 0x40	; 64
    18dc:	89 e2       	ldi	r24, 0x29	; 41

  // Start
  palClearPad(IOPORT2, SECA_ID);
    18de:	90 e0       	ldi	r25, 0x00	; 0
  palClearPad(IOPORT2, ENCHE_ID);
    18e0:	45 db       	rcall	.-2422   	; 0xf6c <_pal_lld_setgroupmode>
  palClearPad(IOPORT2, CENTRI_ID);
  palClearPad(IOPORT2, ENXAGUE_ID);
  palClearPad(IOPORT2, LAVAGEM_ID);
    18e2:	2d 98       	cbi	0x05, 5	; 5
  palClearPad(IOPORT2, MOLHO_ID);
    18e4:	2c 98       	cbi	0x05, 4	; 5
  palSetPad(IOPORT3, MOTOR_DIR);
    18e6:	2b 98       	cbi	0x05, 3	; 5
  palSetPad(IOPORT3, MOTOR_ESQ);
    18e8:	2a 98       	cbi	0x05, 2	; 5
  palClearPad(IOPORT4, PARADA_ID);
    18ea:	29 98       	cbi	0x05, 1	; 5

  chprintf((BaseSequentialStream *)&SD1, "pinos iniciados \n\r");
    18ec:	28 98       	cbi	0x05, 0	; 5
    18ee:	40 9a       	sbi	0x08, 0	; 8
    18f0:	41 9a       	sbi	0x08, 1	; 8
    18f2:	5f 98       	cbi	0x0b, 7	; 11
    18f4:	8a e4       	ldi	r24, 0x4A	; 74
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	9f 93       	push	r25
    18fa:	8f 93       	push	r24
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	94 e0       	ldi	r25, 0x04	; 4

}
    1900:	9f 93       	push	r25
    1902:	8f 93       	push	r24
    1904:	99 df       	rcall	.-206    	; 0x1838 <chprintf>
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	08 95       	ret

00001910 <spinning>:


/* Spin Function */

void spinning(int timer) {
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1928:	f8 94       	cli
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
    192a:	80 90 d5 03 	lds	r8, 0x03D5	; 0x8003d5 <ch+0x13>
    192e:	90 90 d6 03 	lds	r9, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1932:	78 94       	sei
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1934:	28 e0       	ldi	r18, 0x08	; 8
    1936:	3d e3       	ldi	r19, 0x3D	; 61
    1938:	dc 01       	movw	r26, r24
    193a:	70 d6       	rcall	.+3296   	; 0x261c <__usmulhisi3>
    193c:	69 51       	subi	r22, 0x19	; 25
    193e:	7c 4f       	sbci	r23, 0xFC	; 252
    1940:	8f 4f       	sbci	r24, 0xFF	; 255
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	28 ee       	ldi	r18, 0xE8	; 232
    1946:	33 e0       	ldi	r19, 0x03	; 3
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	23 d6       	rcall	.+3142   	; 0x2594 <__udivmodsi4>
    194e:	89 01       	movw	r16, r18
void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
  systime_t ls_report,init_time;

  ls_report = agora;
    1950:	94 01       	movw	r18, r8

/* Spin Function */

void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
    1952:	80 e0       	ldi	r24, 0x00	; 0
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1954:	96 e7       	ldi	r25, 0x76	; 118
    1956:	a9 2e       	mov	r10, r25
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	b9 2e       	mov	r11, r25
    195c:	44 e0       	ldi	r20, 0x04	; 4
    195e:	e4 2e       	mov	r14, r20
    1960:	44 e0       	ldi	r20, 0x04	; 4
    1962:	f4 2e       	mov	r15, r20
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1964:	5d e5       	ldi	r21, 0x5D	; 93
    1966:	c5 2e       	mov	r12, r21
    1968:	51 e0       	ldi	r21, 0x01	; 1
    196a:	d5 2e       	mov	r13, r21
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    196c:	f8 94       	cli
    196e:	c0 91 d5 03 	lds	r28, 0x03D5	; 0x8003d5 <ch+0x13>
    1972:	d0 91 d6 03 	lds	r29, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1976:	78 94       	sei

  ls_report = agora;
  init_time = agora;
  while(1){
    agora = chVTGetSystemTime();
    switch(rd){
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	b1 f0       	breq	.+44     	; 0x19a8 <spinning+0x98>
      case(GIRA_R):
      // palClearPad(IOPORT3, MOTOR_DIR);
        if(lavar == EMERGENCIA){
    197c:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <lavar>
    1980:	85 30       	cpi	r24, 0x05	; 5
    1982:	89 f1       	breq	.+98     	; 0x19e6 <spinning+0xd6>
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
    1984:	40 98       	cbi	0x08, 0	; 8
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    1986:	ce 01       	movw	r24, r28
    1988:	82 1b       	sub	r24, r18
    198a:	93 0b       	sbc	r25, r19
    198c:	88 30       	cpi	r24, 0x08	; 8
    198e:	9d 43       	sbci	r25, 0x3D	; 61
    1990:	b8 f5       	brcc	.+110    	; 0x1a00 <spinning+0xf0>
    1992:	80 e0       	ldi	r24, 0x00	; 0
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
          ls_report = agora;
          rd = GIRA_L;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1994:	c8 19       	sub	r28, r8
    1996:	d9 09       	sbc	r29, r9
    1998:	0c 17       	cp	r16, r28
    199a:	1d 07       	cpc	r17, r29
    199c:	38 f7       	brcc	.-50     	; 0x196c <spinning+0x5c>
          // printf("Fim do Giro\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    199e:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    19a0:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
    19a2:	8c e6       	ldi	r24, 0x6C	; 108
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <spinning+0xc0>
          return;
        }
        break;
      case(GIRA_L):
      palClearPad(IOPORT3, MOTOR_ESQ);
    19a8:	41 98       	cbi	0x08, 1	; 8
        if(lavar == EMERGENCIA){
    19aa:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <lavar>
    19ae:	95 30       	cpi	r25, 0x05	; 5
    19b0:	d1 f0       	breq	.+52     	; 0x19e6 <spinning+0xd6>
          return;
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    19b2:	ae 01       	movw	r20, r28
    19b4:	42 1b       	sub	r20, r18
    19b6:	53 0b       	sbc	r21, r19
    19b8:	48 30       	cpi	r20, 0x08	; 8
    19ba:	5d 43       	sbci	r21, 0x3D	; 61
    19bc:	70 f5       	brcc	.+92     	; 0x1a1a <spinning+0x10a>
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    19be:	c8 19       	sub	r28, r8
    19c0:	d9 09       	sbc	r29, r9
    19c2:	0c 17       	cp	r16, r28
    19c4:	1d 07       	cpc	r17, r29
    19c6:	90 f6       	brcc	.-92     	; 0x196c <spinning+0x5c>
          // printf("saindo\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    19c8:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    19ca:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "Fim Giro\n\r");
    19cc:	85 e8       	ldi	r24, 0x85	; 133
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	2d df       	rcall	.-422    	; 0x1838 <chprintf>
          return;
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
          }
        break;
        }
     }
  }
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	9f 90       	pop	r9
    19fc:	8f 90       	pop	r8
    19fe:	08 95       	ret
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1a00:	df 92       	push	r13
    1a02:	cf 92       	push	r12
    1a04:	ff 92       	push	r15
    1a06:	ef 92       	push	r14
    1a08:	17 df       	rcall	.-466    	; 0x1838 <chprintf>
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
    1a0a:	40 9a       	sbi	0x08, 0	; 8
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	9e 01       	movw	r18, r28
          ls_report = agora;
          rd = GIRA_L;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1a18:	bd cf       	rjmp	.-134    	; 0x1994 <spinning+0x84>
    1a1a:	bf 92       	push	r11
    1a1c:	af 92       	push	r10
    1a1e:	ff 92       	push	r15
    1a20:	ef 92       	push	r14
          palSetPad(IOPORT3, MOTOR_ESQ);
    1a22:	0a df       	rcall	.-492    	; 0x1838 <chprintf>
    1a24:	41 9a       	sbi	0x08, 1	; 8
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
          ls_report = agora;
          rd = GIRA_R;
    1a2e:	9e 01       	movw	r18, r28
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	c5 cf       	rjmp	.-118    	; 0x19be <spinning+0xae>

00001a34 <lavar_maquina>:
     }
  }

/* Main Machine */

void lavar_maquina(){
    1a34:	cf 92       	push	r12
    1a36:	df 92       	push	r13
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
  // int t_cheio;
  // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
  switch(lavar){
    1a44:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <lavar>
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <lavar_maquina+0x1a>
    1a4c:	7a c1       	rjmp	.+756    	; 0x1d42 <lavar_maquina+0x30e>
    1a4e:	48 f0       	brcs	.+18     	; 0x1a62 <lavar_maquina+0x2e>
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <lavar_maquina+0x22>
    1a54:	6b c0       	rjmp	.+214    	; 0x1b2c <lavar_maquina+0xf8>
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <lavar_maquina+0x26>
    1a58:	4f c1       	rjmp	.+670    	; 0x1cf8 <lavar_maquina+0x2c4>
    1a5a:	85 30       	cpi	r24, 0x05	; 5
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <lavar_maquina+0x2c>
    1a5e:	5d c0       	rjmp	.+186    	; 0x1b1a <lavar_maquina+0xe6>
    1a60:	ff cf       	rjmp	.-2      	; 0x1a60 <lavar_maquina+0x2c>
    1a62:	88 23       	and	r24, r24
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <lavar_maquina+0x34>
    1a66:	99 c0       	rjmp	.+306    	; 0x1b9a <lavar_maquina+0x166>
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <lavar_maquina+0x3a>
    1a6c:	56 c0       	rjmp	.+172    	; 0x1b1a <lavar_maquina+0xe6>


    case(MOLHO):
    // printf("Inicio Molho\n");
    // chprintf((BaseSequentialStream *)&SD1, "Inicio MOLHO \n\r");
    palSetPad(IOPORT2, MOLHO_ID);
    1a6e:	28 9a       	sbi	0x05, 0	; 5
    palClearPad(IOPORT2, LAVAGEM_ID);
    1a70:	29 98       	cbi	0x05, 1	; 5
    palClearPad(IOPORT2, ENXAGUE_ID);
    1a72:	2a 98       	cbi	0x05, 2	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1a74:	2b 98       	cbi	0x05, 3	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1a76:	5f 98       	cbi	0x0b, 7	; 11

      switch(fsm_ml.ml){
    1a78:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <fsm_ml>
    1a7c:	86 30       	cpi	r24, 0x06	; 6
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <lavar_maquina+0x4e>
    1a80:	9b c1       	rjmp	.+822    	; 0x1db8 <lavar_maquina+0x384>
    1a82:	87 30       	cpi	r24, 0x07	; 7
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <lavar_maquina+0x54>
    1a86:	49 c0       	rjmp	.+146    	; 0x1b1a <lavar_maquina+0xe6>
        case(RODAR_ML):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado RODAR_ML\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
    1a88:	80 ee       	ldi	r24, 0xE0	; 224
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	c4 e0       	ldi	r28, 0x04	; 4
    1a92:	d4 e0       	ldi	r29, 0x04	; 4
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cf de       	rcall	.-610    	; 0x1838 <chprintf>
          spinning(fsm_ml.t_giro);
    1a9a:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <fsm_ml+0x1>
    1a9e:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <fsm_ml+0x2>
    1aa2:	36 df       	rcall	.-404    	; 0x1910 <spinning>
          lavar = LAVAGEM;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <lavar>
  st->t_giro = 4000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1aaa:	88 e0       	ldi	r24, 0x08	; 8
    1aac:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <fsm_lvg>
  st->turns = 0;
    1ab0:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <fsm_lvg+0x6>
    1ab4:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <fsm_lvg+0x5>
  st->t_espera = 2000;
    1ab8:	80 ed       	ldi	r24, 0xD0	; 208
    1aba:	97 e0       	ldi	r25, 0x07	; 7
    1abc:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <fsm_lvg+0x8>
    1ac0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <fsm_lvg+0x7>
  st->t_giros = 4000;
    1ac4:	80 ea       	ldi	r24, 0xA0	; 160
    1ac6:	9f e0       	ldi	r25, 0x0F	; 15
    1ac8:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <fsm_lvg+0xa>
    1acc:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <fsm_lvg+0x9>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1ad0:	f8 94       	cli
    1ad2:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1ad6:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1ada:	78 94       	sei
  st->instante = chVTGetSystemTime();
    1adc:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <fsm_lvg+0x2>
    1ae0:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <fsm_lvg+0x1>
  st->ul_espera = st->instante;
    1ae4:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <fsm_lvg+0x4>
    1ae8:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
          spinning(fsm_ml.t_giro);
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          // printf("Fim Molho\n");
          chprintf((BaseSequentialStream *)&SD1, "FIM Molho\n\r");
    1aec:	8e ee       	ldi	r24, 0xEE	; 238
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	9f 93       	push	r25
    1af2:	8f 93       	push	r24
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	9f de       	rcall	.-706    	; 0x1838 <chprintf>
          palClearPad(IOPORT2, MOLHO_ID);
    1afa:	28 98       	cbi	0x05, 0	; 5
          chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
    1afc:	8a ef       	ldi	r24, 0xFA	; 250
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	9f 93       	push	r25
    1b02:	8f 93       	push	r24
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	97 de       	rcall	.-722    	; 0x1838 <chprintf>
          // printf("Inicio LAVAGEM\n");
          break;
    1b0a:	8d b7       	in	r24, 0x3d	; 61
    1b0c:	9e b7       	in	r25, 0x3e	; 62
    1b0e:	0c 96       	adiw	r24, 0x0c	; 12
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	9e bf       	out	0x3e, r25	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	8d bf       	out	0x3d, r24	; 61
      // printf("PORTA ABERTA. ERRO !!\n");
      while(1);

    break; // break de emergência
  } // fim switch máquina principal
} // fim função da máquina principal.
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	08 95       	ret
      break;


      case(CENTRIFUGA):
      // printf("Inicio Centrifuga\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1b2c:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, LAVAGEM_ID);
    1b2e:	29 98       	cbi	0x05, 1	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1b30:	2a 98       	cbi	0x05, 2	; 5
      palSetPad(IOPORT2, CENTRI_ID);
    1b32:	2b 9a       	sbi	0x05, 3	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1b34:	5f 98       	cbi	0x0b, 7	; 11

        switch(fsm_cen.cen){
    1b36:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <fsm_cen>
    1b3a:	8e 30       	cpi	r24, 0x0E	; 14
    1b3c:	71 f7       	brne	.-36     	; 0x1b1a <lavar_maquina+0xe6>
          case(GIRA_R_CENTRI):
            if(lavar == EMERGENCIA){
              break;
            }
            palClearPad(IOPORT3, MOTOR_DIR);
    1b3e:	40 98       	cbi	0x08, 0	; 8
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1b40:	f8 94       	cli
    1b42:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1b46:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1b4a:	78 94       	sei
            // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
            fsm_cen.tempo = chVTGetSystemTime();
    1b4c:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <fsm_cen+0x2>
    1b50:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <fsm_cen+0x1>
            // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
    1b54:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <fsm_cen+0x5>
    1b58:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <fsm_cen+0x6>
    1b5c:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <fsm_cen+0x3>
    1b60:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <fsm_cen+0x4>
    1b64:	ec 01       	movw	r28, r24
    1b66:	c2 1b       	sub	r28, r18
    1b68:	d3 0b       	sbc	r29, r19
    1b6a:	28 e0       	ldi	r18, 0x08	; 8
    1b6c:	3d e3       	ldi	r19, 0x3D	; 61
    1b6e:	56 d5       	rcall	.+2732   	; 0x261c <__usmulhisi3>
    1b70:	69 51       	subi	r22, 0x19	; 25
    1b72:	7c 4f       	sbci	r23, 0xFC	; 252
    1b74:	8f 4f       	sbci	r24, 0xFF	; 255
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	28 ee       	ldi	r18, 0xE8	; 232
    1b7a:	33 e0       	ldi	r19, 0x03	; 3
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	09 d5       	rcall	.+2578   	; 0x2594 <__udivmodsi4>
    1b82:	2c 17       	cp	r18, r28
    1b84:	3d 07       	cpc	r19, r29
    1b86:	48 f6       	brcc	.-110    	; 0x1b1a <lavar_maquina+0xe6>
              palSetPad(IOPORT3, MOTOR_DIR);
    1b88:	40 9a       	sbi	0x08, 0	; 8
              lavar = PARADA;
    1b8a:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    1b8e:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <fsm_prd+0x1>
    1b92:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <fsm_prd>
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
              palSetPad(IOPORT3, MOTOR_DIR);
              lavar = PARADA;
              fsm_parada_init(&fsm_prd);
              palClearPad(IOPORT2, CENTRI_ID);
    1b96:	2b 98       	cbi	0x05, 3	; 5
    1b98:	c0 cf       	rjmp	.-128    	; 0x1b1a <lavar_maquina+0xe6>
      if(lavar == EMERGENCIA){
        break;
      } // verifcar emergência
      // printf("Inicio da Parada\n");
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
    1b9a:	80 e9       	ldi	r24, 0x90	; 144
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9f 93       	push	r25
    1ba0:	8f 93       	push	r24
    1ba2:	84 e0       	ldi	r24, 0x04	; 4
    1ba4:	94 e0       	ldi	r25, 0x04	; 4
    1ba6:	9f 93       	push	r25
    1ba8:	8f 93       	push	r24
    1baa:	46 de       	rcall	.-884    	; 0x1838 <chprintf>
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
          fsm_prd.select_init = 2;
          palClearPad(IOPORT2, LAVAGEM_ID);

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = CENTRIFUGA;
    1bb4:	84 e0       	ldi	r24, 0x04	; 4
    1bb6:	c8 2e       	mov	r12, r24
  st->t_giro = 4000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    1bb8:	9e e0       	ldi	r25, 0x0E	; 14
    1bba:	d9 2e       	mov	r13, r25
  st->tempo = chVTGetSystemTime();
  st->ul_centri = st->tempo;
  st->t_centri = 4000;
    1bbc:	20 ea       	ldi	r18, 0xA0	; 160
    1bbe:	3f e0       	ldi	r19, 0x0F	; 15

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1bc0:	03 e0       	ldi	r16, 0x03	; 3
    1bc2:	10 e0       	ldi	r17, 0x00	; 0
          fsm_prd.select_init = 1;
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = ENXAGUE;
    1bc4:	43 e0       	ldi	r20, 0x03	; 3
    1bc6:	e4 2e       	mov	r14, r20
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1bc8:	5b e0       	ldi	r21, 0x0B	; 11
    1bca:	f5 2e       	mov	r15, r21
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = ENXAGUE;
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
    1bcc:	c2 e0       	ldi	r28, 0x02	; 2
    1bce:	d0 e0       	ldi	r29, 0x00	; 0
          palSetPad(IOPORT4, PARADA_ID);
          palSetPad(IOPORT2, MOLHO_ID);
          palSetPad(IOPORT2, LAVAGEM_ID);
          palSetPad(IOPORT2, ENXAGUE_ID);
          palSetPad(IOPORT2, CENTRI_ID);
          lavar = MOLHO;
    1bd0:	b1 e0       	ldi	r27, 0x01	; 1
  st->select_init = 0;
}

static void fsm_molho_init(fsm_molho_s *st)
{
  st->ml = ENCHER_ML;
    1bd2:	a6 e0       	ldi	r26, 0x06	; 6
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
  st->t_giro = 4000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1bd6:	e8 e0       	ldi	r30, 0x08	; 8
  st->turns = 0;
  st->t_espera = 2000;
    1bd8:	60 ed       	ldi	r22, 0xD0	; 208
    1bda:	77 e0       	ldi	r23, 0x07	; 7

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	66 c0       	rjmp	.+204    	; 0x1cae <lavar_maquina+0x27a>
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
          palSetPad(IOPORT4, PARADA_ID);
    1be2:	5f 9a       	sbi	0x0b, 7	; 11
          palSetPad(IOPORT2, MOLHO_ID);
    1be4:	28 9a       	sbi	0x05, 0	; 5
          palSetPad(IOPORT2, LAVAGEM_ID);
    1be6:	29 9a       	sbi	0x05, 1	; 5
          palSetPad(IOPORT2, ENXAGUE_ID);
    1be8:	2a 9a       	sbi	0x05, 2	; 5
          palSetPad(IOPORT2, CENTRI_ID);
    1bea:	2b 9a       	sbi	0x05, 3	; 5
          lavar = MOLHO;
    1bec:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <lavar>
  st->select_init = 0;
}

static void fsm_molho_init(fsm_molho_s *st)
{
  st->ml = ENCHER_ML;
    1bf0:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <fsm_ml>
  st->t_giro = 4000;
    1bf4:	30 93 5a 04 	sts	0x045A, r19	; 0x80045a <fsm_ml+0x2>
    1bf8:	20 93 59 04 	sts	0x0459, r18	; 0x800459 <fsm_ml+0x1>
          palSetPad(IOPORT2, CENTRI_ID);
          lavar = MOLHO;
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1bfc:	4e 9b       	sbis	0x09, 6	; 9
    1bfe:	55 c0       	rjmp	.+170    	; 0x1caa <lavar_maquina+0x276>
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
    1c00:	f0 93 58 03 	sts	0x0358, r31	; 0x800358 <lavar>
  st->t_giro = 4000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1c04:	e0 93 4d 04 	sts	0x044D, r30	; 0x80044d <fsm_lvg>
  st->turns = 0;
    1c08:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <fsm_lvg+0x6>
    1c0c:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <fsm_lvg+0x5>
  st->t_espera = 2000;
    1c10:	70 93 55 04 	sts	0x0455, r23	; 0x800455 <fsm_lvg+0x8>
    1c14:	60 93 54 04 	sts	0x0454, r22	; 0x800454 <fsm_lvg+0x7>
  st->t_giros = 4000;
    1c18:	30 93 57 04 	sts	0x0457, r19	; 0x800457 <fsm_lvg+0xa>
    1c1c:	20 93 56 04 	sts	0x0456, r18	; 0x800456 <fsm_lvg+0x9>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1c20:	f8 94       	cli
    1c22:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1c26:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1c2a:	78 94       	sei
  st->instante = chVTGetSystemTime();
    1c2c:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <fsm_lvg+0x2>
    1c30:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <fsm_lvg+0x1>
  st->ul_espera = st->instante;
    1c34:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <fsm_lvg+0x4>
    1c38:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <fsm_lvg+0x3>

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    1c3c:	50 93 5f 04 	sts	0x045F, r21	; 0x80045f <fsm_prd+0x1>
    1c40:	40 93 5e 04 	sts	0x045E, r20	; 0x80045e <fsm_prd>
          palClearPad(IOPORT2, MOLHO_ID);
    1c44:	28 98       	cbi	0x05, 0	; 5
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c46:	4e 9b       	sbis	0x09, 6	; 9
    1c48:	52 c0       	rjmp	.+164    	; 0x1cee <lavar_maquina+0x2ba>
          lavar = ENXAGUE;
    1c4a:	e0 92 58 03 	sts	0x0358, r14	; 0x800358 <lavar>
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1c4e:	f0 92 5b 04 	sts	0x045B, r15	; 0x80045b <fsm_exg>
  st->t_giro = 4000;
    1c52:	30 93 5d 04 	sts	0x045D, r19	; 0x80045d <fsm_exg+0x2>
    1c56:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <fsm_exg+0x1>
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = ENXAGUE;
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
    1c5a:	d0 93 5f 04 	sts	0x045F, r29	; 0x80045f <fsm_prd+0x1>
    1c5e:	c0 93 5e 04 	sts	0x045E, r28	; 0x80045e <fsm_prd>
          palClearPad(IOPORT2, LAVAGEM_ID);
    1c62:	29 98       	cbi	0x05, 1	; 5

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c64:	4e 9b       	sbis	0x09, 6	; 9
    1c66:	21 c0       	rjmp	.+66     	; 0x1caa <lavar_maquina+0x276>
          lavar = CENTRIFUGA;
    1c68:	c0 92 58 03 	sts	0x0358, r12	; 0x800358 <lavar>
  st->t_giro = 4000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    1c6c:	d0 92 60 04 	sts	0x0460, r13	; 0x800460 <fsm_cen>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1c70:	f8 94       	cli
    1c72:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1c76:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1c7a:	78 94       	sei
  st->tempo = chVTGetSystemTime();
    1c7c:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <fsm_cen+0x2>
    1c80:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <fsm_cen+0x1>
  st->ul_centri = st->tempo;
    1c84:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <fsm_cen+0x4>
    1c88:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <fsm_cen+0x3>
  st->t_centri = 4000;
    1c8c:	30 93 66 04 	sts	0x0466, r19	; 0x800466 <fsm_cen+0x6>
    1c90:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <fsm_cen+0x5>

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1c94:	10 93 5f 04 	sts	0x045F, r17	; 0x80045f <fsm_prd+0x1>
    1c98:	00 93 5e 04 	sts	0x045E, r16	; 0x80045e <fsm_prd>
          palClearPad(IOPORT2, ENXAGUE_ID);
    1c9c:	2a 98       	cbi	0x05, 2	; 5
          // printf("Inicio ENXAGUE\n");
        }
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c9e:	4e 9b       	sbis	0x09, 6	; 9
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <lavar_maquina+0x276>
          fsm_prd.select_init = 0;
    1ca2:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <fsm_prd+0x1>
    1ca6:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <fsm_prd>
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
    1caa:	4d 99       	sbic	0x09, 5	; 9
    1cac:	12 c0       	rjmp	.+36     	; 0x1cd2 <lavar_maquina+0x29e>
      // printf("Inicio da Parada\n");
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
    1cae:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <fsm_prd>
    1cb2:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <fsm_prd+0x1>
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <lavar_maquina+0x288>
    1cba:	93 cf       	rjmp	.-218    	; 0x1be2 <lavar_maquina+0x1ae>
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <lavar_maquina+0x290>
    1cc2:	c1 cf       	rjmp	.-126    	; 0x1c46 <lavar_maquina+0x212>
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
          palClearPad(IOPORT2, LAVAGEM_ID);

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1cc4:	82 30       	cpi	r24, 0x02	; 2
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	69 f2       	breq	.-102    	; 0x1c64 <lavar_maquina+0x230>
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
          palClearPad(IOPORT2, ENXAGUE_ID);
          // printf("Inicio ENXAGUE\n");
        }
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1cca:	03 97       	sbiw	r24, 0x03	; 3
    1ccc:	41 f3       	breq	.-48     	; 0x1c9e <lavar_maquina+0x26a>
          fsm_prd.select_init = 0;
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
    1cce:	4d 9b       	sbis	0x09, 5	; 9
    1cd0:	ee cf       	rjmp	.-36     	; 0x1cae <lavar_maquina+0x27a>
          chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
    1cd2:	8d ea       	ldi	r24, 0xAD	; 173
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	9f 93       	push	r25
    1cd8:	8f 93       	push	r24
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	9f 93       	push	r25
    1ce0:	8f 93       	push	r24
    1ce2:	aa dd       	rcall	.-1196   	; 0x1838 <chprintf>
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	16 cf       	rjmp	.-468    	; 0x1b1a <lavar_maquina+0xe6>
    1cee:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <fsm_prd>
    1cf2:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <fsm_prd+0x1>
    1cf6:	e9 cf       	rjmp	.-46     	; 0x1cca <lavar_maquina+0x296>
          } // fim switch LAVAGEM
          break;


    case(ENXAGUE):
    palClearPad(IOPORT2, MOLHO_ID);
    1cf8:	28 98       	cbi	0x05, 0	; 5
    palClearPad(IOPORT2, LAVAGEM_ID);
    1cfa:	29 98       	cbi	0x05, 1	; 5
    palSetPad(IOPORT2, ENXAGUE_ID);
    1cfc:	2a 9a       	sbi	0x05, 2	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1cfe:	2b 98       	cbi	0x05, 3	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1d00:	5f 98       	cbi	0x0b, 7	; 11

      switch(fsm_exg.exg){
    1d02:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <fsm_exg>
    1d06:	8c 30       	cpi	r24, 0x0C	; 12
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <lavar_maquina+0x2d8>
    1d0a:	e0 c0       	rjmp	.+448    	; 0x1ecc <lavar_maquina+0x498>
    1d0c:	8d 30       	cpi	r24, 0x0D	; 13
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <lavar_maquina+0x2de>
    1d10:	f3 c0       	rjmp	.+486    	; 0x1ef8 <lavar_maquina+0x4c4>
    1d12:	8b 30       	cpi	r24, 0x0B	; 11
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <lavar_maquina+0x2e4>
        case(ENCHER_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado ENCHER_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Enche Enxague\n\r");
    1d16:	01 cf       	rjmp	.-510    	; 0x1b1a <lavar_maquina+0xe6>
    1d18:	8e e5       	ldi	r24, 0x5E	; 94
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	84 e0       	ldi	r24, 0x04	; 4
    1d22:	94 e0       	ldi	r25, 0x04	; 4
    1d24:	9f 93       	push	r25
    1d26:	8f 93       	push	r24
          palSetPad(IOPORT2, ENCHE_ID);
    1d28:	87 dd       	rcall	.-1266   	; 0x1838 <chprintf>
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    1d2a:	2c 9a       	sbi	0x05, 4	; 5
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	4c 9b       	sbis	0x09, 4	; 9
            // printf("Sensor Cheio: ON\n");
            palClearPad(IOPORT2, ENCHE_ID);
    1d36:	f1 ce       	rjmp	.-542    	; 0x1b1a <lavar_maquina+0xe6>
            fsm_exg.exg = RODAR_EXG;
    1d38:	2c 98       	cbi	0x05, 4	; 5
    1d3a:	8c e0       	ldi	r24, 0x0C	; 12
    1d3c:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <fsm_exg>
      break;


    case(LAVAGEM):
      // printf("Inicio Lavagem\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1d40:	ec ce       	rjmp	.-552    	; 0x1b1a <lavar_maquina+0xe6>
      palSetPad(IOPORT2, LAVAGEM_ID);
    1d42:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1d44:	29 9a       	sbi	0x05, 1	; 5
      palClearPad(IOPORT2, CENTRI_ID);
    1d46:	2a 98       	cbi	0x05, 2	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1d48:	2b 98       	cbi	0x05, 3	; 5

      switch(fsm_lvg.lvg){
    1d4a:	5f 98       	cbi	0x0b, 7	; 11
    1d4c:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <fsm_lvg>
    1d50:	89 30       	cpi	r24, 0x09	; 9
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <lavar_maquina+0x322>
    1d54:	7b c0       	rjmp	.+246    	; 0x1e4c <lavar_maquina+0x418>
    1d56:	8a 30       	cpi	r24, 0x0A	; 10
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <lavar_maquina+0x328>
    1d5a:	4e c0       	rjmp	.+156    	; 0x1df8 <lavar_maquina+0x3c4>
    1d5c:	88 30       	cpi	r24, 0x08	; 8
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG Super LAVAGEM - estado RODAR_LVG\n");
          // printf("Inicio giros Lavagem\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Lavagem\n\r");
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <lavar_maquina+0x32e>
    1d60:	dc ce       	rjmp	.-584    	; 0x1b1a <lavar_maquina+0xe6>
    1d62:	8b e0       	ldi	r24, 0x0B	; 11
    1d64:	92 e0       	ldi	r25, 0x02	; 2
    1d66:	9f 93       	push	r25
    1d68:	8f 93       	push	r24
    1d6a:	c4 e0       	ldi	r28, 0x04	; 4
    1d6c:	d4 e0       	ldi	r29, 0x04	; 4
    1d6e:	df 93       	push	r29
          spinning(fsm_lvg.t_giros);
    1d70:	cf 93       	push	r28
    1d72:	62 dd       	rcall	.-1340   	; 0x1838 <chprintf>
    1d74:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <fsm_lvg+0x9>
    1d78:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <fsm_lvg+0xa>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1d7c:	c9 dd       	rcall	.-1134   	; 0x1910 <spinning>
    1d7e:	f8 94       	cli
    1d80:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1d84:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
          fsm_lvg.ul_espera = chVTGetSystemTime();
    1d88:	78 94       	sei
    1d8a:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <fsm_lvg+0x4>
          fsm_lvg.lvg = ESPERA_LVG;
    1d8e:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <fsm_lvg+0x3>
    1d92:	89 e0       	ldi	r24, 0x09	; 9
          chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
    1d94:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <fsm_lvg>
    1d98:	8b e1       	ldi	r24, 0x1B	; 27
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	9f 93       	push	r25
    1d9e:	8f 93       	push	r24
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
          // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");

          break;
    1da4:	49 dd       	rcall	.-1390   	; 0x1838 <chprintf>
    1da6:	8d b7       	in	r24, 0x3d	; 61
    1da8:	9e b7       	in	r25, 0x3e	; 62
    1daa:	08 96       	adiw	r24, 0x08	; 8
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	9e bf       	out	0x3e, r25	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado ENCHER_ML\n");
          // printf("Abrir água\n");
          palSetPad(IOPORT2, ENCHE_ID);
    1db4:	8d bf       	out	0x3d, r24	; 61
          chprintf((BaseSequentialStream *)&SD1, "Enchendo... \n\r");
    1db6:	b1 ce       	rjmp	.-670    	; 0x1b1a <lavar_maquina+0xe6>
    1db8:	2c 9a       	sbi	0x05, 4	; 5
    1dba:	82 ec       	ldi	r24, 0xC2	; 194
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	9f 93       	push	r25
    1dc0:	8f 93       	push	r24
    1dc2:	c4 e0       	ldi	r28, 0x04	; 4
    1dc4:	d4 e0       	ldi	r29, 0x04	; 4
    1dc6:	df 93       	push	r29
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    1dc8:	cf 93       	push	r28
    1dca:	36 dd       	rcall	.-1428   	; 0x1838 <chprintf>
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
            // printf("Sensor Cheio\n");
            chprintf((BaseSequentialStream *)&SD1, "Sensor cheio\n\r");
    1dd4:	4c 9b       	sbis	0x09, 4	; 9
    1dd6:	a1 ce       	rjmp	.-702    	; 0x1b1a <lavar_maquina+0xe6>
    1dd8:	81 ed       	ldi	r24, 0xD1	; 209
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
            palClearPad(IOPORT2, ENCHE_ID);
    1de4:	29 dd       	rcall	.-1454   	; 0x1838 <chprintf>
            fsm_ml.ml = RODAR_ML;
    1de6:	2c 98       	cbi	0x05, 4	; 5
    1de8:	87 e0       	ldi	r24, 0x07	; 7
    1dea:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <fsm_ml>
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0

        case(ESVAZIA_LVG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          palSetPad(IOPORT2, SECA_ID);
    1df4:	0f 90       	pop	r0
          // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    1df6:	91 ce       	rjmp	.-734    	; 0x1b1a <lavar_maquina+0xe6>
    1df8:	2d 9a       	sbi	0x05, 5	; 5
            // printf("Sensor Vazio: ON\n");
            palClearPad(IOPORT2, SECA_ID);
    1dfa:	4b 9b       	sbis	0x09, 3	; 9
            // printf("Fim LAVAGEM\n");
            chprintf((BaseSequentialStream *)&SD1, "Fim Lavagem\n\r");
    1dfc:	8e ce       	rjmp	.-740    	; 0x1b1a <lavar_maquina+0xe6>
    1dfe:	2d 98       	cbi	0x05, 5	; 5
    1e00:	8f e3       	ldi	r24, 0x3F	; 63
    1e02:	92 e0       	ldi	r25, 0x02	; 2
    1e04:	9f 93       	push	r25
    1e06:	8f 93       	push	r24
    1e08:	c4 e0       	ldi	r28, 0x04	; 4
    1e0a:	d4 e0       	ldi	r29, 0x04	; 4
    1e0c:	df 93       	push	r29
            palClearPad(IOPORT2, LAVAGEM_ID);
    1e0e:	cf 93       	push	r28

            // printf("Inicio ENXAGUE\n");
            chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
    1e10:	13 dd       	rcall	.-1498   	; 0x1838 <chprintf>
    1e12:	29 98       	cbi	0x05, 1	; 5
    1e14:	8d e4       	ldi	r24, 0x4D	; 77
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	9f 93       	push	r25
    1e1a:	8f 93       	push	r24
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
              lavar = ENXAGUE;
    1e20:	0b dd       	rcall	.-1514   	; 0x1838 <chprintf>
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <lavar>
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1e28:	8b e0       	ldi	r24, 0x0B	; 11
    1e2a:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <fsm_exg>
  st->t_giro = 4000;
    1e2e:	80 ea       	ldi	r24, 0xA0	; 160
    1e30:	9f e0       	ldi	r25, 0x0F	; 15
    1e32:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <fsm_exg+0x2>
    1e36:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <fsm_exg+0x1>
    1e3a:	8d b7       	in	r24, 0x3d	; 61
    1e3c:	9e b7       	in	r25, 0x3e	; 62
    1e3e:	08 96       	adiw	r24, 0x08	; 8
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	9e bf       	out	0x3e, r25	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	8d bf       	out	0x3d, r24	; 61
    1e4a:	67 ce       	rjmp	.-818    	; 0x1b1a <lavar_maquina+0xe6>
    1e4c:	f8 94       	cli
    1e4e:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1e52:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>

        case(ESPERA_LVG):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
    1e56:	78 94       	sei
    1e58:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <fsm_lvg+0x2>
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
    1e5c:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <fsm_lvg+0x1>
    1e60:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <fsm_lvg+0x7>
    1e64:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <fsm_lvg+0x8>
    1e68:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <fsm_lvg+0x3>
    1e6c:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <fsm_lvg+0x4>
    1e70:	ec 01       	movw	r28, r24
    1e72:	c2 1b       	sub	r28, r18
    1e74:	d3 0b       	sbc	r29, r19
    1e76:	28 e0       	ldi	r18, 0x08	; 8
    1e78:	3d e3       	ldi	r19, 0x3D	; 61
    1e7a:	d0 d3       	rcall	.+1952   	; 0x261c <__usmulhisi3>
    1e7c:	69 51       	subi	r22, 0x19	; 25
    1e7e:	7c 4f       	sbci	r23, 0xFC	; 252
    1e80:	8f 4f       	sbci	r24, 0xFF	; 255
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	28 ee       	ldi	r18, 0xE8	; 232
    1e86:	33 e0       	ldi	r19, 0x03	; 3
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	83 d3       	rcall	.+1798   	; 0x2594 <__udivmodsi4>
    1e8e:	2c 17       	cp	r18, r28
    1e90:	3d 07       	cpc	r19, r29
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <lavar_maquina+0x462>
    1e94:	42 ce       	rjmp	.-892    	; 0x1b1a <lavar_maquina+0xe6>
    1e96:	f8 94       	cli
    1e98:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
    1e9c:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
            fsm_lvg.ul_espera = chVTGetSystemTime();
    1ea0:	78 94       	sei
    1ea2:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <fsm_lvg+0x4>
    1ea6:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <fsm_lvg+0x3>
            if(fsm_lvg.turns >= 3){
    1eaa:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <fsm_lvg+0x5>
    1eae:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <fsm_lvg+0x6>
    1eb2:	83 30       	cpi	r24, 0x03	; 3
    1eb4:	91 05       	cpc	r25, r1
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
              // printf("Fim giros Lavagem\n");

            } else {
              fsm_lvg.turns ++;
    1eb6:	0c f0       	brlt	.+2      	; 0x1eba <lavar_maquina+0x486>
    1eb8:	62 c0       	rjmp	.+196    	; 0x1f7e <lavar_maquina+0x54a>
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <fsm_lvg+0x6>
              fsm_lvg.lvg = RODAR_LVG;
    1ec0:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <fsm_lvg+0x5>
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
        case(RODAR_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado RODAR_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Rodar Enxague\n\r");
    1ec6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <fsm_lvg>
    1eca:	27 ce       	rjmp	.-946    	; 0x1b1a <lavar_maquina+0xe6>
    1ecc:	8e e6       	ldi	r24, 0x6E	; 110
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	94 e0       	ldi	r25, 0x04	; 4
    1ed8:	9f 93       	push	r25
          spinning(fsm_exg.t_giro);
    1eda:	8f 93       	push	r24
    1edc:	ad dc       	rcall	.-1702   	; 0x1838 <chprintf>
    1ede:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <fsm_exg+0x1>
    1ee2:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <fsm_exg+0x2>
          fsm_exg.exg = ESVAZIA_EXG;
    1ee6:	14 dd       	rcall	.-1496   	; 0x1910 <spinning>
    1ee8:	8d e0       	ldi	r24, 0x0D	; 13

        break;
    1eea:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <fsm_exg>
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
          if(lavar == EMERGENCIA){
            break;
          } //  verificar a emergência

          // printf("DEBUG: Super ENXAGUE - estados ESVAZIA_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
    1ef4:	0f 90       	pop	r0
    1ef6:	11 ce       	rjmp	.-990    	; 0x1b1a <lavar_maquina+0xe6>
    1ef8:	8e e7       	ldi	r24, 0x7E	; 126
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	9f 93       	push	r25
    1efe:	8f 93       	push	r24
    1f00:	c4 e0       	ldi	r28, 0x04	; 4
    1f02:	d4 e0       	ldi	r29, 0x04	; 4
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
          palSetPad(IOPORT2, SECA_ID);
    1f08:	97 dc       	rcall	.-1746   	; 0x1838 <chprintf>
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    1f0a:	2d 9a       	sbi	0x05, 5	; 5
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	4b 9b       	sbis	0x09, 3	; 9
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
    1f16:	01 ce       	rjmp	.-1022   	; 0x1b1a <lavar_maquina+0xe6>
             lavar = CENTRIFUGA;
    1f18:	2d 98       	cbi	0x05, 5	; 5
    1f1a:	84 e0       	ldi	r24, 0x04	; 4
    1f1c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <lavar>
  st->t_giro = 4000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    1f20:	8e e0       	ldi	r24, 0x0E	; 14
    1f22:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <fsm_cen>
    1f26:	f8 94       	cli
    1f28:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <ch+0x13>
  st->tempo = chVTGetSystemTime();
    1f2c:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <ch+0x14>
    1f30:	78 94       	sei
    1f32:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <fsm_cen+0x2>
  st->ul_centri = st->tempo;
    1f36:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <fsm_cen+0x1>
  st->t_centri = 4000;
    1f3a:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <fsm_cen+0x4>
    1f3e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <fsm_cen+0x3>
    1f42:	80 ea       	ldi	r24, 0xA0	; 160
    1f44:	9f e0       	ldi	r25, 0x0F	; 15
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
             lavar = CENTRIFUGA;
             fsm_centrifuga_init(&fsm_cen);
             chprintf((BaseSequentialStream *)&SD1, "Fim Enxague\n\r");
    1f46:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <fsm_cen+0x6>
    1f4a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <fsm_cen+0x5>
    1f4e:	80 e9       	ldi	r24, 0x90	; 144
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	9f 93       	push	r25
    1f54:	8f 93       	push	r24
             // printf("Fim Enxágue\n");
             palClearPad(IOPORT2, ENXAGUE_ID);
    1f56:	df 93       	push	r29
             // printf("Inicio CENTRIFUGA\n");
             chprintf((BaseSequentialStream *)&SD1, "Inicio Centrifuga\n\r");
    1f58:	cf 93       	push	r28
    1f5a:	6e dc       	rcall	.-1828   	; 0x1838 <chprintf>
    1f5c:	2a 98       	cbi	0x05, 2	; 5
    1f5e:	8e e9       	ldi	r24, 0x9E	; 158
    1f60:	92 e0       	ldi	r25, 0x02	; 2
    1f62:	9f 93       	push	r25
    1f64:	8f 93       	push	r24
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	66 dc       	rcall	.-1844   	; 0x1838 <chprintf>
    1f6c:	8d b7       	in	r24, 0x3d	; 61
    1f6e:	9e b7       	in	r25, 0x3e	; 62
    1f70:	08 96       	adiw	r24, 0x08	; 8
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	9e bf       	out	0x3e, r25	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
    1f7a:	8d bf       	out	0x3d, r24	; 61
    1f7c:	ce cd       	rjmp	.-1124   	; 0x1b1a <lavar_maquina+0xe6>
    1f7e:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <fsm_lvg+0x6>
              fsm_lvg.lvg = ESVAZIA_LVG;
    1f82:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <fsm_lvg+0x5>
    1f86:	8a e0       	ldi	r24, 0x0A	; 10
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    1f88:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <fsm_lvg>
    1f8c:	8c e2       	ldi	r24, 0x2C	; 44
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	a2 ce       	rjmp	.-700    	; 0x1cd6 <lavar_maquina+0x2a2>

00001f92 <main>:
  } // fim switch máquina principal
} // fim função da máquina principal.


int main(void) {
  halInit();
    1f92:	0e 94 be 04 	call	0x97c	; 0x97c <halInit>
  chSysInit();
    1f96:	0e 94 ce 00 	call	0x19c	; 0x19c <chSysInit>

  sdStart(&SD1, 0);
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	0e 94 5e 07 	call	0xebc	; 0xebc <sdStart>
  chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
    1fa6:	82 eb       	ldi	r24, 0xB2	; 178
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	c4 e0       	ldi	r28, 0x04	; 4
    1fb0:	d4 e0       	ldi	r29, 0x04	; 4
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
  starting();
    1fb6:	40 dc       	rcall	.-1920   	; 0x1838 <chprintf>
    1fb8:	4e dc       	rcall	.-1892   	; 0x1856 <starting>
  lavar = PARADA;
    1fba:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    1fbe:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <fsm_prd+0x1>
    1fc2:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <fsm_prd>
  sdStart(&SD1, 0);
  chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
  starting();
  lavar = PARADA;
  fsm_parada_init(&fsm_prd);
  chprintf((BaseSequentialStream *)&SD1, "%d \n\r", lavar);
    1fc6:	1f 92       	push	r1
    1fc8:	1f 92       	push	r1
    1fca:	84 ec       	ldi	r24, 0xC4	; 196
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	30 dc       	rcall	.-1952   	; 0x1838 <chprintf>
    1fd8:	8d b7       	in	r24, 0x3d	; 61
    1fda:	9e b7       	in	r25, 0x3e	; 62
    1fdc:	0a 96       	adiw	r24, 0x0a	; 10
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	9e bf       	out	0x3e, r25	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63

  while(1){
    lavar_maquina();
    1fe6:	8d bf       	out	0x3d, r24	; 61
    1fe8:	25 dd       	rcall	.-1462   	; 0x1a34 <lavar_maquina>
    1fea:	fe cf       	rjmp	.-4      	; 0x1fe8 <main+0x56>

00001fec <vfprintf>:
    1fec:	ab e0       	ldi	r26, 0x0B	; 11
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb ef       	ldi	r30, 0xFB	; 251
    1ff2:	ff e0       	ldi	r31, 0x0F	; 15
    1ff4:	1d c3       	rjmp	.+1594   	; 0x2630 <__prologue_saves__+0x8>
    1ff6:	6c 01       	movw	r12, r24
    1ff8:	7b 01       	movw	r14, r22
    1ffa:	3a 01       	movw	r6, r20
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	17 82       	std	Z+7, r1	; 0x07
    2000:	16 82       	std	Z+6, r1	; 0x06
    2002:	83 81       	ldd	r24, Z+3	; 0x03
    2004:	81 ff       	sbrs	r24, 1
    2006:	f9 c0       	rjmp	.+498    	; 0x21fa <vfprintf+0x20e>
    2008:	ce 01       	movw	r24, r28
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	4c 01       	movw	r8, r24
    200e:	f6 01       	movw	r30, r12
    2010:	b3 80       	ldd	r11, Z+3	; 0x03
    2012:	f7 01       	movw	r30, r14
    2014:	b3 fc       	sbrc	r11, 3
    2016:	05 91       	lpm	r16, Z+
    2018:	b3 fe       	sbrs	r11, 3
    201a:	01 91       	ld	r16, Z+
    201c:	7f 01       	movw	r14, r30
    201e:	00 23       	and	r16, r16
    2020:	09 f4       	brne	.+2      	; 0x2024 <vfprintf+0x38>
    2022:	e7 c0       	rjmp	.+462    	; 0x21f2 <vfprintf+0x206>
    2024:	05 32       	cpi	r16, 0x25	; 37
    2026:	49 f4       	brne	.+18     	; 0x203a <vfprintf+0x4e>
    2028:	b3 fc       	sbrc	r11, 3
    202a:	05 91       	lpm	r16, Z+
    202c:	b3 fe       	sbrs	r11, 3
    202e:	01 91       	ld	r16, Z+
    2030:	7f 01       	movw	r14, r30
    2032:	05 32       	cpi	r16, 0x25	; 37
    2034:	11 f0       	breq	.+4      	; 0x203a <vfprintf+0x4e>
    2036:	10 e0       	ldi	r17, 0x00	; 0
    2038:	17 c0       	rjmp	.+46     	; 0x2068 <vfprintf+0x7c>
    203a:	b6 01       	movw	r22, r12
    203c:	80 2f       	mov	r24, r16
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	93 d3       	rcall	.+1830   	; 0x2768 <fputc>
    2042:	53 01       	movw	r10, r6
    2044:	35 01       	movw	r6, r10
    2046:	e3 cf       	rjmp	.-58     	; 0x200e <vfprintf+0x22>
    2048:	00 23       	and	r16, r16
    204a:	09 f4       	brne	.+2      	; 0x204e <vfprintf+0x62>
    204c:	d2 c0       	rjmp	.+420    	; 0x21f2 <vfprintf+0x206>
    204e:	60 2f       	mov	r22, r16
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	83 e4       	ldi	r24, 0x43	; 67
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	36 d3       	rcall	.+1644   	; 0x26c4 <strchr_P>
    2058:	89 2b       	or	r24, r25
    205a:	49 f0       	breq	.+18     	; 0x206e <vfprintf+0x82>
    205c:	f7 01       	movw	r30, r14
    205e:	b3 fc       	sbrc	r11, 3
    2060:	05 91       	lpm	r16, Z+
    2062:	b3 fe       	sbrs	r11, 3
    2064:	01 91       	ld	r16, Z+
    2066:	7f 01       	movw	r14, r30
    2068:	17 ff       	sbrs	r17, 7
    206a:	ee cf       	rjmp	.-36     	; 0x2048 <vfprintf+0x5c>
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <vfprintf+0x8a>
    206e:	03 32       	cpi	r16, 0x23	; 35
    2070:	39 f0       	breq	.+14     	; 0x2080 <vfprintf+0x94>
    2072:	0c 36       	cpi	r16, 0x6C	; 108
    2074:	19 f0       	breq	.+6      	; 0x207c <vfprintf+0x90>
    2076:	01 11       	cpse	r16, r1
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <vfprintf+0x98>
    207a:	bb c0       	rjmp	.+374    	; 0x21f2 <vfprintf+0x206>
    207c:	10 68       	ori	r17, 0x80	; 128
    207e:	ee cf       	rjmp	.-36     	; 0x205c <vfprintf+0x70>
    2080:	10 e1       	ldi	r17, 0x10	; 16
    2082:	ec cf       	rjmp	.-40     	; 0x205c <vfprintf+0x70>
    2084:	60 2f       	mov	r22, r16
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	8c e3       	ldi	r24, 0x3C	; 60
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	1b d3       	rcall	.+1590   	; 0x26c4 <strchr_P>
    208e:	89 2b       	or	r24, r25
    2090:	41 f0       	breq	.+16     	; 0x20a2 <vfprintf+0xb6>
    2092:	53 01       	movw	r10, r6
    2094:	f4 e0       	ldi	r31, 0x04	; 4
    2096:	af 0e       	add	r10, r31
    2098:	b1 1c       	adc	r11, r1
    209a:	b6 01       	movw	r22, r12
    209c:	8f e3       	ldi	r24, 0x3F	; 63
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	10 c0       	rjmp	.+32     	; 0x20c2 <vfprintf+0xd6>
    20a2:	03 36       	cpi	r16, 0x63	; 99
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <vfprintf+0xc6>
    20a6:	03 37       	cpi	r16, 0x73	; 115
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <vfprintf+0xda>
    20aa:	03 35       	cpi	r16, 0x53	; 83
    20ac:	01 f5       	brne	.+64     	; 0x20ee <vfprintf+0x102>
    20ae:	11 60       	ori	r17, 0x01	; 1
    20b0:	0a c0       	rjmp	.+20     	; 0x20c6 <vfprintf+0xda>
    20b2:	53 01       	movw	r10, r6
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	a8 0e       	add	r10, r24
    20b8:	b1 1c       	adc	r11, r1
    20ba:	b6 01       	movw	r22, r12
    20bc:	f3 01       	movw	r30, r6
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	52 d3       	rcall	.+1700   	; 0x2768 <fputc>
    20c4:	bf cf       	rjmp	.-130    	; 0x2044 <vfprintf+0x58>
    20c6:	53 01       	movw	r10, r6
    20c8:	f2 e0       	ldi	r31, 0x02	; 2
    20ca:	af 0e       	add	r10, r31
    20cc:	b1 1c       	adc	r11, r1
    20ce:	f3 01       	movw	r30, r6
    20d0:	60 80       	ld	r6, Z
    20d2:	71 80       	ldd	r7, Z+1	; 0x01
    20d4:	f3 01       	movw	r30, r6
    20d6:	10 fd       	sbrc	r17, 0
    20d8:	85 91       	lpm	r24, Z+
    20da:	10 ff       	sbrs	r17, 0
    20dc:	81 91       	ld	r24, Z+
    20de:	3f 01       	movw	r6, r30
    20e0:	88 23       	and	r24, r24
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <vfprintf+0xfa>
    20e4:	af cf       	rjmp	.-162    	; 0x2044 <vfprintf+0x58>
    20e6:	b6 01       	movw	r22, r12
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	3e d3       	rcall	.+1660   	; 0x2768 <fputc>
    20ec:	f3 cf       	rjmp	.-26     	; 0x20d4 <vfprintf+0xe8>
    20ee:	04 36       	cpi	r16, 0x64	; 100
    20f0:	11 f0       	breq	.+4      	; 0x20f6 <vfprintf+0x10a>
    20f2:	09 36       	cpi	r16, 0x69	; 105
    20f4:	21 f5       	brne	.+72     	; 0x213e <vfprintf+0x152>
    20f6:	53 01       	movw	r10, r6
    20f8:	17 ff       	sbrs	r17, 7
    20fa:	09 c0       	rjmp	.+18     	; 0x210e <vfprintf+0x122>
    20fc:	f4 e0       	ldi	r31, 0x04	; 4
    20fe:	af 0e       	add	r10, r31
    2100:	b1 1c       	adc	r11, r1
    2102:	f3 01       	movw	r30, r6
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <vfprintf+0x136>
    210e:	f2 e0       	ldi	r31, 0x02	; 2
    2110:	af 0e       	add	r10, r31
    2112:	b1 1c       	adc	r11, r1
    2114:	f3 01       	movw	r30, r6
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	07 2e       	mov	r0, r23
    211c:	00 0c       	add	r0, r0
    211e:	88 0b       	sbc	r24, r24
    2120:	99 0b       	sbc	r25, r25
    2122:	1f 7e       	andi	r17, 0xEF	; 239
    2124:	97 ff       	sbrs	r25, 7
    2126:	08 c0       	rjmp	.+16     	; 0x2138 <vfprintf+0x14c>
    2128:	90 95       	com	r25
    212a:	80 95       	com	r24
    212c:	70 95       	com	r23
    212e:	61 95       	neg	r22
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	10 64       	ori	r17, 0x40	; 64
    2138:	2a e0       	ldi	r18, 0x0A	; 10
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	30 c0       	rjmp	.+96     	; 0x219e <vfprintf+0x1b2>
    213e:	00 37       	cpi	r16, 0x70	; 112
    2140:	91 f0       	breq	.+36     	; 0x2166 <vfprintf+0x17a>
    2142:	40 f4       	brcc	.+16     	; 0x2154 <vfprintf+0x168>
    2144:	08 35       	cpi	r16, 0x58	; 88
    2146:	a1 f0       	breq	.+40     	; 0x2170 <vfprintf+0x184>
    2148:	0f 36       	cpi	r16, 0x6F	; 111
    214a:	09 f0       	breq	.+2      	; 0x214e <vfprintf+0x162>
    214c:	52 c0       	rjmp	.+164    	; 0x21f2 <vfprintf+0x206>
    214e:	28 e0       	ldi	r18, 0x08	; 8
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	11 c0       	rjmp	.+34     	; 0x2176 <vfprintf+0x18a>
    2154:	05 37       	cpi	r16, 0x75	; 117
    2156:	19 f0       	breq	.+6      	; 0x215e <vfprintf+0x172>
    2158:	08 37       	cpi	r16, 0x78	; 120
    215a:	31 f0       	breq	.+12     	; 0x2168 <vfprintf+0x17c>
    215c:	4a c0       	rjmp	.+148    	; 0x21f2 <vfprintf+0x206>
    215e:	1f 7e       	andi	r17, 0xEF	; 239
    2160:	2a e0       	ldi	r18, 0x0A	; 10
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <vfprintf+0x18a>
    2166:	10 61       	ori	r17, 0x10	; 16
    2168:	14 62       	ori	r17, 0x24	; 36
    216a:	20 e1       	ldi	r18, 0x10	; 16
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <vfprintf+0x18a>
    2170:	14 60       	ori	r17, 0x04	; 4
    2172:	20 e1       	ldi	r18, 0x10	; 16
    2174:	32 e0       	ldi	r19, 0x02	; 2
    2176:	53 01       	movw	r10, r6
    2178:	17 ff       	sbrs	r17, 7
    217a:	09 c0       	rjmp	.+18     	; 0x218e <vfprintf+0x1a2>
    217c:	f4 e0       	ldi	r31, 0x04	; 4
    217e:	af 0e       	add	r10, r31
    2180:	b1 1c       	adc	r11, r1
    2182:	f3 01       	movw	r30, r6
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	08 c0       	rjmp	.+16     	; 0x219e <vfprintf+0x1b2>
    218e:	f2 e0       	ldi	r31, 0x02	; 2
    2190:	af 0e       	add	r10, r31
    2192:	b1 1c       	adc	r11, r1
    2194:	f3 01       	movw	r30, r6
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a4 01       	movw	r20, r8
    21a0:	38 d3       	rcall	.+1648   	; 0x2812 <__ultoa_invert>
    21a2:	08 2f       	mov	r16, r24
    21a4:	08 19       	sub	r16, r8
    21a6:	16 ff       	sbrs	r17, 6
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <vfprintf+0x1c6>
    21aa:	b6 01       	movw	r22, r12
    21ac:	8d e2       	ldi	r24, 0x2D	; 45
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	db d2       	rcall	.+1462   	; 0x2768 <fputc>
    21b2:	14 ff       	sbrs	r17, 4
    21b4:	13 c0       	rjmp	.+38     	; 0x21dc <vfprintf+0x1f0>
    21b6:	fe 01       	movw	r30, r28
    21b8:	e0 0f       	add	r30, r16
    21ba:	f1 1d       	adc	r31, r1
    21bc:	80 81       	ld	r24, Z
    21be:	80 33       	cpi	r24, 0x30	; 48
    21c0:	69 f0       	breq	.+26     	; 0x21dc <vfprintf+0x1f0>
    21c2:	b6 01       	movw	r22, r12
    21c4:	80 e3       	ldi	r24, 0x30	; 48
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	cf d2       	rcall	.+1438   	; 0x2768 <fputc>
    21ca:	12 ff       	sbrs	r17, 2
    21cc:	07 c0       	rjmp	.+14     	; 0x21dc <vfprintf+0x1f0>
    21ce:	10 72       	andi	r17, 0x20	; 32
    21d0:	81 2f       	mov	r24, r17
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	b6 01       	movw	r22, r12
    21d6:	88 5a       	subi	r24, 0xA8	; 168
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	c6 d2       	rcall	.+1420   	; 0x2768 <fputc>
    21dc:	01 50       	subi	r16, 0x01	; 1
    21de:	f4 01       	movw	r30, r8
    21e0:	e0 0f       	add	r30, r16
    21e2:	f1 1d       	adc	r31, r1
    21e4:	80 81       	ld	r24, Z
    21e6:	b6 01       	movw	r22, r12
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	be d2       	rcall	.+1404   	; 0x2768 <fputc>
    21ec:	01 11       	cpse	r16, r1
    21ee:	f6 cf       	rjmp	.-20     	; 0x21dc <vfprintf+0x1f0>
    21f0:	29 cf       	rjmp	.-430    	; 0x2044 <vfprintf+0x58>
    21f2:	f6 01       	movw	r30, r12
    21f4:	86 81       	ldd	r24, Z+6	; 0x06
    21f6:	97 81       	ldd	r25, Z+7	; 0x07
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <vfprintf+0x212>
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	9f ef       	ldi	r25, 0xFF	; 255
    21fe:	2b 96       	adiw	r28, 0x0b	; 11
    2200:	ee e0       	ldi	r30, 0x0E	; 14
    2202:	32 c2       	rjmp	.+1124   	; 0x2668 <__epilogue_restores__+0x8>

00002204 <putval>:
    2204:	20 fd       	sbrc	r18, 0
    2206:	09 c0       	rjmp	.+18     	; 0x221a <putval+0x16>
    2208:	fc 01       	movw	r30, r24
    220a:	23 fd       	sbrc	r18, 3
    220c:	05 c0       	rjmp	.+10     	; 0x2218 <putval+0x14>
    220e:	22 ff       	sbrs	r18, 2
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <putval+0x12>
    2212:	73 83       	std	Z+3, r23	; 0x03
    2214:	62 83       	std	Z+2, r22	; 0x02
    2216:	51 83       	std	Z+1, r21	; 0x01
    2218:	40 83       	st	Z, r20
    221a:	08 95       	ret

0000221c <mulacc>:
    221c:	44 fd       	sbrc	r20, 4
    221e:	17 c0       	rjmp	.+46     	; 0x224e <mulacc+0x32>
    2220:	46 fd       	sbrc	r20, 6
    2222:	17 c0       	rjmp	.+46     	; 0x2252 <mulacc+0x36>
    2224:	ab 01       	movw	r20, r22
    2226:	bc 01       	movw	r22, r24
    2228:	da 01       	movw	r26, r20
    222a:	fb 01       	movw	r30, r22
    222c:	aa 0f       	add	r26, r26
    222e:	bb 1f       	adc	r27, r27
    2230:	ee 1f       	adc	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	10 94       	com	r1
    2236:	d1 f7       	brne	.-12     	; 0x222c <mulacc+0x10>
    2238:	4a 0f       	add	r20, r26
    223a:	5b 1f       	adc	r21, r27
    223c:	6e 1f       	adc	r22, r30
    223e:	7f 1f       	adc	r23, r31
    2240:	cb 01       	movw	r24, r22
    2242:	ba 01       	movw	r22, r20
    2244:	66 0f       	add	r22, r22
    2246:	77 1f       	adc	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <mulacc+0x44>
    224e:	33 e0       	ldi	r19, 0x03	; 3
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <mulacc+0x38>
    2252:	34 e0       	ldi	r19, 0x04	; 4
    2254:	66 0f       	add	r22, r22
    2256:	77 1f       	adc	r23, r23
    2258:	88 1f       	adc	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	31 50       	subi	r19, 0x01	; 1
    225e:	d1 f7       	brne	.-12     	; 0x2254 <mulacc+0x38>
    2260:	62 0f       	add	r22, r18
    2262:	71 1d       	adc	r23, r1
    2264:	81 1d       	adc	r24, r1
    2266:	91 1d       	adc	r25, r1
    2268:	08 95       	ret

0000226a <skip_spaces>:
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	8c 01       	movw	r16, r24
    2274:	c8 01       	movw	r24, r16
    2276:	3a d2       	rcall	.+1140   	; 0x26ec <fgetc>
    2278:	ec 01       	movw	r28, r24
    227a:	97 fd       	sbrc	r25, 7
    227c:	06 c0       	rjmp	.+12     	; 0x228a <skip_spaces+0x20>
    227e:	1a d2       	rcall	.+1076   	; 0x26b4 <isspace>
    2280:	89 2b       	or	r24, r25
    2282:	c1 f7       	brne	.-16     	; 0x2274 <skip_spaces+0xa>
    2284:	b8 01       	movw	r22, r16
    2286:	ce 01       	movw	r24, r28
    2288:	ab d2       	rcall	.+1366   	; 0x27e0 <ungetc>
    228a:	ce 01       	movw	r24, r28
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <conv_int>:
    2296:	8f 92       	push	r8
    2298:	9f 92       	push	r9
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	8c 01       	movw	r16, r24
    22ac:	d6 2f       	mov	r29, r22
    22ae:	7a 01       	movw	r14, r20
    22b0:	b2 2e       	mov	r11, r18
    22b2:	1c d2       	rcall	.+1080   	; 0x26ec <fgetc>
    22b4:	9c 01       	movw	r18, r24
    22b6:	33 27       	eor	r19, r19
    22b8:	2b 32       	cpi	r18, 0x2B	; 43
    22ba:	31 05       	cpc	r19, r1
    22bc:	31 f0       	breq	.+12     	; 0x22ca <conv_int+0x34>
    22be:	2d 32       	cpi	r18, 0x2D	; 45
    22c0:	31 05       	cpc	r19, r1
    22c2:	59 f4       	brne	.+22     	; 0x22da <conv_int+0x44>
    22c4:	8b 2d       	mov	r24, r11
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	b8 2e       	mov	r11, r24
    22ca:	d1 50       	subi	r29, 0x01	; 1
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <conv_int+0x3c>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	61 c0       	rjmp	.+194    	; 0x2394 <conv_int+0xfe>
    22d2:	c8 01       	movw	r24, r16
    22d4:	0b d2       	rcall	.+1046   	; 0x26ec <fgetc>
    22d6:	97 fd       	sbrc	r25, 7
    22d8:	fa cf       	rjmp	.-12     	; 0x22ce <conv_int+0x38>
    22da:	cb 2d       	mov	r28, r11
    22dc:	cd 7f       	andi	r28, 0xFD	; 253
    22de:	2b 2d       	mov	r18, r11
    22e0:	20 73       	andi	r18, 0x30	; 48
    22e2:	f9 f4       	brne	.+62     	; 0x2322 <conv_int+0x8c>
    22e4:	80 33       	cpi	r24, 0x30	; 48
    22e6:	e9 f4       	brne	.+58     	; 0x2322 <conv_int+0x8c>
    22e8:	aa 24       	eor	r10, r10
    22ea:	aa 94       	dec	r10
    22ec:	ad 0e       	add	r10, r29
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <conv_int+0x5c>
    22f0:	3e c0       	rjmp	.+124    	; 0x236e <conv_int+0xd8>
    22f2:	c8 01       	movw	r24, r16
    22f4:	fb d1       	rcall	.+1014   	; 0x26ec <fgetc>
    22f6:	97 fd       	sbrc	r25, 7
    22f8:	3a c0       	rjmp	.+116    	; 0x236e <conv_int+0xd8>
    22fa:	9c 01       	movw	r18, r24
    22fc:	2f 7d       	andi	r18, 0xDF	; 223
    22fe:	33 27       	eor	r19, r19
    2300:	28 35       	cpi	r18, 0x58	; 88
    2302:	31 05       	cpc	r19, r1
    2304:	41 f4       	brne	.+16     	; 0x2316 <conv_int+0x80>
    2306:	c2 64       	ori	r28, 0x42	; 66
    2308:	d2 50       	subi	r29, 0x02	; 2
    230a:	89 f1       	breq	.+98     	; 0x236e <conv_int+0xd8>
    230c:	c8 01       	movw	r24, r16
    230e:	ee d1       	rcall	.+988    	; 0x26ec <fgetc>
    2310:	97 ff       	sbrs	r25, 7
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <conv_int+0x8c>
    2314:	2c c0       	rjmp	.+88     	; 0x236e <conv_int+0xd8>
    2316:	b6 fe       	sbrs	r11, 6
    2318:	02 c0       	rjmp	.+4      	; 0x231e <conv_int+0x88>
    231a:	c2 60       	ori	r28, 0x02	; 2
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <conv_int+0x8a>
    231e:	c2 61       	ori	r28, 0x12	; 18
    2320:	da 2d       	mov	r29, r10
    2322:	81 2c       	mov	r8, r1
    2324:	91 2c       	mov	r9, r1
    2326:	54 01       	movw	r10, r8
    2328:	20 ed       	ldi	r18, 0xD0	; 208
    232a:	28 0f       	add	r18, r24
    232c:	28 30       	cpi	r18, 0x08	; 8
    232e:	78 f0       	brcs	.+30     	; 0x234e <conv_int+0xb8>
    2330:	c4 ff       	sbrs	r28, 4
    2332:	03 c0       	rjmp	.+6      	; 0x233a <conv_int+0xa4>
    2334:	b8 01       	movw	r22, r16
    2336:	54 d2       	rcall	.+1192   	; 0x27e0 <ungetc>
    2338:	17 c0       	rjmp	.+46     	; 0x2368 <conv_int+0xd2>
    233a:	2a 30       	cpi	r18, 0x0A	; 10
    233c:	40 f0       	brcs	.+16     	; 0x234e <conv_int+0xb8>
    233e:	c6 ff       	sbrs	r28, 6
    2340:	f9 cf       	rjmp	.-14     	; 0x2334 <conv_int+0x9e>
    2342:	2f 7d       	andi	r18, 0xDF	; 223
    2344:	3f ee       	ldi	r19, 0xEF	; 239
    2346:	32 0f       	add	r19, r18
    2348:	36 30       	cpi	r19, 0x06	; 6
    234a:	a0 f7       	brcc	.-24     	; 0x2334 <conv_int+0x9e>
    234c:	27 50       	subi	r18, 0x07	; 7
    234e:	4c 2f       	mov	r20, r28
    2350:	c5 01       	movw	r24, r10
    2352:	b4 01       	movw	r22, r8
    2354:	63 df       	rcall	.-314    	; 0x221c <mulacc>
    2356:	4b 01       	movw	r8, r22
    2358:	5c 01       	movw	r10, r24
    235a:	c2 60       	ori	r28, 0x02	; 2
    235c:	d1 50       	subi	r29, 0x01	; 1
    235e:	51 f0       	breq	.+20     	; 0x2374 <conv_int+0xde>
    2360:	c8 01       	movw	r24, r16
    2362:	c4 d1       	rcall	.+904    	; 0x26ec <fgetc>
    2364:	97 ff       	sbrs	r25, 7
    2366:	e0 cf       	rjmp	.-64     	; 0x2328 <conv_int+0x92>
    2368:	c1 fd       	sbrc	r28, 1
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <conv_int+0xde>
    236c:	b0 cf       	rjmp	.-160    	; 0x22ce <conv_int+0x38>
    236e:	81 2c       	mov	r8, r1
    2370:	91 2c       	mov	r9, r1
    2372:	54 01       	movw	r10, r8
    2374:	c7 ff       	sbrs	r28, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <conv_int+0xf2>
    2378:	b0 94       	com	r11
    237a:	a0 94       	com	r10
    237c:	90 94       	com	r9
    237e:	80 94       	com	r8
    2380:	81 1c       	adc	r8, r1
    2382:	91 1c       	adc	r9, r1
    2384:	a1 1c       	adc	r10, r1
    2386:	b1 1c       	adc	r11, r1
    2388:	2c 2f       	mov	r18, r28
    238a:	b5 01       	movw	r22, r10
    238c:	a4 01       	movw	r20, r8
    238e:	c7 01       	movw	r24, r14
    2390:	39 df       	rcall	.-398    	; 0x2204 <putval>
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	bf 90       	pop	r11
    23a2:	af 90       	pop	r10
    23a4:	9f 90       	pop	r9
    23a6:	8f 90       	pop	r8
    23a8:	08 95       	ret

000023aa <vfscanf>:
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ea ed       	ldi	r30, 0xDA	; 218
    23b0:	f1 e1       	ldi	r31, 0x11	; 17
    23b2:	3d c1       	rjmp	.+634    	; 0x262e <__prologue_saves__+0x6>
    23b4:	6c 01       	movw	r12, r24
    23b6:	eb 01       	movw	r28, r22
    23b8:	5a 01       	movw	r10, r20
    23ba:	fc 01       	movw	r30, r24
    23bc:	17 82       	std	Z+7, r1	; 0x07
    23be:	16 82       	std	Z+6, r1	; 0x06
    23c0:	51 2c       	mov	r5, r1
    23c2:	f6 01       	movw	r30, r12
    23c4:	f3 80       	ldd	r15, Z+3	; 0x03
    23c6:	fe 01       	movw	r30, r28
    23c8:	f3 fc       	sbrc	r15, 3
    23ca:	85 91       	lpm	r24, Z+
    23cc:	f3 fe       	sbrs	r15, 3
    23ce:	81 91       	ld	r24, Z+
    23d0:	18 2f       	mov	r17, r24
    23d2:	ef 01       	movw	r28, r30
    23d4:	88 23       	and	r24, r24
    23d6:	09 f4       	brne	.+2      	; 0x23da <vfscanf+0x30>
    23d8:	d4 c0       	rjmp	.+424    	; 0x2582 <vfscanf+0x1d8>
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	6b d1       	rcall	.+726    	; 0x26b4 <isspace>
    23de:	89 2b       	or	r24, r25
    23e0:	19 f0       	breq	.+6      	; 0x23e8 <vfscanf+0x3e>
    23e2:	c6 01       	movw	r24, r12
    23e4:	42 df       	rcall	.-380    	; 0x226a <skip_spaces>
    23e6:	ed cf       	rjmp	.-38     	; 0x23c2 <vfscanf+0x18>
    23e8:	15 32       	cpi	r17, 0x25	; 37
    23ea:	41 f4       	brne	.+16     	; 0x23fc <vfscanf+0x52>
    23ec:	fe 01       	movw	r30, r28
    23ee:	f3 fc       	sbrc	r15, 3
    23f0:	15 91       	lpm	r17, Z+
    23f2:	f3 fe       	sbrs	r15, 3
    23f4:	11 91       	ld	r17, Z+
    23f6:	ef 01       	movw	r28, r30
    23f8:	15 32       	cpi	r17, 0x25	; 37
    23fa:	71 f4       	brne	.+28     	; 0x2418 <vfscanf+0x6e>
    23fc:	c6 01       	movw	r24, r12
    23fe:	76 d1       	rcall	.+748    	; 0x26ec <fgetc>
    2400:	97 fd       	sbrc	r25, 7
    2402:	bd c0       	rjmp	.+378    	; 0x257e <vfscanf+0x1d4>
    2404:	41 2f       	mov	r20, r17
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	9c 01       	movw	r18, r24
    240a:	33 27       	eor	r19, r19
    240c:	24 17       	cp	r18, r20
    240e:	35 07       	cpc	r19, r21
    2410:	c1 f2       	breq	.-80     	; 0x23c2 <vfscanf+0x18>
    2412:	b6 01       	movw	r22, r12
    2414:	e5 d1       	rcall	.+970    	; 0x27e0 <ungetc>
    2416:	b5 c0       	rjmp	.+362    	; 0x2582 <vfscanf+0x1d8>
    2418:	1a 32       	cpi	r17, 0x2A	; 42
    241a:	39 f4       	brne	.+14     	; 0x242a <vfscanf+0x80>
    241c:	f3 fc       	sbrc	r15, 3
    241e:	15 91       	lpm	r17, Z+
    2420:	f3 fe       	sbrs	r15, 3
    2422:	11 91       	ld	r17, Z+
    2424:	ef 01       	movw	r28, r30
    2426:	01 e0       	ldi	r16, 0x01	; 1
    2428:	01 c0       	rjmp	.+2      	; 0x242c <vfscanf+0x82>
    242a:	00 e0       	ldi	r16, 0x00	; 0
    242c:	e1 2c       	mov	r14, r1
    242e:	20 ed       	ldi	r18, 0xD0	; 208
    2430:	21 0f       	add	r18, r17
    2432:	2a 30       	cpi	r18, 0x0A	; 10
    2434:	78 f4       	brcc	.+30     	; 0x2454 <vfscanf+0xaa>
    2436:	02 60       	ori	r16, 0x02	; 2
    2438:	6e 2d       	mov	r22, r14
    243a:	70 e0       	ldi	r23, 0x00	; 0
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	ec de       	rcall	.-552    	; 0x221c <mulacc>
    2444:	e6 2e       	mov	r14, r22
    2446:	fe 01       	movw	r30, r28
    2448:	f3 fc       	sbrc	r15, 3
    244a:	15 91       	lpm	r17, Z+
    244c:	f3 fe       	sbrs	r15, 3
    244e:	11 91       	ld	r17, Z+
    2450:	ef 01       	movw	r28, r30
    2452:	ed cf       	rjmp	.-38     	; 0x242e <vfscanf+0x84>
    2454:	01 ff       	sbrs	r16, 1
    2456:	03 c0       	rjmp	.+6      	; 0x245e <vfscanf+0xb4>
    2458:	e1 10       	cpse	r14, r1
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <vfscanf+0xb8>
    245c:	92 c0       	rjmp	.+292    	; 0x2582 <vfscanf+0x1d8>
    245e:	ee 24       	eor	r14, r14
    2460:	ea 94       	dec	r14
    2462:	18 36       	cpi	r17, 0x68	; 104
    2464:	19 f0       	breq	.+6      	; 0x246c <vfscanf+0xc2>
    2466:	1c 36       	cpi	r17, 0x6C	; 108
    2468:	51 f0       	breq	.+20     	; 0x247e <vfscanf+0xd4>
    246a:	10 c0       	rjmp	.+32     	; 0x248c <vfscanf+0xe2>
    246c:	fe 01       	movw	r30, r28
    246e:	f3 fc       	sbrc	r15, 3
    2470:	15 91       	lpm	r17, Z+
    2472:	f3 fe       	sbrs	r15, 3
    2474:	11 91       	ld	r17, Z+
    2476:	ef 01       	movw	r28, r30
    2478:	18 36       	cpi	r17, 0x68	; 104
    247a:	41 f4       	brne	.+16     	; 0x248c <vfscanf+0xe2>
    247c:	08 60       	ori	r16, 0x08	; 8
    247e:	04 60       	ori	r16, 0x04	; 4
    2480:	fe 01       	movw	r30, r28
    2482:	f3 fc       	sbrc	r15, 3
    2484:	15 91       	lpm	r17, Z+
    2486:	f3 fe       	sbrs	r15, 3
    2488:	11 91       	ld	r17, Z+
    248a:	ef 01       	movw	r28, r30
    248c:	11 23       	and	r17, r17
    248e:	09 f4       	brne	.+2      	; 0x2492 <vfscanf+0xe8>
    2490:	78 c0       	rjmp	.+240    	; 0x2582 <vfscanf+0x1d8>
    2492:	61 2f       	mov	r22, r17
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	83 e5       	ldi	r24, 0x53	; 83
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	14 d1       	rcall	.+552    	; 0x26c4 <strchr_P>
    249c:	89 2b       	or	r24, r25
    249e:	09 f4       	brne	.+2      	; 0x24a2 <vfscanf+0xf8>
    24a0:	70 c0       	rjmp	.+224    	; 0x2582 <vfscanf+0x1d8>
    24a2:	00 fd       	sbrc	r16, 0
    24a4:	07 c0       	rjmp	.+14     	; 0x24b4 <vfscanf+0x10a>
    24a6:	f5 01       	movw	r30, r10
    24a8:	80 80       	ld	r8, Z
    24aa:	91 80       	ldd	r9, Z+1	; 0x01
    24ac:	c5 01       	movw	r24, r10
    24ae:	02 96       	adiw	r24, 0x02	; 2
    24b0:	5c 01       	movw	r10, r24
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <vfscanf+0x10e>
    24b4:	81 2c       	mov	r8, r1
    24b6:	91 2c       	mov	r9, r1
    24b8:	1e 36       	cpi	r17, 0x6E	; 110
    24ba:	49 f4       	brne	.+18     	; 0x24ce <vfscanf+0x124>
    24bc:	f6 01       	movw	r30, r12
    24be:	46 81       	ldd	r20, Z+6	; 0x06
    24c0:	57 81       	ldd	r21, Z+7	; 0x07
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	20 2f       	mov	r18, r16
    24c8:	c4 01       	movw	r24, r8
    24ca:	9c de       	rcall	.-712    	; 0x2204 <putval>
    24cc:	7a cf       	rjmp	.-268    	; 0x23c2 <vfscanf+0x18>
    24ce:	13 36       	cpi	r17, 0x63	; 99
    24d0:	a1 f4       	brne	.+40     	; 0x24fa <vfscanf+0x150>
    24d2:	01 fd       	sbrc	r16, 1
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <vfscanf+0x130>
    24d6:	ee 24       	eor	r14, r14
    24d8:	e3 94       	inc	r14
    24da:	c6 01       	movw	r24, r12
    24dc:	07 d1       	rcall	.+526    	; 0x26ec <fgetc>
    24de:	97 fd       	sbrc	r25, 7
    24e0:	4e c0       	rjmp	.+156    	; 0x257e <vfscanf+0x1d4>
    24e2:	81 14       	cp	r8, r1
    24e4:	91 04       	cpc	r9, r1
    24e6:	29 f0       	breq	.+10     	; 0x24f2 <vfscanf+0x148>
    24e8:	f4 01       	movw	r30, r8
    24ea:	80 83       	st	Z, r24
    24ec:	c4 01       	movw	r24, r8
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	4c 01       	movw	r8, r24
    24f2:	ea 94       	dec	r14
    24f4:	e1 10       	cpse	r14, r1
    24f6:	f1 cf       	rjmp	.-30     	; 0x24da <vfscanf+0x130>
    24f8:	3e c0       	rjmp	.+124    	; 0x2576 <vfscanf+0x1cc>
    24fa:	c6 01       	movw	r24, r12
    24fc:	b6 de       	rcall	.-660    	; 0x226a <skip_spaces>
    24fe:	97 fd       	sbrc	r25, 7
    2500:	3e c0       	rjmp	.+124    	; 0x257e <vfscanf+0x1d4>
    2502:	1f 36       	cpi	r17, 0x6F	; 111
    2504:	49 f1       	breq	.+82     	; 0x2558 <vfscanf+0x1ae>
    2506:	28 f4       	brcc	.+10     	; 0x2512 <vfscanf+0x168>
    2508:	14 36       	cpi	r17, 0x64	; 100
    250a:	21 f1       	breq	.+72     	; 0x2554 <vfscanf+0x1aa>
    250c:	19 36       	cpi	r17, 0x69	; 105
    250e:	39 f1       	breq	.+78     	; 0x255e <vfscanf+0x1b4>
    2510:	25 c0       	rjmp	.+74     	; 0x255c <vfscanf+0x1b2>
    2512:	13 37       	cpi	r17, 0x73	; 115
    2514:	71 f0       	breq	.+28     	; 0x2532 <vfscanf+0x188>
    2516:	15 37       	cpi	r17, 0x75	; 117
    2518:	e9 f0       	breq	.+58     	; 0x2554 <vfscanf+0x1aa>
    251a:	20 c0       	rjmp	.+64     	; 0x255c <vfscanf+0x1b2>
    251c:	81 14       	cp	r8, r1
    251e:	91 04       	cpc	r9, r1
    2520:	29 f0       	breq	.+10     	; 0x252c <vfscanf+0x182>
    2522:	f4 01       	movw	r30, r8
    2524:	60 82       	st	Z, r6
    2526:	c4 01       	movw	r24, r8
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	4c 01       	movw	r8, r24
    252c:	ea 94       	dec	r14
    252e:	ee 20       	and	r14, r14
    2530:	59 f0       	breq	.+22     	; 0x2548 <vfscanf+0x19e>
    2532:	c6 01       	movw	r24, r12
    2534:	db d0       	rcall	.+438    	; 0x26ec <fgetc>
    2536:	3c 01       	movw	r6, r24
    2538:	97 fd       	sbrc	r25, 7
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <vfscanf+0x19e>
    253c:	bb d0       	rcall	.+374    	; 0x26b4 <isspace>
    253e:	89 2b       	or	r24, r25
    2540:	69 f3       	breq	.-38     	; 0x251c <vfscanf+0x172>
    2542:	b6 01       	movw	r22, r12
    2544:	c3 01       	movw	r24, r6
    2546:	4c d1       	rcall	.+664    	; 0x27e0 <ungetc>
    2548:	81 14       	cp	r8, r1
    254a:	91 04       	cpc	r9, r1
    254c:	a1 f0       	breq	.+40     	; 0x2576 <vfscanf+0x1cc>
    254e:	f4 01       	movw	r30, r8
    2550:	10 82       	st	Z, r1
    2552:	11 c0       	rjmp	.+34     	; 0x2576 <vfscanf+0x1cc>
    2554:	00 62       	ori	r16, 0x20	; 32
    2556:	03 c0       	rjmp	.+6      	; 0x255e <vfscanf+0x1b4>
    2558:	00 61       	ori	r16, 0x10	; 16
    255a:	01 c0       	rjmp	.+2      	; 0x255e <vfscanf+0x1b4>
    255c:	00 64       	ori	r16, 0x40	; 64
    255e:	20 2f       	mov	r18, r16
    2560:	a4 01       	movw	r20, r8
    2562:	6e 2d       	mov	r22, r14
    2564:	c6 01       	movw	r24, r12
    2566:	97 de       	rcall	.-722    	; 0x2296 <conv_int>
    2568:	81 11       	cpse	r24, r1
    256a:	05 c0       	rjmp	.+10     	; 0x2576 <vfscanf+0x1cc>
    256c:	f6 01       	movw	r30, r12
    256e:	83 81       	ldd	r24, Z+3	; 0x03
    2570:	80 73       	andi	r24, 0x30	; 48
    2572:	29 f4       	brne	.+10     	; 0x257e <vfscanf+0x1d4>
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <vfscanf+0x1d8>
    2576:	00 fd       	sbrc	r16, 0
    2578:	24 cf       	rjmp	.-440    	; 0x23c2 <vfscanf+0x18>
    257a:	53 94       	inc	r5
    257c:	22 cf       	rjmp	.-444    	; 0x23c2 <vfscanf+0x18>
    257e:	55 20       	and	r5, r5
    2580:	19 f0       	breq	.+6      	; 0x2588 <vfscanf+0x1de>
    2582:	85 2d       	mov	r24, r5
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 c0       	rjmp	.+4      	; 0x258c <vfscanf+0x1e2>
    2588:	8f ef       	ldi	r24, 0xFF	; 255
    258a:	9f ef       	ldi	r25, 0xFF	; 255
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	ef e0       	ldi	r30, 0x0F	; 15
    2592:	69 c0       	rjmp	.+210    	; 0x2666 <__epilogue_restores__+0x6>

00002594 <__udivmodsi4>:
    2594:	a1 e2       	ldi	r26, 0x21	; 33
    2596:	1a 2e       	mov	r1, r26
    2598:	aa 1b       	sub	r26, r26
    259a:	bb 1b       	sub	r27, r27
    259c:	fd 01       	movw	r30, r26
    259e:	0d c0       	rjmp	.+26     	; 0x25ba <__udivmodsi4_ep>

000025a0 <__udivmodsi4_loop>:
    25a0:	aa 1f       	adc	r26, r26
    25a2:	bb 1f       	adc	r27, r27
    25a4:	ee 1f       	adc	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	a2 17       	cp	r26, r18
    25aa:	b3 07       	cpc	r27, r19
    25ac:	e4 07       	cpc	r30, r20
    25ae:	f5 07       	cpc	r31, r21
    25b0:	20 f0       	brcs	.+8      	; 0x25ba <__udivmodsi4_ep>
    25b2:	a2 1b       	sub	r26, r18
    25b4:	b3 0b       	sbc	r27, r19
    25b6:	e4 0b       	sbc	r30, r20
    25b8:	f5 0b       	sbc	r31, r21

000025ba <__udivmodsi4_ep>:
    25ba:	66 1f       	adc	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	1a 94       	dec	r1
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <__udivmodsi4_loop>
    25c6:	60 95       	com	r22
    25c8:	70 95       	com	r23
    25ca:	80 95       	com	r24
    25cc:	90 95       	com	r25
    25ce:	9b 01       	movw	r18, r22
    25d0:	ac 01       	movw	r20, r24
    25d2:	bd 01       	movw	r22, r26
    25d4:	cf 01       	movw	r24, r30
    25d6:	08 95       	ret

000025d8 <__divmodsi4>:
    25d8:	05 2e       	mov	r0, r21
    25da:	97 fb       	bst	r25, 7
    25dc:	16 f4       	brtc	.+4      	; 0x25e2 <__divmodsi4+0xa>
    25de:	00 94       	com	r0
    25e0:	0f d0       	rcall	.+30     	; 0x2600 <__negsi2>
    25e2:	57 fd       	sbrc	r21, 7
    25e4:	05 d0       	rcall	.+10     	; 0x25f0 <__divmodsi4_neg2>
    25e6:	d6 df       	rcall	.-84     	; 0x2594 <__udivmodsi4>
    25e8:	07 fc       	sbrc	r0, 7
    25ea:	02 d0       	rcall	.+4      	; 0x25f0 <__divmodsi4_neg2>
    25ec:	46 f4       	brtc	.+16     	; 0x25fe <__divmodsi4_exit>
    25ee:	08 c0       	rjmp	.+16     	; 0x2600 <__negsi2>

000025f0 <__divmodsi4_neg2>:
    25f0:	50 95       	com	r21
    25f2:	40 95       	com	r20
    25f4:	30 95       	com	r19
    25f6:	21 95       	neg	r18
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	4f 4f       	sbci	r20, 0xFF	; 255
    25fc:	5f 4f       	sbci	r21, 0xFF	; 255

000025fe <__divmodsi4_exit>:
    25fe:	08 95       	ret

00002600 <__negsi2>:
    2600:	90 95       	com	r25
    2602:	80 95       	com	r24
    2604:	70 95       	com	r23
    2606:	61 95       	neg	r22
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__tablejump2__>:
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	05 90       	lpm	r0, Z+
    2616:	f4 91       	lpm	r31, Z
    2618:	e0 2d       	mov	r30, r0
    261a:	09 94       	ijmp

0000261c <__usmulhisi3>:
    261c:	3c d0       	rcall	.+120    	; 0x2696 <__umulhisi3>

0000261e <__usmulhisi3_tail>:
    261e:	b7 ff       	sbrs	r27, 7
    2620:	08 95       	ret
    2622:	82 1b       	sub	r24, r18
    2624:	93 0b       	sbc	r25, r19
    2626:	08 95       	ret

00002628 <__prologue_saves__>:
    2628:	2f 92       	push	r2
    262a:	3f 92       	push	r3
    262c:	4f 92       	push	r4
    262e:	5f 92       	push	r5
    2630:	6f 92       	push	r6
    2632:	7f 92       	push	r7
    2634:	8f 92       	push	r8
    2636:	9f 92       	push	r9
    2638:	af 92       	push	r10
    263a:	bf 92       	push	r11
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	ca 1b       	sub	r28, r26
    2652:	db 0b       	sbc	r29, r27
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	09 94       	ijmp

00002660 <__epilogue_restores__>:
    2660:	2a 88       	ldd	r2, Y+18	; 0x12
    2662:	39 88       	ldd	r3, Y+17	; 0x11
    2664:	48 88       	ldd	r4, Y+16	; 0x10
    2666:	5f 84       	ldd	r5, Y+15	; 0x0f
    2668:	6e 84       	ldd	r6, Y+14	; 0x0e
    266a:	7d 84       	ldd	r7, Y+13	; 0x0d
    266c:	8c 84       	ldd	r8, Y+12	; 0x0c
    266e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2670:	aa 84       	ldd	r10, Y+10	; 0x0a
    2672:	b9 84       	ldd	r11, Y+9	; 0x09
    2674:	c8 84       	ldd	r12, Y+8	; 0x08
    2676:	df 80       	ldd	r13, Y+7	; 0x07
    2678:	ee 80       	ldd	r14, Y+6	; 0x06
    267a:	fd 80       	ldd	r15, Y+5	; 0x05
    267c:	0c 81       	ldd	r16, Y+4	; 0x04
    267e:	1b 81       	ldd	r17, Y+3	; 0x03
    2680:	aa 81       	ldd	r26, Y+2	; 0x02
    2682:	b9 81       	ldd	r27, Y+1	; 0x01
    2684:	ce 0f       	add	r28, r30
    2686:	d1 1d       	adc	r29, r1
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	ed 01       	movw	r28, r26
    2694:	08 95       	ret

00002696 <__umulhisi3>:
    2696:	a2 9f       	mul	r26, r18
    2698:	b0 01       	movw	r22, r0
    269a:	b3 9f       	mul	r27, r19
    269c:	c0 01       	movw	r24, r0
    269e:	a3 9f       	mul	r26, r19
    26a0:	70 0d       	add	r23, r0
    26a2:	81 1d       	adc	r24, r1
    26a4:	11 24       	eor	r1, r1
    26a6:	91 1d       	adc	r25, r1
    26a8:	b2 9f       	mul	r27, r18
    26aa:	70 0d       	add	r23, r0
    26ac:	81 1d       	adc	r24, r1
    26ae:	11 24       	eor	r1, r1
    26b0:	91 1d       	adc	r25, r1
    26b2:	08 95       	ret

000026b4 <isspace>:
    26b4:	91 11       	cpse	r25, r1
    26b6:	0b c1       	rjmp	.+534    	; 0x28ce <__ctype_isfalse>
    26b8:	80 32       	cpi	r24, 0x20	; 32
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <isspace+0xe>
    26bc:	89 50       	subi	r24, 0x09	; 9
    26be:	85 50       	subi	r24, 0x05	; 5
    26c0:	d0 f7       	brcc	.-12     	; 0x26b6 <isspace+0x2>
    26c2:	08 95       	ret

000026c4 <strchr_P>:
    26c4:	fc 01       	movw	r30, r24
    26c6:	05 90       	lpm	r0, Z+
    26c8:	06 16       	cp	r0, r22
    26ca:	21 f0       	breq	.+8      	; 0x26d4 <strchr_P+0x10>
    26cc:	00 20       	and	r0, r0
    26ce:	d9 f7       	brne	.-10     	; 0x26c6 <strchr_P+0x2>
    26d0:	c0 01       	movw	r24, r0
    26d2:	08 95       	ret
    26d4:	31 97       	sbiw	r30, 0x01	; 1
    26d6:	cf 01       	movw	r24, r30
    26d8:	08 95       	ret

000026da <memcpy>:
    26da:	fb 01       	movw	r30, r22
    26dc:	dc 01       	movw	r26, r24
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <memcpy+0xa>
    26e0:	01 90       	ld	r0, Z+
    26e2:	0d 92       	st	X+, r0
    26e4:	41 50       	subi	r20, 0x01	; 1
    26e6:	50 40       	sbci	r21, 0x00	; 0
    26e8:	d8 f7       	brcc	.-10     	; 0x26e0 <memcpy+0x6>
    26ea:	08 95       	ret

000026ec <fgetc>:
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	ec 01       	movw	r28, r24
    26f2:	2b 81       	ldd	r18, Y+3	; 0x03
    26f4:	20 ff       	sbrs	r18, 0
    26f6:	33 c0       	rjmp	.+102    	; 0x275e <fgetc+0x72>
    26f8:	26 ff       	sbrs	r18, 6
    26fa:	0a c0       	rjmp	.+20     	; 0x2710 <fgetc+0x24>
    26fc:	2f 7b       	andi	r18, 0xBF	; 191
    26fe:	2b 83       	std	Y+3, r18	; 0x03
    2700:	8e 81       	ldd	r24, Y+6	; 0x06
    2702:	9f 81       	ldd	r25, Y+7	; 0x07
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	8e 83       	std	Y+6, r24	; 0x06
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	29 c0       	rjmp	.+82     	; 0x2762 <fgetc+0x76>
    2710:	22 ff       	sbrs	r18, 2
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <fgetc+0x46>
    2714:	e8 81       	ld	r30, Y
    2716:	f9 81       	ldd	r31, Y+1	; 0x01
    2718:	80 81       	ld	r24, Z
    271a:	08 2e       	mov	r0, r24
    271c:	00 0c       	add	r0, r0
    271e:	99 0b       	sbc	r25, r25
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	19 f4       	brne	.+6      	; 0x272a <fgetc+0x3e>
    2724:	20 62       	ori	r18, 0x20	; 32
    2726:	2b 83       	std	Y+3, r18	; 0x03
    2728:	1a c0       	rjmp	.+52     	; 0x275e <fgetc+0x72>
    272a:	31 96       	adiw	r30, 0x01	; 1
    272c:	f9 83       	std	Y+1, r31	; 0x01
    272e:	e8 83       	st	Y, r30
    2730:	0e c0       	rjmp	.+28     	; 0x274e <fgetc+0x62>
    2732:	ea 85       	ldd	r30, Y+10	; 0x0a
    2734:	fb 85       	ldd	r31, Y+11	; 0x0b
    2736:	09 95       	icall
    2738:	97 ff       	sbrs	r25, 7
    273a:	09 c0       	rjmp	.+18     	; 0x274e <fgetc+0x62>
    273c:	2b 81       	ldd	r18, Y+3	; 0x03
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	11 f0       	breq	.+4      	; 0x2746 <fgetc+0x5a>
    2742:	80 e2       	ldi	r24, 0x20	; 32
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <fgetc+0x5c>
    2746:	80 e1       	ldi	r24, 0x10	; 16
    2748:	82 2b       	or	r24, r18
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	08 c0       	rjmp	.+16     	; 0x275e <fgetc+0x72>
    274e:	2e 81       	ldd	r18, Y+6	; 0x06
    2750:	3f 81       	ldd	r19, Y+7	; 0x07
    2752:	2f 5f       	subi	r18, 0xFF	; 255
    2754:	3f 4f       	sbci	r19, 0xFF	; 255
    2756:	3f 83       	std	Y+7, r19	; 0x07
    2758:	2e 83       	std	Y+6, r18	; 0x06
    275a:	99 27       	eor	r25, r25
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <fgetc+0x76>
    275e:	8f ef       	ldi	r24, 0xFF	; 255
    2760:	9f ef       	ldi	r25, 0xFF	; 255
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <fputc>:
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	fb 01       	movw	r30, r22
    2772:	23 81       	ldd	r18, Z+3	; 0x03
    2774:	21 fd       	sbrc	r18, 1
    2776:	03 c0       	rjmp	.+6      	; 0x277e <fputc+0x16>
    2778:	8f ef       	ldi	r24, 0xFF	; 255
    277a:	9f ef       	ldi	r25, 0xFF	; 255
    277c:	2c c0       	rjmp	.+88     	; 0x27d6 <fputc+0x6e>
    277e:	22 ff       	sbrs	r18, 2
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <fputc+0x46>
    2782:	46 81       	ldd	r20, Z+6	; 0x06
    2784:	57 81       	ldd	r21, Z+7	; 0x07
    2786:	24 81       	ldd	r18, Z+4	; 0x04
    2788:	35 81       	ldd	r19, Z+5	; 0x05
    278a:	42 17       	cp	r20, r18
    278c:	53 07       	cpc	r21, r19
    278e:	44 f4       	brge	.+16     	; 0x27a0 <fputc+0x38>
    2790:	a0 81       	ld	r26, Z
    2792:	b1 81       	ldd	r27, Z+1	; 0x01
    2794:	9d 01       	movw	r18, r26
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	31 83       	std	Z+1, r19	; 0x01
    279c:	20 83       	st	Z, r18
    279e:	8c 93       	st	X, r24
    27a0:	26 81       	ldd	r18, Z+6	; 0x06
    27a2:	37 81       	ldd	r19, Z+7	; 0x07
    27a4:	2f 5f       	subi	r18, 0xFF	; 255
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	37 83       	std	Z+7, r19	; 0x07
    27aa:	26 83       	std	Z+6, r18	; 0x06
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <fputc+0x6e>
    27ae:	8b 01       	movw	r16, r22
    27b0:	ec 01       	movw	r28, r24
    27b2:	fb 01       	movw	r30, r22
    27b4:	00 84       	ldd	r0, Z+8	; 0x08
    27b6:	f1 85       	ldd	r31, Z+9	; 0x09
    27b8:	e0 2d       	mov	r30, r0
    27ba:	09 95       	icall
    27bc:	89 2b       	or	r24, r25
    27be:	e1 f6       	brne	.-72     	; 0x2778 <fputc+0x10>
    27c0:	d8 01       	movw	r26, r16
    27c2:	16 96       	adiw	r26, 0x06	; 6
    27c4:	8d 91       	ld	r24, X+
    27c6:	9c 91       	ld	r25, X
    27c8:	17 97       	sbiw	r26, 0x07	; 7
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	17 96       	adiw	r26, 0x07	; 7
    27ce:	9c 93       	st	X, r25
    27d0:	8e 93       	st	-X, r24
    27d2:	16 97       	sbiw	r26, 0x06	; 6
    27d4:	ce 01       	movw	r24, r28
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <ungetc>:
    27e0:	fb 01       	movw	r30, r22
    27e2:	23 81       	ldd	r18, Z+3	; 0x03
    27e4:	20 ff       	sbrs	r18, 0
    27e6:	12 c0       	rjmp	.+36     	; 0x280c <ungetc+0x2c>
    27e8:	26 fd       	sbrc	r18, 6
    27ea:	10 c0       	rjmp	.+32     	; 0x280c <ungetc+0x2c>
    27ec:	8f 3f       	cpi	r24, 0xFF	; 255
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	93 07       	cpc	r25, r19
    27f2:	61 f0       	breq	.+24     	; 0x280c <ungetc+0x2c>
    27f4:	82 83       	std	Z+2, r24	; 0x02
    27f6:	2f 7d       	andi	r18, 0xDF	; 223
    27f8:	20 64       	ori	r18, 0x40	; 64
    27fa:	23 83       	std	Z+3, r18	; 0x03
    27fc:	26 81       	ldd	r18, Z+6	; 0x06
    27fe:	37 81       	ldd	r19, Z+7	; 0x07
    2800:	21 50       	subi	r18, 0x01	; 1
    2802:	31 09       	sbc	r19, r1
    2804:	37 83       	std	Z+7, r19	; 0x07
    2806:	26 83       	std	Z+6, r18	; 0x06
    2808:	99 27       	eor	r25, r25
    280a:	08 95       	ret
    280c:	8f ef       	ldi	r24, 0xFF	; 255
    280e:	9f ef       	ldi	r25, 0xFF	; 255
    2810:	08 95       	ret

00002812 <__ultoa_invert>:
    2812:	fa 01       	movw	r30, r20
    2814:	aa 27       	eor	r26, r26
    2816:	28 30       	cpi	r18, 0x08	; 8
    2818:	51 f1       	breq	.+84     	; 0x286e <__ultoa_invert+0x5c>
    281a:	20 31       	cpi	r18, 0x10	; 16
    281c:	81 f1       	breq	.+96     	; 0x287e <__ultoa_invert+0x6c>
    281e:	e8 94       	clt
    2820:	6f 93       	push	r22
    2822:	6e 7f       	andi	r22, 0xFE	; 254
    2824:	6e 5f       	subi	r22, 0xFE	; 254
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	af 4f       	sbci	r26, 0xFF	; 255
    282e:	b1 e0       	ldi	r27, 0x01	; 1
    2830:	3e d0       	rcall	.+124    	; 0x28ae <__ultoa_invert+0x9c>
    2832:	b4 e0       	ldi	r27, 0x04	; 4
    2834:	3c d0       	rcall	.+120    	; 0x28ae <__ultoa_invert+0x9c>
    2836:	67 0f       	add	r22, r23
    2838:	78 1f       	adc	r23, r24
    283a:	89 1f       	adc	r24, r25
    283c:	9a 1f       	adc	r25, r26
    283e:	a1 1d       	adc	r26, r1
    2840:	68 0f       	add	r22, r24
    2842:	79 1f       	adc	r23, r25
    2844:	8a 1f       	adc	r24, r26
    2846:	91 1d       	adc	r25, r1
    2848:	a1 1d       	adc	r26, r1
    284a:	6a 0f       	add	r22, r26
    284c:	71 1d       	adc	r23, r1
    284e:	81 1d       	adc	r24, r1
    2850:	91 1d       	adc	r25, r1
    2852:	a1 1d       	adc	r26, r1
    2854:	20 d0       	rcall	.+64     	; 0x2896 <__ultoa_invert+0x84>
    2856:	09 f4       	brne	.+2      	; 0x285a <__ultoa_invert+0x48>
    2858:	68 94       	set
    285a:	3f 91       	pop	r19
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	26 9f       	mul	r18, r22
    2860:	11 24       	eor	r1, r1
    2862:	30 19       	sub	r19, r0
    2864:	30 5d       	subi	r19, 0xD0	; 208
    2866:	31 93       	st	Z+, r19
    2868:	de f6       	brtc	.-74     	; 0x2820 <__ultoa_invert+0xe>
    286a:	cf 01       	movw	r24, r30
    286c:	08 95       	ret
    286e:	46 2f       	mov	r20, r22
    2870:	47 70       	andi	r20, 0x07	; 7
    2872:	40 5d       	subi	r20, 0xD0	; 208
    2874:	41 93       	st	Z+, r20
    2876:	b3 e0       	ldi	r27, 0x03	; 3
    2878:	0f d0       	rcall	.+30     	; 0x2898 <__ultoa_invert+0x86>
    287a:	c9 f7       	brne	.-14     	; 0x286e <__ultoa_invert+0x5c>
    287c:	f6 cf       	rjmp	.-20     	; 0x286a <__ultoa_invert+0x58>
    287e:	46 2f       	mov	r20, r22
    2880:	4f 70       	andi	r20, 0x0F	; 15
    2882:	40 5d       	subi	r20, 0xD0	; 208
    2884:	4a 33       	cpi	r20, 0x3A	; 58
    2886:	18 f0       	brcs	.+6      	; 0x288e <__ultoa_invert+0x7c>
    2888:	49 5d       	subi	r20, 0xD9	; 217
    288a:	31 fd       	sbrc	r19, 1
    288c:	40 52       	subi	r20, 0x20	; 32
    288e:	41 93       	st	Z+, r20
    2890:	02 d0       	rcall	.+4      	; 0x2896 <__ultoa_invert+0x84>
    2892:	a9 f7       	brne	.-22     	; 0x287e <__ultoa_invert+0x6c>
    2894:	ea cf       	rjmp	.-44     	; 0x286a <__ultoa_invert+0x58>
    2896:	b4 e0       	ldi	r27, 0x04	; 4
    2898:	a6 95       	lsr	r26
    289a:	97 95       	ror	r25
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	ba 95       	dec	r27
    28a4:	c9 f7       	brne	.-14     	; 0x2898 <__ultoa_invert+0x86>
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	61 05       	cpc	r22, r1
    28aa:	71 05       	cpc	r23, r1
    28ac:	08 95       	ret
    28ae:	9b 01       	movw	r18, r22
    28b0:	ac 01       	movw	r20, r24
    28b2:	0a 2e       	mov	r0, r26
    28b4:	06 94       	lsr	r0
    28b6:	57 95       	ror	r21
    28b8:	47 95       	ror	r20
    28ba:	37 95       	ror	r19
    28bc:	27 95       	ror	r18
    28be:	ba 95       	dec	r27
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0xa2>
    28c2:	62 0f       	add	r22, r18
    28c4:	73 1f       	adc	r23, r19
    28c6:	84 1f       	adc	r24, r20
    28c8:	95 1f       	adc	r25, r21
    28ca:	a0 1d       	adc	r26, r0
    28cc:	08 95       	ret

000028ce <__ctype_isfalse>:
    28ce:	99 27       	eor	r25, r25
    28d0:	88 27       	eor	r24, r24

000028d2 <__ctype_istrue>:
    28d2:	08 95       	ret

000028d4 <_exit>:
    28d4:	f8 94       	cli

000028d6 <__stop_program>:
    28d6:	ff cf       	rjmp	.-2      	; 0x28d6 <__stop_program>
