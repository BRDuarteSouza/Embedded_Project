
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022c  00800100  000029cc  00002a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019d  0080032c  0080032c  00002c8c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014053  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004554  00000000  00000000  000174b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a35  00000000  00000000  0001ba07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000170c  00000000  00000000  0002143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fa7  00000000  00000000  00022b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000778a  00000000  00000000  00024aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002c279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c7       	rjmp	.+4092   	; 0x102a <__vector_11>
      2e:	00 00       	nop
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c7       	rjmp	.+3974   	; 0xfc0 <__vector_14>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_18>
      4c:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_19>
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 0b       	sbc	r24, r21
      6a:	df 09       	sbc	r29, r15
      6c:	df 09       	sbc	r29, r15
      6e:	df 09       	sbc	r29, r15
      70:	df 09       	sbc	r29, r15
      72:	85 0b       	sbc	r24, r21
      74:	df 09       	sbc	r29, r15
      76:	df 09       	sbc	r29, r15
      78:	df 09       	sbc	r29, r15
      7a:	df 09       	sbc	r29, r15
      7c:	df 09       	sbc	r29, r15
      7e:	43 0b       	sbc	r20, r19
      80:	df 09       	sbc	r29, r15
      82:	df 09       	sbc	r29, r15
      84:	df 09       	sbc	r29, r15
      86:	df 09       	sbc	r29, r15
      88:	df 09       	sbc	r29, r15
      8a:	dd 0a       	sbc	r13, r29
      8c:	df 09       	sbc	r29, r15
      8e:	df 09       	sbc	r29, r15
      90:	80 0b       	sbc	r24, r16
      92:	df 09       	sbc	r29, r15
      94:	df 09       	sbc	r29, r15
      96:	df 09       	sbc	r29, r15
      98:	df 09       	sbc	r29, r15
      9a:	df 09       	sbc	r29, r15
      9c:	df 09       	sbc	r29, r15
      9e:	df 09       	sbc	r29, r15
      a0:	df 09       	sbc	r29, r15
      a2:	df 09       	sbc	r29, r15
      a4:	df 09       	sbc	r29, r15
      a6:	ca 0a       	sbc	r12, r26
      a8:	85 0b       	sbc	r24, r21
      aa:	df 09       	sbc	r29, r15
      ac:	df 09       	sbc	r29, r15
      ae:	df 09       	sbc	r29, r15
      b0:	df 09       	sbc	r29, r15
      b2:	85 0b       	sbc	r24, r21
      b4:	df 09       	sbc	r29, r15
      b6:	df 09       	sbc	r29, r15
      b8:	df 09       	sbc	r29, r15
      ba:	df 09       	sbc	r29, r15
      bc:	df 09       	sbc	r29, r15
      be:	43 0b       	sbc	r20, r19
      c0:	df 09       	sbc	r29, r15
      c2:	df 09       	sbc	r29, r15
      c4:	df 09       	sbc	r29, r15
      c6:	94 0a       	sbc	r9, r20
      c8:	df 09       	sbc	r29, r15
      ca:	dd 0a       	sbc	r13, r29
      cc:	df 09       	sbc	r29, r15
      ce:	df 09       	sbc	r29, r15
      d0:	80 0b       	sbc	r24, r16
      d2:	e1 0b       	sbc	r30, r17
      d4:	5f 0a       	sbc	r5, r31
      d6:	5f 0a       	sbc	r5, r31
      d8:	5f 0a       	sbc	r5, r31
      da:	5f 0a       	sbc	r5, r31
      dc:	e1 0b       	sbc	r30, r17
      de:	5f 0a       	sbc	r5, r31
      e0:	5f 0a       	sbc	r5, r31
      e2:	5f 0a       	sbc	r5, r31
      e4:	5f 0a       	sbc	r5, r31
      e6:	5f 0a       	sbc	r5, r31
      e8:	42 0b       	sbc	r20, r18
      ea:	5f 0a       	sbc	r5, r31
      ec:	5f 0a       	sbc	r5, r31
      ee:	5f 0a       	sbc	r5, r31
      f0:	5f 0a       	sbc	r5, r31
      f2:	5f 0a       	sbc	r5, r31
      f4:	dc 0a       	sbc	r13, r28
      f6:	5f 0a       	sbc	r5, r31
      f8:	5f 0a       	sbc	r5, r31
      fa:	fd 0b       	sbc	r31, r29
      fc:	5f 0a       	sbc	r5, r31
      fe:	5f 0a       	sbc	r5, r31
     100:	5f 0a       	sbc	r5, r31
     102:	5f 0a       	sbc	r5, r31
     104:	5f 0a       	sbc	r5, r31
     106:	5f 0a       	sbc	r5, r31
     108:	5f 0a       	sbc	r5, r31
     10a:	5f 0a       	sbc	r5, r31
     10c:	5f 0a       	sbc	r5, r31
     10e:	5f 0a       	sbc	r5, r31
     110:	ca 0a       	sbc	r12, r26
     112:	e1 0b       	sbc	r30, r17
     114:	5f 0a       	sbc	r5, r31
     116:	5f 0a       	sbc	r5, r31
     118:	5f 0a       	sbc	r5, r31
     11a:	5f 0a       	sbc	r5, r31
     11c:	e1 0b       	sbc	r30, r17
     11e:	5f 0a       	sbc	r5, r31
     120:	5f 0a       	sbc	r5, r31
     122:	5f 0a       	sbc	r5, r31
     124:	5f 0a       	sbc	r5, r31
     126:	5f 0a       	sbc	r5, r31
     128:	42 0b       	sbc	r20, r18
     12a:	5f 0a       	sbc	r5, r31
     12c:	5f 0a       	sbc	r5, r31
     12e:	5f 0a       	sbc	r5, r31
     130:	94 0a       	sbc	r9, r20
     132:	5f 0a       	sbc	r5, r31
     134:	dc 0a       	sbc	r13, r28
     136:	5f 0a       	sbc	r5, r31
     138:	5f 0a       	sbc	r5, r31
     13a:	fd 0b       	sbc	r31, r29

0000013c <__trampolines_end>:
     13c:	45 46       	sbci	r20, 0x65	; 101
     13e:	47 65       	ori	r20, 0x57	; 87
     140:	66 67       	ori	r22, 0x76	; 118
	...

00000143 <__c.2314>:
     143:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000153 <__c.2449>:
     153:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	13 e0       	ldi	r17, 0x03	; 3
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	ec ec       	ldi	r30, 0xCC	; 204
     172:	f9 e2       	ldi	r31, 0x29	; 41
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ac 32       	cpi	r26, 0x2C	; 44
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	24 e0       	ldi	r18, 0x04	; 4
     182:	ac e2       	ldi	r26, 0x2C	; 44
     184:	b3 e0       	ldi	r27, 0x03	; 3
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a9 3c       	cpi	r26, 0xC9	; 201
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 43 10 	call	0x2086	; 0x2086 <main>
     194:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     19a:	ff cf       	rjmp	.-2      	; 0x19a <_idle_thread>

0000019c <chSysInit>:
     19c:	22 d1       	rcall	.+580    	; 0x3e2 <_scheduler_init>
     19e:	5c d0       	rcall	.+184    	; 0x258 <_vt_init>
     1a0:	7a d3       	rcall	.+1780   	; 0x896 <_core_init>
     1a2:	b1 d3       	rcall	.+1890   	; 0x906 <_heap_init>
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	60 e1       	ldi	r22, 0x10	; 16
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	8b e3       	ldi	r24, 0x3B	; 59
     1ac:	94 e0       	ldi	r25, 0x04	; 4
     1ae:	30 d2       	rcall	.+1120   	; 0x610 <_thread_init>
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <ch+0xc>
     1b6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <ch+0xb>
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	95 87       	std	Z+13, r25	; 0x0d
     1be:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <__avr_in_isr>
     1c2:	78 94       	sei
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	a6 c2       	rjmp	.+1356   	; 0x716 <chThdCreate>

000001ca <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
     1d2:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
     1d6:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <ch+0x14>
     1e0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <ch+0x13>
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     1e4:	a0 91 31 04 	lds	r26, 0x0431	; 0x800431 <ch+0xd>
     1e8:	b0 91 32 04 	lds	r27, 0x0432	; 0x800432 <ch+0xe>
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	a1 33       	cpi	r26, 0x31	; 49
     1f0:	b8 07       	cpc	r27, r24
     1f2:	69 f1       	breq	.+90     	; 0x24e <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     1f4:	14 96       	adiw	r26, 0x04	; 4
     1f6:	8d 91       	ld	r24, X+
     1f8:	9c 91       	ld	r25, X
     1fa:	15 97       	sbiw	r26, 0x05	; 5
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	15 96       	adiw	r26, 0x05	; 5
     200:	9c 93       	st	X, r25
     202:	8e 93       	st	-X, r24
     204:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     206:	89 2b       	or	r24, r25
     208:	11 f5       	brne	.+68     	; 0x24e <chSysTimerHandlerI+0x84>
     20a:	01 e3       	ldi	r16, 0x31	; 49
     20c:	14 e0       	ldi	r17, 0x04	; 4
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     20e:	16 96       	adiw	r26, 0x06	; 6
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     216:	17 96       	adiw	r26, 0x07	; 7
     218:	1c 92       	st	X, r1
     21a:	1e 92       	st	-X, r1
     21c:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     21e:	cd 91       	ld	r28, X+
     220:	dc 91       	ld	r29, X
     222:	11 97       	sbiw	r26, 0x01	; 1
     224:	1b 83       	std	Y+3, r17	; 0x03
     226:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     228:	d0 93 32 04 	sts	0x0432, r29	; 0x800432 <ch+0xe>
     22c:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <ch+0xd>
      chSysUnlockFromISR();
      fn(vtp->par);
     230:	18 96       	adiw	r26, 0x08	; 8
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	19 97       	sbiw	r26, 0x09	; 9
     238:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     23a:	a0 91 31 04 	lds	r26, 0x0431	; 0x800431 <ch+0xd>
     23e:	b0 91 32 04 	lds	r27, 0x0432	; 0x800432 <ch+0xe>
     242:	14 96       	adiw	r26, 0x04	; 4
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	15 97       	sbiw	r26, 0x05	; 5
     24a:	89 2b       	or	r24, r25
     24c:	01 f3       	breq	.-64     	; 0x20e <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     258:	e4 e2       	ldi	r30, 0x24	; 36
     25a:	f4 e0       	ldi	r31, 0x04	; 4
     25c:	81 e3       	ldi	r24, 0x31	; 49
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	96 87       	std	Z+14, r25	; 0x0e
     262:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     264:	90 8b       	std	Z+16, r25	; 0x10
     266:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	9f ef       	ldi	r25, 0xFF	; 255
     26c:	92 8b       	std	Z+18, r25	; 0x12
     26e:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     270:	14 8a       	std	Z+20, r1	; 0x14
     272:	13 8a       	std	Z+19, r1	; 0x13
     274:	08 95       	ret

00000276 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     27c:	19 96       	adiw	r26, 0x09	; 9
     27e:	3c 93       	st	X, r19
     280:	2e 93       	st	-X, r18
     282:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     284:	17 96       	adiw	r26, 0x07	; 7
     286:	5c 93       	st	X, r21
     288:	4e 93       	st	-X, r20
     28a:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     28c:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <ch+0xd>
     290:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <ch+0xe>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     294:	24 81       	ldd	r18, Z+4	; 0x04
     296:	35 81       	ldd	r19, Z+5	; 0x05
     298:	26 17       	cp	r18, r22
     29a:	37 07       	cpc	r19, r23
     29c:	50 f4       	brcc	.+20     	; 0x2b2 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     29e:	62 1b       	sub	r22, r18
     2a0:	73 0b       	sbc	r23, r19
    p = p->next;
     2a2:	01 90       	ld	r0, Z+
     2a4:	f0 81       	ld	r31, Z
     2a6:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     2a8:	24 81       	ldd	r18, Z+4	; 0x04
     2aa:	35 81       	ldd	r19, Z+5	; 0x05
     2ac:	26 17       	cp	r18, r22
     2ae:	37 07       	cpc	r19, r23
     2b0:	b0 f3       	brcs	.-20     	; 0x29e <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	fc 93       	st	X, r31
     2b6:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     2b8:	c2 81       	ldd	r28, Z+2	; 0x02
     2ba:	d3 81       	ldd	r29, Z+3	; 0x03
     2bc:	13 96       	adiw	r26, 0x03	; 3
     2be:	dc 93       	st	X, r29
     2c0:	ce 93       	st	-X, r28
     2c2:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     2c4:	b9 83       	std	Y+1, r27	; 0x01
     2c6:	a8 83       	st	Y, r26
  p->prev = vtp;
     2c8:	b3 83       	std	Z+3, r27	; 0x03
     2ca:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     2cc:	15 96       	adiw	r26, 0x05	; 5
     2ce:	7c 93       	st	X, r23
     2d0:	6e 93       	st	-X, r22
     2d2:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	95 81       	ldd	r25, Z+5	; 0x05
     2d8:	86 1b       	sub	r24, r22
     2da:	97 0b       	sbc	r25, r23
     2dc:	95 83       	std	Z+5, r25	; 0x05
     2de:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <ch+0x12>
     2e8:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <ch+0x11>
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     2f8:	a0 81       	ld	r26, Z
     2fa:	b1 81       	ldd	r27, Z+1	; 0x01
     2fc:	14 96       	adiw	r26, 0x04	; 4
     2fe:	2d 91       	ld	r18, X+
     300:	3c 91       	ld	r19, X
     302:	15 97       	sbiw	r26, 0x05	; 5
     304:	84 81       	ldd	r24, Z+4	; 0x04
     306:	95 81       	ldd	r25, Z+5	; 0x05
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	15 96       	adiw	r26, 0x05	; 5
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     314:	c2 81       	ldd	r28, Z+2	; 0x02
     316:	d3 81       	ldd	r29, Z+3	; 0x03
     318:	b9 83       	std	Y+1, r27	; 0x01
     31a:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     31c:	a0 81       	ld	r26, Z
     31e:	b1 81       	ldd	r27, Z+1	; 0x01
     320:	13 96       	adiw	r26, 0x03	; 3
     322:	dc 93       	st	X, r29
     324:	ce 93       	st	-X, r28
     326:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     328:	17 82       	std	Z+7, r1	; 0x07
     32a:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	9f ef       	ldi	r25, 0xFF	; 255
     330:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <ch+0x12>
     334:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <ch+0x11>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	dc 01       	movw	r26, r24
     344:	1d 96       	adiw	r26, 0x0d	; 13
     346:	8c 91       	ld	r24, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	99 f1       	breq	.+102    	; 0x3b4 <wakeup+0x76>
     34e:	70 f5       	brcc	.+92     	; 0x3ac <wakeup+0x6e>
     350:	88 23       	and	r24, r24
     352:	49 f1       	breq	.+82     	; 0x3a6 <wakeup+0x68>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	31 f4       	brne	.+12     	; 0x364 <wakeup+0x26>
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	11 82       	std	Z+1, r1	; 0x01
     362:	10 82       	st	Z, r1
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	9f ef       	ldi	r25, 0xFF	; 255
     368:	51 96       	adiw	r26, 0x11	; 17
     36a:	9c 93       	st	X, r25
     36c:	8e 93       	st	-X, r24
     36e:	50 97       	sbiw	r26, 0x10	; 16
     370:	1d 96       	adiw	r26, 0x0d	; 13
     372:	1c 92       	st	X, r1
     374:	1d 97       	sbiw	r26, 0x0d	; 13
     376:	14 96       	adiw	r26, 0x04	; 4
     378:	2c 91       	ld	r18, X
     37a:	14 97       	sbiw	r26, 0x04	; 4
     37c:	e4 e2       	ldi	r30, 0x24	; 36
     37e:	f4 e0       	ldi	r31, 0x04	; 4
     380:	01 90       	ld	r0, Z+
     382:	f0 81       	ld	r31, Z
     384:	e0 2d       	mov	r30, r0
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	92 17       	cp	r25, r18
     38a:	d0 f7       	brcc	.-12     	; 0x380 <wakeup+0x42>
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	fc 93       	st	X, r31
     390:	ee 93       	st	-X, r30
     392:	c2 81       	ldd	r28, Z+2	; 0x02
     394:	d3 81       	ldd	r29, Z+3	; 0x03
     396:	13 96       	adiw	r26, 0x03	; 3
     398:	dc 93       	st	X, r29
     39a:	ce 93       	st	-X, r28
     39c:	12 97       	sbiw	r26, 0x02	; 2
     39e:	b9 83       	std	Y+1, r27	; 0x01
     3a0:	a8 83       	st	Y, r26
     3a2:	b3 83       	std	Z+3, r27	; 0x03
     3a4:	a2 83       	std	Z+2, r26	; 0x02
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <wakeup+0x94>
     3b0:	87 30       	cpi	r24, 0x07	; 7
     3b2:	c1 f6       	brne	.-80     	; 0x364 <wakeup+0x26>
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	8d 91       	ld	r24, X+
     3be:	9c 91       	ld	r25, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	cd 91       	ld	r28, X+
     3c8:	dc 91       	ld	r29, X
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	fb 83       	std	Y+3, r31	; 0x03
     3ce:	ea 83       	std	Y+2, r30	; 0x02
     3d0:	c9 cf       	rjmp	.-110    	; 0x364 <wakeup+0x26>
     3d2:	50 96       	adiw	r26, 0x10	; 16
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	51 97       	sbiw	r26, 0x11	; 17
     3da:	84 81       	ldd	r24, Z+4	; 0x04
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	e9 cf       	rjmp	.-46     	; 0x3b4 <wakeup+0x76>

000003e2 <_scheduler_init>:
     3e2:	e4 e2       	ldi	r30, 0x24	; 36
     3e4:	f4 e0       	ldi	r31, 0x04	; 4
     3e6:	f1 83       	std	Z+1, r31	; 0x01
     3e8:	e0 83       	st	Z, r30
     3ea:	f3 83       	std	Z+3, r31	; 0x03
     3ec:	e2 83       	std	Z+2, r30	; 0x02
     3ee:	14 82       	std	Z+4, r1	; 0x04
     3f0:	f0 87       	std	Z+8, r31	; 0x08
     3f2:	e7 83       	std	Z+7, r30	; 0x07
     3f4:	f2 87       	std	Z+10, r31	; 0x0a
     3f6:	e1 87       	std	Z+9, r30	; 0x09
     3f8:	08 95       	ret

000003fa <chSchReadyI>:
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	dc 01       	movw	r26, r24
     400:	1d 96       	adiw	r26, 0x0d	; 13
     402:	1c 92       	st	X, r1
     404:	1d 97       	sbiw	r26, 0x0d	; 13
     406:	14 96       	adiw	r26, 0x04	; 4
     408:	2c 91       	ld	r18, X
     40a:	14 97       	sbiw	r26, 0x04	; 4
     40c:	e4 e2       	ldi	r30, 0x24	; 36
     40e:	f4 e0       	ldi	r31, 0x04	; 4
     410:	01 90       	ld	r0, Z+
     412:	f0 81       	ld	r31, Z
     414:	e0 2d       	mov	r30, r0
     416:	94 81       	ldd	r25, Z+4	; 0x04
     418:	92 17       	cp	r25, r18
     41a:	d0 f7       	brcc	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     41c:	11 96       	adiw	r26, 0x01	; 1
     41e:	fc 93       	st	X, r31
     420:	ee 93       	st	-X, r30
     422:	c2 81       	ldd	r28, Z+2	; 0x02
     424:	d3 81       	ldd	r29, Z+3	; 0x03
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	dc 93       	st	X, r29
     42a:	ce 93       	st	-X, r28
     42c:	12 97       	sbiw	r26, 0x02	; 2
     42e:	b9 83       	std	Y+1, r27	; 0x01
     430:	a8 83       	st	Y, r26
     432:	b3 83       	std	Z+3, r27	; 0x03
     434:	a2 83       	std	Z+2, r26	; 0x02
     436:	cd 01       	movw	r24, r26
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <chSchGoSleepS>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	e4 e2       	ldi	r30, 0x24	; 36
     444:	f4 e0       	ldi	r31, 0x04	; 4
     446:	63 85       	ldd	r22, Z+11	; 0x0b
     448:	74 85       	ldd	r23, Z+12	; 0x0c
     44a:	db 01       	movw	r26, r22
     44c:	1d 96       	adiw	r26, 0x0d	; 13
     44e:	8c 93       	st	X, r24
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	ec 01       	movw	r28, r24
     456:	a8 81       	ld	r26, Y
     458:	b9 81       	ldd	r27, Y+1	; 0x01
     45a:	b1 83       	std	Z+1, r27	; 0x01
     45c:	a0 83       	st	Z, r26
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	fc 93       	st	X, r31
     462:	ee 93       	st	-X, r30
     464:	12 97       	sbiw	r26, 0x02	; 2
     466:	94 87       	std	Z+12, r25	; 0x0c
     468:	83 87       	std	Z+11, r24	; 0x0b
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	2d 87       	std	Y+13, r18	; 0x0d
     46e:	58 d2       	rcall	.+1200   	; 0x920 <_port_switch>
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <chSchGoSleepTimeoutS>:
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	2a 97       	sbiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	18 2f       	mov	r17, r24
     48e:	6f 3f       	cpi	r22, 0xFF	; 255
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	78 07       	cpc	r23, r24
     494:	11 f1       	breq	.+68     	; 0x4da <chSchGoSleepTimeoutS+0x64>
     496:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <ch+0xb>
     49a:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <ch+0xc>
     49e:	4f e9       	ldi	r20, 0x9F	; 159
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	e7 de       	rcall	.-562    	; 0x276 <chVTDoSetI>
     4a8:	81 2f       	mov	r24, r17
     4aa:	c9 df       	rcall	.-110    	; 0x43e <chSchGoSleepS>
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	89 2b       	or	r24, r25
     4b2:	19 f0       	breq	.+6      	; 0x4ba <chSchGoSleepTimeoutS+0x44>
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	1c df       	rcall	.-456    	; 0x2f2 <chVTDoResetI>
     4ba:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <ch+0xb>
     4be:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <ch+0xc>
     4c2:	80 89       	ldd	r24, Z+16	; 0x10
     4c4:	91 89       	ldd	r25, Z+17	; 0x11
     4c6:	2a 96       	adiw	r28, 0x0a	; 10
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret
     4da:	81 2f       	mov	r24, r17
     4dc:	b0 df       	rcall	.-160    	; 0x43e <chSchGoSleepS>
     4de:	ed cf       	rjmp	.-38     	; 0x4ba <chSchGoSleepTimeoutS+0x44>

000004e0 <chSchWakeupS>:
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	dc 01       	movw	r26, r24
     4e6:	c0 91 2f 04 	lds	r28, 0x042F	; 0x80042f <ch+0xb>
     4ea:	d0 91 30 04 	lds	r29, 0x0430	; 0x800430 <ch+0xc>
     4ee:	51 96       	adiw	r26, 0x11	; 17
     4f0:	7c 93       	st	X, r23
     4f2:	6e 93       	st	-X, r22
     4f4:	50 97       	sbiw	r26, 0x10	; 16
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	2c 91       	ld	r18, X
     4fa:	14 97       	sbiw	r26, 0x04	; 4
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	82 17       	cp	r24, r18
     500:	d8 f0       	brcs	.+54     	; 0x538 <chSchWakeupS+0x58>
     502:	1d 96       	adiw	r26, 0x0d	; 13
     504:	1c 92       	st	X, r1
     506:	1d 97       	sbiw	r26, 0x0d	; 13
     508:	e4 e2       	ldi	r30, 0x24	; 36
     50a:	f4 e0       	ldi	r31, 0x04	; 4
     50c:	01 90       	ld	r0, Z+
     50e:	f0 81       	ld	r31, Z
     510:	e0 2d       	mov	r30, r0
     512:	94 81       	ldd	r25, Z+4	; 0x04
     514:	92 17       	cp	r25, r18
     516:	d0 f7       	brcc	.-12     	; 0x50c <chSchWakeupS+0x2c>
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	fc 93       	st	X, r31
     51c:	ee 93       	st	-X, r30
     51e:	c2 81       	ldd	r28, Z+2	; 0x02
     520:	d3 81       	ldd	r29, Z+3	; 0x03
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	dc 93       	st	X, r29
     526:	ce 93       	st	-X, r28
     528:	12 97       	sbiw	r26, 0x02	; 2
     52a:	b9 83       	std	Y+1, r27	; 0x01
     52c:	a8 83       	st	Y, r26
     52e:	b3 83       	std	Z+3, r27	; 0x03
     530:	a2 83       	std	Z+2, r26	; 0x02
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret
     538:	1d 86       	std	Y+13, r1	; 0x0d
     53a:	e4 e2       	ldi	r30, 0x24	; 36
     53c:	f4 e0       	ldi	r31, 0x04	; 4
     53e:	01 90       	ld	r0, Z+
     540:	f0 81       	ld	r31, Z
     542:	e0 2d       	mov	r30, r0
     544:	94 81       	ldd	r25, Z+4	; 0x04
     546:	98 17       	cp	r25, r24
     548:	d0 f7       	brcc	.-12     	; 0x53e <chSchWakeupS+0x5e>
     54a:	cd 01       	movw	r24, r26
     54c:	f9 83       	std	Y+1, r31	; 0x01
     54e:	e8 83       	st	Y, r30
     550:	a2 81       	ldd	r26, Z+2	; 0x02
     552:	b3 81       	ldd	r27, Z+3	; 0x03
     554:	bb 83       	std	Y+3, r27	; 0x03
     556:	aa 83       	std	Y+2, r26	; 0x02
     558:	cd 93       	st	X+, r28
     55a:	dc 93       	st	X, r29
     55c:	d3 83       	std	Z+3, r29	; 0x03
     55e:	c2 83       	std	Z+2, r28	; 0x02
     560:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <ch+0xc>
     564:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <ch+0xb>
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	fc 01       	movw	r30, r24
     56c:	25 87       	std	Z+13, r18	; 0x0d
     56e:	be 01       	movw	r22, r28
     570:	d7 d1       	rcall	.+942    	; 0x920 <_port_switch>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <chSchIsPreemptionRequired>:
     578:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <ch>
     57c:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <ch+0x1>
     580:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <ch+0xb>
     584:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <ch+0xc>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	2c 91       	ld	r18, X
     58e:	94 81       	ldd	r25, Z+4	; 0x04
     590:	92 17       	cp	r25, r18
     592:	08 f0       	brcs	.+2      	; 0x596 <chSchIsPreemptionRequired+0x1e>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 95       	ret

00000598 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
  thread_t *otp = currp;
     59c:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <ch+0xb>
     5a0:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     5a4:	40 91 24 04 	lds	r20, 0x0424	; 0x800424 <ch>
     5a8:	50 91 25 04 	lds	r21, 0x0425	; 0x800425 <ch+0x1>

  tqp->next             = tp->queue.next;
     5ac:	ea 01       	movw	r28, r20
     5ae:	e8 81       	ld	r30, Y
     5b0:	f9 81       	ldd	r31, Y+1	; 0x01
     5b2:	f0 93 25 04 	sts	0x0425, r31	; 0x800425 <ch+0x1>
     5b6:	e0 93 24 04 	sts	0x0424, r30	; 0x800424 <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     5ba:	84 e2       	ldi	r24, 0x24	; 36
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	93 83       	std	Z+3, r25	; 0x03
     5c0:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     5c2:	50 93 30 04 	sts	0x0430, r21	; 0x800430 <ch+0xc>
     5c6:	40 93 2f 04 	sts	0x042F, r20	; 0x80042f <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     5ce:	1d 96       	adiw	r26, 0x0d	; 13
     5d0:	1c 92       	st	X, r1
     5d2:	1d 97       	sbiw	r26, 0x0d	; 13
     5d4:	14 96       	adiw	r26, 0x04	; 4
     5d6:	2c 91       	ld	r18, X
     5d8:	14 97       	sbiw	r26, 0x04	; 4
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <chSchDoReschedule+0x4a>
     5dc:	01 90       	ld	r0, Z+
     5de:	f0 81       	ld	r31, Z
     5e0:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     5e2:	94 81       	ldd	r25, Z+4	; 0x04
     5e4:	29 17       	cp	r18, r25
     5e6:	d0 f3       	brcs	.-12     	; 0x5dc <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	fc 93       	st	X, r31
     5ec:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	9c 93       	st	X, r25
     5f6:	8e 93       	st	-X, r24
     5f8:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     5fa:	ec 01       	movw	r28, r24
     5fc:	b9 83       	std	Y+1, r27	; 0x01
     5fe:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     600:	b3 83       	std	Z+3, r27	; 0x03
     602:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     604:	bd 01       	movw	r22, r26
     606:	ca 01       	movw	r24, r20
     608:	8b d1       	rcall	.+790    	; 0x920 <_port_switch>
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	fc 01       	movw	r30, r24
     616:	44 83       	std	Z+4, r20	; 0x04
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	85 87       	std	Z+13, r24	; 0x0d
     61c:	16 86       	std	Z+14, r1	; 0x0e
     61e:	43 8f       	std	Z+27, r20	; 0x1b
     620:	12 8e       	std	Z+26, r1	; 0x1a
     622:	11 8e       	std	Z+25, r1	; 0x19
     624:	10 8e       	std	Z+24, r1	; 0x18
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	87 87       	std	Z+15, r24	; 0x0f
     62a:	74 87       	std	Z+12, r23	; 0x0c
     62c:	63 87       	std	Z+11, r22	; 0x0b
     62e:	a4 e2       	ldi	r26, 0x24	; 36
     630:	b4 e0       	ldi	r27, 0x04	; 4
     632:	b0 87       	std	Z+8, r27	; 0x08
     634:	a7 83       	std	Z+7, r26	; 0x07
     636:	19 96       	adiw	r26, 0x09	; 9
     638:	cd 91       	ld	r28, X+
     63a:	dc 91       	ld	r29, X
     63c:	1a 97       	sbiw	r26, 0x0a	; 10
     63e:	d2 87       	std	Z+10, r29	; 0x0a
     640:	c1 87       	std	Z+9, r28	; 0x09
     642:	f8 87       	std	Y+8, r31	; 0x08
     644:	ef 83       	std	Y+7, r30	; 0x07
     646:	1a 96       	adiw	r26, 0x0a	; 10
     648:	fc 93       	st	X, r31
     64a:	ee 93       	st	-X, r30
     64c:	19 97       	sbiw	r26, 0x09	; 9
     64e:	cf 01       	movw	r24, r30
     650:	42 96       	adiw	r24, 0x12	; 18
     652:	93 8b       	std	Z+19, r25	; 0x13
     654:	82 8b       	std	Z+18, r24	; 0x12
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	95 8b       	std	Z+21, r25	; 0x15
     65a:	84 8b       	std	Z+20, r24	; 0x14
     65c:	97 8b       	std	Z+23, r25	; 0x17
     65e:	86 8b       	std	Z+22, r24	; 0x16
     660:	cf 01       	movw	r24, r30
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <chThdCreateSuspendedI>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	4c 81       	ldd	r20, Y+4	; 0x04
     670:	5d 81       	ldd	r21, Y+5	; 0x05
     672:	fa 01       	movw	r30, r20
     674:	7c 97       	sbiw	r30, 0x1c	; 28
     676:	ca 01       	movw	r24, r20
     678:	c1 97       	sbiw	r24, 0x31	; 49
     67a:	96 83       	std	Z+6, r25	; 0x06
     67c:	85 83       	std	Z+5, r24	; 0x05
     67e:	2f 81       	ldd	r18, Y+7	; 0x07
     680:	dc 01       	movw	r26, r24
     682:	52 96       	adiw	r26, 0x12	; 18
     684:	2c 93       	st	X, r18
     686:	52 97       	sbiw	r26, 0x12	; 18
     688:	28 85       	ldd	r18, Y+8	; 0x08
     68a:	51 96       	adiw	r26, 0x11	; 17
     68c:	2c 93       	st	X, r18
     68e:	51 97       	sbiw	r26, 0x11	; 17
     690:	29 85       	ldd	r18, Y+9	; 0x09
     692:	50 96       	adiw	r26, 0x10	; 16
     694:	2c 93       	st	X, r18
     696:	50 97       	sbiw	r26, 0x10	; 16
     698:	2a 85       	ldd	r18, Y+10	; 0x0a
     69a:	1f 96       	adiw	r26, 0x0f	; 15
     69c:	2c 93       	st	X, r18
     69e:	1f 97       	sbiw	r26, 0x0f	; 15
     6a0:	2f eb       	ldi	r18, 0xBF	; 191
     6a2:	34 e0       	ldi	r19, 0x04	; 4
     6a4:	53 96       	adiw	r26, 0x13	; 19
     6a6:	3c 93       	st	X, r19
     6a8:	53 97       	sbiw	r26, 0x13	; 19
     6aa:	54 96       	adiw	r26, 0x14	; 20
     6ac:	2c 93       	st	X, r18
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	28 81       	ld	r18, Y
     6b2:	39 81       	ldd	r19, Y+1	; 0x01
     6b4:	84 83       	std	Z+4, r24	; 0x04
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	95 87       	std	Z+13, r25	; 0x0d
     6ba:	16 86       	std	Z+14, r1	; 0x0e
     6bc:	83 8f       	std	Z+27, r24	; 0x1b
     6be:	12 8e       	std	Z+26, r1	; 0x1a
     6c0:	11 8e       	std	Z+25, r1	; 0x19
     6c2:	10 8e       	std	Z+24, r1	; 0x18
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	87 87       	std	Z+15, r24	; 0x0f
     6c8:	34 87       	std	Z+12, r19	; 0x0c
     6ca:	23 87       	std	Z+11, r18	; 0x0b
     6cc:	c4 e2       	ldi	r28, 0x24	; 36
     6ce:	d4 e0       	ldi	r29, 0x04	; 4
     6d0:	d0 87       	std	Z+8, r29	; 0x08
     6d2:	c7 83       	std	Z+7, r28	; 0x07
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	92 87       	std	Z+10, r25	; 0x0a
     6da:	81 87       	std	Z+9, r24	; 0x09
     6dc:	dc 01       	movw	r26, r24
     6de:	18 96       	adiw	r26, 0x08	; 8
     6e0:	fc 93       	st	X, r31
     6e2:	ee 93       	st	-X, r30
     6e4:	17 97       	sbiw	r26, 0x07	; 7
     6e6:	fa 87       	std	Y+10, r31	; 0x0a
     6e8:	e9 87       	std	Y+9, r30	; 0x09
     6ea:	ea 01       	movw	r28, r20
     6ec:	2a 97       	sbiw	r28, 0x0a	; 10
     6ee:	d9 83       	std	Y+1, r29	; 0x01
     6f0:	c8 83       	st	Y, r28
     6f2:	da 01       	movw	r26, r20
     6f4:	18 97       	sbiw	r26, 0x08	; 8
     6f6:	0b 2e       	mov	r0, r27
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	0c 92       	st	X, r0
     6fc:	11 97       	sbiw	r26, 0x01	; 1
     6fe:	ac 93       	st	X, r26
     700:	0a 2e       	mov	r0, r26
     702:	1b 2e       	mov	r1, r27
     704:	13 96       	adiw	r26, 0x03	; 3
     706:	1c 92       	st	X, r1
     708:	0e 92       	st	-X, r0
     70a:	11 24       	eor	r1, r1
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	cf 01       	movw	r24, r30
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <chThdCreate>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	f8 94       	cli
     71c:	a5 df       	rcall	.-182    	; 0x668 <chThdCreateSuspendedI>
     71e:	ec 01       	movw	r28, r24
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	dd de       	rcall	.-582    	; 0x4e0 <chSchWakeupS>
     726:	78 94       	sei
     728:	ce 01       	movw	r24, r28
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <chThdExitS>:
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	c0 91 2f 04 	lds	r28, 0x042F	; 0x80042f <ch+0xb>
     73c:	d0 91 30 04 	lds	r29, 0x0430	; 0x800430 <ch+0xc>
     740:	99 8b       	std	Y+17, r25	; 0x11
     742:	88 8b       	std	Y+16, r24	; 0x10
     744:	8e 01       	movw	r16, r28
     746:	0e 5e       	subi	r16, 0xEE	; 238
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	8a 89       	ldd	r24, Y+18	; 0x12
     74c:	9b 89       	ldd	r25, Y+19	; 0x13
     74e:	08 17       	cp	r16, r24
     750:	19 07       	cpc	r17, r25
     752:	59 f0       	breq	.+22     	; 0x76a <chThdExitS+0x3a>
     754:	fc 01       	movw	r30, r24
     756:	20 81       	ld	r18, Z
     758:	31 81       	ldd	r19, Z+1	; 0x01
     75a:	3b 8b       	std	Y+19, r19	; 0x13
     75c:	2a 8b       	std	Y+18, r18	; 0x12
     75e:	4d de       	rcall	.-870    	; 0x3fa <chSchReadyI>
     760:	8a 89       	ldd	r24, Y+18	; 0x12
     762:	9b 89       	ldd	r25, Y+19	; 0x13
     764:	80 17       	cp	r24, r16
     766:	91 07       	cpc	r25, r17
     768:	a9 f7       	brne	.-22     	; 0x754 <chThdExitS+0x24>
     76a:	8f 85       	ldd	r24, Y+15	; 0x0f
     76c:	81 11       	cpse	r24, r1
     76e:	0c c0       	rjmp	.+24     	; 0x788 <chThdExitS+0x58>
     770:	e9 85       	ldd	r30, Y+9	; 0x09
     772:	fa 85       	ldd	r31, Y+10	; 0x0a
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	90 87       	std	Z+8, r25	; 0x08
     77a:	87 83       	std	Z+7, r24	; 0x07
     77c:	af 81       	ldd	r26, Y+7	; 0x07
     77e:	b8 85       	ldd	r27, Y+8	; 0x08
     780:	1a 96       	adiw	r26, 0x0a	; 10
     782:	fc 93       	st	X, r31
     784:	ee 93       	st	-X, r30
     786:	19 97       	sbiw	r26, 0x09	; 9
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	55 ce       	rjmp	.-854    	; 0x43e <chSchGoSleepS>

00000794 <chThdExit>:
     794:	f8 94       	cli
     796:	cc cf       	rjmp	.-104    	; 0x730 <chThdExitS>

00000798 <chThdSleep>:
     798:	f8 94       	cli
     79a:	bc 01       	movw	r22, r24
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	6b de       	rcall	.-810    	; 0x476 <chSchGoSleepTimeoutS>
     7a0:	78 94       	sei
     7a2:	08 95       	ret

000007a4 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     7ae:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <ch+0xb>
     7b2:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     7ba:	ec 01       	movw	r28, r24
     7bc:	aa 81       	ldd	r26, Y+2	; 0x02
     7be:	bb 81       	ldd	r27, Y+3	; 0x03
     7c0:	b3 83       	std	Z+3, r27	; 0x03
     7c2:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     7c4:	ed 93       	st	X+, r30
     7c6:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     7c8:	fb 83       	std	Y+3, r31	; 0x03
     7ca:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7cc:	84 e0       	ldi	r24, 0x04	; 4
}
     7ce:	df 91       	pop	r29
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7d0:	cf 91       	pop	r28
}
     7d2:	51 ce       	rjmp	.-862    	; 0x476 <chSchGoSleepTimeoutS>
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     7e8:	e8 17       	cp	r30, r24
     7ea:	f9 07       	cpc	r31, r25
     7ec:	71 f0       	breq	.+28     	; 0x80a <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     7ee:	ec 01       	movw	r28, r24
     7f0:	a8 81       	ld	r26, Y
     7f2:	b9 81       	ldd	r27, Y+1	; 0x01
     7f4:	b1 83       	std	Z+1, r27	; 0x01
     7f6:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	fc 93       	st	X, r31
     7fc:	ee 93       	st	-X, r30
     7fe:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     800:	79 8b       	std	Y+17, r23	; 0x11
     802:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     804:	df 91       	pop	r29
  (void) chSchReadyI(tp);
     806:	cf 91       	pop	r28
     808:	f8 cd       	rjmp	.-1040   	; 0x3fa <chSchReadyI>
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     810:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     816:	93 83       	std	Z+3, r25	; 0x03
     818:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     81a:	15 82       	std	Z+5, r1	; 0x05
     81c:	14 82       	std	Z+4, r1	; 0x04
     81e:	08 95       	ret

00000820 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     820:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     822:	90 8d       	ldd	r25, Z+24	; 0x18
     824:	69 2b       	or	r22, r25
     826:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     828:	85 85       	ldd	r24, Z+13	; 0x0d
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	59 f0       	breq	.+22     	; 0x844 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     82e:	8b 30       	cpi	r24, 0x0B	; 11
     830:	09 f0       	breq	.+2      	; 0x834 <chEvtSignalI+0x14>
     832:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     834:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     836:	68 23       	and	r22, r24
     838:	86 13       	cpse	r24, r22
     83a:	fb cf       	rjmp	.-10     	; 0x832 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     83c:	11 8a       	std	Z+17, r1	; 0x11
     83e:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     840:	cf 01       	movw	r24, r30
     842:	db cd       	rjmp	.-1098   	; 0x3fa <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     844:	80 89       	ldd	r24, Z+16	; 0x10
     846:	68 23       	and	r22, r24
     848:	c9 f7       	brne	.-14     	; 0x83c <chEvtSignalI+0x1c>
     84a:	08 95       	ret

0000084c <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	7c 01       	movw	r14, r24
     858:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     85a:	fc 01       	movw	r30, r24
     85c:	c0 81       	ld	r28, Z
     85e:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	91 f0       	breq	.+36     	; 0x88a <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	81 2b       	or	r24, r17
     86a:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     86c:	11 23       	and	r17, r17
     86e:	19 f0       	breq	.+6      	; 0x876 <chEvtBroadcastFlagsI+0x2a>
     870:	9e 81       	ldd	r25, Y+6	; 0x06
     872:	89 23       	and	r24, r25
     874:	21 f0       	breq	.+8      	; 0x87e <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     876:	6c 81       	ldd	r22, Y+4	; 0x04
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	9b 81       	ldd	r25, Y+3	; 0x03
     87c:	d1 df       	rcall	.-94     	; 0x820 <chEvtSignalI>
    }
    elp = elp->next;
     87e:	09 90       	ld	r0, Y+
     880:	d8 81       	ld	r29, Y
     882:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     884:	ec 16       	cp	r14, r28
     886:	fd 06       	cpc	r15, r29
     888:	71 f7       	brne	.-36     	; 0x866 <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     896:	e7 e5       	ldi	r30, 0x57	; 87
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	8c e2       	ldi	r24, 0x2C	; 44
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	91 83       	std	Z+1, r25	; 0x01
     8a0:	80 83       	st	Z, r24
     8a2:	8c ea       	ldi	r24, 0xAC	; 172
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	93 83       	std	Z+3, r25	; 0x03
     8a8:	82 83       	std	Z+2, r24	; 0x02
     8aa:	08 95       	ret

000008ac <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     8ac:	f8 94       	cli
     8ae:	9b 01       	movw	r18, r22
     8b0:	21 50       	subi	r18, 0x01	; 1
     8b2:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     8b4:	71 95       	neg	r23
     8b6:	61 95       	neg	r22
     8b8:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     8ba:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <ch_memcore>
     8be:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <ch_memcore+0x1>
     8c2:	4e 0f       	add	r20, r30
     8c4:	5f 1f       	adc	r21, r31
     8c6:	42 0f       	add	r20, r18
     8c8:	53 1f       	adc	r21, r19
     8ca:	46 23       	and	r20, r22
     8cc:	57 23       	and	r21, r23
  next = p + size;
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	68 23       	and	r22, r24
     8d4:	79 23       	and	r23, r25
     8d6:	ca 01       	movw	r24, r20
     8d8:	86 0f       	add	r24, r22
     8da:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     8dc:	20 91 59 04 	lds	r18, 0x0459	; 0x800459 <ch_memcore+0x2>
     8e0:	30 91 5a 04 	lds	r19, 0x045A	; 0x80045a <ch_memcore+0x3>
     8e4:	28 17       	cp	r18, r24
     8e6:	39 07       	cpc	r19, r25
     8e8:	50 f0       	brcs	.+20     	; 0x8fe <chCoreAllocAlignedWithOffset+0x52>
     8ea:	8e 17       	cp	r24, r30
     8ec:	9f 07       	cpc	r25, r31
     8ee:	38 f0       	brcs	.+14     	; 0x8fe <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     8f0:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <ch_memcore+0x1>
     8f4:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <ch_memcore>

  return p;
     8f8:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     8fa:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     8fc:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     904:	08 95       	ret

00000906 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     906:	ec ea       	ldi	r30, 0xAC	; 172
     908:	f3 e0       	ldi	r31, 0x03	; 3
     90a:	86 e5       	ldi	r24, 0x56	; 86
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     912:	13 82       	std	Z+3, r1	; 0x03
     914:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     916:	15 82       	std	Z+5, r1	; 0x05
     918:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     91a:	82 eb       	ldi	r24, 0xB2	; 178
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	78 cf       	rjmp	.-272    	; 0x810 <chMtxObjectInit>

00000920 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     920:	2f 92       	push	r2
  asm volatile ("push    r3");
     922:	3f 92       	push	r3
  asm volatile ("push    r4");
     924:	4f 92       	push	r4
  asm volatile ("push    r5");
     926:	5f 92       	push	r5
  asm volatile ("push    r6");
     928:	6f 92       	push	r6
  asm volatile ("push    r7");
     92a:	7f 92       	push	r7
  asm volatile ("push    r8");
     92c:	8f 92       	push	r8
  asm volatile ("push    r9");
     92e:	9f 92       	push	r9
  asm volatile ("push    r10");
     930:	af 92       	push	r10
  asm volatile ("push    r11");
     932:	bf 92       	push	r11
  asm volatile ("push    r12");
     934:	cf 92       	push	r12
  asm volatile ("push    r13");
     936:	df 92       	push	r13
  asm volatile ("push    r14");
     938:	ef 92       	push	r14
  asm volatile ("push    r15");
     93a:	ff 92       	push	r15
  asm volatile ("push    r16");
     93c:	0f 93       	push	r16
  asm volatile ("push    r17");
     93e:	1f 93       	push	r17
  asm volatile ("push    r28");
     940:	cf 93       	push	r28
  asm volatile ("push    r29");
     942:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     944:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     946:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     948:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     94a:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     94c:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     94e:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     950:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     952:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     954:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     956:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     958:	df 91       	pop	r29
  asm volatile ("pop     r28");
     95a:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     95c:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     95e:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     960:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     962:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     964:	df 90       	pop	r13
  asm volatile ("pop     r12");
     966:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     968:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     96a:	af 90       	pop	r10
  asm volatile ("pop     r9");
     96c:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     96e:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     970:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     972:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     974:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     976:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     978:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     97a:	2f 90       	pop	r2
  asm volatile ("ret");
     97c:	08 95       	ret

0000097e <_port_thread_start>:
     97e:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     980:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     982:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     984:	09 95       	icall
     986:	06 cf       	rjmp	.-500    	; 0x794 <chThdExit>

00000988 <halInit>:
     988:	e8 d2       	rcall	.+1488   	; 0xf5a <hal_lld_init>
     98a:	8d e3       	ldi	r24, 0x3D	; 61
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	e6 d2       	rcall	.+1484   	; 0xf5c <_pal_lld_init>
     990:	4d d2       	rcall	.+1178   	; 0xe2c <gptInit>
     992:	6e d2       	rcall	.+1244   	; 0xe70 <sdInit>
     994:	57 d4       	rcall	.+2222   	; 0x1244 <boardInit>
     996:	00 c0       	rjmp	.+0      	; 0x998 <stInit>

00000998 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
     998:	3e c3       	rjmp	.+1660   	; 0x1016 <st_lld_init>

0000099a <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ec 01       	movw	r28, r24
     9b0:	6b 01       	movw	r12, r22
     9b2:	8a 01       	movw	r16, r20
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	84 17       	cp	r24, r20
     9ba:	95 07       	cpc	r25, r21
     9bc:	10 f4       	brcc	.+4      	; 0x9c2 <iq_read+0x28>
     9be:	0c 81       	ldd	r16, Y+4	; 0x04
     9c0:	1d 81       	ldd	r17, Y+5	; 0x05
     9c2:	6c 85       	ldd	r22, Y+12	; 0x0c
     9c4:	7d 85       	ldd	r23, Y+13	; 0x0d
     9c6:	e8 84       	ldd	r14, Y+8	; 0x08
     9c8:	f9 84       	ldd	r15, Y+9	; 0x09
     9ca:	e6 1a       	sub	r14, r22
     9cc:	f7 0a       	sbc	r15, r23
     9ce:	0e 15       	cp	r16, r14
     9d0:	1f 05       	cpc	r17, r15
     9d2:	98 f1       	brcs	.+102    	; 0xa3a <iq_read+0xa0>
     9d4:	e0 16       	cp	r14, r16
     9d6:	f1 06       	cpc	r15, r17
     9d8:	d0 f0       	brcs	.+52     	; 0xa0e <iq_read+0x74>
     9da:	a8 01       	movw	r20, r16
     9dc:	c6 01       	movw	r24, r12
     9de:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     9e2:	8e 81       	ldd	r24, Y+6	; 0x06
     9e4:	9f 81       	ldd	r25, Y+7	; 0x07
     9e6:	9d 87       	std	Y+13, r25	; 0x0d
     9e8:	8c 87       	std	Y+12, r24	; 0x0c
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	9d 81       	ldd	r25, Y+5	; 0x05
     9ee:	80 1b       	sub	r24, r16
     9f0:	91 0b       	sbc	r25, r17
     9f2:	9d 83       	std	Y+5, r25	; 0x05
     9f4:	8c 83       	std	Y+4, r24	; 0x04
     9f6:	c8 01       	movw	r24, r16
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	08 95       	ret
     a0e:	a7 01       	movw	r20, r14
     a10:	c6 01       	movw	r24, r12
     a12:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     a16:	58 01       	movw	r10, r16
     a18:	ae 18       	sub	r10, r14
     a1a:	bf 08       	sbc	r11, r15
     a1c:	6e 81       	ldd	r22, Y+6	; 0x06
     a1e:	7f 81       	ldd	r23, Y+7	; 0x07
     a20:	a5 01       	movw	r20, r10
     a22:	c6 01       	movw	r24, r12
     a24:	8e 0d       	add	r24, r14
     a26:	9f 1d       	adc	r25, r15
     a28:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	9f 81       	ldd	r25, Y+7	; 0x07
     a30:	a8 0e       	add	r10, r24
     a32:	b9 1e       	adc	r11, r25
     a34:	bd 86       	std	Y+13, r11	; 0x0d
     a36:	ac 86       	std	Y+12, r10	; 0x0c
     a38:	d8 cf       	rjmp	.-80     	; 0x9ea <iq_read+0x50>
     a3a:	a8 01       	movw	r20, r16
     a3c:	c6 01       	movw	r24, r12
     a3e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     a42:	8c 85       	ldd	r24, Y+12	; 0x0c
     a44:	9d 85       	ldd	r25, Y+13	; 0x0d
     a46:	80 0f       	add	r24, r16
     a48:	91 1f       	adc	r25, r17
     a4a:	9d 87       	std	Y+13, r25	; 0x0d
     a4c:	8c 87       	std	Y+12, r24	; 0x0c
     a4e:	cd cf       	rjmp	.-102    	; 0x9ea <iq_read+0x50>

00000a50 <oq_write>:
     a50:	af 92       	push	r10
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
     a66:	6b 01       	movw	r12, r22
     a68:	8a 01       	movw	r16, r20
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	9d 81       	ldd	r25, Y+5	; 0x05
     a6e:	84 17       	cp	r24, r20
     a70:	95 07       	cpc	r25, r21
     a72:	10 f4       	brcc	.+4      	; 0xa78 <oq_write+0x28>
     a74:	0c 81       	ldd	r16, Y+4	; 0x04
     a76:	1d 81       	ldd	r17, Y+5	; 0x05
     a78:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a7c:	e8 84       	ldd	r14, Y+8	; 0x08
     a7e:	f9 84       	ldd	r15, Y+9	; 0x09
     a80:	e8 1a       	sub	r14, r24
     a82:	f9 0a       	sbc	r15, r25
     a84:	0e 15       	cp	r16, r14
     a86:	1f 05       	cpc	r17, r15
     a88:	98 f1       	brcs	.+102    	; 0xaf0 <oq_write+0xa0>
     a8a:	e0 16       	cp	r14, r16
     a8c:	f1 06       	cpc	r15, r17
     a8e:	d0 f0       	brcs	.+52     	; 0xac4 <oq_write+0x74>
     a90:	a8 01       	movw	r20, r16
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     a98:	8e 81       	ldd	r24, Y+6	; 0x06
     a9a:	9f 81       	ldd	r25, Y+7	; 0x07
     a9c:	9b 87       	std	Y+11, r25	; 0x0b
     a9e:	8a 87       	std	Y+10, r24	; 0x0a
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	80 1b       	sub	r24, r16
     aa6:	91 0b       	sbc	r25, r17
     aa8:	9d 83       	std	Y+5, r25	; 0x05
     aaa:	8c 83       	std	Y+4, r24	; 0x04
     aac:	c8 01       	movw	r24, r16
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	08 95       	ret
     ac4:	a7 01       	movw	r20, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     acc:	58 01       	movw	r10, r16
     ace:	ae 18       	sub	r10, r14
     ad0:	bf 08       	sbc	r11, r15
     ad2:	b6 01       	movw	r22, r12
     ad4:	6e 0d       	add	r22, r14
     ad6:	7f 1d       	adc	r23, r15
     ad8:	a5 01       	movw	r20, r10
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	9f 81       	ldd	r25, Y+7	; 0x07
     ade:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     ae2:	8e 81       	ldd	r24, Y+6	; 0x06
     ae4:	9f 81       	ldd	r25, Y+7	; 0x07
     ae6:	a8 0e       	add	r10, r24
     ae8:	b9 1e       	adc	r11, r25
     aea:	bb 86       	std	Y+11, r11	; 0x0b
     aec:	aa 86       	std	Y+10, r10	; 0x0a
     aee:	d8 cf       	rjmp	.-80     	; 0xaa0 <oq_write+0x50>
     af0:	a8 01       	movw	r20, r16
     af2:	b6 01       	movw	r22, r12
     af4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <memcpy>
     af8:	8a 85       	ldd	r24, Y+10	; 0x0a
     afa:	9b 85       	ldd	r25, Y+11	; 0x0b
     afc:	80 0f       	add	r24, r16
     afe:	91 1f       	adc	r25, r17
     b00:	9b 87       	std	Y+11, r25	; 0x0b
     b02:	8a 87       	std	Y+10, r24	; 0x0a
     b04:	cd cf       	rjmp	.-102    	; 0xaa0 <oq_write+0x50>

00000b06 <iqObjectInit>:
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	fc 01       	movw	r30, r24
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	80 83       	st	Z, r24
     b10:	93 83       	std	Z+3, r25	; 0x03
     b12:	82 83       	std	Z+2, r24	; 0x02
     b14:	15 82       	std	Z+5, r1	; 0x05
     b16:	14 82       	std	Z+4, r1	; 0x04
     b18:	77 83       	std	Z+7, r23	; 0x07
     b1a:	66 83       	std	Z+6, r22	; 0x06
     b1c:	75 87       	std	Z+13, r23	; 0x0d
     b1e:	64 87       	std	Z+12, r22	; 0x0c
     b20:	73 87       	std	Z+11, r23	; 0x0b
     b22:	62 87       	std	Z+10, r22	; 0x0a
     b24:	64 0f       	add	r22, r20
     b26:	75 1f       	adc	r23, r21
     b28:	71 87       	std	Z+9, r23	; 0x09
     b2a:	60 87       	std	Z+8, r22	; 0x08
     b2c:	37 87       	std	Z+15, r19	; 0x0f
     b2e:	26 87       	std	Z+14, r18	; 0x0e
     b30:	11 8b       	std	Z+17, r17	; 0x11
     b32:	00 8b       	std	Z+16, r16	; 0x10
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <iqPutI>:
     b3a:	fc 01       	movw	r30, r24
     b3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b3e:	b3 85       	ldd	r27, Z+11	; 0x0b
     b40:	84 85       	ldd	r24, Z+12	; 0x0c
     b42:	95 85       	ldd	r25, Z+13	; 0x0d
     b44:	a8 17       	cp	r26, r24
     b46:	b9 07       	cpc	r27, r25
     b48:	e1 f0       	breq	.+56     	; 0xb82 <iqPutI+0x48>
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	95 81       	ldd	r25, Z+5	; 0x05
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	95 83       	std	Z+5, r25	; 0x05
     b52:	84 83       	std	Z+4, r24	; 0x04
     b54:	cd 01       	movw	r24, r26
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	93 87       	std	Z+11, r25	; 0x0b
     b5a:	82 87       	std	Z+10, r24	; 0x0a
     b5c:	6c 93       	st	X, r22
     b5e:	22 85       	ldd	r18, Z+10	; 0x0a
     b60:	33 85       	ldd	r19, Z+11	; 0x0b
     b62:	80 85       	ldd	r24, Z+8	; 0x08
     b64:	91 85       	ldd	r25, Z+9	; 0x09
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	20 f0       	brcs	.+8      	; 0xb74 <iqPutI+0x3a>
     b6c:	86 81       	ldd	r24, Z+6	; 0x06
     b6e:	97 81       	ldd	r25, Z+7	; 0x07
     b70:	93 87       	std	Z+11, r25	; 0x0b
     b72:	82 87       	std	Z+10, r24	; 0x0a
     b74:	cf 01       	movw	r24, r30
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	31 de       	rcall	.-926    	; 0x7de <chThdDequeueNextI>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	08 95       	ret
     b82:	84 81       	ldd	r24, Z+4	; 0x04
     b84:	95 81       	ldd	r25, Z+5	; 0x05
     b86:	89 2b       	or	r24, r25
     b88:	01 f3       	breq	.-64     	; 0xb4a <iqPutI+0x10>
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	08 95       	ret

00000b90 <iqGetTimeout>:
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
     b9a:	8b 01       	movw	r16, r22
     b9c:	f8 94       	cli
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <iqGetTimeout+0x1a>
     ba0:	b8 01       	movw	r22, r16
     ba2:	ce 01       	movw	r24, r28
     ba4:	ff dd       	rcall	.-1026   	; 0x7a4 <chThdEnqueueTimeoutS>
     ba6:	97 fd       	sbrc	r25, 7
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <iqGetTimeout+0x68>
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	9d 81       	ldd	r25, Y+5	; 0x05
     bae:	89 2b       	or	r24, r25
     bb0:	b9 f3       	breq	.-18     	; 0xba0 <iqGetTimeout+0x10>
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	9d 81       	ldd	r25, Y+5	; 0x05
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9d 83       	std	Y+5, r25	; 0x05
     bba:	8c 83       	std	Y+4, r24	; 0x04
     bbc:	ec 85       	ldd	r30, Y+12	; 0x0c
     bbe:	fd 85       	ldd	r31, Y+13	; 0x0d
     bc0:	cf 01       	movw	r24, r30
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9d 87       	std	Y+13, r25	; 0x0d
     bc6:	8c 87       	std	Y+12, r24	; 0x0c
     bc8:	10 81       	ld	r17, Z
     bca:	28 85       	ldd	r18, Y+8	; 0x08
     bcc:	39 85       	ldd	r19, Y+9	; 0x09
     bce:	82 17       	cp	r24, r18
     bd0:	93 07       	cpc	r25, r19
     bd2:	20 f0       	brcs	.+8      	; 0xbdc <iqGetTimeout+0x4c>
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	9d 87       	std	Y+13, r25	; 0x0d
     bda:	8c 87       	std	Y+12, r24	; 0x0c
     bdc:	ee 85       	ldd	r30, Y+14	; 0x0e
     bde:	ff 85       	ldd	r31, Y+15	; 0x0f
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	11 f0       	breq	.+4      	; 0xbe8 <iqGetTimeout+0x58>
     be4:	ce 01       	movw	r24, r28
     be6:	09 95       	icall
     be8:	78 94       	sei
     bea:	81 2f       	mov	r24, r17
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret
     bf8:	78 94       	sei
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <iqReadTimeout>:
     c04:	6f 92       	push	r6
     c06:	7f 92       	push	r7
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	4c 01       	movw	r8, r24
     c22:	7b 01       	movw	r14, r22
     c24:	6a 01       	movw	r12, r20
     c26:	39 01       	movw	r6, r18
     c28:	fc 01       	movw	r30, r24
     c2a:	a6 84       	ldd	r10, Z+14	; 0x0e
     c2c:	b7 84       	ldd	r11, Z+15	; 0x0f
     c2e:	f8 94       	cli
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	45 2b       	or	r20, r21
     c36:	81 f4       	brne	.+32     	; 0xc58 <iqReadTimeout+0x54>
     c38:	1b c0       	rjmp	.+54     	; 0xc70 <iqReadTimeout+0x6c>
     c3a:	a1 14       	cp	r10, r1
     c3c:	b1 04       	cpc	r11, r1
     c3e:	19 f0       	breq	.+6      	; 0xc46 <iqReadTimeout+0x42>
     c40:	c4 01       	movw	r24, r8
     c42:	f5 01       	movw	r30, r10
     c44:	09 95       	icall
     c46:	78 94       	sei
     c48:	0c 0f       	add	r16, r28
     c4a:	1d 1f       	adc	r17, r29
     c4c:	ec 0e       	add	r14, r28
     c4e:	fd 1e       	adc	r15, r29
     c50:	f8 94       	cli
     c52:	0c 15       	cp	r16, r12
     c54:	1d 05       	cpc	r17, r13
     c56:	60 f4       	brcc	.+24     	; 0xc70 <iqReadTimeout+0x6c>
     c58:	a6 01       	movw	r20, r12
     c5a:	b7 01       	movw	r22, r14
     c5c:	c4 01       	movw	r24, r8
     c5e:	9d de       	rcall	.-710    	; 0x99a <iq_read>
     c60:	ec 01       	movw	r28, r24
     c62:	89 2b       	or	r24, r25
     c64:	51 f7       	brne	.-44     	; 0xc3a <iqReadTimeout+0x36>
     c66:	b3 01       	movw	r22, r6
     c68:	c4 01       	movw	r24, r8
     c6a:	9c dd       	rcall	.-1224   	; 0x7a4 <chThdEnqueueTimeoutS>
     c6c:	89 2b       	or	r24, r25
     c6e:	89 f3       	breq	.-30     	; 0xc52 <iqReadTimeout+0x4e>
     c70:	78 94       	sei
     c72:	c8 01       	movw	r24, r16
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	08 95       	ret

00000c92 <oqObjectInit>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	fc 01       	movw	r30, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	93 83       	std	Z+3, r25	; 0x03
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	55 83       	std	Z+5, r21	; 0x05
     ca2:	44 83       	std	Z+4, r20	; 0x04
     ca4:	77 83       	std	Z+7, r23	; 0x07
     ca6:	66 83       	std	Z+6, r22	; 0x06
     ca8:	75 87       	std	Z+13, r23	; 0x0d
     caa:	64 87       	std	Z+12, r22	; 0x0c
     cac:	73 87       	std	Z+11, r23	; 0x0b
     cae:	62 87       	std	Z+10, r22	; 0x0a
     cb0:	46 0f       	add	r20, r22
     cb2:	57 1f       	adc	r21, r23
     cb4:	51 87       	std	Z+9, r21	; 0x09
     cb6:	40 87       	std	Z+8, r20	; 0x08
     cb8:	37 87       	std	Z+15, r19	; 0x0f
     cba:	26 87       	std	Z+14, r18	; 0x0e
     cbc:	11 8b       	std	Z+17, r17	; 0x11
     cbe:	00 8b       	std	Z+16, r16	; 0x10
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <oqPutTimeout>:
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	ec 01       	movw	r28, r24
     cd2:	f6 2e       	mov	r15, r22
     cd4:	8a 01       	movw	r16, r20
     cd6:	f8 94       	cli
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <oqPutTimeout+0x1e>
     cda:	b8 01       	movw	r22, r16
     cdc:	ce 01       	movw	r24, r28
     cde:	62 dd       	rcall	.-1340   	; 0x7a4 <chThdEnqueueTimeoutS>
     ce0:	97 fd       	sbrc	r25, 7
     ce2:	2a c0       	rjmp	.+84     	; 0xd38 <oqPutTimeout+0x72>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	89 2b       	or	r24, r25
     cea:	b9 f3       	breq	.-18     	; 0xcda <oqPutTimeout+0x14>
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	8c 83       	std	Y+4, r24	; 0x04
     cf6:	ea 85       	ldd	r30, Y+10	; 0x0a
     cf8:	fb 85       	ldd	r31, Y+11	; 0x0b
     cfa:	cf 01       	movw	r24, r30
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9b 87       	std	Y+11, r25	; 0x0b
     d00:	8a 87       	std	Y+10, r24	; 0x0a
     d02:	f0 82       	st	Z, r15
     d04:	2a 85       	ldd	r18, Y+10	; 0x0a
     d06:	3b 85       	ldd	r19, Y+11	; 0x0b
     d08:	88 85       	ldd	r24, Y+8	; 0x08
     d0a:	99 85       	ldd	r25, Y+9	; 0x09
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	20 f0       	brcs	.+8      	; 0xd1a <oqPutTimeout+0x54>
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	9f 81       	ldd	r25, Y+7	; 0x07
     d16:	9b 87       	std	Y+11, r25	; 0x0b
     d18:	8a 87       	std	Y+10, r24	; 0x0a
     d1a:	ee 85       	ldd	r30, Y+14	; 0x0e
     d1c:	ff 85       	ldd	r31, Y+15	; 0x0f
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	11 f0       	breq	.+4      	; 0xd26 <oqPutTimeout+0x60>
     d22:	ce 01       	movw	r24, r28
     d24:	09 95       	icall
     d26:	78 94       	sei
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	08 95       	ret
     d38:	78 94       	sei
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	08 95       	ret

00000d46 <oqGetI>:
     d46:	cf 93       	push	r28
     d48:	fc 01       	movw	r30, r24
     d4a:	a4 85       	ldd	r26, Z+12	; 0x0c
     d4c:	b5 85       	ldd	r27, Z+13	; 0x0d
     d4e:	82 85       	ldd	r24, Z+10	; 0x0a
     d50:	93 85       	ldd	r25, Z+11	; 0x0b
     d52:	8a 17       	cp	r24, r26
     d54:	9b 07       	cpc	r25, r27
     d56:	e1 f0       	breq	.+56     	; 0xd90 <oqGetI+0x4a>
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	95 81       	ldd	r25, Z+5	; 0x05
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	95 83       	std	Z+5, r25	; 0x05
     d60:	84 83       	std	Z+4, r24	; 0x04
     d62:	cd 01       	movw	r24, r26
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	95 87       	std	Z+13, r25	; 0x0d
     d68:	84 87       	std	Z+12, r24	; 0x0c
     d6a:	cc 91       	ld	r28, X
     d6c:	20 85       	ldd	r18, Z+8	; 0x08
     d6e:	31 85       	ldd	r19, Z+9	; 0x09
     d70:	82 17       	cp	r24, r18
     d72:	93 07       	cpc	r25, r19
     d74:	40 f4       	brcc	.+16     	; 0xd86 <oqGetI+0x40>
     d76:	cf 01       	movw	r24, r30
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	30 dd       	rcall	.-1440   	; 0x7de <chThdDequeueNextI>
     d7e:	8c 2f       	mov	r24, r28
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	97 81       	ldd	r25, Z+7	; 0x07
     d8a:	95 87       	std	Z+13, r25	; 0x0d
     d8c:	84 87       	std	Z+12, r24	; 0x0c
     d8e:	f3 cf       	rjmp	.-26     	; 0xd76 <oqGetI+0x30>
     d90:	84 81       	ldd	r24, Z+4	; 0x04
     d92:	95 81       	ldd	r25, Z+5	; 0x05
     d94:	89 2b       	or	r24, r25
     d96:	01 f3       	breq	.-64     	; 0xd58 <oqGetI+0x12>
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	f2 cf       	rjmp	.-28     	; 0xd82 <oqGetI+0x3c>

00000d9e <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     d9e:	6f 92       	push	r6
     da0:	7f 92       	push	r7
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	4c 01       	movw	r8, r24
     dbc:	7b 01       	movw	r14, r22
     dbe:	6a 01       	movw	r12, r20
     dc0:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     dc2:	fc 01       	movw	r30, r24
     dc4:	a6 84       	ldd	r10, Z+14	; 0x0e
     dc6:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     dc8:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     dca:	00 e0       	ldi	r16, 0x00	; 0
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	45 2b       	or	r20, r21
     dd0:	81 f4       	brne	.+32     	; 0xdf2 <oqWriteTimeout+0x54>
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     dd4:	a1 14       	cp	r10, r1
     dd6:	b1 04       	cpc	r11, r1
     dd8:	19 f0       	breq	.+6      	; 0xde0 <oqWriteTimeout+0x42>
        nfy(oqp);
     dda:	c4 01       	movw	r24, r8
     ddc:	f5 01       	movw	r30, r10
     dde:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     de0:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
     de2:	0c 0f       	add	r16, r28
     de4:	1d 1f       	adc	r17, r29
      bp += done;
     de6:	ec 0e       	add	r14, r28
     de8:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     dea:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     dec:	0c 15       	cp	r16, r12
     dee:	1d 05       	cpc	r17, r13
     df0:	60 f4       	brcc	.+24     	; 0xe0a <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
     df2:	a6 01       	movw	r20, r12
     df4:	b7 01       	movw	r22, r14
     df6:	c4 01       	movw	r24, r8
     df8:	2b de       	rcall	.-938    	; 0xa50 <oq_write>
     dfa:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     dfc:	89 2b       	or	r24, r25
     dfe:	51 f7       	brne	.-44     	; 0xdd4 <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     e00:	b3 01       	movw	r22, r6
     e02:	c4 01       	movw	r24, r8
     e04:	cf dc       	rcall	.-1634   	; 0x7a4 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     e06:	89 2b       	or	r24, r25
     e08:	89 f3       	breq	.-30     	; 0xdec <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     e0a:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
     e0c:	c8 01       	movw	r24, r16
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	7f 90       	pop	r7
     e28:	6f 90       	pop	r6
     e2a:	08 95       	ret

00000e2c <gptInit>:
     e2c:	52 c1       	rjmp	.+676    	; 0x10d2 <gpt_lld_init>

00000e2e <gptObjectInit>:
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
     e34:	12 82       	std	Z+2, r1	; 0x02
     e36:	11 82       	std	Z+1, r1	; 0x01
     e38:	08 95       	ret

00000e3a <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     e3a:	05 96       	adiw	r24, 0x05	; 5
     e3c:	e3 ce       	rjmp	.-570    	; 0xc04 <iqReadTimeout>

00000e3e <_read>:
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	05 96       	adiw	r24, 0x05	; 5
     e44:	df ce       	rjmp	.-578    	; 0xc04 <iqReadTimeout>

00000e46 <_writet>:
     e46:	47 96       	adiw	r24, 0x17	; 23
     e48:	aa cf       	rjmp	.-172    	; 0xd9e <oqWriteTimeout>

00000e4a <_write>:
     e4a:	2f ef       	ldi	r18, 0xFF	; 255
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	47 96       	adiw	r24, 0x17	; 23
     e50:	a6 cf       	rjmp	.-180    	; 0xd9e <oqWriteTimeout>

00000e52 <_gett>:
     e52:	05 96       	adiw	r24, 0x05	; 5
     e54:	9d ce       	rjmp	.-710    	; 0xb90 <iqGetTimeout>

00000e56 <_get>:
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	05 96       	adiw	r24, 0x05	; 5
     e5c:	99 ce       	rjmp	.-718    	; 0xb90 <iqGetTimeout>

00000e5e <_putt>:
     e5e:	47 96       	adiw	r24, 0x17	; 23
     e60:	32 cf       	rjmp	.-412    	; 0xcc6 <oqPutTimeout>

00000e62 <_put>:
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	5f ef       	ldi	r21, 0xFF	; 255
     e66:	47 96       	adiw	r24, 0x17	; 23
     e68:	2e cf       	rjmp	.-420    	; 0xcc6 <oqPutTimeout>

00000e6a <_ctl>:
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <sdInit>:
     e70:	b1 c1       	rjmp	.+866    	; 0x11d4 <sd_lld_init>

00000e72 <sdObjectInit>:
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
     e80:	9b 01       	movw	r18, r22
     e82:	7a 01       	movw	r14, r20
     e84:	fc 01       	movw	r30, r24
     e86:	86 e2       	ldi	r24, 0x26	; 38
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	81 93       	st	Z+, r24
     e8c:	91 93       	st	Z+, r25
     e8e:	fb 83       	std	Y+3, r31	; 0x03
     e90:	ea 83       	std	Y+2, r30	; 0x02
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	8c 83       	std	Y+4, r24	; 0x04
     e96:	be 01       	movw	r22, r28
     e98:	67 5d       	subi	r22, 0xD7	; 215
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8e 01       	movw	r16, r28
     e9e:	40 e1       	ldi	r20, 0x10	; 16
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	05 96       	adiw	r24, 0x05	; 5
     ea6:	2f de       	rcall	.-930    	; 0xb06 <iqObjectInit>
     ea8:	be 01       	movw	r22, r28
     eaa:	67 5c       	subi	r22, 0xC7	; 199
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	97 01       	movw	r18, r14
     eb0:	40 e1       	ldi	r20, 0x10	; 16
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	47 96       	adiw	r24, 0x17	; 23
     eb8:	ec de       	rcall	.-552    	; 0xc92 <oqObjectInit>
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	08 95       	ret

00000ec8 <sdStart>:
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	f8 94       	cli
     ed0:	88 d1       	rcall	.+784    	; 0x11e2 <sd_lld_start>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	8c 83       	std	Y+4, r24	; 0x04
     ed6:	78 94       	sei
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
     ee6:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     ee8:	89 85       	ldd	r24, Y+9	; 0x09
     eea:	9a 85       	ldd	r25, Y+10	; 0x0a
     eec:	89 2b       	or	r24, r25
     eee:	51 f0       	breq	.+20     	; 0xf04 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     ef0:	61 2f       	mov	r22, r17
     ef2:	ce 01       	movw	r24, r28
     ef4:	05 96       	adiw	r24, 0x05	; 5
     ef6:	21 de       	rcall	.-958    	; 0xb3a <iqPutI>
     ef8:	97 fd       	sbrc	r25, 7
     efa:	0e c0       	rjmp	.+28     	; 0xf18 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	ce 01       	movw	r24, r28
     f08:	02 96       	adiw	r24, 0x02	; 2
     f0a:	a0 dc       	rcall	.-1728   	; 0x84c <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f0c:	61 2f       	mov	r22, r17
     f0e:	ce 01       	movw	r24, r28
     f10:	05 96       	adiw	r24, 0x05	; 5
     f12:	13 de       	rcall	.-986    	; 0xb3a <iqPutI>
     f14:	97 ff       	sbrs	r25, 7
     f16:	f2 cf       	rjmp	.-28     	; 0xefc <sdIncomingDataI+0x1e>
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	ce 01       	movw	r24, r28
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f1c:	02 96       	adiw	r24, 0x02	; 2
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
     f24:	93 cc       	rjmp	.-1754   	; 0x84c <chEvtBroadcastFlagsI>

00000f26 <sdRequestDataI>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	8c 01       	movw	r16, r24
     f30:	47 96       	adiw	r24, 0x17	; 23
     f32:	09 df       	rcall	.-494    	; 0xd46 <oqGetI>
     f34:	ec 01       	movw	r28, r24
     f36:	97 fd       	sbrc	r25, 7
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <sdRequestDataI+0x20>
     f3a:	ce 01       	movw	r24, r28
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret
     f46:	68 e0       	ldi	r22, 0x08	; 8
     f48:	c8 01       	movw	r24, r16
     f4a:	02 96       	adiw	r24, 0x02	; 2
     f4c:	7f dc       	rcall	.-1794   	; 0x84c <chEvtBroadcastFlagsI>
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     f5a:	08 95       	ret

00000f5c <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     f5c:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     f5e:	80 81       	ld	r24, Z
     f60:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     f62:	81 81       	ldd	r24, Z+1	; 0x01
     f64:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     f6a:	83 81       	ldd	r24, Z+3	; 0x03
     f6c:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     f72:	85 81       	ldd	r24, Z+5	; 0x05
     f74:	8a b9       	out	0x0a, r24	; 10
     f76:	08 95       	ret

00000f78 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     f78:	fc 01       	movw	r30, r24

  switch (mode) {
     f7a:	42 30       	cpi	r20, 0x02	; 2
     f7c:	c9 f0       	breq	.+50     	; 0xfb0 <_pal_lld_setgroupmode+0x38>
     f7e:	98 f0       	brcs	.+38     	; 0xfa6 <_pal_lld_setgroupmode+0x2e>
     f80:	45 30       	cpi	r20, 0x05	; 5
     f82:	b1 f0       	breq	.+44     	; 0xfb0 <_pal_lld_setgroupmode+0x38>
     f84:	46 30       	cpi	r20, 0x06	; 6
     f86:	21 f4       	brne	.+8      	; 0xf90 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	68 2b       	or	r22, r24
     f8c:	61 83       	std	Z+1, r22	; 0x01
     f8e:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     f90:	43 30       	cpi	r20, 0x03	; 3
     f92:	e9 f7       	brne	.-6      	; 0xf8e <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     f94:	81 81       	ldd	r24, Z+1	; 0x01
     f96:	96 2f       	mov	r25, r22
     f98:	90 95       	com	r25
     f9a:	89 23       	and	r24, r25
     f9c:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	68 2b       	or	r22, r24
     fa2:	62 83       	std	Z+2, r22	; 0x02
    break;
     fa4:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     fa6:	44 23       	and	r20, r20
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <_pal_lld_setgroupmode+0x38>
     faa:	41 30       	cpi	r20, 0x01	; 1
     fac:	99 f3       	breq	.-26     	; 0xf94 <_pal_lld_setgroupmode+0x1c>
     fae:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     fb0:	81 81       	ldd	r24, Z+1	; 0x01
     fb2:	60 95       	com	r22
     fb4:	86 23       	and	r24, r22
     fb6:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	68 23       	and	r22, r24
     fbc:	62 83       	std	Z+2, r22	; 0x02
    break;
     fbe:	08 95       	ret

00000fc0 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <__avr_in_isr>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     fe8:	f0 d8       	rcall	.-3616   	; 0x1ca <chSysTimerHandlerI>
     fea:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__avr_in_isr>
     fee:	c4 da       	rcall	.-2680   	; 0x578 <chSchIsPreemptionRequired>
     ff0:	81 11       	cpse	r24, r1
}
     ff2:	d2 da       	rcall	.-2652   	; 0x598 <chSchDoReschedule>
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
    101a:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
    101c:	9f e7       	ldi	r25, 0x7F	; 127
    101e:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
    1020:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
    1022:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
    1024:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1028:	08 95       	ret

0000102a <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
    1052:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <GPTD1+0x6>
    1056:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <GPTD1+0x7>
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <GPTD1+0x7>
    1060:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
    1064:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <GPTD1+0x4>
    1068:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <GPTD1+0x5>
    106c:	82 17       	cp	r24, r18
    106e:	93 07       	cpc	r25, r19
    1070:	b1 f0       	breq	.+44     	; 0x109e <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
    1072:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__avr_in_isr>
    1076:	80 da       	rcall	.-2816   	; 0x578 <chSchIsPreemptionRequired>
    1078:	81 11       	cpse	r24, r1
    107a:	8e da       	rcall	.-2788   	; 0x598 <chSchDoReschedule>
}
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    109e:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <GPTD1+0x7>
    10a2:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <GPTD1+0x6>
    if (gptp->state == GPT_ONESHOT) {
    10a6:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <GPTD1>
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	41 f0       	breq	.+16     	; 0x10be <__vector_11+0x94>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
    10ae:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <GPTD1+0x8>
    10b2:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <GPTD1+0x9>
    10b6:	8c e5       	ldi	r24, 0x5C	; 92
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	09 95       	icall
    10bc:	da cf       	rjmp	.-76     	; 0x1072 <__vector_11+0x48>

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <GPTD1>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
    10c4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    10c8:	88 7f       	andi	r24, 0xF8	; 248
    10ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  *regs_table[i].tifr = (1 << OCF1A);
    10ce:	96 bb       	out	0x16, r25	; 22
    10d0:	ee cf       	rjmp	.-36     	; 0x10ae <__vector_11+0x84>

000010d2 <gpt_lld_init>:
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
    10d2:	8c e5       	ldi	r24, 0x5C	; 92
    10d4:	94 e0       	ldi	r25, 0x04	; 4
    10d6:	ab ce       	rjmp	.-682    	; 0xe2e <gptObjectInit>

000010d8 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    10d8:	e1 ec       	ldi	r30, 0xC1	; 193
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	80 83       	st	Z, r24
    10e2:	08 95       	ret

000010e4 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <__avr_in_isr>

  sra = UCSR0A;
    110c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    1110:	98 2f       	mov	r25, r24
    1112:	9c 71       	andi	r25, 0x1C	; 28
    1114:	d9 f4       	brne	.+54     	; 0x114c <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    1116:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    111a:	86 e6       	ldi	r24, 0x66	; 102
    111c:	94 e0       	ldi	r25, 0x04	; 4
    111e:	df de       	rcall	.-578    	; 0xede <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1120:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__avr_in_isr>
    1124:	29 da       	rcall	.-2990   	; 0x578 <chSchIsPreemptionRequired>
    1126:	81 11       	cpse	r24, r1
    1128:	37 da       	rcall	.-2962   	; 0x598 <chSchDoReschedule>
}
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    114c:	83 fd       	sbrc	r24, 3
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    1150:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    1152:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    1154:	60 62       	ori	r22, 0x20	; 32
    1156:	84 fd       	sbrc	r24, 4
    1158:	60 64       	ori	r22, 0x40	; 64
    115a:	88 e6       	ldi	r24, 0x68	; 104
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	76 db       	rcall	.-2324   	; 0x84c <chEvtBroadcastFlagsI>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    1160:	da cf       	rjmp	.-76     	; 0x1116 <__vector_18+0x32>
    1162:	60 e8       	ldi	r22, 0x80	; 128
    1164:	f6 cf       	rjmp	.-20     	; 0x1152 <__vector_18+0x6e>

00001166 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    118e:	86 e6       	ldi	r24, 0x66	; 102
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	c9 de       	rcall	.-622    	; 0xf26 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1194:	97 fd       	sbrc	r25, 7
    1196:	18 c0       	rjmp	.+48     	; 0x11c8 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1198:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    119c:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__avr_in_isr>
    11a0:	eb d9       	rcall	.-3114   	; 0x578 <chSchIsPreemptionRequired>
    11a2:	81 11       	cpse	r24, r1
    11a4:	f9 d9       	rcall	.-3086   	; 0x598 <chSchDoReschedule>
}
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    11c8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11d2:	e4 cf       	rjmp	.-56     	; 0x119c <__vector_19+0x36>

000011d4 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    11d4:	4c e6       	ldi	r20, 0x6C	; 108
    11d6:	58 e0       	ldi	r21, 0x08	; 8
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	86 e6       	ldi	r24, 0x66	; 102
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	48 ce       	rjmp	.-880    	; 0xe72 <sdObjectInit>

000011e2 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    11e2:	61 15       	cp	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	19 f1       	breq	.+70     	; 0x122e <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    11e8:	86 56       	subi	r24, 0x66	; 102
    11ea:	94 40       	sbci	r25, 0x04	; 4
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <sd_lld_start+0xe>
    11ee:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    11f0:	fb 01       	movw	r30, r22
    11f2:	80 81       	ld	r24, Z
    11f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    11f8:	81 81       	ldd	r24, Z+1	; 0x01
    11fa:	8f 70       	andi	r24, 0x0F	; 15
    11fc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    1206:	88 e9       	ldi	r24, 0x98	; 152
    1208:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	b9 f0       	breq	.+46     	; 0x1240 <sd_lld_start+0x5e>
    1212:	a0 f0       	brcs	.+40     	; 0x123c <sd_lld_start+0x5a>
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	71 f0       	breq	.+28     	; 0x1234 <sd_lld_start+0x52>
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	71 f4       	brne	.+28     	; 0x1238 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    121c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1220:	84 60       	ori	r24, 0x04	; 4
    1222:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1226:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    1228:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    122c:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    122e:	6a e3       	ldi	r22, 0x3A	; 58
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	da cf       	rjmp	.-76     	; 0x11e8 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	f8 cf       	rjmp	.-16     	; 0x1228 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	f6 cf       	rjmp	.-20     	; 0x1228 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	f4 cf       	rjmp	.-24     	; 0x1228 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	f2 cf       	rjmp	.-28     	; 0x1228 <sd_lld_start+0x46>

00001244 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    1244:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    1248:	1d ba       	out	0x1d, r1	; 29
    124a:	08 95       	ret

0000124c <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    124c:	2f 92       	push	r2
    124e:	3f 92       	push	r3
    1250:	4f 92       	push	r4
    1252:	5f 92       	push	r5
    1254:	6f 92       	push	r6
    1256:	7f 92       	push	r7
    1258:	8f 92       	push	r8
    125a:	9f 92       	push	r9
    125c:	af 92       	push	r10
    125e:	bf 92       	push	r11
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	a2 97       	sbiw	r28, 0x22	; 34
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	1c 01       	movw	r2, r24
    1282:	6b 01       	movw	r12, r22
    1284:	58 8f       	std	Y+24, r21	; 0x18
    1286:	4f 8b       	std	Y+23, r20	; 0x17
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    1288:	1e 8a       	std	Y+22, r1	; 0x16
    128a:	1d 8a       	std	Y+21, r1	; 0x15
    128c:	9e 01       	movw	r18, r28
    128e:	2e 5f       	subi	r18, 0xFE	; 254
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	3e 87       	std	Y+14, r19	; 0x0e
    1294:	2d 87       	std	Y+13, r18	; 0x0d
    1296:	ae 01       	movw	r20, r28
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	58 8b       	std	Y+16, r21	; 0x10
    129e:	4f 87       	std	Y+15, r20	; 0x0f
    12a0:	24 1b       	sub	r18, r20
    12a2:	35 0b       	sbc	r19, r21
    12a4:	38 a3       	std	Y+32, r19	; 0x20
    12a6:	2f 8f       	std	Y+31, r18	; 0x1f
    12a8:	21 50       	subi	r18, 0x01	; 1
    12aa:	31 09       	sbc	r19, r1
    12ac:	3a a3       	std	Y+34, r19	; 0x22
    12ae:	29 a3       	std	Y+33, r18	; 0x21
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    12b0:	ce 01       	movw	r24, r28
    12b2:	0c 96       	adiw	r24, 0x0c	; 12
    12b4:	9a 8b       	std	Y+18, r25	; 0x12
    12b6:	89 8b       	std	Y+17, r24	; 0x11
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    12b8:	86 01       	movw	r16, r12
    12ba:	0f 5f       	subi	r16, 0xFF	; 255
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	d6 01       	movw	r26, r12
    12c0:	6c 91       	ld	r22, X
    if (c == 0)
    12c2:	66 23       	and	r22, r22
    12c4:	b9 f0       	breq	.+46     	; 0x12f4 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    12c6:	65 32       	cpi	r22, 0x25	; 37
    12c8:	81 f1       	breq	.+96     	; 0x132a <chvprintf+0xde>
      streamPut(chp, (uint8_t)c);
    12ca:	d1 01       	movw	r26, r2
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	06 80       	ldd	r0, Z+6	; 0x06
    12d2:	f7 81       	ldd	r31, Z+7	; 0x07
    12d4:	e0 2d       	mov	r30, r0
    12d6:	c1 01       	movw	r24, r2
    12d8:	09 95       	icall
      n++;
    12da:	ed 89       	ldd	r30, Y+21	; 0x15
    12dc:	fe 89       	ldd	r31, Y+22	; 0x16
    12de:	31 96       	adiw	r30, 0x01	; 1
    12e0:	fe 8b       	std	Y+22, r31	; 0x16
    12e2:	ed 8b       	std	Y+21, r30	; 0x15
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    12e4:	68 01       	movw	r12, r16
    12e6:	86 01       	movw	r16, r12
    12e8:	0f 5f       	subi	r16, 0xFF	; 255
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	d6 01       	movw	r26, r12
    12ee:	6c 91       	ld	r22, X
    if (c == 0)
    12f0:	61 11       	cpse	r22, r1
    12f2:	e9 cf       	rjmp	.-46     	; 0x12c6 <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    12f4:	8d 89       	ldd	r24, Y+21	; 0x15
    12f6:	9e 89       	ldd	r25, Y+22	; 0x16
    12f8:	a2 96       	adiw	r28, 0x22	; 34
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	3f 90       	pop	r3
    1326:	2f 90       	pop	r2
    1328:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    132a:	d6 01       	movw	r26, r12
    132c:	11 96       	adiw	r26, 0x01	; 1
    132e:	8c 91       	ld	r24, X
    1330:	11 97       	sbiw	r26, 0x01	; 1
    1332:	8d 32       	cpi	r24, 0x2D	; 45
    1334:	09 f4       	brne	.+2      	; 0x1338 <chvprintf+0xec>
    1336:	ec c0       	rjmp	.+472    	; 0x1510 <chvprintf+0x2c4>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    1338:	1a 8e       	std	Y+26, r1	; 0x1a
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    133a:	80 33       	cpi	r24, 0x30	; 48
    133c:	09 f4       	brne	.+2      	; 0x1340 <chvprintf+0xf4>
    133e:	e1 c0       	rjmp	.+450    	; 0x1502 <chvprintf+0x2b6>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    1340:	20 e2       	ldi	r18, 0x20	; 32
    1342:	29 8f       	std	Y+25, r18	; 0x19
    1344:	a8 01       	movw	r20, r16
    1346:	4f 5f       	subi	r20, 0xFF	; 255
    1348:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	ef 89       	ldd	r30, Y+23	; 0x17
    1350:	f8 8d       	ldd	r31, Y+24	; 0x18
    1352:	13 c0       	rjmp	.+38     	; 0x137a <chvprintf+0x12e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    1354:	90 81       	ld	r25, Z
    1356:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    1358:	98 01       	movw	r18, r16
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	00 0f       	add	r16, r16
    1360:	11 1f       	adc	r17, r17
    1362:	00 0f       	add	r16, r16
    1364:	11 1f       	adc	r17, r17
    1366:	00 0f       	add	r16, r16
    1368:	11 1f       	adc	r17, r17
    136a:	02 0f       	add	r16, r18
    136c:	13 1f       	adc	r17, r19
    136e:	09 0f       	add	r16, r25
    1370:	11 1d       	adc	r17, r1
    1372:	4f 5f       	subi	r20, 0xFF	; 255
    1374:	5f 4f       	sbci	r21, 0xFF	; 255
    1376:	d6 01       	movw	r26, r12
    1378:	8c 91       	ld	r24, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    137a:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    137c:	90 ed       	ldi	r25, 0xD0	; 208
    137e:	98 0f       	add	r25, r24
    1380:	9a 30       	cpi	r25, 0x0A	; 10
    1382:	50 f3       	brcs	.-44     	; 0x1358 <chvprintf+0x10c>
        c -= '0';
      else if (c == '*')
    1384:	8a 32       	cpi	r24, 0x2A	; 42
    1386:	31 f3       	breq	.-52     	; 0x1354 <chvprintf+0x108>
    1388:	f8 8f       	std	Y+24, r31	; 0x18
    138a:	ef 8b       	std	Y+23, r30	; 0x17
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    1390:	8e 32       	cpi	r24, 0x2E	; 46
    1392:	09 f4       	brne	.+2      	; 0x1396 <chvprintf+0x14a>
    1394:	96 c0       	rjmp	.+300    	; 0x14c2 <chvprintf+0x276>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1396:	98 2f       	mov	r25, r24
    1398:	9f 7d       	andi	r25, 0xDF	; 223
    139a:	9c 34       	cpi	r25, 0x4C	; 76
    139c:	09 f4       	brne	.+2      	; 0x13a0 <chvprintf+0x154>
    139e:	7e c0       	rjmp	.+252    	; 0x149c <chvprintf+0x250>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    13a0:	af eb       	ldi	r26, 0xBF	; 191
    13a2:	a8 0f       	add	r26, r24
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	aa 31       	cpi	r26, 0x1A	; 26
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <chvprintf+0x160>
    13aa:	90 e0       	ldi	r25, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    13ac:	48 2f       	mov	r20, r24
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	fa 01       	movw	r30, r20
    13b2:	e4 54       	subi	r30, 0x44	; 68
    13b4:	f1 09       	sbc	r31, r1
    13b6:	e5 33       	cpi	r30, 0x35	; 53
    13b8:	f1 05       	cpc	r31, r1
    13ba:	08 f4       	brcc	.+2      	; 0x13be <chvprintf+0x172>
    13bc:	b1 c0       	rjmp	.+354    	; 0x1520 <chvprintf+0x2d4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13c2:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    13c4:	89 a0       	ldd	r8, Y+33	; 0x21
    13c6:	9a a0       	ldd	r9, Y+34	; 0x22
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    13c8:	ae 01       	movw	r20, r28
    13ca:	4f 5f       	subi	r20, 0xFF	; 255
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	7a 01       	movw	r14, r20
    13d0:	58 01       	movw	r10, r16
    13d2:	ae 1a       	sub	r10, r30
    13d4:	bf 0a       	sbc	r11, r31
    13d6:	b7 fc       	sbrc	r11, 7
    13d8:	da c0       	rjmp	.+436    	; 0x158e <chvprintf+0x342>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    13da:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13dc:	51 11       	cpse	r21, r1
    13de:	5b c0       	rjmp	.+182    	; 0x1496 <chvprintf+0x24a>
      width = -width;
    13e0:	00 27       	eor	r16, r16
    13e2:	11 27       	eor	r17, r17
    13e4:	0a 19       	sub	r16, r10
    13e6:	1b 09       	sbc	r17, r11
    if (width < 0) {
    13e8:	09 f4       	brne	.+2      	; 0x13ec <chvprintf+0x1a0>
    13ea:	5f c1       	rjmp	.+702    	; 0x16aa <chvprintf+0x45e>
      if (*s == '-' && filler == '0') {
    13ec:	d7 01       	movw	r26, r14
    13ee:	8c 91       	ld	r24, X
    13f0:	8d 32       	cpi	r24, 0x2D	; 45
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <chvprintf+0x1aa>
    13f4:	64 c1       	rjmp	.+712    	; 0x16be <chvprintf+0x472>
    13f6:	79 8c       	ldd	r7, Y+25	; 0x19
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    13f8:	d1 01       	movw	r26, r2
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	06 80       	ldd	r0, Z+6	; 0x06
    1400:	f7 81       	ldd	r31, Z+7	; 0x07
    1402:	e0 2d       	mov	r30, r0
    1404:	67 2d       	mov	r22, r7
    1406:	c1 01       	movw	r24, r2
    1408:	09 95       	icall
        n++;
      } while (++width != 0);
    140a:	0f 5f       	subi	r16, 0xFF	; 255
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	a1 f7       	brne	.-24     	; 0x13f8 <chvprintf+0x1ac>
    1410:	2d 89       	ldd	r18, Y+21	; 0x15
    1412:	3e 89       	ldd	r19, Y+22	; 0x16
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	8a 19       	sub	r24, r10
    141e:	9b 09       	sbc	r25, r11
    1420:	a9 01       	movw	r20, r18
    1422:	48 1b       	sub	r20, r24
    1424:	59 0b       	sbc	r21, r25
    1426:	5e 8b       	std	Y+22, r21	; 0x16
    1428:	4d 8b       	std	Y+21, r20	; 0x15
    }
    while (--i >= 0) {
    142a:	97 fc       	sbrc	r9, 7
    142c:	45 cf       	rjmp	.-374    	; 0x12b8 <chvprintf+0x6c>
    142e:	a1 2c       	mov	r10, r1
    1430:	b1 2c       	mov	r11, r1
    1432:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)*s++);
    1434:	f7 01       	movw	r30, r14
    1436:	61 91       	ld	r22, Z+
    1438:	7f 01       	movw	r14, r30
    143a:	d1 01       	movw	r26, r2
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	06 80       	ldd	r0, Z+6	; 0x06
    1442:	f7 81       	ldd	r31, Z+7	; 0x07
    1444:	e0 2d       	mov	r30, r0
    1446:	c1 01       	movw	r24, r2
    1448:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    144a:	01 50       	subi	r16, 0x01	; 1
    144c:	11 09       	sbc	r17, r1
    144e:	90 f7       	brcc	.-28     	; 0x1434 <chvprintf+0x1e8>
    1450:	8d 89       	ldd	r24, Y+21	; 0x15
    1452:	9e 89       	ldd	r25, Y+22	; 0x16
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	97 fc       	sbrc	r9, 7
    1458:	2f c1       	rjmp	.+606    	; 0x16b8 <chvprintf+0x46c>
    145a:	f4 01       	movw	r30, r8
    145c:	e8 0f       	add	r30, r24
    145e:	f9 1f       	adc	r31, r25
    1460:	fe 8b       	std	Y+22, r31	; 0x16
    1462:	ed 8b       	std	Y+21, r30	; 0x15
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1464:	a1 14       	cp	r10, r1
    1466:	b1 04       	cpc	r11, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <chvprintf+0x220>
    146a:	26 cf       	rjmp	.-436    	; 0x12b8 <chvprintf+0x6c>
    146c:	85 01       	movw	r16, r10
    146e:	f9 8c       	ldd	r15, Y+25	; 0x19
      streamPut(chp, (uint8_t)filler);
    1470:	d1 01       	movw	r26, r2
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	06 80       	ldd	r0, Z+6	; 0x06
    1478:	f7 81       	ldd	r31, Z+7	; 0x07
    147a:	e0 2d       	mov	r30, r0
    147c:	6f 2d       	mov	r22, r15
    147e:	c1 01       	movw	r24, r2
    1480:	09 95       	icall
      n++;
      width--;
    1482:	01 50       	subi	r16, 0x01	; 1
    1484:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1486:	a1 f7       	brne	.-24     	; 0x1470 <chvprintf+0x224>
    1488:	ed 89       	ldd	r30, Y+21	; 0x15
    148a:	fe 89       	ldd	r31, Y+22	; 0x16
    148c:	ea 0d       	add	r30, r10
    148e:	fb 1d       	adc	r31, r11
    1490:	fe 8b       	std	Y+22, r31	; 0x16
    1492:	ed 8b       	std	Y+21, r30	; 0x15
    1494:	11 cf       	rjmp	.-478    	; 0x12b8 <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1496:	97 fe       	sbrs	r9, 7
    1498:	cc cf       	rjmp	.-104    	; 0x1432 <chvprintf+0x1e6>
    149a:	e4 cf       	rjmp	.-56     	; 0x1464 <chvprintf+0x218>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    149c:	d6 01       	movw	r26, r12
    149e:	4c 91       	ld	r20, X
    14a0:	44 23       	and	r20, r20
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <chvprintf+0x25a>
    14a4:	8c cf       	rjmp	.-232    	; 0x13be <chvprintf+0x172>
        c = *fmt++;
    14a6:	ff ef       	ldi	r31, 0xFF	; 255
    14a8:	cf 1a       	sub	r12, r31
    14aa:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    14ac:	84 2f       	mov	r24, r20
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	fc 01       	movw	r30, r24
    14b2:	e4 54       	subi	r30, 0x44	; 68
    14b4:	f1 09       	sbc	r31, r1
    14b6:	e5 33       	cpi	r30, 0x35	; 53
    14b8:	f1 05       	cpc	r31, r1
    14ba:	08 f4       	brcc	.+2      	; 0x14be <chvprintf+0x272>
    14bc:	f9 c0       	rjmp	.+498    	; 0x16b0 <chvprintf+0x464>
    14be:	84 2f       	mov	r24, r20
    14c0:	7e cf       	rjmp	.-260    	; 0x13be <chvprintf+0x172>
    14c2:	df 01       	movw	r26, r30
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <chvprintf+0x298>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    14c6:	9c 91       	ld	r25, X
    14c8:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    14ca:	a9 01       	movw	r20, r18
    14cc:	44 0f       	add	r20, r20
    14ce:	55 1f       	adc	r21, r21
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	22 0f       	add	r18, r18
    14da:	33 1f       	adc	r19, r19
    14dc:	24 0f       	add	r18, r20
    14de:	35 1f       	adc	r19, r21
        precision += c;
    14e0:	29 0f       	add	r18, r25
    14e2:	31 1d       	adc	r19, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    14e4:	ef ef       	ldi	r30, 0xFF	; 255
    14e6:	ce 1a       	sub	r12, r30
    14e8:	de 0a       	sbc	r13, r30
    14ea:	f6 01       	movw	r30, r12
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    14f0:	90 ed       	ldi	r25, 0xD0	; 208
    14f2:	98 0f       	add	r25, r24
    14f4:	9a 30       	cpi	r25, 0x0A	; 10
    14f6:	48 f3       	brcs	.-46     	; 0x14ca <chvprintf+0x27e>
          c -= '0';
        else if (c == '*')
    14f8:	8a 32       	cpi	r24, 0x2A	; 42
    14fa:	29 f3       	breq	.-54     	; 0x14c6 <chvprintf+0x27a>
    14fc:	b8 8f       	std	Y+24, r27	; 0x18
    14fe:	af 8b       	std	Y+23, r26	; 0x17
    1500:	4a cf       	rjmp	.-364    	; 0x1396 <chvprintf+0x14a>
    1502:	f8 01       	movw	r30, r16
    1504:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    1506:	0f 5f       	subi	r16, 0xFF	; 255
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    150a:	f0 e3       	ldi	r31, 0x30	; 48
    150c:	f9 8f       	std	Y+25, r31	; 0x19
    150e:	1a cf       	rjmp	.-460    	; 0x1344 <chvprintf+0xf8>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    1510:	86 01       	movw	r16, r12
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	12 96       	adiw	r26, 0x02	; 2
    1518:	8c 91       	ld	r24, X
      left_align = TRUE;
    151a:	b1 e0       	ldi	r27, 0x01	; 1
    151c:	ba 8f       	std	Y+26, r27	; 0x1a
    151e:	0d cf       	rjmp	.-486    	; 0x133a <chvprintf+0xee>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1520:	ec 5c       	subi	r30, 0xCC	; 204
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1528:	8f 89       	ldd	r24, Y+23	; 0x17
    152a:	98 8d       	ldd	r25, Y+24	; 0x18
    152c:	02 96       	adiw	r24, 0x02	; 2
    152e:	af 89       	ldd	r26, Y+23	; 0x17
    1530:	b8 8d       	ldd	r27, Y+24	; 0x18
    1532:	ed 90       	ld	r14, X+
    1534:	fc 90       	ld	r15, X
    1536:	e1 14       	cp	r14, r1
    1538:	f1 04       	cpc	r15, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <chvprintf+0x2f2>
    153c:	6e c1       	rjmp	.+732    	; 0x181a <chvprintf+0x5ce>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    153e:	f7 01       	movw	r30, r14
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <chvprintf+0x2fc>
    1546:	d5 c0       	rjmp	.+426    	; 0x16f2 <chvprintf+0x4a6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1548:	40 81       	ld	r20, Z
    154a:	44 23       	and	r20, r20
    154c:	09 f4       	brne	.+2      	; 0x1550 <chvprintf+0x304>
    154e:	6a c1       	rjmp	.+724    	; 0x1824 <chvprintf+0x5d8>
    1550:	21 50       	subi	r18, 0x01	; 1
    1552:	31 09       	sbc	r19, r1
    1554:	f7 01       	movw	r30, r14
    1556:	31 96       	adiw	r30, 0x01	; 1
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <chvprintf+0x318>
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	31 09       	sbc	r19, r1
    155e:	08 f4       	brcc	.+2      	; 0x1562 <chvprintf+0x316>
    1560:	51 c1       	rjmp	.+674    	; 0x1804 <chvprintf+0x5b8>
    1562:	fb 01       	movw	r30, r22
    1564:	bf 01       	movw	r22, r30
    1566:	6f 5f       	subi	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	40 81       	ld	r20, Z
    156c:	41 11       	cpse	r20, r1
    156e:	f5 cf       	rjmp	.-22     	; 0x155a <chvprintf+0x30e>
    1570:	ee 19       	sub	r30, r14
    1572:	ff 09       	sbc	r31, r15
    1574:	4f 01       	movw	r8, r30
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	82 1a       	sub	r8, r18
    157a:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    157c:	98 8f       	std	Y+24, r25	; 0x18
    157e:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1580:	30 e2       	ldi	r19, 0x20	; 32
    1582:	39 8f       	std	Y+25, r19	; 0x19
    1584:	58 01       	movw	r10, r16
    1586:	ae 1a       	sub	r10, r30
    1588:	bf 0a       	sbc	r11, r31
    158a:	b7 fe       	sbrs	r11, 7
    158c:	26 cf       	rjmp	.-436    	; 0x13da <chvprintf+0x18e>
    158e:	a1 2c       	mov	r10, r1
    1590:	b1 2c       	mov	r11, r1
    1592:	23 cf       	rjmp	.-442    	; 0x13da <chvprintf+0x18e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1594:	af 89       	ldd	r26, Y+23	; 0x17
    1596:	b8 8d       	ldd	r27, Y+24	; 0x18
    1598:	8c 91       	ld	r24, X
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    159e:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    15a0:	89 a0       	ldd	r8, Y+33	; 0x21
    15a2:	9a a0       	ldd	r9, Y+34	; 0x22

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    15a4:	12 96       	adiw	r26, 0x02	; 2
    15a6:	b8 8f       	std	Y+24, r27	; 0x18
    15a8:	af 8b       	std	Y+23, r26	; 0x17
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    15aa:	b0 e2       	ldi	r27, 0x20	; 32
    15ac:	b9 8f       	std	Y+25, r27	; 0x19
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    15ae:	9e 01       	movw	r18, r28
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    15b6:	0c cf       	rjmp	.-488    	; 0x13d0 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    15b8:	91 e0       	ldi	r25, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    15ba:	4a e0       	ldi	r20, 0x0A	; 10
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    15c2:	91 11       	cpse	r25, r1
    15c4:	67 c0       	rjmp	.+206    	; 0x1694 <chvprintf+0x448>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    15c6:	ef 89       	ldd	r30, Y+23	; 0x17
    15c8:	f8 8d       	ldd	r31, Y+24	; 0x18
    15ca:	80 80       	ld	r8, Z
    15cc:	91 80       	ldd	r9, Z+1	; 0x01
    15ce:	a1 2c       	mov	r10, r1
    15d0:	b1 2c       	mov	r11, r1
    15d2:	32 96       	adiw	r30, 0x02	; 2
    15d4:	f8 8f       	std	Y+24, r31	; 0x18
    15d6:	ef 8b       	std	Y+23, r30	; 0x17
    15d8:	24 01       	movw	r4, r8
    15da:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    15dc:	9e 01       	movw	r18, r28
    15de:	24 5f       	subi	r18, 0xF4	; 244
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	3c 8b       	std	Y+20, r19	; 0x14
    15e4:	2b 8b       	std	Y+19, r18	; 0x13
    15e6:	1c 8f       	std	Y+28, r17	; 0x1c
    15e8:	0b 8f       	std	Y+27, r16	; 0x1b
    15ea:	7a 01       	movw	r14, r20
    15ec:	8b 01       	movw	r16, r22
    15ee:	de 8e       	std	Y+30, r13	; 0x1e
    15f0:	cd 8e       	std	Y+29, r12	; 0x1d
  do {
    i = (int)(l % radix);
    15f2:	c5 01       	movw	r24, r10
    15f4:	b4 01       	movw	r22, r8
    15f6:	a8 01       	movw	r20, r16
    15f8:	97 01       	movw	r18, r14
    15fa:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodsi4>
    i += '0';
    15fe:	9b 01       	movw	r18, r22
    1600:	20 5d       	subi	r18, 0xD0	; 208
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    1604:	2a 33       	cpi	r18, 0x3A	; 58
    1606:	31 05       	cpc	r19, r1
    1608:	14 f0       	brlt	.+4      	; 0x160e <chvprintf+0x3c2>
      i += 'A' - '0' - 10;
    160a:	29 5f       	subi	r18, 0xF9	; 249
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    *--q = i;
    160e:	d2 2e       	mov	r13, r18
    1610:	ab 89       	ldd	r26, Y+19	; 0x13
    1612:	bc 89       	ldd	r27, Y+20	; 0x14
    1614:	2e 93       	st	-X, r18
    1616:	bc 8b       	std	Y+20, r27	; 0x14
    1618:	ab 8b       	std	Y+19, r26	; 0x13
    l /= radix;
    161a:	c5 01       	movw	r24, r10
    161c:	b4 01       	movw	r22, r8
    161e:	a8 01       	movw	r20, r16
    1620:	97 01       	movw	r18, r14
    1622:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodsi4>
    1626:	49 01       	movw	r8, r18
    1628:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    162a:	c3 01       	movw	r24, r6
    162c:	b2 01       	movw	r22, r4
    162e:	a8 01       	movw	r20, r16
    1630:	97 01       	movw	r18, r14
    1632:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodsi4>
    1636:	29 01       	movw	r4, r18
    1638:	3a 01       	movw	r6, r20
    163a:	23 2b       	or	r18, r19
    163c:	24 2b       	or	r18, r20
    163e:	25 2b       	or	r18, r21
    1640:	c1 f6       	brne	.-80     	; 0x15f2 <chvprintf+0x3a6>
    1642:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1644:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1646:	fd 2c       	mov	r15, r13
    1648:	cd 8c       	ldd	r12, Y+29	; 0x1d
    164a:	de 8c       	ldd	r13, Y+30	; 0x1e

  i = (int)(p + MAX_FILLER - q);
    164c:	89 89       	ldd	r24, Y+17	; 0x11
    164e:	9a 89       	ldd	r25, Y+18	; 0x12
    1650:	eb 89       	ldd	r30, Y+19	; 0x13
    1652:	fc 89       	ldd	r31, Y+20	; 0x14
    1654:	8e 1b       	sub	r24, r30
    1656:	9f 0b       	sbc	r25, r31
    1658:	de 01       	movw	r26, r28
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	9d 01       	movw	r18, r26
    1660:	28 0f       	add	r18, r24
    1662:	39 1f       	adc	r19, r25
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <chvprintf+0x41c>
    1666:	f1 90       	ld	r15, Z+
  do
    *p++ = *q++;
    1668:	fd 92       	st	X+, r15
  while (--i);
    166a:	a2 17       	cp	r26, r18
    166c:	b3 07       	cpc	r27, r19
    166e:	d9 f7       	brne	.-10     	; 0x1666 <chvprintf+0x41a>
    1670:	4c 01       	movw	r8, r24
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	8f 1a       	sub	r8, r31
    1676:	91 08       	sbc	r9, r1
    1678:	fc 01       	movw	r30, r24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    167a:	9e 01       	movw	r18, r28
    167c:	2f 5f       	subi	r18, 0xFF	; 255
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	79 01       	movw	r14, r18
    1682:	a6 ce       	rjmp	.-692    	; 0x13d0 <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	48 e0       	ldi	r20, 0x08	; 8
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    168e:	99 23       	and	r25, r25
    1690:	09 f4       	brne	.+2      	; 0x1694 <chvprintf+0x448>
    1692:	99 cf       	rjmp	.-206    	; 0x15c6 <chvprintf+0x37a>
        l = va_arg(ap, unsigned long);
    1694:	af 89       	ldd	r26, Y+23	; 0x17
    1696:	b8 8d       	ldd	r27, Y+24	; 0x18
    1698:	8d 90       	ld	r8, X+
    169a:	9d 90       	ld	r9, X+
    169c:	ad 90       	ld	r10, X+
    169e:	bc 90       	ld	r11, X
    16a0:	13 97       	sbiw	r26, 0x03	; 3
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	b8 8f       	std	Y+24, r27	; 0x18
    16a6:	af 8b       	std	Y+23, r26	; 0x17
    16a8:	97 cf       	rjmp	.-210    	; 0x15d8 <chvprintf+0x38c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    16aa:	97 fe       	sbrs	r9, 7
    16ac:	c0 ce       	rjmp	.-640    	; 0x142e <chvprintf+0x1e2>
    16ae:	04 ce       	rjmp	.-1016   	; 0x12b8 <chvprintf+0x6c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    16b0:	e7 59       	subi	r30, 0x97	; 151
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__tablejump2__>
    16b8:	81 2c       	mov	r8, r1
    16ba:	91 2c       	mov	r9, r1
    16bc:	ce ce       	rjmp	.-612    	; 0x145a <chvprintf+0x20e>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    16be:	b9 8d       	ldd	r27, Y+25	; 0x19
    16c0:	b0 33       	cpi	r27, 0x30	; 48
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <chvprintf+0x47a>
    16c4:	98 ce       	rjmp	.-720    	; 0x13f6 <chvprintf+0x1aa>
        streamPut(chp, (uint8_t)*s++);
    16c6:	ef ef       	ldi	r30, 0xFF	; 255
    16c8:	ee 1a       	sub	r14, r30
    16ca:	fe 0a       	sbc	r15, r30
    16cc:	d1 01       	movw	r26, r2
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	06 80       	ldd	r0, Z+6	; 0x06
    16d4:	f7 81       	ldd	r31, Z+7	; 0x07
    16d6:	e0 2d       	mov	r30, r0
    16d8:	6d e2       	ldi	r22, 0x2D	; 45
    16da:	c1 01       	movw	r24, r2
    16dc:	09 95       	icall
        n++;
    16de:	ed 89       	ldd	r30, Y+21	; 0x15
    16e0:	fe 89       	ldd	r31, Y+22	; 0x16
    16e2:	31 96       	adiw	r30, 0x01	; 1
    16e4:	fe 8b       	std	Y+22, r31	; 0x16
    16e6:	ed 8b       	std	Y+21, r30	; 0x15
    16e8:	f1 e0       	ldi	r31, 0x01	; 1
    16ea:	8f 1a       	sub	r8, r31
    16ec:	91 08       	sbc	r9, r1
    16ee:	79 8c       	ldd	r7, Y+25	; 0x19
    16f0:	83 ce       	rjmp	.-762    	; 0x13f8 <chvprintf+0x1ac>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    16f2:	20 81       	ld	r18, Z
    16f4:	22 23       	and	r18, r18
    16f6:	09 f4       	brne	.+2      	; 0x16fa <chvprintf+0x4ae>
    16f8:	95 c0       	rjmp	.+298    	; 0x1824 <chvprintf+0x5d8>
    16fa:	2e ef       	ldi	r18, 0xFE	; 254
    16fc:	3f e7       	ldi	r19, 0x7F	; 127
    16fe:	2a cf       	rjmp	.-428    	; 0x1554 <chvprintf+0x308>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1700:	40 e1       	ldi	r20, 0x10	; 16
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	5c cf       	rjmp	.-328    	; 0x15c2 <chvprintf+0x376>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    170a:	aa 31       	cpi	r26, 0x1A	; 26
    170c:	08 f4       	brcc	.+2      	; 0x1710 <chvprintf+0x4c4>
    170e:	59 c0       	rjmp	.+178    	; 0x17c2 <chvprintf+0x576>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    1710:	ef 89       	ldd	r30, Y+23	; 0x17
    1712:	f8 8d       	ldd	r31, Y+24	; 0x18
    1714:	80 80       	ld	r8, Z
    1716:	91 80       	ldd	r9, Z+1	; 0x01
    1718:	09 2c       	mov	r0, r9
    171a:	00 0c       	add	r0, r0
    171c:	aa 08       	sbc	r10, r10
    171e:	bb 08       	sbc	r11, r11
    1720:	32 96       	adiw	r30, 0x02	; 2
    1722:	f8 8f       	std	Y+24, r31	; 0x18
    1724:	ef 8b       	std	Y+23, r30	; 0x17
      if (l < 0) {
    1726:	b7 fc       	sbrc	r11, 7
    1728:	58 c0       	rjmp	.+176    	; 0x17da <chvprintf+0x58e>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    172a:	ae 01       	movw	r20, r28
    172c:	4f 5f       	subi	r20, 0xFF	; 255
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	5c 8f       	std	Y+28, r21	; 0x1c
    1732:	4b 8f       	std	Y+27, r20	; 0x1b
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1738:	0b 96       	adiw	r24, 0x0b	; 11
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
    173e:	24 01       	movw	r4, r8
    1740:	35 01       	movw	r6, r10
    1742:	1e 8f       	std	Y+30, r17	; 0x1e
    1744:	0d 8f       	std	Y+29, r16	; 0x1d
    1746:	7c 01       	movw	r14, r24
  do {
    i = (int)(l % radix);
    1748:	c5 01       	movw	r24, r10
    174a:	b4 01       	movw	r22, r8
    174c:	2a e0       	ldi	r18, 0x0A	; 10
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	bb d7       	rcall	.+3958   	; 0x26cc <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1756:	60 5d       	subi	r22, 0xD0	; 208
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	16 2f       	mov	r17, r22
    175c:	d7 01       	movw	r26, r14
    175e:	6e 93       	st	-X, r22
    1760:	7d 01       	movw	r14, r26
    l /= radix;
    1762:	49 01       	movw	r8, r18
    1764:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1766:	c3 01       	movw	r24, r6
    1768:	b2 01       	movw	r22, r4
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	ac d7       	rcall	.+3928   	; 0x26cc <__divmodsi4>
    1774:	29 01       	movw	r4, r18
    1776:	3a 01       	movw	r6, r20
    1778:	23 2b       	or	r18, r19
    177a:	24 2b       	or	r18, r20
    177c:	25 2b       	or	r18, r21
    177e:	21 f7       	brne	.-56     	; 0x1748 <chvprintf+0x4fc>
    1780:	c7 01       	movw	r24, r14
    1782:	f1 2e       	mov	r15, r17
    1784:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1786:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1788:	eb 8d       	ldd	r30, Y+27	; 0x1b
    178a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    178c:	dc 01       	movw	r26, r24
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	2b 89       	ldd	r18, Y+19	; 0x13
    1792:	3c 89       	ldd	r19, Y+20	; 0x14
    1794:	28 1b       	sub	r18, r24
    1796:	39 0b       	sbc	r19, r25
    1798:	c9 01       	movw	r24, r18
    179a:	8e 0f       	add	r24, r30
    179c:	9f 1f       	adc	r25, r31
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <chvprintf+0x556>
    17a0:	fd 90       	ld	r15, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    17a2:	f1 92       	st	Z+, r15
  while (--i);
    17a4:	e8 17       	cp	r30, r24
    17a6:	f9 07       	cpc	r31, r25
    17a8:	d9 f7       	brne	.-10     	; 0x17a0 <chvprintf+0x554>
    17aa:	4f 85       	ldd	r20, Y+15	; 0x0f
    17ac:	58 89       	ldd	r21, Y+16	; 0x10
    17ae:	e4 1b       	sub	r30, r20
    17b0:	f5 0b       	sbc	r31, r21
    17b2:	4f 01       	movw	r8, r30
    17b4:	51 e0       	ldi	r21, 0x01	; 1
    17b6:	85 1a       	sub	r8, r21
    17b8:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    17ba:	ce 01       	movw	r24, r28
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	7c 01       	movw	r14, r24
    17c0:	07 ce       	rjmp	.-1010   	; 0x13d0 <chvprintf+0x184>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    17c2:	af 89       	ldd	r26, Y+23	; 0x17
    17c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    17c6:	8d 90       	ld	r8, X+
    17c8:	9d 90       	ld	r9, X+
    17ca:	ad 90       	ld	r10, X+
    17cc:	bc 90       	ld	r11, X
    17ce:	13 97       	sbiw	r26, 0x03	; 3
    17d0:	14 96       	adiw	r26, 0x04	; 4
    17d2:	b8 8f       	std	Y+24, r27	; 0x18
    17d4:	af 8b       	std	Y+23, r26	; 0x17
      else
        l = va_arg(ap, int);
      if (l < 0) {
    17d6:	b7 fe       	sbrs	r11, 7
    17d8:	a8 cf       	rjmp	.-176    	; 0x172a <chvprintf+0x4de>
        *p++ = '-';
    17da:	8d e2       	ldi	r24, 0x2D	; 45
    17dc:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    17de:	b0 94       	com	r11
    17e0:	a0 94       	com	r10
    17e2:	90 94       	com	r9
    17e4:	80 94       	com	r8
    17e6:	81 1c       	adc	r8, r1
    17e8:	91 1c       	adc	r9, r1
    17ea:	a1 1c       	adc	r10, r1
    17ec:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    17ee:	9e 01       	movw	r18, r28
    17f0:	2e 5f       	subi	r18, 0xFE	; 254
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	3c 8f       	std	Y+28, r19	; 0x1c
    17f6:	2b 8f       	std	Y+27, r18	; 0x1b
    17f8:	9d cf       	rjmp	.-198    	; 0x1734 <chvprintf+0x4e8>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    17fa:	40 e1       	ldi	r20, 0x10	; 16
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	48 cf       	rjmp	.-368    	; 0x1694 <chvprintf+0x448>
    1804:	ee 19       	sub	r30, r14
    1806:	ff 09       	sbc	r31, r15
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1808:	4f 01       	movw	r8, r30
    180a:	51 e0       	ldi	r21, 0x01	; 1
    180c:	85 1a       	sub	r8, r21
    180e:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1810:	98 8f       	std	Y+24, r25	; 0x18
    1812:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	89 8f       	std	Y+25, r24	; 0x19
    1818:	db cd       	rjmp	.-1098   	; 0x13d0 <chvprintf+0x184>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    181a:	43 e4       	ldi	r20, 0x43	; 67
    181c:	e4 2e       	mov	r14, r20
    181e:	41 e0       	ldi	r20, 0x01	; 1
    1820:	f4 2e       	mov	r15, r20
    1822:	8d ce       	rjmp	.-742    	; 0x153e <chvprintf+0x2f2>
    1824:	58 01       	movw	r10, r16
    1826:	17 fd       	sbrc	r17, 7
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <chvprintf+0x5fa>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    182a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    182c:	98 8f       	std	Y+24, r25	; 0x18
    182e:	8f 8b       	std	Y+23, r24	; 0x17
    1830:	51 11       	cpse	r21, r1
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <chvprintf+0x5f4>
    1834:	88 24       	eor	r8, r8
    1836:	8a 94       	dec	r8
    1838:	98 2c       	mov	r9, r8
    183a:	80 e2       	ldi	r24, 0x20	; 32
    183c:	89 8f       	std	Y+25, r24	; 0x19
    183e:	d0 cd       	rjmp	.-1120   	; 0x13e0 <chvprintf+0x194>
    1840:	f0 e2       	ldi	r31, 0x20	; 32
    1842:	f9 8f       	std	Y+25, r31	; 0x19
    1844:	0f ce       	rjmp	.-994    	; 0x1464 <chvprintf+0x218>
    1846:	a1 2c       	mov	r10, r1
    1848:	b1 2c       	mov	r11, r1
    184a:	ef cf       	rjmp	.-34     	; 0x182a <chvprintf+0x5de>

0000184c <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1854:	ae 01       	movw	r20, r28
    1856:	47 5f       	subi	r20, 0xF7	; 247
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	f4 dc       	rcall	.-1560   	; 0x124c <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <starting>:


/* Functions*/
void starting(){
  // Output
  palSetPadMode(IOPORT2, SECA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    186a:	46 e0       	ldi	r20, 0x06	; 6
    186c:	60 e2       	ldi	r22, 0x20	; 32
    186e:	83 e2       	ldi	r24, 0x23	; 35
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	82 db       	rcall	.-2300   	; 0xf78 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1874:	46 e0       	ldi	r20, 0x06	; 6
    1876:	60 e1       	ldi	r22, 0x10	; 16
    1878:	83 e2       	ldi	r24, 0x23	; 35
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	7d db       	rcall	.-2310   	; 0xf78 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
    187e:	46 e0       	ldi	r20, 0x06	; 6
    1880:	68 e0       	ldi	r22, 0x08	; 8
    1882:	83 e2       	ldi	r24, 0x23	; 35
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	78 db       	rcall	.-2320   	; 0xf78 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1888:	46 e0       	ldi	r20, 0x06	; 6
    188a:	64 e0       	ldi	r22, 0x04	; 4
    188c:	83 e2       	ldi	r24, 0x23	; 35
    188e:	90 e0       	ldi	r25, 0x00	; 0
  palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1890:	73 db       	rcall	.-2330   	; 0xf78 <_pal_lld_setgroupmode>
    1892:	46 e0       	ldi	r20, 0x06	; 6
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	6e db       	rcall	.-2340   	; 0xf78 <_pal_lld_setgroupmode>
    189c:	46 e0       	ldi	r20, 0x06	; 6
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	69 db       	rcall	.-2350   	; 0xf78 <_pal_lld_setgroupmode>
    18a6:	46 e0       	ldi	r20, 0x06	; 6
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	64 db       	rcall	.-2360   	; 0xf78 <_pal_lld_setgroupmode>
    18b0:	46 e0       	ldi	r20, 0x06	; 6
    18b2:	62 e0       	ldi	r22, 0x02	; 2
    18b4:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	5f db       	rcall	.-2370   	; 0xf78 <_pal_lld_setgroupmode>
    18ba:	46 e0       	ldi	r20, 0x06	; 6
    18bc:	60 e8       	ldi	r22, 0x80	; 128


  // Input
  palSetPadMode(IOPORT4, EMER, PAL_MODE_INPUT);
    18be:	89 e2       	ldi	r24, 0x29	; 41
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	5a db       	rcall	.-2380   	; 0xf78 <_pal_lld_setgroupmode>
    18c4:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	89 e2       	ldi	r24, 0x29	; 41
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	55 db       	rcall	.-2390   	; 0xf78 <_pal_lld_setgroupmode>
    18ce:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
    18d0:	68 e0       	ldi	r22, 0x08	; 8
    18d2:	89 e2       	ldi	r24, 0x29	; 41
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	50 db       	rcall	.-2400   	; 0xf78 <_pal_lld_setgroupmode>
    18d8:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
    18da:	60 e1       	ldi	r22, 0x10	; 16
    18dc:	89 e2       	ldi	r24, 0x29	; 41
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	4b db       	rcall	.-2410   	; 0xf78 <_pal_lld_setgroupmode>
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	60 e2       	ldi	r22, 0x20	; 32
  palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
    18e6:	89 e2       	ldi	r24, 0x29	; 41
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	46 db       	rcall	.-2420   	; 0xf78 <_pal_lld_setgroupmode>
    18ec:	42 e0       	ldi	r20, 0x02	; 2
    18ee:	60 e4       	ldi	r22, 0x40	; 64
    18f0:	89 e2       	ldi	r24, 0x29	; 41

  // Start
  palClearPad(IOPORT2, SECA_ID);
    18f2:	90 e0       	ldi	r25, 0x00	; 0
  palClearPad(IOPORT2, ENCHE_ID);
    18f4:	41 db       	rcall	.-2430   	; 0xf78 <_pal_lld_setgroupmode>
  palClearPad(IOPORT2, CENTRI_ID);
  palClearPad(IOPORT2, ENXAGUE_ID);
  palClearPad(IOPORT2, LAVAGEM_ID);
    18f6:	2d 98       	cbi	0x05, 5	; 5
  palClearPad(IOPORT2, MOLHO_ID);
    18f8:	2c 98       	cbi	0x05, 4	; 5
  palSetPad(IOPORT3, MOTOR_DIR);
    18fa:	2b 98       	cbi	0x05, 3	; 5
  palSetPad(IOPORT3, MOTOR_ESQ);
    18fc:	2a 98       	cbi	0x05, 2	; 5
  palClearPad(IOPORT4, PARADA_ID);
    18fe:	29 98       	cbi	0x05, 1	; 5

  chprintf((BaseSequentialStream *)&SD1, "pinos iniciados \n\r");
    1900:	28 98       	cbi	0x05, 0	; 5
    1902:	40 9a       	sbi	0x08, 0	; 8
    1904:	41 9a       	sbi	0x08, 1	; 8
    1906:	5f 98       	cbi	0x0b, 7	; 11
    1908:	8a e4       	ldi	r24, 0x4A	; 74
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	86 e6       	ldi	r24, 0x66	; 102
    1912:	94 e0       	ldi	r25, 0x04	; 4

}
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	99 df       	rcall	.-206    	; 0x184c <chprintf>
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	08 95       	ret

00001924 <spinning>:


/* Spin Function */

void spinning(int timer) {
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    193c:	f8 94       	cli
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
    193e:	80 90 37 04 	lds	r8, 0x0437	; 0x800437 <ch+0x13>
    1942:	90 90 38 04 	lds	r9, 0x0438	; 0x800438 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1946:	78 94       	sei
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1948:	28 e0       	ldi	r18, 0x08	; 8
    194a:	3d e3       	ldi	r19, 0x3D	; 61
    194c:	dc 01       	movw	r26, r24
    194e:	e0 d6       	rcall	.+3520   	; 0x2710 <__usmulhisi3>
    1950:	69 51       	subi	r22, 0x19	; 25
    1952:	7c 4f       	sbci	r23, 0xFC	; 252
    1954:	8f 4f       	sbci	r24, 0xFF	; 255
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	28 ee       	ldi	r18, 0xE8	; 232
    195a:	33 e0       	ldi	r19, 0x03	; 3
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	93 d6       	rcall	.+3366   	; 0x2688 <__udivmodsi4>
    1962:	89 01       	movw	r16, r18
void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
  systime_t ls_report,init_time;

  ls_report = agora;
    1964:	94 01       	movw	r18, r8

/* Spin Function */

void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
    1966:	80 e0       	ldi	r24, 0x00	; 0
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1968:	96 e7       	ldi	r25, 0x76	; 118
    196a:	a9 2e       	mov	r10, r25
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	b9 2e       	mov	r11, r25
    1970:	46 e6       	ldi	r20, 0x66	; 102
    1972:	e4 2e       	mov	r14, r20
    1974:	44 e0       	ldi	r20, 0x04	; 4
    1976:	f4 2e       	mov	r15, r20
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1978:	5d e5       	ldi	r21, 0x5D	; 93
    197a:	c5 2e       	mov	r12, r21
    197c:	51 e0       	ldi	r21, 0x01	; 1
    197e:	d5 2e       	mov	r13, r21
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1980:	f8 94       	cli
    1982:	c0 91 37 04 	lds	r28, 0x0437	; 0x800437 <ch+0x13>
    1986:	d0 91 38 04 	lds	r29, 0x0438	; 0x800438 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    198a:	78 94       	sei

  ls_report = agora;
  init_time = agora;
  while(1){
    agora = chVTGetSystemTime();
    switch(rd){
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	b1 f0       	breq	.+44     	; 0x19bc <spinning+0x98>
      case(GIRA_R):
      // palClearPad(IOPORT3, MOTOR_DIR);
        if(lavar == EMERGENCIA){
    1990:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <lavar>
    1994:	85 30       	cpi	r24, 0x05	; 5
    1996:	89 f1       	breq	.+98     	; 0x19fa <spinning+0xd6>
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
    1998:	40 98       	cbi	0x08, 0	; 8
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    199a:	ce 01       	movw	r24, r28
    199c:	82 1b       	sub	r24, r18
    199e:	93 0b       	sbc	r25, r19
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	9d 43       	sbci	r25, 0x3D	; 61
    19a4:	b8 f5       	brcc	.+110    	; 0x1a14 <spinning+0xf0>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
          ls_report = agora;
          rd = GIRA_L;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    19a8:	c8 19       	sub	r28, r8
    19aa:	d9 09       	sbc	r29, r9
    19ac:	0c 17       	cp	r16, r28
    19ae:	1d 07       	cpc	r17, r29
    19b0:	38 f7       	brcc	.-50     	; 0x1980 <spinning+0x5c>
          // printf("Fim do Giro\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    19b2:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    19b4:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
    19b6:	8c e6       	ldi	r24, 0x6C	; 108
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <spinning+0xc0>
          return;
        }
        break;
      case(GIRA_L):
      palClearPad(IOPORT3, MOTOR_ESQ);
    19bc:	41 98       	cbi	0x08, 1	; 8
        if(lavar == EMERGENCIA){
    19be:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <lavar>
    19c2:	95 30       	cpi	r25, 0x05	; 5
    19c4:	d1 f0       	breq	.+52     	; 0x19fa <spinning+0xd6>
          return;
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    19c6:	ae 01       	movw	r20, r28
    19c8:	42 1b       	sub	r20, r18
    19ca:	53 0b       	sbc	r21, r19
    19cc:	48 30       	cpi	r20, 0x08	; 8
    19ce:	5d 43       	sbci	r21, 0x3D	; 61
    19d0:	70 f5       	brcc	.+92     	; 0x1a2e <spinning+0x10a>
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    19d2:	c8 19       	sub	r28, r8
    19d4:	d9 09       	sbc	r29, r9
    19d6:	0c 17       	cp	r16, r28
    19d8:	1d 07       	cpc	r17, r29
    19da:	90 f6       	brcc	.-92     	; 0x1980 <spinning+0x5c>
          // printf("saindo\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    19dc:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    19de:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "Fim Giro\n\r");
    19e0:	85 e8       	ldi	r24, 0x85	; 133
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	9f 93       	push	r25
    19e6:	8f 93       	push	r24
    19e8:	86 e6       	ldi	r24, 0x66	; 102
    19ea:	94 e0       	ldi	r25, 0x04	; 4
    19ec:	9f 93       	push	r25
    19ee:	8f 93       	push	r24
    19f0:	2d df       	rcall	.-422    	; 0x184c <chprintf>
          return;
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
          }
        break;
        }
     }
  }
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	df 90       	pop	r13
    1a08:	cf 90       	pop	r12
    1a0a:	bf 90       	pop	r11
    1a0c:	af 90       	pop	r10
    1a0e:	9f 90       	pop	r9
    1a10:	8f 90       	pop	r8
    1a12:	08 95       	ret
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1a14:	df 92       	push	r13
    1a16:	cf 92       	push	r12
    1a18:	ff 92       	push	r15
    1a1a:	ef 92       	push	r14
    1a1c:	17 df       	rcall	.-466    	; 0x184c <chprintf>
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
    1a1e:	40 9a       	sbi	0x08, 0	; 8
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	9e 01       	movw	r18, r28
          ls_report = agora;
          rd = GIRA_L;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1a2c:	bd cf       	rjmp	.-134    	; 0x19a8 <spinning+0x84>
    1a2e:	bf 92       	push	r11
    1a30:	af 92       	push	r10
    1a32:	ff 92       	push	r15
    1a34:	ef 92       	push	r14
          palSetPad(IOPORT3, MOTOR_ESQ);
    1a36:	0a df       	rcall	.-492    	; 0x184c <chprintf>
    1a38:	41 9a       	sbi	0x08, 1	; 8
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
          ls_report = agora;
          rd = GIRA_R;
    1a42:	9e 01       	movw	r18, r28
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	c5 cf       	rjmp	.-118    	; 0x19d2 <spinning+0xae>

00001a48 <lavar_maquina>:
     }
  }

/* Main Machine */

void lavar_maquina(){
    1a48:	2f 92       	push	r2
    1a4a:	3f 92       	push	r3
    1a4c:	4f 92       	push	r4
    1a4e:	5f 92       	push	r5
    1a50:	6f 92       	push	r6
    1a52:	7f 92       	push	r7
    1a54:	8f 92       	push	r8
    1a56:	9f 92       	push	r9
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
  // int t_cheio;
  // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
  switch(lavar){
    1a6c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <lavar>
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <lavar_maquina+0x2e>
    1a74:	a9 c1       	rjmp	.+850    	; 0x1dc8 <lavar_maquina+0x380>
    1a76:	48 f0       	brcs	.+18     	; 0x1a8a <lavar_maquina+0x42>
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <lavar_maquina+0x36>
    1a7c:	75 c0       	rjmp	.+234    	; 0x1b68 <lavar_maquina+0x120>
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <lavar_maquina+0x3a>
    1a80:	7e c1       	rjmp	.+764    	; 0x1d7e <lavar_maquina+0x336>
    1a82:	85 30       	cpi	r24, 0x05	; 5
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <lavar_maquina+0x40>
    1a86:	5d c0       	rjmp	.+186    	; 0x1b42 <lavar_maquina+0xfa>
    1a88:	ff cf       	rjmp	.-2      	; 0x1a88 <lavar_maquina+0x40>
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <lavar_maquina+0x48>
    1a8e:	a4 c0       	rjmp	.+328    	; 0x1bd8 <lavar_maquina+0x190>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <lavar_maquina+0x4e>
    1a94:	56 c0       	rjmp	.+172    	; 0x1b42 <lavar_maquina+0xfa>


    case(MOLHO):
    // printf("Inicio Molho\n");
    // chprintf((BaseSequentialStream *)&SD1, "Inicio MOLHO \n\r");
    palSetPad(IOPORT2, MOLHO_ID);
    1a96:	28 9a       	sbi	0x05, 0	; 5
    palClearPad(IOPORT2, LAVAGEM_ID);
    1a98:	29 98       	cbi	0x05, 1	; 5
    palClearPad(IOPORT2, ENXAGUE_ID);
    1a9a:	2a 98       	cbi	0x05, 2	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1a9c:	2b 98       	cbi	0x05, 3	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1a9e:	5f 98       	cbi	0x0b, 7	; 11

      switch(fsm_ml.ml){
    1aa0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <fsm_ml>
    1aa4:	86 30       	cpi	r24, 0x06	; 6
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <lavar_maquina+0x62>
    1aa8:	01 c2       	rjmp	.+1026   	; 0x1eac <lavar_maquina+0x464>
    1aaa:	87 30       	cpi	r24, 0x07	; 7
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <lavar_maquina+0x68>
    1aae:	49 c0       	rjmp	.+146    	; 0x1b42 <lavar_maquina+0xfa>
        case(RODAR_ML):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado RODAR_ML\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
    1ab0:	81 e4       	ldi	r24, 0x41	; 65
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	c6 e6       	ldi	r28, 0x66	; 102
    1aba:	d4 e0       	ldi	r29, 0x04	; 4
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	c5 de       	rcall	.-630    	; 0x184c <chprintf>
          spinning(fsm_ml.t_giro);
    1ac2:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <fsm_ml+0x1>
    1ac6:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <fsm_ml+0x2>
    1aca:	2c df       	rcall	.-424    	; 0x1924 <spinning>
          lavar = LAVAGEM;
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
  st->t_giro = 4000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1ad2:	88 e0       	ldi	r24, 0x08	; 8
    1ad4:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <fsm_lvg>
  st->turns = 0;
    1ad8:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <fsm_lvg+0x6>
    1adc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <fsm_lvg+0x5>
  st->t_espera = 2000;
    1ae0:	80 ed       	ldi	r24, 0xD0	; 208
    1ae2:	97 e0       	ldi	r25, 0x07	; 7
    1ae4:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <fsm_lvg+0x8>
    1ae8:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <fsm_lvg+0x7>
  st->t_giros = 4000;
    1aec:	80 ea       	ldi	r24, 0xA0	; 160
    1aee:	9f e0       	ldi	r25, 0x0F	; 15
    1af0:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <fsm_lvg+0xa>
    1af4:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <fsm_lvg+0x9>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1af8:	f8 94       	cli
    1afa:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
    1afe:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1b02:	78 94       	sei
  st->instante = chVTGetSystemTime();
    1b04:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <fsm_lvg+0x2>
    1b08:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <fsm_lvg+0x1>
  st->ul_espera = st->instante;
    1b0c:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <fsm_lvg+0x4>
    1b10:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
          spinning(fsm_ml.t_giro);
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          // printf("Fim Molho\n");
          chprintf((BaseSequentialStream *)&SD1, "FIM Molho\n\r");
    1b14:	8f e4       	ldi	r24, 0x4F	; 79
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	9f 93       	push	r25
    1b1a:	8f 93       	push	r24
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	95 de       	rcall	.-726    	; 0x184c <chprintf>
          palClearPad(IOPORT2, MOLHO_ID);
    1b22:	28 98       	cbi	0x05, 0	; 5
          chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
    1b24:	8b e5       	ldi	r24, 0x5B	; 91
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	9f 93       	push	r25
    1b2a:	8f 93       	push	r24
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	8d de       	rcall	.-742    	; 0x184c <chprintf>
          // printf("Inicio LAVAGEM\n");
          break;
    1b32:	8d b7       	in	r24, 0x3d	; 61
    1b34:	9e b7       	in	r25, 0x3e	; 62
    1b36:	0c 96       	adiw	r24, 0x0c	; 12
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	9e bf       	out	0x3e, r25	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	8d bf       	out	0x3d, r24	; 61
      // printf("PORTA ABERTA. ERRO !!\n");
      while(1);

    break; // break de emergência
  } // fim switch máquina principal
} // fim função da máquina principal.
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	bf 90       	pop	r11
    1b54:	af 90       	pop	r10
    1b56:	9f 90       	pop	r9
    1b58:	8f 90       	pop	r8
    1b5a:	7f 90       	pop	r7
    1b5c:	6f 90       	pop	r6
    1b5e:	5f 90       	pop	r5
    1b60:	4f 90       	pop	r4
    1b62:	3f 90       	pop	r3
    1b64:	2f 90       	pop	r2
    1b66:	08 95       	ret
      break;


      case(CENTRIFUGA):
      // printf("Inicio Centrifuga\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1b68:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, LAVAGEM_ID);
    1b6a:	29 98       	cbi	0x05, 1	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1b6c:	2a 98       	cbi	0x05, 2	; 5
      palSetPad(IOPORT2, CENTRI_ID);
    1b6e:	2b 9a       	sbi	0x05, 3	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1b70:	5f 98       	cbi	0x0b, 7	; 11

        switch(fsm_cen.cen){
    1b72:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <fsm_cen>
    1b76:	8e 30       	cpi	r24, 0x0E	; 14
    1b78:	21 f7       	brne	.-56     	; 0x1b42 <lavar_maquina+0xfa>
          case(GIRA_R_CENTRI):
            if(lavar == EMERGENCIA){
              break;
            }
            palClearPad(IOPORT3, MOTOR_DIR);
    1b7a:	40 98       	cbi	0x08, 0	; 8
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1b7c:	f8 94       	cli
    1b7e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
    1b82:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1b86:	78 94       	sei
            // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
            fsm_cen.tempo = chVTGetSystemTime();
    1b88:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <fsm_cen+0x2>
    1b8c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <fsm_cen+0x1>
            // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
    1b90:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <fsm_cen+0x5>
    1b94:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <fsm_cen+0x6>
    1b98:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <fsm_cen+0x3>
    1b9c:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <fsm_cen+0x4>
    1ba0:	ec 01       	movw	r28, r24
    1ba2:	c2 1b       	sub	r28, r18
    1ba4:	d3 0b       	sbc	r29, r19
    1ba6:	28 e0       	ldi	r18, 0x08	; 8
    1ba8:	3d e3       	ldi	r19, 0x3D	; 61
    1baa:	b2 d5       	rcall	.+2916   	; 0x2710 <__usmulhisi3>
    1bac:	69 51       	subi	r22, 0x19	; 25
    1bae:	7c 4f       	sbci	r23, 0xFC	; 252
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	28 ee       	ldi	r18, 0xE8	; 232
    1bb6:	33 e0       	ldi	r19, 0x03	; 3
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	65 d5       	rcall	.+2762   	; 0x2688 <__udivmodsi4>
    1bbe:	2c 17       	cp	r18, r28
    1bc0:	3d 07       	cpc	r19, r29
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <lavar_maquina+0x17e>
    1bc4:	be cf       	rjmp	.-132    	; 0x1b42 <lavar_maquina+0xfa>
              palSetPad(IOPORT3, MOTOR_DIR);
    1bc6:	40 9a       	sbi	0x08, 0	; 8
              lavar = PARADA;
    1bc8:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    1bcc:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <fsm_prd+0x1>
    1bd0:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <fsm_prd>
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
              palSetPad(IOPORT3, MOTOR_DIR);
              lavar = PARADA;
              fsm_parada_init(&fsm_prd);
              palClearPad(IOPORT2, CENTRI_ID);
    1bd4:	2b 98       	cbi	0x05, 3	; 5
    1bd6:	b5 cf       	rjmp	.-150    	; 0x1b42 <lavar_maquina+0xfa>
      if(lavar == EMERGENCIA){
        break;
      } // verifcar emergência
      // printf("Inicio da Parada\n");
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
    1bd8:	80 e9       	ldi	r24, 0x90	; 144
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	9f 93       	push	r25
    1bde:	8f 93       	push	r24
    1be0:	c6 e6       	ldi	r28, 0x66	; 102
    1be2:	d4 e0       	ldi	r29, 0x04	; 4
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
    1be8:	31 de       	rcall	.-926    	; 0x184c <chprintf>
    1bea:	8d ea       	ldi	r24, 0xAD	; 173
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	9f 93       	push	r25
    1bf0:	8f 93       	push	r24
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	2a de       	rcall	.-940    	; 0x184c <chprintf>
    1bf8:	8d b7       	in	r24, 0x3d	; 61
    1bfa:	9e b7       	in	r25, 0x3e	; 62
    1bfc:	08 96       	adiw	r24, 0x08	; 8
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	9e bf       	out	0x3e, r25	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	8d bf       	out	0x3d, r24	; 61
static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
  st->tempo = chVTGetSystemTime();
  st->ul_centri = st->tempo;
  st->t_centri = 4000;
    1c08:	00 ea       	ldi	r16, 0xA0	; 160
    1c0a:	1f e0       	ldi	r17, 0x0F	; 15
        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	48 2e       	mov	r4, r24
    1c10:	51 2c       	mov	r5, r1
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
    1c12:	93 ef       	ldi	r25, 0xF3	; 243
    1c14:	29 2e       	mov	r2, r25
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	39 2e       	mov	r3, r25

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          lavar = ENXAGUE;
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
    1c1a:	22 e0       	ldi	r18, 0x02	; 2
    1c1c:	62 2e       	mov	r6, r18
    1c1e:	71 2c       	mov	r7, r1
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
    1c20:	3b ed       	ldi	r19, 0xDB	; 219
    1c22:	83 2e       	mov	r8, r19
    1c24:	31 e0       	ldi	r19, 0x01	; 1
    1c26:	93 2e       	mov	r9, r19

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
  st->turns = 0;
  st->t_espera = 2000;
    1c28:	40 ed       	ldi	r20, 0xD0	; 208
    1c2a:	a4 2e       	mov	r10, r20
    1c2c:	47 e0       	ldi	r20, 0x07	; 7
    1c2e:	b4 2e       	mov	r11, r20
        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    1c30:	cc 24       	eor	r12, r12
    1c32:	c3 94       	inc	r12
    1c34:	d1 2c       	mov	r13, r1
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial:Lavagem \n\r");
    1c36:	63 ec       	ldi	r22, 0xC3	; 195
    1c38:	e6 2e       	mov	r14, r22
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	f6 2e       	mov	r15, r22
    1c3e:	13 c0       	rjmp	.+38     	; 0x1c66 <lavar_maquina+0x21e>
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
          palSetPad(IOPORT4, PARADA_ID);
    1c40:	5f 9a       	sbi	0x0b, 7	; 11
          palSetPad(IOPORT2, MOLHO_ID);
    1c42:	28 9a       	sbi	0x05, 0	; 5
          palSetPad(IOPORT2, LAVAGEM_ID);
    1c44:	29 9a       	sbi	0x05, 1	; 5
          palSetPad(IOPORT2, ENXAGUE_ID);
    1c46:	2a 9a       	sbi	0x05, 2	; 5
          palSetPad(IOPORT2, CENTRI_ID);
    1c48:	2b 9a       	sbi	0x05, 3	; 5
          lavar = MOLHO;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
  st->select_init = 0;
}

static void fsm_molho_init(fsm_molho_s *st)
{
  st->ml = ENCHER_ML;
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <fsm_ml>
  st->t_giro = 4000;
    1c56:	10 93 bc 04 	sts	0x04BC, r17	; 0x8004bc <fsm_ml+0x2>
    1c5a:	00 93 bb 04 	sts	0x04BB, r16	; 0x8004bb <fsm_ml+0x1>
          palSetPad(IOPORT2, CENTRI_ID);
          lavar = MOLHO;
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c5e:	4e 99       	sbic	0x09, 6	; 9
    1c60:	ee c0       	rjmp	.+476    	; 0x1e3e <lavar_maquina+0x3f6>
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
          fsm_prd.select_init = 0;
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
    1c62:	4d 99       	sbic	0x09, 5	; 9
    1c64:	57 c0       	rjmp	.+174    	; 0x1d14 <lavar_maquina+0x2cc>
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
    1c66:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <fsm_prd>
    1c6a:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <fsm_prd+0x1>
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	39 f3       	breq	.-50     	; 0x1c40 <lavar_maquina+0x1f8>
          fsm_prd.select_init = 1;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial:Lavagem \n\r");
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <lavar_maquina+0x232>
    1c78:	5f c0       	rjmp	.+190    	; 0x1d38 <lavar_maquina+0x2f0>
          fsm_prd.select_init = 2;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
          palClearPad(IOPORT2, LAVAGEM_ID);

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	81 f5       	brne	.+96     	; 0x1ce0 <lavar_maquina+0x298>
    1c80:	4e 9b       	sbis	0x09, 6	; 9
    1c82:	ef cf       	rjmp	.-34     	; 0x1c62 <lavar_maquina+0x21a>
          chThdSleepMilliseconds(20); // Debouncing time
    1c84:	89 e3       	ldi	r24, 0x39	; 57
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          lavar = CENTRIFUGA;
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
  st->t_giro = 4000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    1c92:	9e e0       	ldi	r25, 0x0E	; 14
    1c94:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <fsm_cen>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1c98:	f8 94       	cli
    1c9a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
    1c9e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1ca2:	78 94       	sei
  st->tempo = chVTGetSystemTime();
    1ca4:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <fsm_cen+0x2>
    1ca8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <fsm_cen+0x1>
  st->ul_centri = st->tempo;
    1cac:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <fsm_cen+0x4>
    1cb0:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <fsm_cen+0x3>
  st->t_centri = 4000;
    1cb4:	10 93 c8 04 	sts	0x04C8, r17	; 0x8004c8 <fsm_cen+0x6>
    1cb8:	00 93 c7 04 	sts	0x04C7, r16	; 0x8004c7 <fsm_cen+0x5>
        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1cbc:	50 92 c1 04 	sts	0x04C1, r5	; 0x8004c1 <fsm_prd+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
    1cc0:	40 92 c0 04 	sts	0x04C0, r4	; 0x8004c0 <fsm_prd>
    1cc4:	3f 92       	push	r3
    1cc6:	2f 92       	push	r2
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
          palClearPad(IOPORT2, ENXAGUE_ID);
    1ccc:	bf dd       	rcall	.-1154   	; 0x184c <chprintf>
    1cce:	2a 98       	cbi	0x05, 2	; 5
    1cd0:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <fsm_prd>
    1cd4:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <fsm_prd+0x1>
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
          // printf("Inicio ENXAGUE\n");
        }
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1cde:	0f 90       	pop	r0
    1ce0:	03 97       	sbiw	r24, 0x03	; 3
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <lavar_maquina+0x29e>
    1ce4:	be cf       	rjmp	.-132    	; 0x1c62 <lavar_maquina+0x21a>
    1ce6:	4e 9b       	sbis	0x09, 6	; 9
          chThdSleepMilliseconds(20); // Debouncing time
    1ce8:	bc cf       	rjmp	.-136    	; 0x1c62 <lavar_maquina+0x21a>
    1cea:	89 e3       	ldi	r24, 0x39	; 57
    1cec:	91 e0       	ldi	r25, 0x01	; 1
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
    1cee:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
    1cf2:	8d ea       	ldi	r24, 0xAD	; 173
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	9f 93       	push	r25
    1cf8:	8f 93       	push	r24
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
          fsm_prd.select_init = 0;
    1cfe:	a6 dd       	rcall	.-1204   	; 0x184c <chprintf>
    1d00:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <fsm_prd+0x1>
    1d04:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <fsm_prd>
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
    1d0e:	0f 90       	pop	r0
    1d10:	4d 9b       	sbis	0x09, 5	; 9
          chThdSleepMilliseconds(20); // Debouncing time
    1d12:	a9 cf       	rjmp	.-174    	; 0x1c66 <lavar_maquina+0x21e>
    1d14:	89 e3       	ldi	r24, 0x39	; 57
    1d16:	91 e0       	ldi	r25, 0x01	; 1
          chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
    1d18:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    1d1c:	8e e0       	ldi	r24, 0x0E	; 14
    1d1e:	92 e0       	ldi	r25, 0x02	; 2
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	86 e6       	ldi	r24, 0x66	; 102
    1d26:	94 e0       	ldi	r25, 0x04	; 4
    1d28:	9f 93       	push	r25
    1d2a:	8f 93       	push	r24
    1d2c:	8f dd       	rcall	.-1250   	; 0x184c <chprintf>
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
          fsm_prd.select_init = 1;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial:Lavagem \n\r");
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1d36:	05 cf       	rjmp	.-502    	; 0x1b42 <lavar_maquina+0xfa>
    1d38:	4e 9b       	sbis	0x09, 6	; 9
          chThdSleepMilliseconds(20); // Debouncing time
    1d3a:	93 cf       	rjmp	.-218    	; 0x1c62 <lavar_maquina+0x21a>
    1d3c:	89 e3       	ldi	r24, 0x39	; 57
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          lavar = ENXAGUE;
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1d4a:	8b e0       	ldi	r24, 0x0B	; 11
    1d4c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <fsm_exg>
  st->t_giro = 4000;
    1d50:	10 93 bf 04 	sts	0x04BF, r17	; 0x8004bf <fsm_exg+0x2>

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          lavar = ENXAGUE;
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
    1d54:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <fsm_exg+0x1>
    1d58:	70 92 c1 04 	sts	0x04C1, r7	; 0x8004c1 <fsm_prd+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
    1d5c:	60 92 c0 04 	sts	0x04C0, r6	; 0x8004c0 <fsm_prd>
    1d60:	9f 92       	push	r9
    1d62:	8f 92       	push	r8
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
          palClearPad(IOPORT2, LAVAGEM_ID);
    1d68:	71 dd       	rcall	.-1310   	; 0x184c <chprintf>
    1d6a:	29 98       	cbi	0x05, 1	; 5
    1d6c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <fsm_prd>
    1d70:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <fsm_prd+0x1>
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
          } // fim switch LAVAGEM
          break;


    case(ENXAGUE):
    palClearPad(IOPORT2, MOLHO_ID);
    1d7c:	7e cf       	rjmp	.-260    	; 0x1c7a <lavar_maquina+0x232>
    palClearPad(IOPORT2, LAVAGEM_ID);
    1d7e:	28 98       	cbi	0x05, 0	; 5
    palSetPad(IOPORT2, ENXAGUE_ID);
    1d80:	29 98       	cbi	0x05, 1	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1d82:	2a 9a       	sbi	0x05, 2	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1d84:	2b 98       	cbi	0x05, 3	; 5

      switch(fsm_exg.exg){
    1d86:	5f 98       	cbi	0x0b, 7	; 11
    1d88:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <fsm_exg>
    1d8c:	8c 30       	cpi	r24, 0x0C	; 12
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <lavar_maquina+0x34a>
    1d90:	17 c1       	rjmp	.+558    	; 0x1fc0 <lavar_maquina+0x578>
    1d92:	8d 30       	cpi	r24, 0x0D	; 13
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <lavar_maquina+0x350>
    1d96:	2a c1       	rjmp	.+596    	; 0x1fec <lavar_maquina+0x5a4>
    1d98:	8b 30       	cpi	r24, 0x0B	; 11
        case(ENCHER_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado ENCHER_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Enche Enxague\n\r");
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <lavar_maquina+0x356>
    1d9c:	d2 ce       	rjmp	.-604    	; 0x1b42 <lavar_maquina+0xfa>
    1d9e:	8f eb       	ldi	r24, 0xBF	; 191
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	86 e6       	ldi	r24, 0x66	; 102
    1da8:	94 e0       	ldi	r25, 0x04	; 4
    1daa:	9f 93       	push	r25
    1dac:	8f 93       	push	r24
          palSetPad(IOPORT2, ENCHE_ID);
    1dae:	4e dd       	rcall	.-1380   	; 0x184c <chprintf>
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    1db0:	2c 9a       	sbi	0x05, 4	; 5
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	4c 9b       	sbis	0x09, 4	; 9
            // printf("Sensor Cheio: ON\n");
            palClearPad(IOPORT2, ENCHE_ID);
    1dbc:	c2 ce       	rjmp	.-636    	; 0x1b42 <lavar_maquina+0xfa>
            fsm_exg.exg = RODAR_EXG;
    1dbe:	2c 98       	cbi	0x05, 4	; 5
    1dc0:	8c e0       	ldi	r24, 0x0C	; 12
    1dc2:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <fsm_exg>
      break;


    case(LAVAGEM):
      // printf("Inicio Lavagem\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1dc6:	bd ce       	rjmp	.-646    	; 0x1b42 <lavar_maquina+0xfa>
      palSetPad(IOPORT2, LAVAGEM_ID);
    1dc8:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1dca:	29 9a       	sbi	0x05, 1	; 5
      palClearPad(IOPORT2, CENTRI_ID);
    1dcc:	2a 98       	cbi	0x05, 2	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1dce:	2b 98       	cbi	0x05, 3	; 5

      switch(fsm_lvg.lvg){
    1dd0:	5f 98       	cbi	0x0b, 7	; 11
    1dd2:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <fsm_lvg>
    1dd6:	89 30       	cpi	r24, 0x09	; 9
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <lavar_maquina+0x394>
    1dda:	b2 c0       	rjmp	.+356    	; 0x1f40 <lavar_maquina+0x4f8>
    1ddc:	8a 30       	cpi	r24, 0x0A	; 10
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <lavar_maquina+0x39a>
    1de0:	85 c0       	rjmp	.+266    	; 0x1eec <lavar_maquina+0x4a4>
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG Super LAVAGEM - estado RODAR_LVG\n");
          // printf("Inicio giros Lavagem\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Lavagem\n\r");
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <lavar_maquina+0x3a0>
    1de6:	ad ce       	rjmp	.-678    	; 0x1b42 <lavar_maquina+0xfa>
    1de8:	8c e6       	ldi	r24, 0x6C	; 108
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	9f 93       	push	r25
    1dee:	8f 93       	push	r24
    1df0:	c6 e6       	ldi	r28, 0x66	; 102
    1df2:	d4 e0       	ldi	r29, 0x04	; 4
          spinning(fsm_lvg.t_giros);
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	29 dd       	rcall	.-1454   	; 0x184c <chprintf>
    1dfa:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <fsm_lvg+0x9>
    1dfe:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <fsm_lvg+0xa>
    1e02:	90 dd       	rcall	.-1248   	; 0x1924 <spinning>
    1e04:	f8 94       	cli
    1e06:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
          fsm_lvg.ul_espera = chVTGetSystemTime();
    1e0a:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
    1e0e:	78 94       	sei
    1e10:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <fsm_lvg+0x4>
          fsm_lvg.lvg = ESPERA_LVG;
    1e14:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
    1e18:	89 e0       	ldi	r24, 0x09	; 9
    1e1a:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <fsm_lvg>
    1e1e:	8c e7       	ldi	r24, 0x7C	; 124
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	9f 93       	push	r25
    1e24:	8f 93       	push	r24
    1e26:	df 93       	push	r29
          // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");

          break;
    1e28:	cf 93       	push	r28
    1e2a:	10 dd       	rcall	.-1504   	; 0x184c <chprintf>
    1e2c:	8d b7       	in	r24, 0x3d	; 61
    1e2e:	9e b7       	in	r25, 0x3e	; 62
    1e30:	08 96       	adiw	r24, 0x08	; 8
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	9e bf       	out	0x3e, r25	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
          lavar = MOLHO;
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
    1e3a:	8d bf       	out	0x3d, r24	; 61
    1e3c:	82 ce       	rjmp	.-764    	; 0x1b42 <lavar_maquina+0xfa>
    1e3e:	89 e3       	ldi	r24, 0x39	; 57
    1e40:	91 e0       	ldi	r25, 0x01	; 1
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
    1e42:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
    1e46:	82 e0       	ldi	r24, 0x02	; 2
  st->t_giro = 4000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1e48:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
    1e4c:	88 e0       	ldi	r24, 0x08	; 8
  st->turns = 0;
    1e4e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <fsm_lvg>
    1e52:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <fsm_lvg+0x6>
  st->t_espera = 2000;
    1e56:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <fsm_lvg+0x5>
    1e5a:	b0 92 b7 04 	sts	0x04B7, r11	; 0x8004b7 <fsm_lvg+0x8>
  st->t_giros = 4000;
    1e5e:	a0 92 b6 04 	sts	0x04B6, r10	; 0x8004b6 <fsm_lvg+0x7>
    1e62:	10 93 b9 04 	sts	0x04B9, r17	; 0x8004b9 <fsm_lvg+0xa>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1e66:	00 93 b8 04 	sts	0x04B8, r16	; 0x8004b8 <fsm_lvg+0x9>
    1e6a:	f8 94       	cli
    1e6c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
  st->instante = chVTGetSystemTime();
    1e70:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
    1e74:	78 94       	sei
  st->ul_espera = st->instante;
    1e76:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <fsm_lvg+0x2>
    1e7a:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <fsm_lvg+0x1>
        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    1e7e:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <fsm_lvg+0x4>
    1e82:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial:Lavagem \n\r");
    1e86:	d0 92 c1 04 	sts	0x04C1, r13	; 0x8004c1 <fsm_prd+0x1>
    1e8a:	c0 92 c0 04 	sts	0x04C0, r12	; 0x8004c0 <fsm_prd>
    1e8e:	ff 92       	push	r15
    1e90:	ef 92       	push	r14
          palClearPad(IOPORT2, MOLHO_ID);
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	da dc       	rcall	.-1612   	; 0x184c <chprintf>
    1e98:	28 98       	cbi	0x05, 0	; 5
    1e9a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <fsm_prd>
    1e9e:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <fsm_prd+0x1>
    1ea2:	0f 90       	pop	r0
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado ENCHER_ML\n");
          // printf("Abrir água\n");
          palSetPad(IOPORT2, ENCHE_ID);
    1ea4:	0f 90       	pop	r0
          chprintf((BaseSequentialStream *)&SD1, "Enchendo... \n\r");
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	e3 ce       	rjmp	.-570    	; 0x1c72 <lavar_maquina+0x22a>
    1eac:	2c 9a       	sbi	0x05, 4	; 5
    1eae:	83 e2       	ldi	r24, 0x23	; 35
    1eb0:	92 e0       	ldi	r25, 0x02	; 2
    1eb2:	9f 93       	push	r25
    1eb4:	8f 93       	push	r24
    1eb6:	c6 e6       	ldi	r28, 0x66	; 102
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    1eb8:	d4 e0       	ldi	r29, 0x04	; 4
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	c6 dc       	rcall	.-1652   	; 0x184c <chprintf>
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
            // printf("Sensor Cheio\n");
            chprintf((BaseSequentialStream *)&SD1, "Sensor cheio\n\r");
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	4c 9b       	sbis	0x09, 4	; 9
    1eca:	3b ce       	rjmp	.-906    	; 0x1b42 <lavar_maquina+0xfa>
    1ecc:	82 e3       	ldi	r24, 0x32	; 50
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
            palClearPad(IOPORT2, ENCHE_ID);
    1ed4:	df 93       	push	r29
            fsm_ml.ml = RODAR_ML;
    1ed6:	cf 93       	push	r28
    1ed8:	b9 dc       	rcall	.-1678   	; 0x184c <chprintf>
    1eda:	2c 98       	cbi	0x05, 4	; 5
    1edc:	87 e0       	ldi	r24, 0x07	; 7
    1ede:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <fsm_ml>
    1ee2:	0f 90       	pop	r0
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          palSetPad(IOPORT2, SECA_ID);
          // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    1ee4:	0f 90       	pop	r0
            // printf("Sensor Vazio: ON\n");
            palClearPad(IOPORT2, SECA_ID);
    1ee6:	0f 90       	pop	r0
            // printf("Fim LAVAGEM\n");
            chprintf((BaseSequentialStream *)&SD1, "Fim Lavagem\n\r");
    1ee8:	0f 90       	pop	r0
    1eea:	2b ce       	rjmp	.-938    	; 0x1b42 <lavar_maquina+0xfa>
    1eec:	2d 9a       	sbi	0x05, 5	; 5
    1eee:	4b 9b       	sbis	0x09, 3	; 9
    1ef0:	28 ce       	rjmp	.-944    	; 0x1b42 <lavar_maquina+0xfa>
    1ef2:	2d 98       	cbi	0x05, 5	; 5
    1ef4:	80 ea       	ldi	r24, 0xA0	; 160
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	9f 93       	push	r25
    1efa:	8f 93       	push	r24
            palClearPad(IOPORT2, LAVAGEM_ID);
    1efc:	c6 e6       	ldi	r28, 0x66	; 102

            // printf("Inicio ENXAGUE\n");
            chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
    1efe:	d4 e0       	ldi	r29, 0x04	; 4
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	a3 dc       	rcall	.-1722   	; 0x184c <chprintf>
    1f06:	29 98       	cbi	0x05, 1	; 5
    1f08:	8e ea       	ldi	r24, 0xAE	; 174
    1f0a:	92 e0       	ldi	r25, 0x02	; 2
    1f0c:	9f 93       	push	r25
              lavar = ENXAGUE;
    1f0e:	8f 93       	push	r24
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1f14:	9b dc       	rcall	.-1738   	; 0x184c <chprintf>
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
  st->t_giro = 4000;
    1f1c:	8b e0       	ldi	r24, 0x0B	; 11
    1f1e:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <fsm_exg>
    1f22:	80 ea       	ldi	r24, 0xA0	; 160
    1f24:	9f e0       	ldi	r25, 0x0F	; 15
    1f26:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <fsm_exg+0x2>
    1f2a:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <fsm_exg+0x1>
    1f2e:	8d b7       	in	r24, 0x3d	; 61
    1f30:	9e b7       	in	r25, 0x3e	; 62
    1f32:	08 96       	adiw	r24, 0x08	; 8
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	9e bf       	out	0x3e, r25	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	8d bf       	out	0x3d, r24	; 61
    1f3e:	01 ce       	rjmp	.-1022   	; 0x1b42 <lavar_maquina+0xfa>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1f40:	f8 94       	cli

        case(ESPERA_LVG):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
    1f42:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
    1f46:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
    1f4a:	78 94       	sei
    1f4c:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <fsm_lvg+0x2>
    1f50:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <fsm_lvg+0x1>
    1f54:	a0 91 b6 04 	lds	r26, 0x04B6	; 0x8004b6 <fsm_lvg+0x7>
    1f58:	b0 91 b7 04 	lds	r27, 0x04B7	; 0x8004b7 <fsm_lvg+0x8>
    1f5c:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <fsm_lvg+0x3>
    1f60:	30 91 b3 04 	lds	r19, 0x04B3	; 0x8004b3 <fsm_lvg+0x4>
    1f64:	ec 01       	movw	r28, r24
    1f66:	c2 1b       	sub	r28, r18
    1f68:	d3 0b       	sbc	r29, r19
    1f6a:	28 e0       	ldi	r18, 0x08	; 8
    1f6c:	3d e3       	ldi	r19, 0x3D	; 61
    1f6e:	d0 d3       	rcall	.+1952   	; 0x2710 <__usmulhisi3>
    1f70:	69 51       	subi	r22, 0x19	; 25
    1f72:	7c 4f       	sbci	r23, 0xFC	; 252
    1f74:	8f 4f       	sbci	r24, 0xFF	; 255
    1f76:	9f 4f       	sbci	r25, 0xFF	; 255
    1f78:	28 ee       	ldi	r18, 0xE8	; 232
    1f7a:	33 e0       	ldi	r19, 0x03	; 3
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	83 d3       	rcall	.+1798   	; 0x2688 <__udivmodsi4>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1f82:	2c 17       	cp	r18, r28
    1f84:	3d 07       	cpc	r19, r29
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <lavar_maquina+0x542>
    1f88:	dc cd       	rjmp	.-1096   	; 0x1b42 <lavar_maquina+0xfa>
    1f8a:	f8 94       	cli
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1f8c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
            fsm_lvg.ul_espera = chVTGetSystemTime();
    1f90:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
    1f94:	78 94       	sei
            if(fsm_lvg.turns >= 3){
    1f96:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <fsm_lvg+0x4>
    1f9a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <fsm_lvg+0x3>
    1f9e:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <fsm_lvg+0x5>
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
              // printf("Fim giros Lavagem\n");

            } else {
              fsm_lvg.turns ++;
    1fa2:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <fsm_lvg+0x6>
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	0c f0       	brlt	.+2      	; 0x1fae <lavar_maquina+0x566>
              fsm_lvg.lvg = RODAR_LVG;
    1fac:	62 c0       	rjmp	.+196    	; 0x2072 <lavar_maquina+0x62a>
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <fsm_lvg+0x6>
        case(RODAR_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado RODAR_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Rodar Enxague\n\r");
    1fb4:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <fsm_lvg+0x5>
    1fb8:	88 e0       	ldi	r24, 0x08	; 8
    1fba:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <fsm_lvg>
    1fbe:	c1 cd       	rjmp	.-1150   	; 0x1b42 <lavar_maquina+0xfa>
    1fc0:	8f ec       	ldi	r24, 0xCF	; 207
    1fc2:	92 e0       	ldi	r25, 0x02	; 2
    1fc4:	9f 93       	push	r25
          spinning(fsm_exg.t_giro);
    1fc6:	8f 93       	push	r24
    1fc8:	86 e6       	ldi	r24, 0x66	; 102
    1fca:	94 e0       	ldi	r25, 0x04	; 4
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
    1fd0:	3d dc       	rcall	.-1926   	; 0x184c <chprintf>
          fsm_exg.exg = ESVAZIA_EXG;
    1fd2:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <fsm_exg+0x1>
    1fd6:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <fsm_exg+0x2>

        break;
    1fda:	a4 dc       	rcall	.-1720   	; 0x1924 <spinning>
    1fdc:	8d e0       	ldi	r24, 0x0D	; 13
    1fde:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <fsm_exg>
          if(lavar == EMERGENCIA){
            break;
          } //  verificar a emergência

          // printf("DEBUG: Super ENXAGUE - estados ESVAZIA_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	ab cd       	rjmp	.-1194   	; 0x1b42 <lavar_maquina+0xfa>
    1fec:	8f ed       	ldi	r24, 0xDF	; 223
    1fee:	92 e0       	ldi	r25, 0x02	; 2
    1ff0:	9f 93       	push	r25
    1ff2:	8f 93       	push	r24
    1ff4:	c6 e6       	ldi	r28, 0x66	; 102
          palSetPad(IOPORT2, SECA_ID);
    1ff6:	d4 e0       	ldi	r29, 0x04	; 4
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	27 dc       	rcall	.-1970   	; 0x184c <chprintf>
    1ffe:	2d 9a       	sbi	0x05, 5	; 5
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
    2004:	0f 90       	pop	r0
             lavar = CENTRIFUGA;
    2006:	0f 90       	pop	r0
    2008:	4b 9b       	sbis	0x09, 3	; 9
    200a:	9b cd       	rjmp	.-1226   	; 0x1b42 <lavar_maquina+0xfa>
  st->t_giro = 4000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    200c:	2d 98       	cbi	0x05, 5	; 5
    200e:	84 e0       	ldi	r24, 0x04	; 4
    2010:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <lavar>
    2014:	8e e0       	ldi	r24, 0x0E	; 14
    2016:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <fsm_cen>
  st->tempo = chVTGetSystemTime();
    201a:	f8 94       	cli
    201c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ch+0x13>
  st->ul_centri = st->tempo;
    2020:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <ch+0x14>
    2024:	78 94       	sei
    2026:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <fsm_cen+0x2>
  st->t_centri = 4000;
    202a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <fsm_cen+0x1>
    202e:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <fsm_cen+0x4>
    2032:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <fsm_cen+0x3>
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
             lavar = CENTRIFUGA;
             fsm_centrifuga_init(&fsm_cen);
             chprintf((BaseSequentialStream *)&SD1, "Fim Enxague\n\r");
    2036:	80 ea       	ldi	r24, 0xA0	; 160
    2038:	9f e0       	ldi	r25, 0x0F	; 15
    203a:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <fsm_cen+0x6>
    203e:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <fsm_cen+0x5>
    2042:	81 ef       	ldi	r24, 0xF1	; 241
             // printf("Fim Enxágue\n");
             palClearPad(IOPORT2, ENXAGUE_ID);
    2044:	92 e0       	ldi	r25, 0x02	; 2
             // printf("Inicio CENTRIFUGA\n");
             chprintf((BaseSequentialStream *)&SD1, "Inicio Centrifuga\n\r");
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	fe db       	rcall	.-2052   	; 0x184c <chprintf>
    2050:	2a 98       	cbi	0x05, 2	; 5
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	92 e0       	ldi	r25, 0x02	; 2
    2056:	9f 93       	push	r25
    2058:	8f 93       	push	r24
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	f6 db       	rcall	.-2068   	; 0x184c <chprintf>
    2060:	8d b7       	in	r24, 0x3d	; 61
    2062:	9e b7       	in	r25, 0x3e	; 62
    2064:	08 96       	adiw	r24, 0x08	; 8
    2066:	0f b6       	in	r0, 0x3f	; 63
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
    2068:	f8 94       	cli
    206a:	9e bf       	out	0x3e, r25	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	8d bf       	out	0x3d, r24	; 61
              fsm_lvg.lvg = ESVAZIA_LVG;
    2070:	68 cd       	rjmp	.-1328   	; 0x1b42 <lavar_maquina+0xfa>
    2072:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <fsm_lvg+0x6>
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    2076:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <fsm_lvg+0x5>
    207a:	8a e0       	ldi	r24, 0x0A	; 10
    207c:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <fsm_lvg>
    2080:	8d e8       	ldi	r24, 0x8D	; 141
    2082:	92 e0       	ldi	r25, 0x02	; 2
    2084:	4d ce       	rjmp	.-870    	; 0x1d20 <lavar_maquina+0x2d8>

00002086 <main>:
  } // fim switch máquina principal
} // fim função da máquina principal.


int main(void) {
  halInit();
    2086:	0e 94 c4 04 	call	0x988	; 0x988 <halInit>
  chSysInit();
    208a:	0e 94 ce 00 	call	0x19c	; 0x19c <chSysInit>

  sdStart(&SD1, 0);
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	86 e6       	ldi	r24, 0x66	; 102
    2094:	94 e0       	ldi	r25, 0x04	; 4
    2096:	0e 94 64 07 	call	0xec8	; 0xec8 <sdStart>
  chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
    209a:	83 e1       	ldi	r24, 0x13	; 19
    209c:	93 e0       	ldi	r25, 0x03	; 3
    209e:	9f 93       	push	r25
    20a0:	8f 93       	push	r24
    20a2:	c6 e6       	ldi	r28, 0x66	; 102
    20a4:	d4 e0       	ldi	r29, 0x04	; 4
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
  starting();
    20aa:	d0 db       	rcall	.-2144   	; 0x184c <chprintf>
    20ac:	de db       	rcall	.-2116   	; 0x186a <starting>
  lavar = PARADA;
    20ae:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    20b2:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <fsm_prd+0x1>
    20b6:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <fsm_prd>
  sdStart(&SD1, 0);
  chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
  starting();
  lavar = PARADA;
  fsm_parada_init(&fsm_prd);
  chprintf((BaseSequentialStream *)&SD1, "%d \n\r", lavar);
    20ba:	1f 92       	push	r1
    20bc:	1f 92       	push	r1
    20be:	85 e2       	ldi	r24, 0x25	; 37
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	9f 93       	push	r25
    20c4:	8f 93       	push	r24
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	c0 db       	rcall	.-2176   	; 0x184c <chprintf>
    20cc:	8d b7       	in	r24, 0x3d	; 61
    20ce:	9e b7       	in	r25, 0x3e	; 62
    20d0:	0a 96       	adiw	r24, 0x0a	; 10
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	9e bf       	out	0x3e, r25	; 62
    20d8:	0f be       	out	0x3f, r0	; 63

  while(1){
    lavar_maquina();
    20da:	8d bf       	out	0x3d, r24	; 61
    20dc:	b5 dc       	rcall	.-1686   	; 0x1a48 <lavar_maquina>
    20de:	fe cf       	rjmp	.-4      	; 0x20dc <main+0x56>

000020e0 <vfprintf>:
    20e0:	ab e0       	ldi	r26, 0x0B	; 11
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e5 e7       	ldi	r30, 0x75	; 117
    20e6:	f0 e1       	ldi	r31, 0x10	; 16
    20e8:	1d c3       	rjmp	.+1594   	; 0x2724 <__prologue_saves__+0x8>
    20ea:	6c 01       	movw	r12, r24
    20ec:	7b 01       	movw	r14, r22
    20ee:	3a 01       	movw	r6, r20
    20f0:	fc 01       	movw	r30, r24
    20f2:	17 82       	std	Z+7, r1	; 0x07
    20f4:	16 82       	std	Z+6, r1	; 0x06
    20f6:	83 81       	ldd	r24, Z+3	; 0x03
    20f8:	81 ff       	sbrs	r24, 1
    20fa:	f9 c0       	rjmp	.+498    	; 0x22ee <vfprintf+0x20e>
    20fc:	ce 01       	movw	r24, r28
    20fe:	01 96       	adiw	r24, 0x01	; 1
    2100:	4c 01       	movw	r8, r24
    2102:	f6 01       	movw	r30, r12
    2104:	b3 80       	ldd	r11, Z+3	; 0x03
    2106:	f7 01       	movw	r30, r14
    2108:	b3 fc       	sbrc	r11, 3
    210a:	05 91       	lpm	r16, Z+
    210c:	b3 fe       	sbrs	r11, 3
    210e:	01 91       	ld	r16, Z+
    2110:	7f 01       	movw	r14, r30
    2112:	00 23       	and	r16, r16
    2114:	09 f4       	brne	.+2      	; 0x2118 <vfprintf+0x38>
    2116:	e7 c0       	rjmp	.+462    	; 0x22e6 <vfprintf+0x206>
    2118:	05 32       	cpi	r16, 0x25	; 37
    211a:	49 f4       	brne	.+18     	; 0x212e <vfprintf+0x4e>
    211c:	b3 fc       	sbrc	r11, 3
    211e:	05 91       	lpm	r16, Z+
    2120:	b3 fe       	sbrs	r11, 3
    2122:	01 91       	ld	r16, Z+
    2124:	7f 01       	movw	r14, r30
    2126:	05 32       	cpi	r16, 0x25	; 37
    2128:	11 f0       	breq	.+4      	; 0x212e <vfprintf+0x4e>
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	17 c0       	rjmp	.+46     	; 0x215c <vfprintf+0x7c>
    212e:	b6 01       	movw	r22, r12
    2130:	80 2f       	mov	r24, r16
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	93 d3       	rcall	.+1830   	; 0x285c <fputc>
    2136:	53 01       	movw	r10, r6
    2138:	35 01       	movw	r6, r10
    213a:	e3 cf       	rjmp	.-58     	; 0x2102 <vfprintf+0x22>
    213c:	00 23       	and	r16, r16
    213e:	09 f4       	brne	.+2      	; 0x2142 <vfprintf+0x62>
    2140:	d2 c0       	rjmp	.+420    	; 0x22e6 <vfprintf+0x206>
    2142:	60 2f       	mov	r22, r16
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	83 e4       	ldi	r24, 0x43	; 67
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	36 d3       	rcall	.+1644   	; 0x27b8 <strchr_P>
    214c:	89 2b       	or	r24, r25
    214e:	49 f0       	breq	.+18     	; 0x2162 <vfprintf+0x82>
    2150:	f7 01       	movw	r30, r14
    2152:	b3 fc       	sbrc	r11, 3
    2154:	05 91       	lpm	r16, Z+
    2156:	b3 fe       	sbrs	r11, 3
    2158:	01 91       	ld	r16, Z+
    215a:	7f 01       	movw	r14, r30
    215c:	17 ff       	sbrs	r17, 7
    215e:	ee cf       	rjmp	.-36     	; 0x213c <vfprintf+0x5c>
    2160:	04 c0       	rjmp	.+8      	; 0x216a <vfprintf+0x8a>
    2162:	03 32       	cpi	r16, 0x23	; 35
    2164:	39 f0       	breq	.+14     	; 0x2174 <vfprintf+0x94>
    2166:	0c 36       	cpi	r16, 0x6C	; 108
    2168:	19 f0       	breq	.+6      	; 0x2170 <vfprintf+0x90>
    216a:	01 11       	cpse	r16, r1
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <vfprintf+0x98>
    216e:	bb c0       	rjmp	.+374    	; 0x22e6 <vfprintf+0x206>
    2170:	10 68       	ori	r17, 0x80	; 128
    2172:	ee cf       	rjmp	.-36     	; 0x2150 <vfprintf+0x70>
    2174:	10 e1       	ldi	r17, 0x10	; 16
    2176:	ec cf       	rjmp	.-40     	; 0x2150 <vfprintf+0x70>
    2178:	60 2f       	mov	r22, r16
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	8c e3       	ldi	r24, 0x3C	; 60
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	1b d3       	rcall	.+1590   	; 0x27b8 <strchr_P>
    2182:	89 2b       	or	r24, r25
    2184:	41 f0       	breq	.+16     	; 0x2196 <vfprintf+0xb6>
    2186:	53 01       	movw	r10, r6
    2188:	f4 e0       	ldi	r31, 0x04	; 4
    218a:	af 0e       	add	r10, r31
    218c:	b1 1c       	adc	r11, r1
    218e:	b6 01       	movw	r22, r12
    2190:	8f e3       	ldi	r24, 0x3F	; 63
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	10 c0       	rjmp	.+32     	; 0x21b6 <vfprintf+0xd6>
    2196:	03 36       	cpi	r16, 0x63	; 99
    2198:	31 f0       	breq	.+12     	; 0x21a6 <vfprintf+0xc6>
    219a:	03 37       	cpi	r16, 0x73	; 115
    219c:	71 f0       	breq	.+28     	; 0x21ba <vfprintf+0xda>
    219e:	03 35       	cpi	r16, 0x53	; 83
    21a0:	01 f5       	brne	.+64     	; 0x21e2 <vfprintf+0x102>
    21a2:	11 60       	ori	r17, 0x01	; 1
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <vfprintf+0xda>
    21a6:	53 01       	movw	r10, r6
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	a8 0e       	add	r10, r24
    21ac:	b1 1c       	adc	r11, r1
    21ae:	b6 01       	movw	r22, r12
    21b0:	f3 01       	movw	r30, r6
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	52 d3       	rcall	.+1700   	; 0x285c <fputc>
    21b8:	bf cf       	rjmp	.-130    	; 0x2138 <vfprintf+0x58>
    21ba:	53 01       	movw	r10, r6
    21bc:	f2 e0       	ldi	r31, 0x02	; 2
    21be:	af 0e       	add	r10, r31
    21c0:	b1 1c       	adc	r11, r1
    21c2:	f3 01       	movw	r30, r6
    21c4:	60 80       	ld	r6, Z
    21c6:	71 80       	ldd	r7, Z+1	; 0x01
    21c8:	f3 01       	movw	r30, r6
    21ca:	10 fd       	sbrc	r17, 0
    21cc:	85 91       	lpm	r24, Z+
    21ce:	10 ff       	sbrs	r17, 0
    21d0:	81 91       	ld	r24, Z+
    21d2:	3f 01       	movw	r6, r30
    21d4:	88 23       	and	r24, r24
    21d6:	09 f4       	brne	.+2      	; 0x21da <vfprintf+0xfa>
    21d8:	af cf       	rjmp	.-162    	; 0x2138 <vfprintf+0x58>
    21da:	b6 01       	movw	r22, r12
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	3e d3       	rcall	.+1660   	; 0x285c <fputc>
    21e0:	f3 cf       	rjmp	.-26     	; 0x21c8 <vfprintf+0xe8>
    21e2:	04 36       	cpi	r16, 0x64	; 100
    21e4:	11 f0       	breq	.+4      	; 0x21ea <vfprintf+0x10a>
    21e6:	09 36       	cpi	r16, 0x69	; 105
    21e8:	21 f5       	brne	.+72     	; 0x2232 <vfprintf+0x152>
    21ea:	53 01       	movw	r10, r6
    21ec:	17 ff       	sbrs	r17, 7
    21ee:	09 c0       	rjmp	.+18     	; 0x2202 <vfprintf+0x122>
    21f0:	f4 e0       	ldi	r31, 0x04	; 4
    21f2:	af 0e       	add	r10, r31
    21f4:	b1 1c       	adc	r11, r1
    21f6:	f3 01       	movw	r30, r6
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <vfprintf+0x136>
    2202:	f2 e0       	ldi	r31, 0x02	; 2
    2204:	af 0e       	add	r10, r31
    2206:	b1 1c       	adc	r11, r1
    2208:	f3 01       	movw	r30, r6
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	07 2e       	mov	r0, r23
    2210:	00 0c       	add	r0, r0
    2212:	88 0b       	sbc	r24, r24
    2214:	99 0b       	sbc	r25, r25
    2216:	1f 7e       	andi	r17, 0xEF	; 239
    2218:	97 ff       	sbrs	r25, 7
    221a:	08 c0       	rjmp	.+16     	; 0x222c <vfprintf+0x14c>
    221c:	90 95       	com	r25
    221e:	80 95       	com	r24
    2220:	70 95       	com	r23
    2222:	61 95       	neg	r22
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	8f 4f       	sbci	r24, 0xFF	; 255
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	10 64       	ori	r17, 0x40	; 64
    222c:	2a e0       	ldi	r18, 0x0A	; 10
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	30 c0       	rjmp	.+96     	; 0x2292 <vfprintf+0x1b2>
    2232:	00 37       	cpi	r16, 0x70	; 112
    2234:	91 f0       	breq	.+36     	; 0x225a <vfprintf+0x17a>
    2236:	40 f4       	brcc	.+16     	; 0x2248 <vfprintf+0x168>
    2238:	08 35       	cpi	r16, 0x58	; 88
    223a:	a1 f0       	breq	.+40     	; 0x2264 <vfprintf+0x184>
    223c:	0f 36       	cpi	r16, 0x6F	; 111
    223e:	09 f0       	breq	.+2      	; 0x2242 <vfprintf+0x162>
    2240:	52 c0       	rjmp	.+164    	; 0x22e6 <vfprintf+0x206>
    2242:	28 e0       	ldi	r18, 0x08	; 8
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	11 c0       	rjmp	.+34     	; 0x226a <vfprintf+0x18a>
    2248:	05 37       	cpi	r16, 0x75	; 117
    224a:	19 f0       	breq	.+6      	; 0x2252 <vfprintf+0x172>
    224c:	08 37       	cpi	r16, 0x78	; 120
    224e:	31 f0       	breq	.+12     	; 0x225c <vfprintf+0x17c>
    2250:	4a c0       	rjmp	.+148    	; 0x22e6 <vfprintf+0x206>
    2252:	1f 7e       	andi	r17, 0xEF	; 239
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	08 c0       	rjmp	.+16     	; 0x226a <vfprintf+0x18a>
    225a:	10 61       	ori	r17, 0x10	; 16
    225c:	14 62       	ori	r17, 0x24	; 36
    225e:	20 e1       	ldi	r18, 0x10	; 16
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	03 c0       	rjmp	.+6      	; 0x226a <vfprintf+0x18a>
    2264:	14 60       	ori	r17, 0x04	; 4
    2266:	20 e1       	ldi	r18, 0x10	; 16
    2268:	32 e0       	ldi	r19, 0x02	; 2
    226a:	53 01       	movw	r10, r6
    226c:	17 ff       	sbrs	r17, 7
    226e:	09 c0       	rjmp	.+18     	; 0x2282 <vfprintf+0x1a2>
    2270:	f4 e0       	ldi	r31, 0x04	; 4
    2272:	af 0e       	add	r10, r31
    2274:	b1 1c       	adc	r11, r1
    2276:	f3 01       	movw	r30, r6
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <vfprintf+0x1b2>
    2282:	f2 e0       	ldi	r31, 0x02	; 2
    2284:	af 0e       	add	r10, r31
    2286:	b1 1c       	adc	r11, r1
    2288:	f3 01       	movw	r30, r6
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a4 01       	movw	r20, r8
    2294:	38 d3       	rcall	.+1648   	; 0x2906 <__ultoa_invert>
    2296:	08 2f       	mov	r16, r24
    2298:	08 19       	sub	r16, r8
    229a:	16 ff       	sbrs	r17, 6
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <vfprintf+0x1c6>
    229e:	b6 01       	movw	r22, r12
    22a0:	8d e2       	ldi	r24, 0x2D	; 45
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	db d2       	rcall	.+1462   	; 0x285c <fputc>
    22a6:	14 ff       	sbrs	r17, 4
    22a8:	13 c0       	rjmp	.+38     	; 0x22d0 <vfprintf+0x1f0>
    22aa:	fe 01       	movw	r30, r28
    22ac:	e0 0f       	add	r30, r16
    22ae:	f1 1d       	adc	r31, r1
    22b0:	80 81       	ld	r24, Z
    22b2:	80 33       	cpi	r24, 0x30	; 48
    22b4:	69 f0       	breq	.+26     	; 0x22d0 <vfprintf+0x1f0>
    22b6:	b6 01       	movw	r22, r12
    22b8:	80 e3       	ldi	r24, 0x30	; 48
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	cf d2       	rcall	.+1438   	; 0x285c <fputc>
    22be:	12 ff       	sbrs	r17, 2
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <vfprintf+0x1f0>
    22c2:	10 72       	andi	r17, 0x20	; 32
    22c4:	81 2f       	mov	r24, r17
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	b6 01       	movw	r22, r12
    22ca:	88 5a       	subi	r24, 0xA8	; 168
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	c6 d2       	rcall	.+1420   	; 0x285c <fputc>
    22d0:	01 50       	subi	r16, 0x01	; 1
    22d2:	f4 01       	movw	r30, r8
    22d4:	e0 0f       	add	r30, r16
    22d6:	f1 1d       	adc	r31, r1
    22d8:	80 81       	ld	r24, Z
    22da:	b6 01       	movw	r22, r12
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	be d2       	rcall	.+1404   	; 0x285c <fputc>
    22e0:	01 11       	cpse	r16, r1
    22e2:	f6 cf       	rjmp	.-20     	; 0x22d0 <vfprintf+0x1f0>
    22e4:	29 cf       	rjmp	.-430    	; 0x2138 <vfprintf+0x58>
    22e6:	f6 01       	movw	r30, r12
    22e8:	86 81       	ldd	r24, Z+6	; 0x06
    22ea:	97 81       	ldd	r25, Z+7	; 0x07
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <vfprintf+0x212>
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	9f ef       	ldi	r25, 0xFF	; 255
    22f2:	2b 96       	adiw	r28, 0x0b	; 11
    22f4:	ee e0       	ldi	r30, 0x0E	; 14
    22f6:	32 c2       	rjmp	.+1124   	; 0x275c <__epilogue_restores__+0x8>

000022f8 <putval>:
    22f8:	20 fd       	sbrc	r18, 0
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <putval+0x16>
    22fc:	fc 01       	movw	r30, r24
    22fe:	23 fd       	sbrc	r18, 3
    2300:	05 c0       	rjmp	.+10     	; 0x230c <putval+0x14>
    2302:	22 ff       	sbrs	r18, 2
    2304:	02 c0       	rjmp	.+4      	; 0x230a <putval+0x12>
    2306:	73 83       	std	Z+3, r23	; 0x03
    2308:	62 83       	std	Z+2, r22	; 0x02
    230a:	51 83       	std	Z+1, r21	; 0x01
    230c:	40 83       	st	Z, r20
    230e:	08 95       	ret

00002310 <mulacc>:
    2310:	44 fd       	sbrc	r20, 4
    2312:	17 c0       	rjmp	.+46     	; 0x2342 <mulacc+0x32>
    2314:	46 fd       	sbrc	r20, 6
    2316:	17 c0       	rjmp	.+46     	; 0x2346 <mulacc+0x36>
    2318:	ab 01       	movw	r20, r22
    231a:	bc 01       	movw	r22, r24
    231c:	da 01       	movw	r26, r20
    231e:	fb 01       	movw	r30, r22
    2320:	aa 0f       	add	r26, r26
    2322:	bb 1f       	adc	r27, r27
    2324:	ee 1f       	adc	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	10 94       	com	r1
    232a:	d1 f7       	brne	.-12     	; 0x2320 <mulacc+0x10>
    232c:	4a 0f       	add	r20, r26
    232e:	5b 1f       	adc	r21, r27
    2330:	6e 1f       	adc	r22, r30
    2332:	7f 1f       	adc	r23, r31
    2334:	cb 01       	movw	r24, r22
    2336:	ba 01       	movw	r22, r20
    2338:	66 0f       	add	r22, r22
    233a:	77 1f       	adc	r23, r23
    233c:	88 1f       	adc	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <mulacc+0x44>
    2342:	33 e0       	ldi	r19, 0x03	; 3
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <mulacc+0x38>
    2346:	34 e0       	ldi	r19, 0x04	; 4
    2348:	66 0f       	add	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	88 1f       	adc	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	31 50       	subi	r19, 0x01	; 1
    2352:	d1 f7       	brne	.-12     	; 0x2348 <mulacc+0x38>
    2354:	62 0f       	add	r22, r18
    2356:	71 1d       	adc	r23, r1
    2358:	81 1d       	adc	r24, r1
    235a:	91 1d       	adc	r25, r1
    235c:	08 95       	ret

0000235e <skip_spaces>:
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	8c 01       	movw	r16, r24
    2368:	c8 01       	movw	r24, r16
    236a:	3a d2       	rcall	.+1140   	; 0x27e0 <fgetc>
    236c:	ec 01       	movw	r28, r24
    236e:	97 fd       	sbrc	r25, 7
    2370:	06 c0       	rjmp	.+12     	; 0x237e <skip_spaces+0x20>
    2372:	1a d2       	rcall	.+1076   	; 0x27a8 <isspace>
    2374:	89 2b       	or	r24, r25
    2376:	c1 f7       	brne	.-16     	; 0x2368 <skip_spaces+0xa>
    2378:	b8 01       	movw	r22, r16
    237a:	ce 01       	movw	r24, r28
    237c:	ab d2       	rcall	.+1366   	; 0x28d4 <ungetc>
    237e:	ce 01       	movw	r24, r28
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	08 95       	ret

0000238a <conv_int>:
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	8c 01       	movw	r16, r24
    23a0:	d6 2f       	mov	r29, r22
    23a2:	7a 01       	movw	r14, r20
    23a4:	b2 2e       	mov	r11, r18
    23a6:	1c d2       	rcall	.+1080   	; 0x27e0 <fgetc>
    23a8:	9c 01       	movw	r18, r24
    23aa:	33 27       	eor	r19, r19
    23ac:	2b 32       	cpi	r18, 0x2B	; 43
    23ae:	31 05       	cpc	r19, r1
    23b0:	31 f0       	breq	.+12     	; 0x23be <conv_int+0x34>
    23b2:	2d 32       	cpi	r18, 0x2D	; 45
    23b4:	31 05       	cpc	r19, r1
    23b6:	59 f4       	brne	.+22     	; 0x23ce <conv_int+0x44>
    23b8:	8b 2d       	mov	r24, r11
    23ba:	80 68       	ori	r24, 0x80	; 128
    23bc:	b8 2e       	mov	r11, r24
    23be:	d1 50       	subi	r29, 0x01	; 1
    23c0:	11 f4       	brne	.+4      	; 0x23c6 <conv_int+0x3c>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	61 c0       	rjmp	.+194    	; 0x2488 <conv_int+0xfe>
    23c6:	c8 01       	movw	r24, r16
    23c8:	0b d2       	rcall	.+1046   	; 0x27e0 <fgetc>
    23ca:	97 fd       	sbrc	r25, 7
    23cc:	fa cf       	rjmp	.-12     	; 0x23c2 <conv_int+0x38>
    23ce:	cb 2d       	mov	r28, r11
    23d0:	cd 7f       	andi	r28, 0xFD	; 253
    23d2:	2b 2d       	mov	r18, r11
    23d4:	20 73       	andi	r18, 0x30	; 48
    23d6:	f9 f4       	brne	.+62     	; 0x2416 <conv_int+0x8c>
    23d8:	80 33       	cpi	r24, 0x30	; 48
    23da:	e9 f4       	brne	.+58     	; 0x2416 <conv_int+0x8c>
    23dc:	aa 24       	eor	r10, r10
    23de:	aa 94       	dec	r10
    23e0:	ad 0e       	add	r10, r29
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <conv_int+0x5c>
    23e4:	3e c0       	rjmp	.+124    	; 0x2462 <conv_int+0xd8>
    23e6:	c8 01       	movw	r24, r16
    23e8:	fb d1       	rcall	.+1014   	; 0x27e0 <fgetc>
    23ea:	97 fd       	sbrc	r25, 7
    23ec:	3a c0       	rjmp	.+116    	; 0x2462 <conv_int+0xd8>
    23ee:	9c 01       	movw	r18, r24
    23f0:	2f 7d       	andi	r18, 0xDF	; 223
    23f2:	33 27       	eor	r19, r19
    23f4:	28 35       	cpi	r18, 0x58	; 88
    23f6:	31 05       	cpc	r19, r1
    23f8:	41 f4       	brne	.+16     	; 0x240a <conv_int+0x80>
    23fa:	c2 64       	ori	r28, 0x42	; 66
    23fc:	d2 50       	subi	r29, 0x02	; 2
    23fe:	89 f1       	breq	.+98     	; 0x2462 <conv_int+0xd8>
    2400:	c8 01       	movw	r24, r16
    2402:	ee d1       	rcall	.+988    	; 0x27e0 <fgetc>
    2404:	97 ff       	sbrs	r25, 7
    2406:	07 c0       	rjmp	.+14     	; 0x2416 <conv_int+0x8c>
    2408:	2c c0       	rjmp	.+88     	; 0x2462 <conv_int+0xd8>
    240a:	b6 fe       	sbrs	r11, 6
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <conv_int+0x88>
    240e:	c2 60       	ori	r28, 0x02	; 2
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <conv_int+0x8a>
    2412:	c2 61       	ori	r28, 0x12	; 18
    2414:	da 2d       	mov	r29, r10
    2416:	81 2c       	mov	r8, r1
    2418:	91 2c       	mov	r9, r1
    241a:	54 01       	movw	r10, r8
    241c:	20 ed       	ldi	r18, 0xD0	; 208
    241e:	28 0f       	add	r18, r24
    2420:	28 30       	cpi	r18, 0x08	; 8
    2422:	78 f0       	brcs	.+30     	; 0x2442 <conv_int+0xb8>
    2424:	c4 ff       	sbrs	r28, 4
    2426:	03 c0       	rjmp	.+6      	; 0x242e <conv_int+0xa4>
    2428:	b8 01       	movw	r22, r16
    242a:	54 d2       	rcall	.+1192   	; 0x28d4 <ungetc>
    242c:	17 c0       	rjmp	.+46     	; 0x245c <conv_int+0xd2>
    242e:	2a 30       	cpi	r18, 0x0A	; 10
    2430:	40 f0       	brcs	.+16     	; 0x2442 <conv_int+0xb8>
    2432:	c6 ff       	sbrs	r28, 6
    2434:	f9 cf       	rjmp	.-14     	; 0x2428 <conv_int+0x9e>
    2436:	2f 7d       	andi	r18, 0xDF	; 223
    2438:	3f ee       	ldi	r19, 0xEF	; 239
    243a:	32 0f       	add	r19, r18
    243c:	36 30       	cpi	r19, 0x06	; 6
    243e:	a0 f7       	brcc	.-24     	; 0x2428 <conv_int+0x9e>
    2440:	27 50       	subi	r18, 0x07	; 7
    2442:	4c 2f       	mov	r20, r28
    2444:	c5 01       	movw	r24, r10
    2446:	b4 01       	movw	r22, r8
    2448:	63 df       	rcall	.-314    	; 0x2310 <mulacc>
    244a:	4b 01       	movw	r8, r22
    244c:	5c 01       	movw	r10, r24
    244e:	c2 60       	ori	r28, 0x02	; 2
    2450:	d1 50       	subi	r29, 0x01	; 1
    2452:	51 f0       	breq	.+20     	; 0x2468 <conv_int+0xde>
    2454:	c8 01       	movw	r24, r16
    2456:	c4 d1       	rcall	.+904    	; 0x27e0 <fgetc>
    2458:	97 ff       	sbrs	r25, 7
    245a:	e0 cf       	rjmp	.-64     	; 0x241c <conv_int+0x92>
    245c:	c1 fd       	sbrc	r28, 1
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <conv_int+0xde>
    2460:	b0 cf       	rjmp	.-160    	; 0x23c2 <conv_int+0x38>
    2462:	81 2c       	mov	r8, r1
    2464:	91 2c       	mov	r9, r1
    2466:	54 01       	movw	r10, r8
    2468:	c7 ff       	sbrs	r28, 7
    246a:	08 c0       	rjmp	.+16     	; 0x247c <conv_int+0xf2>
    246c:	b0 94       	com	r11
    246e:	a0 94       	com	r10
    2470:	90 94       	com	r9
    2472:	80 94       	com	r8
    2474:	81 1c       	adc	r8, r1
    2476:	91 1c       	adc	r9, r1
    2478:	a1 1c       	adc	r10, r1
    247a:	b1 1c       	adc	r11, r1
    247c:	2c 2f       	mov	r18, r28
    247e:	b5 01       	movw	r22, r10
    2480:	a4 01       	movw	r20, r8
    2482:	c7 01       	movw	r24, r14
    2484:	39 df       	rcall	.-398    	; 0x22f8 <putval>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	ff 90       	pop	r15
    2492:	ef 90       	pop	r14
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	9f 90       	pop	r9
    249a:	8f 90       	pop	r8
    249c:	08 95       	ret

0000249e <vfscanf>:
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e4 e5       	ldi	r30, 0x54	; 84
    24a4:	f2 e1       	ldi	r31, 0x12	; 18
    24a6:	3d c1       	rjmp	.+634    	; 0x2722 <__prologue_saves__+0x6>
    24a8:	6c 01       	movw	r12, r24
    24aa:	eb 01       	movw	r28, r22
    24ac:	5a 01       	movw	r10, r20
    24ae:	fc 01       	movw	r30, r24
    24b0:	17 82       	std	Z+7, r1	; 0x07
    24b2:	16 82       	std	Z+6, r1	; 0x06
    24b4:	51 2c       	mov	r5, r1
    24b6:	f6 01       	movw	r30, r12
    24b8:	f3 80       	ldd	r15, Z+3	; 0x03
    24ba:	fe 01       	movw	r30, r28
    24bc:	f3 fc       	sbrc	r15, 3
    24be:	85 91       	lpm	r24, Z+
    24c0:	f3 fe       	sbrs	r15, 3
    24c2:	81 91       	ld	r24, Z+
    24c4:	18 2f       	mov	r17, r24
    24c6:	ef 01       	movw	r28, r30
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <vfscanf+0x30>
    24cc:	d4 c0       	rjmp	.+424    	; 0x2676 <vfscanf+0x1d8>
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	6b d1       	rcall	.+726    	; 0x27a8 <isspace>
    24d2:	89 2b       	or	r24, r25
    24d4:	19 f0       	breq	.+6      	; 0x24dc <vfscanf+0x3e>
    24d6:	c6 01       	movw	r24, r12
    24d8:	42 df       	rcall	.-380    	; 0x235e <skip_spaces>
    24da:	ed cf       	rjmp	.-38     	; 0x24b6 <vfscanf+0x18>
    24dc:	15 32       	cpi	r17, 0x25	; 37
    24de:	41 f4       	brne	.+16     	; 0x24f0 <vfscanf+0x52>
    24e0:	fe 01       	movw	r30, r28
    24e2:	f3 fc       	sbrc	r15, 3
    24e4:	15 91       	lpm	r17, Z+
    24e6:	f3 fe       	sbrs	r15, 3
    24e8:	11 91       	ld	r17, Z+
    24ea:	ef 01       	movw	r28, r30
    24ec:	15 32       	cpi	r17, 0x25	; 37
    24ee:	71 f4       	brne	.+28     	; 0x250c <vfscanf+0x6e>
    24f0:	c6 01       	movw	r24, r12
    24f2:	76 d1       	rcall	.+748    	; 0x27e0 <fgetc>
    24f4:	97 fd       	sbrc	r25, 7
    24f6:	bd c0       	rjmp	.+378    	; 0x2672 <vfscanf+0x1d4>
    24f8:	41 2f       	mov	r20, r17
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	9c 01       	movw	r18, r24
    24fe:	33 27       	eor	r19, r19
    2500:	24 17       	cp	r18, r20
    2502:	35 07       	cpc	r19, r21
    2504:	c1 f2       	breq	.-80     	; 0x24b6 <vfscanf+0x18>
    2506:	b6 01       	movw	r22, r12
    2508:	e5 d1       	rcall	.+970    	; 0x28d4 <ungetc>
    250a:	b5 c0       	rjmp	.+362    	; 0x2676 <vfscanf+0x1d8>
    250c:	1a 32       	cpi	r17, 0x2A	; 42
    250e:	39 f4       	brne	.+14     	; 0x251e <vfscanf+0x80>
    2510:	f3 fc       	sbrc	r15, 3
    2512:	15 91       	lpm	r17, Z+
    2514:	f3 fe       	sbrs	r15, 3
    2516:	11 91       	ld	r17, Z+
    2518:	ef 01       	movw	r28, r30
    251a:	01 e0       	ldi	r16, 0x01	; 1
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <vfscanf+0x82>
    251e:	00 e0       	ldi	r16, 0x00	; 0
    2520:	e1 2c       	mov	r14, r1
    2522:	20 ed       	ldi	r18, 0xD0	; 208
    2524:	21 0f       	add	r18, r17
    2526:	2a 30       	cpi	r18, 0x0A	; 10
    2528:	78 f4       	brcc	.+30     	; 0x2548 <vfscanf+0xaa>
    252a:	02 60       	ori	r16, 0x02	; 2
    252c:	6e 2d       	mov	r22, r14
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	ec de       	rcall	.-552    	; 0x2310 <mulacc>
    2538:	e6 2e       	mov	r14, r22
    253a:	fe 01       	movw	r30, r28
    253c:	f3 fc       	sbrc	r15, 3
    253e:	15 91       	lpm	r17, Z+
    2540:	f3 fe       	sbrs	r15, 3
    2542:	11 91       	ld	r17, Z+
    2544:	ef 01       	movw	r28, r30
    2546:	ed cf       	rjmp	.-38     	; 0x2522 <vfscanf+0x84>
    2548:	01 ff       	sbrs	r16, 1
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <vfscanf+0xb4>
    254c:	e1 10       	cpse	r14, r1
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <vfscanf+0xb8>
    2550:	92 c0       	rjmp	.+292    	; 0x2676 <vfscanf+0x1d8>
    2552:	ee 24       	eor	r14, r14
    2554:	ea 94       	dec	r14
    2556:	18 36       	cpi	r17, 0x68	; 104
    2558:	19 f0       	breq	.+6      	; 0x2560 <vfscanf+0xc2>
    255a:	1c 36       	cpi	r17, 0x6C	; 108
    255c:	51 f0       	breq	.+20     	; 0x2572 <vfscanf+0xd4>
    255e:	10 c0       	rjmp	.+32     	; 0x2580 <vfscanf+0xe2>
    2560:	fe 01       	movw	r30, r28
    2562:	f3 fc       	sbrc	r15, 3
    2564:	15 91       	lpm	r17, Z+
    2566:	f3 fe       	sbrs	r15, 3
    2568:	11 91       	ld	r17, Z+
    256a:	ef 01       	movw	r28, r30
    256c:	18 36       	cpi	r17, 0x68	; 104
    256e:	41 f4       	brne	.+16     	; 0x2580 <vfscanf+0xe2>
    2570:	08 60       	ori	r16, 0x08	; 8
    2572:	04 60       	ori	r16, 0x04	; 4
    2574:	fe 01       	movw	r30, r28
    2576:	f3 fc       	sbrc	r15, 3
    2578:	15 91       	lpm	r17, Z+
    257a:	f3 fe       	sbrs	r15, 3
    257c:	11 91       	ld	r17, Z+
    257e:	ef 01       	movw	r28, r30
    2580:	11 23       	and	r17, r17
    2582:	09 f4       	brne	.+2      	; 0x2586 <vfscanf+0xe8>
    2584:	78 c0       	rjmp	.+240    	; 0x2676 <vfscanf+0x1d8>
    2586:	61 2f       	mov	r22, r17
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	83 e5       	ldi	r24, 0x53	; 83
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	14 d1       	rcall	.+552    	; 0x27b8 <strchr_P>
    2590:	89 2b       	or	r24, r25
    2592:	09 f4       	brne	.+2      	; 0x2596 <vfscanf+0xf8>
    2594:	70 c0       	rjmp	.+224    	; 0x2676 <vfscanf+0x1d8>
    2596:	00 fd       	sbrc	r16, 0
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <vfscanf+0x10a>
    259a:	f5 01       	movw	r30, r10
    259c:	80 80       	ld	r8, Z
    259e:	91 80       	ldd	r9, Z+1	; 0x01
    25a0:	c5 01       	movw	r24, r10
    25a2:	02 96       	adiw	r24, 0x02	; 2
    25a4:	5c 01       	movw	r10, r24
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfscanf+0x10e>
    25a8:	81 2c       	mov	r8, r1
    25aa:	91 2c       	mov	r9, r1
    25ac:	1e 36       	cpi	r17, 0x6E	; 110
    25ae:	49 f4       	brne	.+18     	; 0x25c2 <vfscanf+0x124>
    25b0:	f6 01       	movw	r30, r12
    25b2:	46 81       	ldd	r20, Z+6	; 0x06
    25b4:	57 81       	ldd	r21, Z+7	; 0x07
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	20 2f       	mov	r18, r16
    25bc:	c4 01       	movw	r24, r8
    25be:	9c de       	rcall	.-712    	; 0x22f8 <putval>
    25c0:	7a cf       	rjmp	.-268    	; 0x24b6 <vfscanf+0x18>
    25c2:	13 36       	cpi	r17, 0x63	; 99
    25c4:	a1 f4       	brne	.+40     	; 0x25ee <vfscanf+0x150>
    25c6:	01 fd       	sbrc	r16, 1
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <vfscanf+0x130>
    25ca:	ee 24       	eor	r14, r14
    25cc:	e3 94       	inc	r14
    25ce:	c6 01       	movw	r24, r12
    25d0:	07 d1       	rcall	.+526    	; 0x27e0 <fgetc>
    25d2:	97 fd       	sbrc	r25, 7
    25d4:	4e c0       	rjmp	.+156    	; 0x2672 <vfscanf+0x1d4>
    25d6:	81 14       	cp	r8, r1
    25d8:	91 04       	cpc	r9, r1
    25da:	29 f0       	breq	.+10     	; 0x25e6 <vfscanf+0x148>
    25dc:	f4 01       	movw	r30, r8
    25de:	80 83       	st	Z, r24
    25e0:	c4 01       	movw	r24, r8
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	4c 01       	movw	r8, r24
    25e6:	ea 94       	dec	r14
    25e8:	e1 10       	cpse	r14, r1
    25ea:	f1 cf       	rjmp	.-30     	; 0x25ce <vfscanf+0x130>
    25ec:	3e c0       	rjmp	.+124    	; 0x266a <vfscanf+0x1cc>
    25ee:	c6 01       	movw	r24, r12
    25f0:	b6 de       	rcall	.-660    	; 0x235e <skip_spaces>
    25f2:	97 fd       	sbrc	r25, 7
    25f4:	3e c0       	rjmp	.+124    	; 0x2672 <vfscanf+0x1d4>
    25f6:	1f 36       	cpi	r17, 0x6F	; 111
    25f8:	49 f1       	breq	.+82     	; 0x264c <vfscanf+0x1ae>
    25fa:	28 f4       	brcc	.+10     	; 0x2606 <vfscanf+0x168>
    25fc:	14 36       	cpi	r17, 0x64	; 100
    25fe:	21 f1       	breq	.+72     	; 0x2648 <vfscanf+0x1aa>
    2600:	19 36       	cpi	r17, 0x69	; 105
    2602:	39 f1       	breq	.+78     	; 0x2652 <vfscanf+0x1b4>
    2604:	25 c0       	rjmp	.+74     	; 0x2650 <vfscanf+0x1b2>
    2606:	13 37       	cpi	r17, 0x73	; 115
    2608:	71 f0       	breq	.+28     	; 0x2626 <vfscanf+0x188>
    260a:	15 37       	cpi	r17, 0x75	; 117
    260c:	e9 f0       	breq	.+58     	; 0x2648 <vfscanf+0x1aa>
    260e:	20 c0       	rjmp	.+64     	; 0x2650 <vfscanf+0x1b2>
    2610:	81 14       	cp	r8, r1
    2612:	91 04       	cpc	r9, r1
    2614:	29 f0       	breq	.+10     	; 0x2620 <vfscanf+0x182>
    2616:	f4 01       	movw	r30, r8
    2618:	60 82       	st	Z, r6
    261a:	c4 01       	movw	r24, r8
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	4c 01       	movw	r8, r24
    2620:	ea 94       	dec	r14
    2622:	ee 20       	and	r14, r14
    2624:	59 f0       	breq	.+22     	; 0x263c <vfscanf+0x19e>
    2626:	c6 01       	movw	r24, r12
    2628:	db d0       	rcall	.+438    	; 0x27e0 <fgetc>
    262a:	3c 01       	movw	r6, r24
    262c:	97 fd       	sbrc	r25, 7
    262e:	06 c0       	rjmp	.+12     	; 0x263c <vfscanf+0x19e>
    2630:	bb d0       	rcall	.+374    	; 0x27a8 <isspace>
    2632:	89 2b       	or	r24, r25
    2634:	69 f3       	breq	.-38     	; 0x2610 <vfscanf+0x172>
    2636:	b6 01       	movw	r22, r12
    2638:	c3 01       	movw	r24, r6
    263a:	4c d1       	rcall	.+664    	; 0x28d4 <ungetc>
    263c:	81 14       	cp	r8, r1
    263e:	91 04       	cpc	r9, r1
    2640:	a1 f0       	breq	.+40     	; 0x266a <vfscanf+0x1cc>
    2642:	f4 01       	movw	r30, r8
    2644:	10 82       	st	Z, r1
    2646:	11 c0       	rjmp	.+34     	; 0x266a <vfscanf+0x1cc>
    2648:	00 62       	ori	r16, 0x20	; 32
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <vfscanf+0x1b4>
    264c:	00 61       	ori	r16, 0x10	; 16
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <vfscanf+0x1b4>
    2650:	00 64       	ori	r16, 0x40	; 64
    2652:	20 2f       	mov	r18, r16
    2654:	a4 01       	movw	r20, r8
    2656:	6e 2d       	mov	r22, r14
    2658:	c6 01       	movw	r24, r12
    265a:	97 de       	rcall	.-722    	; 0x238a <conv_int>
    265c:	81 11       	cpse	r24, r1
    265e:	05 c0       	rjmp	.+10     	; 0x266a <vfscanf+0x1cc>
    2660:	f6 01       	movw	r30, r12
    2662:	83 81       	ldd	r24, Z+3	; 0x03
    2664:	80 73       	andi	r24, 0x30	; 48
    2666:	29 f4       	brne	.+10     	; 0x2672 <vfscanf+0x1d4>
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <vfscanf+0x1d8>
    266a:	00 fd       	sbrc	r16, 0
    266c:	24 cf       	rjmp	.-440    	; 0x24b6 <vfscanf+0x18>
    266e:	53 94       	inc	r5
    2670:	22 cf       	rjmp	.-444    	; 0x24b6 <vfscanf+0x18>
    2672:	55 20       	and	r5, r5
    2674:	19 f0       	breq	.+6      	; 0x267c <vfscanf+0x1de>
    2676:	85 2d       	mov	r24, r5
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <vfscanf+0x1e2>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	9f ef       	ldi	r25, 0xFF	; 255
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	ef e0       	ldi	r30, 0x0F	; 15
    2686:	69 c0       	rjmp	.+210    	; 0x275a <__epilogue_restores__+0x6>

00002688 <__udivmodsi4>:
    2688:	a1 e2       	ldi	r26, 0x21	; 33
    268a:	1a 2e       	mov	r1, r26
    268c:	aa 1b       	sub	r26, r26
    268e:	bb 1b       	sub	r27, r27
    2690:	fd 01       	movw	r30, r26
    2692:	0d c0       	rjmp	.+26     	; 0x26ae <__udivmodsi4_ep>

00002694 <__udivmodsi4_loop>:
    2694:	aa 1f       	adc	r26, r26
    2696:	bb 1f       	adc	r27, r27
    2698:	ee 1f       	adc	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	a2 17       	cp	r26, r18
    269e:	b3 07       	cpc	r27, r19
    26a0:	e4 07       	cpc	r30, r20
    26a2:	f5 07       	cpc	r31, r21
    26a4:	20 f0       	brcs	.+8      	; 0x26ae <__udivmodsi4_ep>
    26a6:	a2 1b       	sub	r26, r18
    26a8:	b3 0b       	sbc	r27, r19
    26aa:	e4 0b       	sbc	r30, r20
    26ac:	f5 0b       	sbc	r31, r21

000026ae <__udivmodsi4_ep>:
    26ae:	66 1f       	adc	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	88 1f       	adc	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	1a 94       	dec	r1
    26b8:	69 f7       	brne	.-38     	; 0x2694 <__udivmodsi4_loop>
    26ba:	60 95       	com	r22
    26bc:	70 95       	com	r23
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	9b 01       	movw	r18, r22
    26c4:	ac 01       	movw	r20, r24
    26c6:	bd 01       	movw	r22, r26
    26c8:	cf 01       	movw	r24, r30
    26ca:	08 95       	ret

000026cc <__divmodsi4>:
    26cc:	05 2e       	mov	r0, r21
    26ce:	97 fb       	bst	r25, 7
    26d0:	16 f4       	brtc	.+4      	; 0x26d6 <__divmodsi4+0xa>
    26d2:	00 94       	com	r0
    26d4:	0f d0       	rcall	.+30     	; 0x26f4 <__negsi2>
    26d6:	57 fd       	sbrc	r21, 7
    26d8:	05 d0       	rcall	.+10     	; 0x26e4 <__divmodsi4_neg2>
    26da:	d6 df       	rcall	.-84     	; 0x2688 <__udivmodsi4>
    26dc:	07 fc       	sbrc	r0, 7
    26de:	02 d0       	rcall	.+4      	; 0x26e4 <__divmodsi4_neg2>
    26e0:	46 f4       	brtc	.+16     	; 0x26f2 <__divmodsi4_exit>
    26e2:	08 c0       	rjmp	.+16     	; 0x26f4 <__negsi2>

000026e4 <__divmodsi4_neg2>:
    26e4:	50 95       	com	r21
    26e6:	40 95       	com	r20
    26e8:	30 95       	com	r19
    26ea:	21 95       	neg	r18
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	4f 4f       	sbci	r20, 0xFF	; 255
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255

000026f2 <__divmodsi4_exit>:
    26f2:	08 95       	ret

000026f4 <__negsi2>:
    26f4:	90 95       	com	r25
    26f6:	80 95       	com	r24
    26f8:	70 95       	com	r23
    26fa:	61 95       	neg	r22
    26fc:	7f 4f       	sbci	r23, 0xFF	; 255
    26fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	08 95       	ret

00002704 <__tablejump2__>:
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	05 90       	lpm	r0, Z+
    270a:	f4 91       	lpm	r31, Z
    270c:	e0 2d       	mov	r30, r0
    270e:	09 94       	ijmp

00002710 <__usmulhisi3>:
    2710:	3c d0       	rcall	.+120    	; 0x278a <__umulhisi3>

00002712 <__usmulhisi3_tail>:
    2712:	b7 ff       	sbrs	r27, 7
    2714:	08 95       	ret
    2716:	82 1b       	sub	r24, r18
    2718:	93 0b       	sbc	r25, r19
    271a:	08 95       	ret

0000271c <__prologue_saves__>:
    271c:	2f 92       	push	r2
    271e:	3f 92       	push	r3
    2720:	4f 92       	push	r4
    2722:	5f 92       	push	r5
    2724:	6f 92       	push	r6
    2726:	7f 92       	push	r7
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	ca 1b       	sub	r28, r26
    2746:	db 0b       	sbc	r29, r27
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	09 94       	ijmp

00002754 <__epilogue_restores__>:
    2754:	2a 88       	ldd	r2, Y+18	; 0x12
    2756:	39 88       	ldd	r3, Y+17	; 0x11
    2758:	48 88       	ldd	r4, Y+16	; 0x10
    275a:	5f 84       	ldd	r5, Y+15	; 0x0f
    275c:	6e 84       	ldd	r6, Y+14	; 0x0e
    275e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2760:	8c 84       	ldd	r8, Y+12	; 0x0c
    2762:	9b 84       	ldd	r9, Y+11	; 0x0b
    2764:	aa 84       	ldd	r10, Y+10	; 0x0a
    2766:	b9 84       	ldd	r11, Y+9	; 0x09
    2768:	c8 84       	ldd	r12, Y+8	; 0x08
    276a:	df 80       	ldd	r13, Y+7	; 0x07
    276c:	ee 80       	ldd	r14, Y+6	; 0x06
    276e:	fd 80       	ldd	r15, Y+5	; 0x05
    2770:	0c 81       	ldd	r16, Y+4	; 0x04
    2772:	1b 81       	ldd	r17, Y+3	; 0x03
    2774:	aa 81       	ldd	r26, Y+2	; 0x02
    2776:	b9 81       	ldd	r27, Y+1	; 0x01
    2778:	ce 0f       	add	r28, r30
    277a:	d1 1d       	adc	r29, r1
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	ed 01       	movw	r28, r26
    2788:	08 95       	ret

0000278a <__umulhisi3>:
    278a:	a2 9f       	mul	r26, r18
    278c:	b0 01       	movw	r22, r0
    278e:	b3 9f       	mul	r27, r19
    2790:	c0 01       	movw	r24, r0
    2792:	a3 9f       	mul	r26, r19
    2794:	70 0d       	add	r23, r0
    2796:	81 1d       	adc	r24, r1
    2798:	11 24       	eor	r1, r1
    279a:	91 1d       	adc	r25, r1
    279c:	b2 9f       	mul	r27, r18
    279e:	70 0d       	add	r23, r0
    27a0:	81 1d       	adc	r24, r1
    27a2:	11 24       	eor	r1, r1
    27a4:	91 1d       	adc	r25, r1
    27a6:	08 95       	ret

000027a8 <isspace>:
    27a8:	91 11       	cpse	r25, r1
    27aa:	0b c1       	rjmp	.+534    	; 0x29c2 <__ctype_isfalse>
    27ac:	80 32       	cpi	r24, 0x20	; 32
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <isspace+0xe>
    27b0:	89 50       	subi	r24, 0x09	; 9
    27b2:	85 50       	subi	r24, 0x05	; 5
    27b4:	d0 f7       	brcc	.-12     	; 0x27aa <isspace+0x2>
    27b6:	08 95       	ret

000027b8 <strchr_P>:
    27b8:	fc 01       	movw	r30, r24
    27ba:	05 90       	lpm	r0, Z+
    27bc:	06 16       	cp	r0, r22
    27be:	21 f0       	breq	.+8      	; 0x27c8 <strchr_P+0x10>
    27c0:	00 20       	and	r0, r0
    27c2:	d9 f7       	brne	.-10     	; 0x27ba <strchr_P+0x2>
    27c4:	c0 01       	movw	r24, r0
    27c6:	08 95       	ret
    27c8:	31 97       	sbiw	r30, 0x01	; 1
    27ca:	cf 01       	movw	r24, r30
    27cc:	08 95       	ret

000027ce <memcpy>:
    27ce:	fb 01       	movw	r30, r22
    27d0:	dc 01       	movw	r26, r24
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <memcpy+0xa>
    27d4:	01 90       	ld	r0, Z+
    27d6:	0d 92       	st	X+, r0
    27d8:	41 50       	subi	r20, 0x01	; 1
    27da:	50 40       	sbci	r21, 0x00	; 0
    27dc:	d8 f7       	brcc	.-10     	; 0x27d4 <memcpy+0x6>
    27de:	08 95       	ret

000027e0 <fgetc>:
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	ec 01       	movw	r28, r24
    27e6:	2b 81       	ldd	r18, Y+3	; 0x03
    27e8:	20 ff       	sbrs	r18, 0
    27ea:	33 c0       	rjmp	.+102    	; 0x2852 <fgetc+0x72>
    27ec:	26 ff       	sbrs	r18, 6
    27ee:	0a c0       	rjmp	.+20     	; 0x2804 <fgetc+0x24>
    27f0:	2f 7b       	andi	r18, 0xBF	; 191
    27f2:	2b 83       	std	Y+3, r18	; 0x03
    27f4:	8e 81       	ldd	r24, Y+6	; 0x06
    27f6:	9f 81       	ldd	r25, Y+7	; 0x07
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	9f 83       	std	Y+7, r25	; 0x07
    27fc:	8e 83       	std	Y+6, r24	; 0x06
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	29 c0       	rjmp	.+82     	; 0x2856 <fgetc+0x76>
    2804:	22 ff       	sbrs	r18, 2
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <fgetc+0x46>
    2808:	e8 81       	ld	r30, Y
    280a:	f9 81       	ldd	r31, Y+1	; 0x01
    280c:	80 81       	ld	r24, Z
    280e:	08 2e       	mov	r0, r24
    2810:	00 0c       	add	r0, r0
    2812:	99 0b       	sbc	r25, r25
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	19 f4       	brne	.+6      	; 0x281e <fgetc+0x3e>
    2818:	20 62       	ori	r18, 0x20	; 32
    281a:	2b 83       	std	Y+3, r18	; 0x03
    281c:	1a c0       	rjmp	.+52     	; 0x2852 <fgetc+0x72>
    281e:	31 96       	adiw	r30, 0x01	; 1
    2820:	f9 83       	std	Y+1, r31	; 0x01
    2822:	e8 83       	st	Y, r30
    2824:	0e c0       	rjmp	.+28     	; 0x2842 <fgetc+0x62>
    2826:	ea 85       	ldd	r30, Y+10	; 0x0a
    2828:	fb 85       	ldd	r31, Y+11	; 0x0b
    282a:	09 95       	icall
    282c:	97 ff       	sbrs	r25, 7
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <fgetc+0x62>
    2830:	2b 81       	ldd	r18, Y+3	; 0x03
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	11 f0       	breq	.+4      	; 0x283a <fgetc+0x5a>
    2836:	80 e2       	ldi	r24, 0x20	; 32
    2838:	01 c0       	rjmp	.+2      	; 0x283c <fgetc+0x5c>
    283a:	80 e1       	ldi	r24, 0x10	; 16
    283c:	82 2b       	or	r24, r18
    283e:	8b 83       	std	Y+3, r24	; 0x03
    2840:	08 c0       	rjmp	.+16     	; 0x2852 <fgetc+0x72>
    2842:	2e 81       	ldd	r18, Y+6	; 0x06
    2844:	3f 81       	ldd	r19, Y+7	; 0x07
    2846:	2f 5f       	subi	r18, 0xFF	; 255
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	3f 83       	std	Y+7, r19	; 0x07
    284c:	2e 83       	std	Y+6, r18	; 0x06
    284e:	99 27       	eor	r25, r25
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <fgetc+0x76>
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	9f ef       	ldi	r25, 0xFF	; 255
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <fputc>:
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	fb 01       	movw	r30, r22
    2866:	23 81       	ldd	r18, Z+3	; 0x03
    2868:	21 fd       	sbrc	r18, 1
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <fputc+0x16>
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	9f ef       	ldi	r25, 0xFF	; 255
    2870:	2c c0       	rjmp	.+88     	; 0x28ca <fputc+0x6e>
    2872:	22 ff       	sbrs	r18, 2
    2874:	16 c0       	rjmp	.+44     	; 0x28a2 <fputc+0x46>
    2876:	46 81       	ldd	r20, Z+6	; 0x06
    2878:	57 81       	ldd	r21, Z+7	; 0x07
    287a:	24 81       	ldd	r18, Z+4	; 0x04
    287c:	35 81       	ldd	r19, Z+5	; 0x05
    287e:	42 17       	cp	r20, r18
    2880:	53 07       	cpc	r21, r19
    2882:	44 f4       	brge	.+16     	; 0x2894 <fputc+0x38>
    2884:	a0 81       	ld	r26, Z
    2886:	b1 81       	ldd	r27, Z+1	; 0x01
    2888:	9d 01       	movw	r18, r26
    288a:	2f 5f       	subi	r18, 0xFF	; 255
    288c:	3f 4f       	sbci	r19, 0xFF	; 255
    288e:	31 83       	std	Z+1, r19	; 0x01
    2890:	20 83       	st	Z, r18
    2892:	8c 93       	st	X, r24
    2894:	26 81       	ldd	r18, Z+6	; 0x06
    2896:	37 81       	ldd	r19, Z+7	; 0x07
    2898:	2f 5f       	subi	r18, 0xFF	; 255
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	37 83       	std	Z+7, r19	; 0x07
    289e:	26 83       	std	Z+6, r18	; 0x06
    28a0:	14 c0       	rjmp	.+40     	; 0x28ca <fputc+0x6e>
    28a2:	8b 01       	movw	r16, r22
    28a4:	ec 01       	movw	r28, r24
    28a6:	fb 01       	movw	r30, r22
    28a8:	00 84       	ldd	r0, Z+8	; 0x08
    28aa:	f1 85       	ldd	r31, Z+9	; 0x09
    28ac:	e0 2d       	mov	r30, r0
    28ae:	09 95       	icall
    28b0:	89 2b       	or	r24, r25
    28b2:	e1 f6       	brne	.-72     	; 0x286c <fputc+0x10>
    28b4:	d8 01       	movw	r26, r16
    28b6:	16 96       	adiw	r26, 0x06	; 6
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	17 97       	sbiw	r26, 0x07	; 7
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	17 96       	adiw	r26, 0x07	; 7
    28c2:	9c 93       	st	X, r25
    28c4:	8e 93       	st	-X, r24
    28c6:	16 97       	sbiw	r26, 0x06	; 6
    28c8:	ce 01       	movw	r24, r28
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	08 95       	ret

000028d4 <ungetc>:
    28d4:	fb 01       	movw	r30, r22
    28d6:	23 81       	ldd	r18, Z+3	; 0x03
    28d8:	20 ff       	sbrs	r18, 0
    28da:	12 c0       	rjmp	.+36     	; 0x2900 <ungetc+0x2c>
    28dc:	26 fd       	sbrc	r18, 6
    28de:	10 c0       	rjmp	.+32     	; 0x2900 <ungetc+0x2c>
    28e0:	8f 3f       	cpi	r24, 0xFF	; 255
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	93 07       	cpc	r25, r19
    28e6:	61 f0       	breq	.+24     	; 0x2900 <ungetc+0x2c>
    28e8:	82 83       	std	Z+2, r24	; 0x02
    28ea:	2f 7d       	andi	r18, 0xDF	; 223
    28ec:	20 64       	ori	r18, 0x40	; 64
    28ee:	23 83       	std	Z+3, r18	; 0x03
    28f0:	26 81       	ldd	r18, Z+6	; 0x06
    28f2:	37 81       	ldd	r19, Z+7	; 0x07
    28f4:	21 50       	subi	r18, 0x01	; 1
    28f6:	31 09       	sbc	r19, r1
    28f8:	37 83       	std	Z+7, r19	; 0x07
    28fa:	26 83       	std	Z+6, r18	; 0x06
    28fc:	99 27       	eor	r25, r25
    28fe:	08 95       	ret
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	9f ef       	ldi	r25, 0xFF	; 255
    2904:	08 95       	ret

00002906 <__ultoa_invert>:
    2906:	fa 01       	movw	r30, r20
    2908:	aa 27       	eor	r26, r26
    290a:	28 30       	cpi	r18, 0x08	; 8
    290c:	51 f1       	breq	.+84     	; 0x2962 <__ultoa_invert+0x5c>
    290e:	20 31       	cpi	r18, 0x10	; 16
    2910:	81 f1       	breq	.+96     	; 0x2972 <__ultoa_invert+0x6c>
    2912:	e8 94       	clt
    2914:	6f 93       	push	r22
    2916:	6e 7f       	andi	r22, 0xFE	; 254
    2918:	6e 5f       	subi	r22, 0xFE	; 254
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	8f 4f       	sbci	r24, 0xFF	; 255
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	af 4f       	sbci	r26, 0xFF	; 255
    2922:	b1 e0       	ldi	r27, 0x01	; 1
    2924:	3e d0       	rcall	.+124    	; 0x29a2 <__ultoa_invert+0x9c>
    2926:	b4 e0       	ldi	r27, 0x04	; 4
    2928:	3c d0       	rcall	.+120    	; 0x29a2 <__ultoa_invert+0x9c>
    292a:	67 0f       	add	r22, r23
    292c:	78 1f       	adc	r23, r24
    292e:	89 1f       	adc	r24, r25
    2930:	9a 1f       	adc	r25, r26
    2932:	a1 1d       	adc	r26, r1
    2934:	68 0f       	add	r22, r24
    2936:	79 1f       	adc	r23, r25
    2938:	8a 1f       	adc	r24, r26
    293a:	91 1d       	adc	r25, r1
    293c:	a1 1d       	adc	r26, r1
    293e:	6a 0f       	add	r22, r26
    2940:	71 1d       	adc	r23, r1
    2942:	81 1d       	adc	r24, r1
    2944:	91 1d       	adc	r25, r1
    2946:	a1 1d       	adc	r26, r1
    2948:	20 d0       	rcall	.+64     	; 0x298a <__ultoa_invert+0x84>
    294a:	09 f4       	brne	.+2      	; 0x294e <__ultoa_invert+0x48>
    294c:	68 94       	set
    294e:	3f 91       	pop	r19
    2950:	2a e0       	ldi	r18, 0x0A	; 10
    2952:	26 9f       	mul	r18, r22
    2954:	11 24       	eor	r1, r1
    2956:	30 19       	sub	r19, r0
    2958:	30 5d       	subi	r19, 0xD0	; 208
    295a:	31 93       	st	Z+, r19
    295c:	de f6       	brtc	.-74     	; 0x2914 <__ultoa_invert+0xe>
    295e:	cf 01       	movw	r24, r30
    2960:	08 95       	ret
    2962:	46 2f       	mov	r20, r22
    2964:	47 70       	andi	r20, 0x07	; 7
    2966:	40 5d       	subi	r20, 0xD0	; 208
    2968:	41 93       	st	Z+, r20
    296a:	b3 e0       	ldi	r27, 0x03	; 3
    296c:	0f d0       	rcall	.+30     	; 0x298c <__ultoa_invert+0x86>
    296e:	c9 f7       	brne	.-14     	; 0x2962 <__ultoa_invert+0x5c>
    2970:	f6 cf       	rjmp	.-20     	; 0x295e <__ultoa_invert+0x58>
    2972:	46 2f       	mov	r20, r22
    2974:	4f 70       	andi	r20, 0x0F	; 15
    2976:	40 5d       	subi	r20, 0xD0	; 208
    2978:	4a 33       	cpi	r20, 0x3A	; 58
    297a:	18 f0       	brcs	.+6      	; 0x2982 <__ultoa_invert+0x7c>
    297c:	49 5d       	subi	r20, 0xD9	; 217
    297e:	31 fd       	sbrc	r19, 1
    2980:	40 52       	subi	r20, 0x20	; 32
    2982:	41 93       	st	Z+, r20
    2984:	02 d0       	rcall	.+4      	; 0x298a <__ultoa_invert+0x84>
    2986:	a9 f7       	brne	.-22     	; 0x2972 <__ultoa_invert+0x6c>
    2988:	ea cf       	rjmp	.-44     	; 0x295e <__ultoa_invert+0x58>
    298a:	b4 e0       	ldi	r27, 0x04	; 4
    298c:	a6 95       	lsr	r26
    298e:	97 95       	ror	r25
    2990:	87 95       	ror	r24
    2992:	77 95       	ror	r23
    2994:	67 95       	ror	r22
    2996:	ba 95       	dec	r27
    2998:	c9 f7       	brne	.-14     	; 0x298c <__ultoa_invert+0x86>
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	61 05       	cpc	r22, r1
    299e:	71 05       	cpc	r23, r1
    29a0:	08 95       	ret
    29a2:	9b 01       	movw	r18, r22
    29a4:	ac 01       	movw	r20, r24
    29a6:	0a 2e       	mov	r0, r26
    29a8:	06 94       	lsr	r0
    29aa:	57 95       	ror	r21
    29ac:	47 95       	ror	r20
    29ae:	37 95       	ror	r19
    29b0:	27 95       	ror	r18
    29b2:	ba 95       	dec	r27
    29b4:	c9 f7       	brne	.-14     	; 0x29a8 <__ultoa_invert+0xa2>
    29b6:	62 0f       	add	r22, r18
    29b8:	73 1f       	adc	r23, r19
    29ba:	84 1f       	adc	r24, r20
    29bc:	95 1f       	adc	r25, r21
    29be:	a0 1d       	adc	r26, r0
    29c0:	08 95       	ret

000029c2 <__ctype_isfalse>:
    29c2:	99 27       	eor	r25, r25
    29c4:	88 27       	eor	r24, r24

000029c6 <__ctype_istrue>:
    29c6:	08 95       	ret

000029c8 <_exit>:
    29c8:	f8 94       	cli

000029ca <__stop_program>:
    29ca:	ff cf       	rjmp	.-2      	; 0x29ca <__stop_program>
