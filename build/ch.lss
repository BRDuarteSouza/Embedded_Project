
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000294  00800100  00002c24  00002cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a0  00800394  00800394  00002f4c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000828  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015a82  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b01  00000000  00000000  0001924a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060bc  00000000  00000000  0001dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018bc  00000000  00000000  00023e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000217d  00000000  00000000  000256c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d5d  00000000  00000000  00027841  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a38  00000000  00000000  0002f59e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_1>
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_11>
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_14>
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_18>
      4c:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_19>
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
      56:	00 00       	nop
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	64 0c       	add	r6, r4
      6a:	be 0a       	sbc	r11, r30
      6c:	be 0a       	sbc	r11, r30
      6e:	be 0a       	sbc	r11, r30
      70:	be 0a       	sbc	r11, r30
      72:	64 0c       	add	r6, r4
      74:	be 0a       	sbc	r11, r30
      76:	be 0a       	sbc	r11, r30
      78:	be 0a       	sbc	r11, r30
      7a:	be 0a       	sbc	r11, r30
      7c:	be 0a       	sbc	r11, r30
      7e:	22 0c       	add	r2, r2
      80:	be 0a       	sbc	r11, r30
      82:	be 0a       	sbc	r11, r30
      84:	be 0a       	sbc	r11, r30
      86:	be 0a       	sbc	r11, r30
      88:	be 0a       	sbc	r11, r30
      8a:	bc 0b       	sbc	r27, r28
      8c:	be 0a       	sbc	r11, r30
      8e:	be 0a       	sbc	r11, r30
      90:	5f 0c       	add	r5, r15
      92:	be 0a       	sbc	r11, r30
      94:	be 0a       	sbc	r11, r30
      96:	be 0a       	sbc	r11, r30
      98:	be 0a       	sbc	r11, r30
      9a:	be 0a       	sbc	r11, r30
      9c:	be 0a       	sbc	r11, r30
      9e:	be 0a       	sbc	r11, r30
      a0:	be 0a       	sbc	r11, r30
      a2:	be 0a       	sbc	r11, r30
      a4:	be 0a       	sbc	r11, r30
      a6:	a9 0b       	sbc	r26, r25
      a8:	64 0c       	add	r6, r4
      aa:	be 0a       	sbc	r11, r30
      ac:	be 0a       	sbc	r11, r30
      ae:	be 0a       	sbc	r11, r30
      b0:	be 0a       	sbc	r11, r30
      b2:	64 0c       	add	r6, r4
      b4:	be 0a       	sbc	r11, r30
      b6:	be 0a       	sbc	r11, r30
      b8:	be 0a       	sbc	r11, r30
      ba:	be 0a       	sbc	r11, r30
      bc:	be 0a       	sbc	r11, r30
      be:	22 0c       	add	r2, r2
      c0:	be 0a       	sbc	r11, r30
      c2:	be 0a       	sbc	r11, r30
      c4:	be 0a       	sbc	r11, r30
      c6:	73 0b       	sbc	r23, r19
      c8:	be 0a       	sbc	r11, r30
      ca:	bc 0b       	sbc	r27, r28
      cc:	be 0a       	sbc	r11, r30
      ce:	be 0a       	sbc	r11, r30
      d0:	5f 0c       	add	r5, r15
      d2:	c1 0c       	add	r12, r1
      d4:	3e 0b       	sbc	r19, r30
      d6:	3e 0b       	sbc	r19, r30
      d8:	3e 0b       	sbc	r19, r30
      da:	3e 0b       	sbc	r19, r30
      dc:	c1 0c       	add	r12, r1
      de:	3e 0b       	sbc	r19, r30
      e0:	3e 0b       	sbc	r19, r30
      e2:	3e 0b       	sbc	r19, r30
      e4:	3e 0b       	sbc	r19, r30
      e6:	3e 0b       	sbc	r19, r30
      e8:	21 0c       	add	r2, r1
      ea:	3e 0b       	sbc	r19, r30
      ec:	3e 0b       	sbc	r19, r30
      ee:	3e 0b       	sbc	r19, r30
      f0:	3e 0b       	sbc	r19, r30
      f2:	3e 0b       	sbc	r19, r30
      f4:	bb 0b       	sbc	r27, r27
      f6:	3e 0b       	sbc	r19, r30
      f8:	3e 0b       	sbc	r19, r30
      fa:	dd 0c       	add	r13, r13
      fc:	3e 0b       	sbc	r19, r30
      fe:	3e 0b       	sbc	r19, r30
     100:	3e 0b       	sbc	r19, r30
     102:	3e 0b       	sbc	r19, r30
     104:	3e 0b       	sbc	r19, r30
     106:	3e 0b       	sbc	r19, r30
     108:	3e 0b       	sbc	r19, r30
     10a:	3e 0b       	sbc	r19, r30
     10c:	3e 0b       	sbc	r19, r30
     10e:	3e 0b       	sbc	r19, r30
     110:	a9 0b       	sbc	r26, r25
     112:	c1 0c       	add	r12, r1
     114:	3e 0b       	sbc	r19, r30
     116:	3e 0b       	sbc	r19, r30
     118:	3e 0b       	sbc	r19, r30
     11a:	3e 0b       	sbc	r19, r30
     11c:	c1 0c       	add	r12, r1
     11e:	3e 0b       	sbc	r19, r30
     120:	3e 0b       	sbc	r19, r30
     122:	3e 0b       	sbc	r19, r30
     124:	3e 0b       	sbc	r19, r30
     126:	3e 0b       	sbc	r19, r30
     128:	21 0c       	add	r2, r1
     12a:	3e 0b       	sbc	r19, r30
     12c:	3e 0b       	sbc	r19, r30
     12e:	3e 0b       	sbc	r19, r30
     130:	73 0b       	sbc	r23, r19
     132:	3e 0b       	sbc	r19, r30
     134:	bb 0b       	sbc	r27, r27
     136:	3e 0b       	sbc	r19, r30
     138:	3e 0b       	sbc	r19, r30
     13a:	dd 0c       	add	r13, r13

0000013c <__trampolines_end>:
     13c:	45 46       	sbci	r20, 0x65	; 101
     13e:	47 65       	ori	r20, 0x57	; 87
     140:	66 67       	ori	r22, 0x76	; 118
	...

00000143 <__c.2314>:
     143:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000153 <__c.2449>:
     153:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	13 e0       	ldi	r17, 0x03	; 3
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e4 e2       	ldi	r30, 0x24	; 36
     172:	fc e2       	ldi	r31, 0x2C	; 44
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	a4 39       	cpi	r26, 0x94	; 148
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	25 e0       	ldi	r18, 0x05	; 5
     182:	a4 e9       	ldi	r26, 0x94	; 148
     184:	b3 e0       	ldi	r27, 0x03	; 3
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a4 33       	cpi	r26, 0x34	; 52
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 70 11 	call	0x22e0	; 0x22e0 <main>
     194:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     19a:	ff cf       	rjmp	.-2      	; 0x19a <_idle_thread>

0000019c <chSysInit>:
     19c:	22 d1       	rcall	.+580    	; 0x3e2 <_scheduler_init>
     19e:	5c d0       	rcall	.+184    	; 0x258 <_vt_init>
     1a0:	7a d3       	rcall	.+1780   	; 0x896 <_core_init>
     1a2:	b1 d3       	rcall	.+1890   	; 0x906 <_heap_init>
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	60 e1       	ldi	r22, 0x10	; 16
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	83 ea       	ldi	r24, 0xA3	; 163
     1ac:	94 e0       	ldi	r25, 0x04	; 4
     1ae:	30 d2       	rcall	.+1120   	; 0x610 <_thread_init>
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <ch+0xc>
     1b6:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <ch+0xb>
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	95 87       	std	Z+13, r25	; 0x0d
     1be:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <__avr_in_isr>
     1c2:	78 94       	sei
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	a6 c2       	rjmp	.+1356   	; 0x716 <chThdCreate>

000001ca <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
     1d2:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
     1d6:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <ch+0x14>
     1e0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <ch+0x13>
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     1e4:	a0 91 99 04 	lds	r26, 0x0499	; 0x800499 <ch+0xd>
     1e8:	b0 91 9a 04 	lds	r27, 0x049A	; 0x80049a <ch+0xe>
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	a9 39       	cpi	r26, 0x99	; 153
     1f0:	b8 07       	cpc	r27, r24
     1f2:	69 f1       	breq	.+90     	; 0x24e <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     1f4:	14 96       	adiw	r26, 0x04	; 4
     1f6:	8d 91       	ld	r24, X+
     1f8:	9c 91       	ld	r25, X
     1fa:	15 97       	sbiw	r26, 0x05	; 5
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	15 96       	adiw	r26, 0x05	; 5
     200:	9c 93       	st	X, r25
     202:	8e 93       	st	-X, r24
     204:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     206:	89 2b       	or	r24, r25
     208:	11 f5       	brne	.+68     	; 0x24e <chSysTimerHandlerI+0x84>
     20a:	09 e9       	ldi	r16, 0x99	; 153
     20c:	14 e0       	ldi	r17, 0x04	; 4
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     20e:	16 96       	adiw	r26, 0x06	; 6
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     216:	17 96       	adiw	r26, 0x07	; 7
     218:	1c 92       	st	X, r1
     21a:	1e 92       	st	-X, r1
     21c:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     21e:	cd 91       	ld	r28, X+
     220:	dc 91       	ld	r29, X
     222:	11 97       	sbiw	r26, 0x01	; 1
     224:	1b 83       	std	Y+3, r17	; 0x03
     226:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     228:	d0 93 9a 04 	sts	0x049A, r29	; 0x80049a <ch+0xe>
     22c:	c0 93 99 04 	sts	0x0499, r28	; 0x800499 <ch+0xd>
      chSysUnlockFromISR();
      fn(vtp->par);
     230:	18 96       	adiw	r26, 0x08	; 8
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	19 97       	sbiw	r26, 0x09	; 9
     238:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     23a:	a0 91 99 04 	lds	r26, 0x0499	; 0x800499 <ch+0xd>
     23e:	b0 91 9a 04 	lds	r27, 0x049A	; 0x80049a <ch+0xe>
     242:	14 96       	adiw	r26, 0x04	; 4
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	15 97       	sbiw	r26, 0x05	; 5
     24a:	89 2b       	or	r24, r25
     24c:	01 f3       	breq	.-64     	; 0x20e <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     258:	ec e8       	ldi	r30, 0x8C	; 140
     25a:	f4 e0       	ldi	r31, 0x04	; 4
     25c:	89 e9       	ldi	r24, 0x99	; 153
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	96 87       	std	Z+14, r25	; 0x0e
     262:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     264:	90 8b       	std	Z+16, r25	; 0x10
     266:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	9f ef       	ldi	r25, 0xFF	; 255
     26c:	92 8b       	std	Z+18, r25	; 0x12
     26e:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     270:	14 8a       	std	Z+20, r1	; 0x14
     272:	13 8a       	std	Z+19, r1	; 0x13
     274:	08 95       	ret

00000276 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     27c:	19 96       	adiw	r26, 0x09	; 9
     27e:	3c 93       	st	X, r19
     280:	2e 93       	st	-X, r18
     282:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     284:	17 96       	adiw	r26, 0x07	; 7
     286:	5c 93       	st	X, r21
     288:	4e 93       	st	-X, r20
     28a:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     28c:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <ch+0xd>
     290:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <ch+0xe>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     294:	24 81       	ldd	r18, Z+4	; 0x04
     296:	35 81       	ldd	r19, Z+5	; 0x05
     298:	26 17       	cp	r18, r22
     29a:	37 07       	cpc	r19, r23
     29c:	50 f4       	brcc	.+20     	; 0x2b2 <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     29e:	62 1b       	sub	r22, r18
     2a0:	73 0b       	sbc	r23, r19
    p = p->next;
     2a2:	01 90       	ld	r0, Z+
     2a4:	f0 81       	ld	r31, Z
     2a6:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     2a8:	24 81       	ldd	r18, Z+4	; 0x04
     2aa:	35 81       	ldd	r19, Z+5	; 0x05
     2ac:	26 17       	cp	r18, r22
     2ae:	37 07       	cpc	r19, r23
     2b0:	b0 f3       	brcs	.-20     	; 0x29e <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	fc 93       	st	X, r31
     2b6:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     2b8:	c2 81       	ldd	r28, Z+2	; 0x02
     2ba:	d3 81       	ldd	r29, Z+3	; 0x03
     2bc:	13 96       	adiw	r26, 0x03	; 3
     2be:	dc 93       	st	X, r29
     2c0:	ce 93       	st	-X, r28
     2c2:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     2c4:	b9 83       	std	Y+1, r27	; 0x01
     2c6:	a8 83       	st	Y, r26
  p->prev = vtp;
     2c8:	b3 83       	std	Z+3, r27	; 0x03
     2ca:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     2cc:	15 96       	adiw	r26, 0x05	; 5
     2ce:	7c 93       	st	X, r23
     2d0:	6e 93       	st	-X, r22
     2d2:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	95 81       	ldd	r25, Z+5	; 0x05
     2d8:	86 1b       	sub	r24, r22
     2da:	97 0b       	sbc	r25, r23
     2dc:	95 83       	std	Z+5, r25	; 0x05
     2de:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <ch+0x12>
     2e8:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <ch+0x11>
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     2f8:	a0 81       	ld	r26, Z
     2fa:	b1 81       	ldd	r27, Z+1	; 0x01
     2fc:	14 96       	adiw	r26, 0x04	; 4
     2fe:	2d 91       	ld	r18, X+
     300:	3c 91       	ld	r19, X
     302:	15 97       	sbiw	r26, 0x05	; 5
     304:	84 81       	ldd	r24, Z+4	; 0x04
     306:	95 81       	ldd	r25, Z+5	; 0x05
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	15 96       	adiw	r26, 0x05	; 5
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     314:	c2 81       	ldd	r28, Z+2	; 0x02
     316:	d3 81       	ldd	r29, Z+3	; 0x03
     318:	b9 83       	std	Y+1, r27	; 0x01
     31a:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     31c:	a0 81       	ld	r26, Z
     31e:	b1 81       	ldd	r27, Z+1	; 0x01
     320:	13 96       	adiw	r26, 0x03	; 3
     322:	dc 93       	st	X, r29
     324:	ce 93       	st	-X, r28
     326:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     328:	17 82       	std	Z+7, r1	; 0x07
     32a:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	9f ef       	ldi	r25, 0xFF	; 255
     330:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <ch+0x12>
     334:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <ch+0x11>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <wakeup>:
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	dc 01       	movw	r26, r24
     344:	1d 96       	adiw	r26, 0x0d	; 13
     346:	8c 91       	ld	r24, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	99 f1       	breq	.+102    	; 0x3b4 <wakeup+0x76>
     34e:	70 f5       	brcc	.+92     	; 0x3ac <wakeup+0x6e>
     350:	88 23       	and	r24, r24
     352:	49 f1       	breq	.+82     	; 0x3a6 <wakeup+0x68>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	31 f4       	brne	.+12     	; 0x364 <wakeup+0x26>
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	11 82       	std	Z+1, r1	; 0x01
     362:	10 82       	st	Z, r1
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	9f ef       	ldi	r25, 0xFF	; 255
     368:	51 96       	adiw	r26, 0x11	; 17
     36a:	9c 93       	st	X, r25
     36c:	8e 93       	st	-X, r24
     36e:	50 97       	sbiw	r26, 0x10	; 16
     370:	1d 96       	adiw	r26, 0x0d	; 13
     372:	1c 92       	st	X, r1
     374:	1d 97       	sbiw	r26, 0x0d	; 13
     376:	14 96       	adiw	r26, 0x04	; 4
     378:	2c 91       	ld	r18, X
     37a:	14 97       	sbiw	r26, 0x04	; 4
     37c:	ec e8       	ldi	r30, 0x8C	; 140
     37e:	f4 e0       	ldi	r31, 0x04	; 4
     380:	01 90       	ld	r0, Z+
     382:	f0 81       	ld	r31, Z
     384:	e0 2d       	mov	r30, r0
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	92 17       	cp	r25, r18
     38a:	d0 f7       	brcc	.-12     	; 0x380 <wakeup+0x42>
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	fc 93       	st	X, r31
     390:	ee 93       	st	-X, r30
     392:	c2 81       	ldd	r28, Z+2	; 0x02
     394:	d3 81       	ldd	r29, Z+3	; 0x03
     396:	13 96       	adiw	r26, 0x03	; 3
     398:	dc 93       	st	X, r29
     39a:	ce 93       	st	-X, r28
     39c:	12 97       	sbiw	r26, 0x02	; 2
     39e:	b9 83       	std	Y+1, r27	; 0x01
     3a0:	a8 83       	st	Y, r26
     3a2:	b3 83       	std	Z+3, r27	; 0x03
     3a4:	a2 83       	std	Z+2, r26	; 0x02
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <wakeup+0x94>
     3b0:	87 30       	cpi	r24, 0x07	; 7
     3b2:	c1 f6       	brne	.-80     	; 0x364 <wakeup+0x26>
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	8d 91       	ld	r24, X+
     3be:	9c 91       	ld	r25, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	cd 91       	ld	r28, X+
     3c8:	dc 91       	ld	r29, X
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	fb 83       	std	Y+3, r31	; 0x03
     3ce:	ea 83       	std	Y+2, r30	; 0x02
     3d0:	c9 cf       	rjmp	.-110    	; 0x364 <wakeup+0x26>
     3d2:	50 96       	adiw	r26, 0x10	; 16
     3d4:	ed 91       	ld	r30, X+
     3d6:	fc 91       	ld	r31, X
     3d8:	51 97       	sbiw	r26, 0x11	; 17
     3da:	84 81       	ldd	r24, Z+4	; 0x04
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	e9 cf       	rjmp	.-46     	; 0x3b4 <wakeup+0x76>

000003e2 <_scheduler_init>:
     3e2:	ec e8       	ldi	r30, 0x8C	; 140
     3e4:	f4 e0       	ldi	r31, 0x04	; 4
     3e6:	f1 83       	std	Z+1, r31	; 0x01
     3e8:	e0 83       	st	Z, r30
     3ea:	f3 83       	std	Z+3, r31	; 0x03
     3ec:	e2 83       	std	Z+2, r30	; 0x02
     3ee:	14 82       	std	Z+4, r1	; 0x04
     3f0:	f0 87       	std	Z+8, r31	; 0x08
     3f2:	e7 83       	std	Z+7, r30	; 0x07
     3f4:	f2 87       	std	Z+10, r31	; 0x0a
     3f6:	e1 87       	std	Z+9, r30	; 0x09
     3f8:	08 95       	ret

000003fa <chSchReadyI>:
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	dc 01       	movw	r26, r24
     400:	1d 96       	adiw	r26, 0x0d	; 13
     402:	1c 92       	st	X, r1
     404:	1d 97       	sbiw	r26, 0x0d	; 13
     406:	14 96       	adiw	r26, 0x04	; 4
     408:	2c 91       	ld	r18, X
     40a:	14 97       	sbiw	r26, 0x04	; 4
     40c:	ec e8       	ldi	r30, 0x8C	; 140
     40e:	f4 e0       	ldi	r31, 0x04	; 4
     410:	01 90       	ld	r0, Z+
     412:	f0 81       	ld	r31, Z
     414:	e0 2d       	mov	r30, r0
     416:	94 81       	ldd	r25, Z+4	; 0x04
     418:	92 17       	cp	r25, r18
     41a:	d0 f7       	brcc	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     41c:	11 96       	adiw	r26, 0x01	; 1
     41e:	fc 93       	st	X, r31
     420:	ee 93       	st	-X, r30
     422:	c2 81       	ldd	r28, Z+2	; 0x02
     424:	d3 81       	ldd	r29, Z+3	; 0x03
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	dc 93       	st	X, r29
     42a:	ce 93       	st	-X, r28
     42c:	12 97       	sbiw	r26, 0x02	; 2
     42e:	b9 83       	std	Y+1, r27	; 0x01
     430:	a8 83       	st	Y, r26
     432:	b3 83       	std	Z+3, r27	; 0x03
     434:	a2 83       	std	Z+2, r26	; 0x02
     436:	cd 01       	movw	r24, r26
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <chSchGoSleepS>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec e8       	ldi	r30, 0x8C	; 140
     444:	f4 e0       	ldi	r31, 0x04	; 4
     446:	63 85       	ldd	r22, Z+11	; 0x0b
     448:	74 85       	ldd	r23, Z+12	; 0x0c
     44a:	db 01       	movw	r26, r22
     44c:	1d 96       	adiw	r26, 0x0d	; 13
     44e:	8c 93       	st	X, r24
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	ec 01       	movw	r28, r24
     456:	a8 81       	ld	r26, Y
     458:	b9 81       	ldd	r27, Y+1	; 0x01
     45a:	b1 83       	std	Z+1, r27	; 0x01
     45c:	a0 83       	st	Z, r26
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	fc 93       	st	X, r31
     462:	ee 93       	st	-X, r30
     464:	12 97       	sbiw	r26, 0x02	; 2
     466:	94 87       	std	Z+12, r25	; 0x0c
     468:	83 87       	std	Z+11, r24	; 0x0b
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	2d 87       	std	Y+13, r18	; 0x0d
     46e:	58 d2       	rcall	.+1200   	; 0x920 <_port_switch>
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <chSchGoSleepTimeoutS>:
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	2a 97       	sbiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	18 2f       	mov	r17, r24
     48e:	6f 3f       	cpi	r22, 0xFF	; 255
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	78 07       	cpc	r23, r24
     494:	11 f1       	breq	.+68     	; 0x4da <chSchGoSleepTimeoutS+0x64>
     496:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <ch+0xb>
     49a:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <ch+0xc>
     49e:	4f e9       	ldi	r20, 0x9F	; 159
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	e7 de       	rcall	.-562    	; 0x276 <chVTDoSetI>
     4a8:	81 2f       	mov	r24, r17
     4aa:	c9 df       	rcall	.-110    	; 0x43e <chSchGoSleepS>
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	89 2b       	or	r24, r25
     4b2:	19 f0       	breq	.+6      	; 0x4ba <chSchGoSleepTimeoutS+0x44>
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	1c df       	rcall	.-456    	; 0x2f2 <chVTDoResetI>
     4ba:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <ch+0xb>
     4be:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <ch+0xc>
     4c2:	80 89       	ldd	r24, Z+16	; 0x10
     4c4:	91 89       	ldd	r25, Z+17	; 0x11
     4c6:	2a 96       	adiw	r28, 0x0a	; 10
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret
     4da:	81 2f       	mov	r24, r17
     4dc:	b0 df       	rcall	.-160    	; 0x43e <chSchGoSleepS>
     4de:	ed cf       	rjmp	.-38     	; 0x4ba <chSchGoSleepTimeoutS+0x44>

000004e0 <chSchWakeupS>:
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	dc 01       	movw	r26, r24
     4e6:	c0 91 97 04 	lds	r28, 0x0497	; 0x800497 <ch+0xb>
     4ea:	d0 91 98 04 	lds	r29, 0x0498	; 0x800498 <ch+0xc>
     4ee:	51 96       	adiw	r26, 0x11	; 17
     4f0:	7c 93       	st	X, r23
     4f2:	6e 93       	st	-X, r22
     4f4:	50 97       	sbiw	r26, 0x10	; 16
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	2c 91       	ld	r18, X
     4fa:	14 97       	sbiw	r26, 0x04	; 4
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	82 17       	cp	r24, r18
     500:	d8 f0       	brcs	.+54     	; 0x538 <chSchWakeupS+0x58>
     502:	1d 96       	adiw	r26, 0x0d	; 13
     504:	1c 92       	st	X, r1
     506:	1d 97       	sbiw	r26, 0x0d	; 13
     508:	ec e8       	ldi	r30, 0x8C	; 140
     50a:	f4 e0       	ldi	r31, 0x04	; 4
     50c:	01 90       	ld	r0, Z+
     50e:	f0 81       	ld	r31, Z
     510:	e0 2d       	mov	r30, r0
     512:	94 81       	ldd	r25, Z+4	; 0x04
     514:	92 17       	cp	r25, r18
     516:	d0 f7       	brcc	.-12     	; 0x50c <chSchWakeupS+0x2c>
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	fc 93       	st	X, r31
     51c:	ee 93       	st	-X, r30
     51e:	c2 81       	ldd	r28, Z+2	; 0x02
     520:	d3 81       	ldd	r29, Z+3	; 0x03
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	dc 93       	st	X, r29
     526:	ce 93       	st	-X, r28
     528:	12 97       	sbiw	r26, 0x02	; 2
     52a:	b9 83       	std	Y+1, r27	; 0x01
     52c:	a8 83       	st	Y, r26
     52e:	b3 83       	std	Z+3, r27	; 0x03
     530:	a2 83       	std	Z+2, r26	; 0x02
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret
     538:	1d 86       	std	Y+13, r1	; 0x0d
     53a:	ec e8       	ldi	r30, 0x8C	; 140
     53c:	f4 e0       	ldi	r31, 0x04	; 4
     53e:	01 90       	ld	r0, Z+
     540:	f0 81       	ld	r31, Z
     542:	e0 2d       	mov	r30, r0
     544:	94 81       	ldd	r25, Z+4	; 0x04
     546:	98 17       	cp	r25, r24
     548:	d0 f7       	brcc	.-12     	; 0x53e <chSchWakeupS+0x5e>
     54a:	cd 01       	movw	r24, r26
     54c:	f9 83       	std	Y+1, r31	; 0x01
     54e:	e8 83       	st	Y, r30
     550:	a2 81       	ldd	r26, Z+2	; 0x02
     552:	b3 81       	ldd	r27, Z+3	; 0x03
     554:	bb 83       	std	Y+3, r27	; 0x03
     556:	aa 83       	std	Y+2, r26	; 0x02
     558:	cd 93       	st	X+, r28
     55a:	dc 93       	st	X, r29
     55c:	d3 83       	std	Z+3, r29	; 0x03
     55e:	c2 83       	std	Z+2, r28	; 0x02
     560:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <ch+0xc>
     564:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <ch+0xb>
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	fc 01       	movw	r30, r24
     56c:	25 87       	std	Z+13, r18	; 0x0d
     56e:	be 01       	movw	r22, r28
     570:	d7 d1       	rcall	.+942    	; 0x920 <_port_switch>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <chSchIsPreemptionRequired>:
     578:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <ch>
     57c:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <ch+0x1>
     580:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <ch+0xb>
     584:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <ch+0xc>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	2c 91       	ld	r18, X
     58e:	94 81       	ldd	r25, Z+4	; 0x04
     590:	92 17       	cp	r25, r18
     592:	08 f0       	brcs	.+2      	; 0x596 <chSchIsPreemptionRequired+0x1e>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 95       	ret

00000598 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
  thread_t *otp = currp;
     59c:	a0 91 97 04 	lds	r26, 0x0497	; 0x800497 <ch+0xb>
     5a0:	b0 91 98 04 	lds	r27, 0x0498	; 0x800498 <ch+0xc>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     5a4:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <ch>
     5a8:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <ch+0x1>

  tqp->next             = tp->queue.next;
     5ac:	ea 01       	movw	r28, r20
     5ae:	e8 81       	ld	r30, Y
     5b0:	f9 81       	ldd	r31, Y+1	; 0x01
     5b2:	f0 93 8d 04 	sts	0x048D, r31	; 0x80048d <ch+0x1>
     5b6:	e0 93 8c 04 	sts	0x048C, r30	; 0x80048c <ch>
  tqp->next->queue.prev = (thread_t *)tqp;
     5ba:	8c e8       	ldi	r24, 0x8C	; 140
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	93 83       	std	Z+3, r25	; 0x03
     5c0:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     5c2:	50 93 98 04 	sts	0x0498, r21	; 0x800498 <ch+0xc>
     5c6:	40 93 97 04 	sts	0x0497, r20	; 0x800497 <ch+0xb>
  currp->state = CH_STATE_CURRENT;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     5ce:	1d 96       	adiw	r26, 0x0d	; 13
     5d0:	1c 92       	st	X, r1
     5d2:	1d 97       	sbiw	r26, 0x0d	; 13
     5d4:	14 96       	adiw	r26, 0x04	; 4
     5d6:	2c 91       	ld	r18, X
     5d8:	14 97       	sbiw	r26, 0x04	; 4
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <chSchDoReschedule+0x4a>
     5dc:	01 90       	ld	r0, Z+
     5de:	f0 81       	ld	r31, Z
     5e0:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     5e2:	94 81       	ldd	r25, Z+4	; 0x04
     5e4:	29 17       	cp	r18, r25
     5e6:	d0 f3       	brcs	.-12     	; 0x5dc <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	fc 93       	st	X, r31
     5ec:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	9c 93       	st	X, r25
     5f6:	8e 93       	st	-X, r24
     5f8:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     5fa:	ec 01       	movw	r28, r24
     5fc:	b9 83       	std	Y+1, r27	; 0x01
     5fe:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     600:	b3 83       	std	Z+3, r27	; 0x03
     602:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     604:	bd 01       	movw	r22, r26
     606:	ca 01       	movw	r24, r20
     608:	8b d1       	rcall	.+790    	; 0x920 <_port_switch>
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	fc 01       	movw	r30, r24
     616:	44 83       	std	Z+4, r20	; 0x04
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	85 87       	std	Z+13, r24	; 0x0d
     61c:	16 86       	std	Z+14, r1	; 0x0e
     61e:	43 8f       	std	Z+27, r20	; 0x1b
     620:	12 8e       	std	Z+26, r1	; 0x1a
     622:	11 8e       	std	Z+25, r1	; 0x19
     624:	10 8e       	std	Z+24, r1	; 0x18
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	87 87       	std	Z+15, r24	; 0x0f
     62a:	74 87       	std	Z+12, r23	; 0x0c
     62c:	63 87       	std	Z+11, r22	; 0x0b
     62e:	ac e8       	ldi	r26, 0x8C	; 140
     630:	b4 e0       	ldi	r27, 0x04	; 4
     632:	b0 87       	std	Z+8, r27	; 0x08
     634:	a7 83       	std	Z+7, r26	; 0x07
     636:	19 96       	adiw	r26, 0x09	; 9
     638:	cd 91       	ld	r28, X+
     63a:	dc 91       	ld	r29, X
     63c:	1a 97       	sbiw	r26, 0x0a	; 10
     63e:	d2 87       	std	Z+10, r29	; 0x0a
     640:	c1 87       	std	Z+9, r28	; 0x09
     642:	f8 87       	std	Y+8, r31	; 0x08
     644:	ef 83       	std	Y+7, r30	; 0x07
     646:	1a 96       	adiw	r26, 0x0a	; 10
     648:	fc 93       	st	X, r31
     64a:	ee 93       	st	-X, r30
     64c:	19 97       	sbiw	r26, 0x09	; 9
     64e:	cf 01       	movw	r24, r30
     650:	42 96       	adiw	r24, 0x12	; 18
     652:	93 8b       	std	Z+19, r25	; 0x13
     654:	82 8b       	std	Z+18, r24	; 0x12
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	95 8b       	std	Z+21, r25	; 0x15
     65a:	84 8b       	std	Z+20, r24	; 0x14
     65c:	97 8b       	std	Z+23, r25	; 0x17
     65e:	86 8b       	std	Z+22, r24	; 0x16
     660:	cf 01       	movw	r24, r30
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <chThdCreateSuspendedI>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	4c 81       	ldd	r20, Y+4	; 0x04
     670:	5d 81       	ldd	r21, Y+5	; 0x05
     672:	fa 01       	movw	r30, r20
     674:	7c 97       	sbiw	r30, 0x1c	; 28
     676:	ca 01       	movw	r24, r20
     678:	c1 97       	sbiw	r24, 0x31	; 49
     67a:	96 83       	std	Z+6, r25	; 0x06
     67c:	85 83       	std	Z+5, r24	; 0x05
     67e:	2f 81       	ldd	r18, Y+7	; 0x07
     680:	dc 01       	movw	r26, r24
     682:	52 96       	adiw	r26, 0x12	; 18
     684:	2c 93       	st	X, r18
     686:	52 97       	sbiw	r26, 0x12	; 18
     688:	28 85       	ldd	r18, Y+8	; 0x08
     68a:	51 96       	adiw	r26, 0x11	; 17
     68c:	2c 93       	st	X, r18
     68e:	51 97       	sbiw	r26, 0x11	; 17
     690:	29 85       	ldd	r18, Y+9	; 0x09
     692:	50 96       	adiw	r26, 0x10	; 16
     694:	2c 93       	st	X, r18
     696:	50 97       	sbiw	r26, 0x10	; 16
     698:	2a 85       	ldd	r18, Y+10	; 0x0a
     69a:	1f 96       	adiw	r26, 0x0f	; 15
     69c:	2c 93       	st	X, r18
     69e:	1f 97       	sbiw	r26, 0x0f	; 15
     6a0:	2f eb       	ldi	r18, 0xBF	; 191
     6a2:	34 e0       	ldi	r19, 0x04	; 4
     6a4:	53 96       	adiw	r26, 0x13	; 19
     6a6:	3c 93       	st	X, r19
     6a8:	53 97       	sbiw	r26, 0x13	; 19
     6aa:	54 96       	adiw	r26, 0x14	; 20
     6ac:	2c 93       	st	X, r18
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	28 81       	ld	r18, Y
     6b2:	39 81       	ldd	r19, Y+1	; 0x01
     6b4:	84 83       	std	Z+4, r24	; 0x04
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	95 87       	std	Z+13, r25	; 0x0d
     6ba:	16 86       	std	Z+14, r1	; 0x0e
     6bc:	83 8f       	std	Z+27, r24	; 0x1b
     6be:	12 8e       	std	Z+26, r1	; 0x1a
     6c0:	11 8e       	std	Z+25, r1	; 0x19
     6c2:	10 8e       	std	Z+24, r1	; 0x18
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	87 87       	std	Z+15, r24	; 0x0f
     6c8:	34 87       	std	Z+12, r19	; 0x0c
     6ca:	23 87       	std	Z+11, r18	; 0x0b
     6cc:	cc e8       	ldi	r28, 0x8C	; 140
     6ce:	d4 e0       	ldi	r29, 0x04	; 4
     6d0:	d0 87       	std	Z+8, r29	; 0x08
     6d2:	c7 83       	std	Z+7, r28	; 0x07
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	92 87       	std	Z+10, r25	; 0x0a
     6da:	81 87       	std	Z+9, r24	; 0x09
     6dc:	dc 01       	movw	r26, r24
     6de:	18 96       	adiw	r26, 0x08	; 8
     6e0:	fc 93       	st	X, r31
     6e2:	ee 93       	st	-X, r30
     6e4:	17 97       	sbiw	r26, 0x07	; 7
     6e6:	fa 87       	std	Y+10, r31	; 0x0a
     6e8:	e9 87       	std	Y+9, r30	; 0x09
     6ea:	ea 01       	movw	r28, r20
     6ec:	2a 97       	sbiw	r28, 0x0a	; 10
     6ee:	d9 83       	std	Y+1, r29	; 0x01
     6f0:	c8 83       	st	Y, r28
     6f2:	da 01       	movw	r26, r20
     6f4:	18 97       	sbiw	r26, 0x08	; 8
     6f6:	0b 2e       	mov	r0, r27
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	0c 92       	st	X, r0
     6fc:	11 97       	sbiw	r26, 0x01	; 1
     6fe:	ac 93       	st	X, r26
     700:	0a 2e       	mov	r0, r26
     702:	1b 2e       	mov	r1, r27
     704:	13 96       	adiw	r26, 0x03	; 3
     706:	1c 92       	st	X, r1
     708:	0e 92       	st	-X, r0
     70a:	11 24       	eor	r1, r1
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	cf 01       	movw	r24, r30
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <chThdCreate>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	f8 94       	cli
     71c:	a5 df       	rcall	.-182    	; 0x668 <chThdCreateSuspendedI>
     71e:	ec 01       	movw	r28, r24
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	dd de       	rcall	.-582    	; 0x4e0 <chSchWakeupS>
     726:	78 94       	sei
     728:	ce 01       	movw	r24, r28
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <chThdExitS>:
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	c0 91 97 04 	lds	r28, 0x0497	; 0x800497 <ch+0xb>
     73c:	d0 91 98 04 	lds	r29, 0x0498	; 0x800498 <ch+0xc>
     740:	99 8b       	std	Y+17, r25	; 0x11
     742:	88 8b       	std	Y+16, r24	; 0x10
     744:	8e 01       	movw	r16, r28
     746:	0e 5e       	subi	r16, 0xEE	; 238
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	8a 89       	ldd	r24, Y+18	; 0x12
     74c:	9b 89       	ldd	r25, Y+19	; 0x13
     74e:	08 17       	cp	r16, r24
     750:	19 07       	cpc	r17, r25
     752:	59 f0       	breq	.+22     	; 0x76a <chThdExitS+0x3a>
     754:	fc 01       	movw	r30, r24
     756:	20 81       	ld	r18, Z
     758:	31 81       	ldd	r19, Z+1	; 0x01
     75a:	3b 8b       	std	Y+19, r19	; 0x13
     75c:	2a 8b       	std	Y+18, r18	; 0x12
     75e:	4d de       	rcall	.-870    	; 0x3fa <chSchReadyI>
     760:	8a 89       	ldd	r24, Y+18	; 0x12
     762:	9b 89       	ldd	r25, Y+19	; 0x13
     764:	80 17       	cp	r24, r16
     766:	91 07       	cpc	r25, r17
     768:	a9 f7       	brne	.-22     	; 0x754 <chThdExitS+0x24>
     76a:	8f 85       	ldd	r24, Y+15	; 0x0f
     76c:	81 11       	cpse	r24, r1
     76e:	0c c0       	rjmp	.+24     	; 0x788 <chThdExitS+0x58>
     770:	e9 85       	ldd	r30, Y+9	; 0x09
     772:	fa 85       	ldd	r31, Y+10	; 0x0a
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	90 87       	std	Z+8, r25	; 0x08
     77a:	87 83       	std	Z+7, r24	; 0x07
     77c:	af 81       	ldd	r26, Y+7	; 0x07
     77e:	b8 85       	ldd	r27, Y+8	; 0x08
     780:	1a 96       	adiw	r26, 0x0a	; 10
     782:	fc 93       	st	X, r31
     784:	ee 93       	st	-X, r30
     786:	19 97       	sbiw	r26, 0x09	; 9
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	55 ce       	rjmp	.-854    	; 0x43e <chSchGoSleepS>

00000794 <chThdExit>:
     794:	f8 94       	cli
     796:	cc cf       	rjmp	.-104    	; 0x730 <chThdExitS>

00000798 <chThdSleep>:
     798:	f8 94       	cli
     79a:	bc 01       	movw	r22, r24
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	6b de       	rcall	.-810    	; 0x476 <chSchGoSleepTimeoutS>
     7a0:	78 94       	sei
     7a2:	08 95       	ret

000007a4 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     7ae:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <ch+0xb>
     7b2:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <ch+0xc>
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     7ba:	ec 01       	movw	r28, r24
     7bc:	aa 81       	ldd	r26, Y+2	; 0x02
     7be:	bb 81       	ldd	r27, Y+3	; 0x03
     7c0:	b3 83       	std	Z+3, r27	; 0x03
     7c2:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     7c4:	ed 93       	st	X+, r30
     7c6:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     7c8:	fb 83       	std	Y+3, r31	; 0x03
     7ca:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7cc:	84 e0       	ldi	r24, 0x04	; 4
}
     7ce:	df 91       	pop	r29
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     7d0:	cf 91       	pop	r28
}
     7d2:	51 ce       	rjmp	.-862    	; 0x476 <chSchGoSleepTimeoutS>
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     7e8:	e8 17       	cp	r30, r24
     7ea:	f9 07       	cpc	r31, r25
     7ec:	71 f0       	breq	.+28     	; 0x80a <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     7ee:	ec 01       	movw	r28, r24
     7f0:	a8 81       	ld	r26, Y
     7f2:	b9 81       	ldd	r27, Y+1	; 0x01
     7f4:	b1 83       	std	Z+1, r27	; 0x01
     7f6:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	fc 93       	st	X, r31
     7fc:	ee 93       	st	-X, r30
     7fe:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     800:	79 8b       	std	Y+17, r23	; 0x11
     802:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     804:	df 91       	pop	r29
  (void) chSchReadyI(tp);
     806:	cf 91       	pop	r28
     808:	f8 cd       	rjmp	.-1040   	; 0x3fa <chSchReadyI>
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     810:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     816:	93 83       	std	Z+3, r25	; 0x03
     818:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     81a:	15 82       	std	Z+5, r1	; 0x05
     81c:	14 82       	std	Z+4, r1	; 0x04
     81e:	08 95       	ret

00000820 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     820:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     822:	90 8d       	ldd	r25, Z+24	; 0x18
     824:	69 2b       	or	r22, r25
     826:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     828:	85 85       	ldd	r24, Z+13	; 0x0d
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	59 f0       	breq	.+22     	; 0x844 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     82e:	8b 30       	cpi	r24, 0x0B	; 11
     830:	09 f0       	breq	.+2      	; 0x834 <chEvtSignalI+0x14>
     832:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     834:	80 89       	ldd	r24, Z+16	; 0x10

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     836:	68 23       	and	r22, r24
     838:	86 13       	cpse	r24, r22
     83a:	fb cf       	rjmp	.-10     	; 0x832 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     83c:	11 8a       	std	Z+17, r1	; 0x11
     83e:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     840:	cf 01       	movw	r24, r30
     842:	db cd       	rjmp	.-1098   	; 0x3fa <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     844:	80 89       	ldd	r24, Z+16	; 0x10
     846:	68 23       	and	r22, r24
     848:	c9 f7       	brne	.-14     	; 0x83c <chEvtSignalI+0x1c>
     84a:	08 95       	ret

0000084c <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	7c 01       	movw	r14, r24
     858:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     85a:	fc 01       	movw	r30, r24
     85c:	c0 81       	ld	r28, Z
     85e:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	91 f0       	breq	.+36     	; 0x88a <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	81 2b       	or	r24, r17
     86a:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     86c:	11 23       	and	r17, r17
     86e:	19 f0       	breq	.+6      	; 0x876 <chEvtBroadcastFlagsI+0x2a>
     870:	9e 81       	ldd	r25, Y+6	; 0x06
     872:	89 23       	and	r24, r25
     874:	21 f0       	breq	.+8      	; 0x87e <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     876:	6c 81       	ldd	r22, Y+4	; 0x04
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	9b 81       	ldd	r25, Y+3	; 0x03
     87c:	d1 df       	rcall	.-94     	; 0x820 <chEvtSignalI>
    }
    elp = elp->next;
     87e:	09 90       	ld	r0, Y+
     880:	d8 81       	ld	r29, Y
     882:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     884:	ec 16       	cp	r14, r28
     886:	fd 06       	cpc	r15, r29
     888:	71 f7       	brne	.-36     	; 0x866 <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     896:	ef eb       	ldi	r30, 0xBF	; 191
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	84 e9       	ldi	r24, 0x94	; 148
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	91 83       	std	Z+1, r25	; 0x01
     8a0:	80 83       	st	Z, r24
     8a2:	84 e1       	ldi	r24, 0x14	; 20
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	93 83       	std	Z+3, r25	; 0x03
     8a8:	82 83       	std	Z+2, r24	; 0x02
     8aa:	08 95       	ret

000008ac <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     8ac:	f8 94       	cli
     8ae:	9b 01       	movw	r18, r22
     8b0:	21 50       	subi	r18, 0x01	; 1
     8b2:	31 09       	sbc	r19, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     8b4:	71 95       	neg	r23
     8b6:	61 95       	neg	r22
     8b8:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     8ba:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <ch_memcore>
     8be:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <ch_memcore+0x1>
     8c2:	4e 0f       	add	r20, r30
     8c4:	5f 1f       	adc	r21, r31
     8c6:	42 0f       	add	r20, r18
     8c8:	53 1f       	adc	r21, r19
     8ca:	46 23       	and	r20, r22
     8cc:	57 23       	and	r21, r23
  next = p + size;
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	68 23       	and	r22, r24
     8d4:	79 23       	and	r23, r25
     8d6:	ca 01       	movw	r24, r20
     8d8:	86 0f       	add	r24, r22
     8da:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     8dc:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <ch_memcore+0x2>
     8e0:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <ch_memcore+0x3>
     8e4:	28 17       	cp	r18, r24
     8e6:	39 07       	cpc	r19, r25
     8e8:	50 f0       	brcs	.+20     	; 0x8fe <chCoreAllocAlignedWithOffset+0x52>
     8ea:	8e 17       	cp	r24, r30
     8ec:	9f 07       	cpc	r25, r31
     8ee:	38 f0       	brcs	.+14     	; 0x8fe <chCoreAllocAlignedWithOffset+0x52>
    return NULL;
  }

  ch_memcore.nextmem = next;
     8f0:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <ch_memcore+0x1>
     8f4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <ch_memcore>

  return p;
     8f8:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     8fa:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     8fc:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     904:	08 95       	ret

00000906 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     906:	e4 e1       	ldi	r30, 0x14	; 20
     908:	f4 e0       	ldi	r31, 0x04	; 4
     90a:	86 e5       	ldi	r24, 0x56	; 86
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     912:	13 82       	std	Z+3, r1	; 0x03
     914:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     916:	15 82       	std	Z+5, r1	; 0x05
     918:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     91a:	8a e1       	ldi	r24, 0x1A	; 26
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	78 cf       	rjmp	.-272    	; 0x810 <chMtxObjectInit>

00000920 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     920:	2f 92       	push	r2
  asm volatile ("push    r3");
     922:	3f 92       	push	r3
  asm volatile ("push    r4");
     924:	4f 92       	push	r4
  asm volatile ("push    r5");
     926:	5f 92       	push	r5
  asm volatile ("push    r6");
     928:	6f 92       	push	r6
  asm volatile ("push    r7");
     92a:	7f 92       	push	r7
  asm volatile ("push    r8");
     92c:	8f 92       	push	r8
  asm volatile ("push    r9");
     92e:	9f 92       	push	r9
  asm volatile ("push    r10");
     930:	af 92       	push	r10
  asm volatile ("push    r11");
     932:	bf 92       	push	r11
  asm volatile ("push    r12");
     934:	cf 92       	push	r12
  asm volatile ("push    r13");
     936:	df 92       	push	r13
  asm volatile ("push    r14");
     938:	ef 92       	push	r14
  asm volatile ("push    r15");
     93a:	ff 92       	push	r15
  asm volatile ("push    r16");
     93c:	0f 93       	push	r16
  asm volatile ("push    r17");
     93e:	1f 93       	push	r17
  asm volatile ("push    r28");
     940:	cf 93       	push	r28
  asm volatile ("push    r29");
     942:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     944:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     946:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     948:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     94a:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     94c:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     94e:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     950:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     952:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     954:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     956:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     958:	df 91       	pop	r29
  asm volatile ("pop     r28");
     95a:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     95c:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     95e:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     960:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     962:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     964:	df 90       	pop	r13
  asm volatile ("pop     r12");
     966:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     968:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     96a:	af 90       	pop	r10
  asm volatile ("pop     r9");
     96c:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     96e:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     970:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     972:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     974:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     976:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     978:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     97a:	2f 90       	pop	r2
  asm volatile ("ret");
     97c:	08 95       	ret

0000097e <_port_thread_start>:
     97e:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     980:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     982:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     984:	09 95       	icall
     986:	06 cf       	rjmp	.-500    	; 0x794 <chThdExit>

00000988 <halInit>:
     988:	14 d3       	rcall	.+1576   	; 0xfb2 <hal_lld_init>
     98a:	8d e3       	ldi	r24, 0x3D	; 61
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	c5 d3       	rcall	.+1930   	; 0x111a <_pal_lld_init>
     990:	79 d2       	rcall	.+1266   	; 0xe84 <gptInit>
     992:	9a d2       	rcall	.+1332   	; 0xec8 <sdInit>
     994:	36 d5       	rcall	.+2668   	; 0x1402 <boardInit>
     996:	00 c0       	rjmp	.+0      	; 0x998 <stInit>

00000998 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
     998:	1d c4       	rjmp	.+2106   	; 0x11d4 <st_lld_init>

0000099a <iq_read>:
    }

    return MSG_OK;
  }

  return MSG_TIMEOUT;
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ec 01       	movw	r28, r24
     9b0:	6b 01       	movw	r12, r22
     9b2:	8a 01       	movw	r16, r20
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	84 17       	cp	r24, r20
     9ba:	95 07       	cpc	r25, r21
     9bc:	10 f4       	brcc	.+4      	; 0x9c2 <iq_read+0x28>
     9be:	0c 81       	ldd	r16, Y+4	; 0x04
     9c0:	1d 81       	ldd	r17, Y+5	; 0x05
     9c2:	6c 85       	ldd	r22, Y+12	; 0x0c
     9c4:	7d 85       	ldd	r23, Y+13	; 0x0d
     9c6:	e8 84       	ldd	r14, Y+8	; 0x08
     9c8:	f9 84       	ldd	r15, Y+9	; 0x09
     9ca:	e6 1a       	sub	r14, r22
     9cc:	f7 0a       	sbc	r15, r23
     9ce:	0e 15       	cp	r16, r14
     9d0:	1f 05       	cpc	r17, r15
     9d2:	98 f1       	brcs	.+102    	; 0xa3a <iq_read+0xa0>
     9d4:	e0 16       	cp	r14, r16
     9d6:	f1 06       	cpc	r15, r17
     9d8:	d0 f0       	brcs	.+52     	; 0xa0e <iq_read+0x74>
     9da:	a8 01       	movw	r20, r16
     9dc:	c6 01       	movw	r24, r12
     9de:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     9e2:	8e 81       	ldd	r24, Y+6	; 0x06
     9e4:	9f 81       	ldd	r25, Y+7	; 0x07
     9e6:	9d 87       	std	Y+13, r25	; 0x0d
     9e8:	8c 87       	std	Y+12, r24	; 0x0c
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	9d 81       	ldd	r25, Y+5	; 0x05
     9ee:	80 1b       	sub	r24, r16
     9f0:	91 0b       	sbc	r25, r17
     9f2:	9d 83       	std	Y+5, r25	; 0x05
     9f4:	8c 83       	std	Y+4, r24	; 0x04
     9f6:	c8 01       	movw	r24, r16
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	08 95       	ret
     a0e:	a7 01       	movw	r20, r14
     a10:	c6 01       	movw	r24, r12
     a12:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     a16:	58 01       	movw	r10, r16
     a18:	ae 18       	sub	r10, r14
     a1a:	bf 08       	sbc	r11, r15
     a1c:	6e 81       	ldd	r22, Y+6	; 0x06
     a1e:	7f 81       	ldd	r23, Y+7	; 0x07
     a20:	a5 01       	movw	r20, r10
     a22:	c6 01       	movw	r24, r12
     a24:	8e 0d       	add	r24, r14
     a26:	9f 1d       	adc	r25, r15
     a28:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	9f 81       	ldd	r25, Y+7	; 0x07
     a30:	a8 0e       	add	r10, r24
     a32:	b9 1e       	adc	r11, r25
     a34:	bd 86       	std	Y+13, r11	; 0x0d
     a36:	ac 86       	std	Y+12, r10	; 0x0c
     a38:	d8 cf       	rjmp	.-80     	; 0x9ea <iq_read+0x50>
     a3a:	a8 01       	movw	r20, r16
     a3c:	c6 01       	movw	r24, r12
     a3e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     a42:	8c 85       	ldd	r24, Y+12	; 0x0c
     a44:	9d 85       	ldd	r25, Y+13	; 0x0d
     a46:	80 0f       	add	r24, r16
     a48:	91 1f       	adc	r25, r17
     a4a:	9d 87       	std	Y+13, r25	; 0x0d
     a4c:	8c 87       	std	Y+12, r24	; 0x0c
     a4e:	cd cf       	rjmp	.-102    	; 0x9ea <iq_read+0x50>

00000a50 <oq_write>:
     a50:	af 92       	push	r10
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
     a66:	6b 01       	movw	r12, r22
     a68:	8a 01       	movw	r16, r20
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	9d 81       	ldd	r25, Y+5	; 0x05
     a6e:	84 17       	cp	r24, r20
     a70:	95 07       	cpc	r25, r21
     a72:	10 f4       	brcc	.+4      	; 0xa78 <oq_write+0x28>
     a74:	0c 81       	ldd	r16, Y+4	; 0x04
     a76:	1d 81       	ldd	r17, Y+5	; 0x05
     a78:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a7c:	e8 84       	ldd	r14, Y+8	; 0x08
     a7e:	f9 84       	ldd	r15, Y+9	; 0x09
     a80:	e8 1a       	sub	r14, r24
     a82:	f9 0a       	sbc	r15, r25
     a84:	0e 15       	cp	r16, r14
     a86:	1f 05       	cpc	r17, r15
     a88:	98 f1       	brcs	.+102    	; 0xaf0 <oq_write+0xa0>
     a8a:	e0 16       	cp	r14, r16
     a8c:	f1 06       	cpc	r15, r17
     a8e:	d0 f0       	brcs	.+52     	; 0xac4 <oq_write+0x74>
     a90:	a8 01       	movw	r20, r16
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     a98:	8e 81       	ldd	r24, Y+6	; 0x06
     a9a:	9f 81       	ldd	r25, Y+7	; 0x07
     a9c:	9b 87       	std	Y+11, r25	; 0x0b
     a9e:	8a 87       	std	Y+10, r24	; 0x0a
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	80 1b       	sub	r24, r16
     aa6:	91 0b       	sbc	r25, r17
     aa8:	9d 83       	std	Y+5, r25	; 0x05
     aaa:	8c 83       	std	Y+4, r24	; 0x04
     aac:	c8 01       	movw	r24, r16
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	08 95       	ret
     ac4:	a7 01       	movw	r20, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     acc:	58 01       	movw	r10, r16
     ace:	ae 18       	sub	r10, r14
     ad0:	bf 08       	sbc	r11, r15
     ad2:	b6 01       	movw	r22, r12
     ad4:	6e 0d       	add	r22, r14
     ad6:	7f 1d       	adc	r23, r15
     ad8:	a5 01       	movw	r20, r10
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	9f 81       	ldd	r25, Y+7	; 0x07
     ade:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     ae2:	8e 81       	ldd	r24, Y+6	; 0x06
     ae4:	9f 81       	ldd	r25, Y+7	; 0x07
     ae6:	a8 0e       	add	r10, r24
     ae8:	b9 1e       	adc	r11, r25
     aea:	bb 86       	std	Y+11, r11	; 0x0b
     aec:	aa 86       	std	Y+10, r10	; 0x0a
     aee:	d8 cf       	rjmp	.-80     	; 0xaa0 <oq_write+0x50>
     af0:	a8 01       	movw	r20, r16
     af2:	b6 01       	movw	r22, r12
     af4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
     af8:	8a 85       	ldd	r24, Y+10	; 0x0a
     afa:	9b 85       	ldd	r25, Y+11	; 0x0b
     afc:	80 0f       	add	r24, r16
     afe:	91 1f       	adc	r25, r17
     b00:	9b 87       	std	Y+11, r25	; 0x0b
     b02:	8a 87       	std	Y+10, r24	; 0x0a
     b04:	cd cf       	rjmp	.-102    	; 0xaa0 <oq_write+0x50>

00000b06 <iqObjectInit>:
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	fc 01       	movw	r30, r24
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	80 83       	st	Z, r24
     b10:	93 83       	std	Z+3, r25	; 0x03
     b12:	82 83       	std	Z+2, r24	; 0x02
     b14:	15 82       	std	Z+5, r1	; 0x05
     b16:	14 82       	std	Z+4, r1	; 0x04
     b18:	77 83       	std	Z+7, r23	; 0x07
     b1a:	66 83       	std	Z+6, r22	; 0x06
     b1c:	75 87       	std	Z+13, r23	; 0x0d
     b1e:	64 87       	std	Z+12, r22	; 0x0c
     b20:	73 87       	std	Z+11, r23	; 0x0b
     b22:	62 87       	std	Z+10, r22	; 0x0a
     b24:	64 0f       	add	r22, r20
     b26:	75 1f       	adc	r23, r21
     b28:	71 87       	std	Z+9, r23	; 0x09
     b2a:	60 87       	std	Z+8, r22	; 0x08
     b2c:	37 87       	std	Z+15, r19	; 0x0f
     b2e:	26 87       	std	Z+14, r18	; 0x0e
     b30:	11 8b       	std	Z+17, r17	; 0x11
     b32:	00 8b       	std	Z+16, r16	; 0x10
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <iqPutI>:
     b3a:	fc 01       	movw	r30, r24
     b3c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b3e:	b3 85       	ldd	r27, Z+11	; 0x0b
     b40:	84 85       	ldd	r24, Z+12	; 0x0c
     b42:	95 85       	ldd	r25, Z+13	; 0x0d
     b44:	a8 17       	cp	r26, r24
     b46:	b9 07       	cpc	r27, r25
     b48:	e1 f0       	breq	.+56     	; 0xb82 <iqPutI+0x48>
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	95 81       	ldd	r25, Z+5	; 0x05
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	95 83       	std	Z+5, r25	; 0x05
     b52:	84 83       	std	Z+4, r24	; 0x04
     b54:	cd 01       	movw	r24, r26
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	93 87       	std	Z+11, r25	; 0x0b
     b5a:	82 87       	std	Z+10, r24	; 0x0a
     b5c:	6c 93       	st	X, r22
     b5e:	22 85       	ldd	r18, Z+10	; 0x0a
     b60:	33 85       	ldd	r19, Z+11	; 0x0b
     b62:	80 85       	ldd	r24, Z+8	; 0x08
     b64:	91 85       	ldd	r25, Z+9	; 0x09
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	20 f0       	brcs	.+8      	; 0xb74 <iqPutI+0x3a>
     b6c:	86 81       	ldd	r24, Z+6	; 0x06
     b6e:	97 81       	ldd	r25, Z+7	; 0x07
     b70:	93 87       	std	Z+11, r25	; 0x0b
     b72:	82 87       	std	Z+10, r24	; 0x0a
     b74:	cf 01       	movw	r24, r30
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	31 de       	rcall	.-926    	; 0x7de <chThdDequeueNextI>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	08 95       	ret
     b82:	84 81       	ldd	r24, Z+4	; 0x04
     b84:	95 81       	ldd	r25, Z+5	; 0x05
     b86:	89 2b       	or	r24, r25
     b88:	01 f3       	breq	.-64     	; 0xb4a <iqPutI+0x10>
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	08 95       	ret

00000b90 <iqGetTimeout>:
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
     b9a:	8b 01       	movw	r16, r22
     b9c:	f8 94       	cli
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <iqGetTimeout+0x1a>
     ba0:	b8 01       	movw	r22, r16
     ba2:	ce 01       	movw	r24, r28
     ba4:	ff dd       	rcall	.-1026   	; 0x7a4 <chThdEnqueueTimeoutS>
     ba6:	97 fd       	sbrc	r25, 7
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <iqGetTimeout+0x68>
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	9d 81       	ldd	r25, Y+5	; 0x05
     bae:	89 2b       	or	r24, r25
     bb0:	b9 f3       	breq	.-18     	; 0xba0 <iqGetTimeout+0x10>
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	9d 81       	ldd	r25, Y+5	; 0x05
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9d 83       	std	Y+5, r25	; 0x05
     bba:	8c 83       	std	Y+4, r24	; 0x04
     bbc:	ec 85       	ldd	r30, Y+12	; 0x0c
     bbe:	fd 85       	ldd	r31, Y+13	; 0x0d
     bc0:	cf 01       	movw	r24, r30
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9d 87       	std	Y+13, r25	; 0x0d
     bc6:	8c 87       	std	Y+12, r24	; 0x0c
     bc8:	10 81       	ld	r17, Z
     bca:	28 85       	ldd	r18, Y+8	; 0x08
     bcc:	39 85       	ldd	r19, Y+9	; 0x09
     bce:	82 17       	cp	r24, r18
     bd0:	93 07       	cpc	r25, r19
     bd2:	20 f0       	brcs	.+8      	; 0xbdc <iqGetTimeout+0x4c>
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	9d 87       	std	Y+13, r25	; 0x0d
     bda:	8c 87       	std	Y+12, r24	; 0x0c
     bdc:	ee 85       	ldd	r30, Y+14	; 0x0e
     bde:	ff 85       	ldd	r31, Y+15	; 0x0f
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	11 f0       	breq	.+4      	; 0xbe8 <iqGetTimeout+0x58>
     be4:	ce 01       	movw	r24, r28
     be6:	09 95       	icall
     be8:	78 94       	sei
     bea:	81 2f       	mov	r24, r17
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret
     bf8:	78 94       	sei
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <iqReadTimeout>:
     c04:	6f 92       	push	r6
     c06:	7f 92       	push	r7
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	4c 01       	movw	r8, r24
     c22:	7b 01       	movw	r14, r22
     c24:	6a 01       	movw	r12, r20
     c26:	39 01       	movw	r6, r18
     c28:	fc 01       	movw	r30, r24
     c2a:	a6 84       	ldd	r10, Z+14	; 0x0e
     c2c:	b7 84       	ldd	r11, Z+15	; 0x0f
     c2e:	f8 94       	cli
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	45 2b       	or	r20, r21
     c36:	81 f4       	brne	.+32     	; 0xc58 <iqReadTimeout+0x54>
     c38:	1b c0       	rjmp	.+54     	; 0xc70 <iqReadTimeout+0x6c>
     c3a:	a1 14       	cp	r10, r1
     c3c:	b1 04       	cpc	r11, r1
     c3e:	19 f0       	breq	.+6      	; 0xc46 <iqReadTimeout+0x42>
     c40:	c4 01       	movw	r24, r8
     c42:	f5 01       	movw	r30, r10
     c44:	09 95       	icall
     c46:	78 94       	sei
     c48:	0c 0f       	add	r16, r28
     c4a:	1d 1f       	adc	r17, r29
     c4c:	ec 0e       	add	r14, r28
     c4e:	fd 1e       	adc	r15, r29
     c50:	f8 94       	cli
     c52:	0c 15       	cp	r16, r12
     c54:	1d 05       	cpc	r17, r13
     c56:	60 f4       	brcc	.+24     	; 0xc70 <iqReadTimeout+0x6c>
     c58:	a6 01       	movw	r20, r12
     c5a:	b7 01       	movw	r22, r14
     c5c:	c4 01       	movw	r24, r8
     c5e:	9d de       	rcall	.-710    	; 0x99a <iq_read>
     c60:	ec 01       	movw	r28, r24
     c62:	89 2b       	or	r24, r25
     c64:	51 f7       	brne	.-44     	; 0xc3a <iqReadTimeout+0x36>
     c66:	b3 01       	movw	r22, r6
     c68:	c4 01       	movw	r24, r8
     c6a:	9c dd       	rcall	.-1224   	; 0x7a4 <chThdEnqueueTimeoutS>
     c6c:	89 2b       	or	r24, r25
     c6e:	89 f3       	breq	.-30     	; 0xc52 <iqReadTimeout+0x4e>
     c70:	78 94       	sei
     c72:	c8 01       	movw	r24, r16
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	08 95       	ret

00000c92 <oqObjectInit>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	fc 01       	movw	r30, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	93 83       	std	Z+3, r25	; 0x03
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	55 83       	std	Z+5, r21	; 0x05
     ca2:	44 83       	std	Z+4, r20	; 0x04
     ca4:	77 83       	std	Z+7, r23	; 0x07
     ca6:	66 83       	std	Z+6, r22	; 0x06
     ca8:	75 87       	std	Z+13, r23	; 0x0d
     caa:	64 87       	std	Z+12, r22	; 0x0c
     cac:	73 87       	std	Z+11, r23	; 0x0b
     cae:	62 87       	std	Z+10, r22	; 0x0a
     cb0:	46 0f       	add	r20, r22
     cb2:	57 1f       	adc	r21, r23
     cb4:	51 87       	std	Z+9, r21	; 0x09
     cb6:	40 87       	std	Z+8, r20	; 0x08
     cb8:	37 87       	std	Z+15, r19	; 0x0f
     cba:	26 87       	std	Z+14, r18	; 0x0e
     cbc:	11 8b       	std	Z+17, r17	; 0x11
     cbe:	00 8b       	std	Z+16, r16	; 0x10
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	ec 01       	movw	r28, r24
     cd2:	f6 2e       	mov	r15, r22
     cd4:	8a 01       	movw	r16, r20
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     cd6:	f8 94       	cli
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <oqPutTimeout+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     cda:	b8 01       	movw	r22, r16
     cdc:	ce 01       	movw	r24, r28
     cde:	62 dd       	rcall	.-1340   	; 0x7a4 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     ce0:	97 fd       	sbrc	r25, 7
     ce2:	2a c0       	rjmp	.+84     	; 0xd38 <oqPutTimeout+0x72>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	89 2b       	or	r24, r25
     cea:	b9 f3       	breq	.-18     	; 0xcda <oqPutTimeout+0x14>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	8c 83       	std	Y+4, r24	; 0x04
  *oqp->q_wrptr++ = b;
     cf6:	ea 85       	ldd	r30, Y+10	; 0x0a
     cf8:	fb 85       	ldd	r31, Y+11	; 0x0b
     cfa:	cf 01       	movw	r24, r30
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9b 87       	std	Y+11, r25	; 0x0b
     d00:	8a 87       	std	Y+10, r24	; 0x0a
     d02:	f0 82       	st	Z, r15
  if (oqp->q_wrptr >= oqp->q_top) {
     d04:	2a 85       	ldd	r18, Y+10	; 0x0a
     d06:	3b 85       	ldd	r19, Y+11	; 0x0b
     d08:	88 85       	ldd	r24, Y+8	; 0x08
     d0a:	99 85       	ldd	r25, Y+9	; 0x09
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	20 f0       	brcs	.+8      	; 0xd1a <oqPutTimeout+0x54>
    oqp->q_wrptr = oqp->q_buffer;
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	9f 81       	ldd	r25, Y+7	; 0x07
     d16:	9b 87       	std	Y+11, r25	; 0x0b
     d18:	8a 87       	std	Y+10, r24	; 0x0a
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
     d1a:	ee 85       	ldd	r30, Y+14	; 0x0e
     d1c:	ff 85       	ldd	r31, Y+15	; 0x0f
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	11 f0       	breq	.+4      	; 0xd26 <oqPutTimeout+0x60>
    oqp->q_notify(oqp);
     d22:	ce 01       	movw	r24, r28
     d24:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     d26:	78 94       	sei
  }

  osalSysUnlock();

  return MSG_OK;
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	08 95       	ret
     d38:	78 94       	sei
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	08 95       	ret

00000d46 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
     d46:	cf 93       	push	r28
     d48:	fc 01       	movw	r30, r24

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
     d4a:	a4 85       	ldd	r26, Z+12	; 0x0c
     d4c:	b5 85       	ldd	r27, Z+13	; 0x0d
     d4e:	82 85       	ldd	r24, Z+10	; 0x0a
     d50:	93 85       	ldd	r25, Z+11	; 0x0b
     d52:	8a 17       	cp	r24, r26
     d54:	9b 07       	cpc	r25, r27
     d56:	e1 f0       	breq	.+56     	; 0xd90 <oqGetI+0x4a>
    uint8_t b;

    oqp->q_counter++;
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	95 81       	ldd	r25, Z+5	; 0x05
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	95 83       	std	Z+5, r25	; 0x05
     d60:	84 83       	std	Z+4, r24	; 0x04
    b = *oqp->q_rdptr++;
     d62:	cd 01       	movw	r24, r26
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	95 87       	std	Z+13, r25	; 0x0d
     d68:	84 87       	std	Z+12, r24	; 0x0c
     d6a:	cc 91       	ld	r28, X
    if (oqp->q_rdptr >= oqp->q_top) {
     d6c:	20 85       	ldd	r18, Z+8	; 0x08
     d6e:	31 85       	ldd	r19, Z+9	; 0x09
     d70:	82 17       	cp	r24, r18
     d72:	93 07       	cpc	r25, r19
     d74:	40 f4       	brcc	.+16     	; 0xd86 <oqGetI+0x40>
     d76:	cf 01       	movw	r24, r30
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	30 dd       	rcall	.-1440   	; 0x7de <chThdDequeueNextI>
      oqp->q_rdptr = oqp->q_buffer;
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
     d7e:	8c 2f       	mov	r24, r28
     d80:	90 e0       	ldi	r25, 0x00	; 0
  }

  return MSG_TIMEOUT;
}
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret
    uint8_t b;

    oqp->q_counter++;
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
      oqp->q_rdptr = oqp->q_buffer;
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	97 81       	ldd	r25, Z+7	; 0x07
     d8a:	95 87       	std	Z+13, r25	; 0x0d
     d8c:	84 87       	std	Z+12, r24	; 0x0c
     d8e:	f3 cf       	rjmp	.-26     	; 0xd76 <oqGetI+0x30>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
     d90:	84 81       	ldd	r24, Z+4	; 0x04
     d92:	95 81       	ldd	r25, Z+5	; 0x05
     d94:	89 2b       	or	r24, r25
     d96:	01 f3       	breq	.-64     	; 0xd58 <oqGetI+0x12>
    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
  }

  return MSG_TIMEOUT;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	f2 cf       	rjmp	.-28     	; 0xd82 <oqGetI+0x3c>

00000d9e <oqWriteI>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @iclass
 */
size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	ec 01       	movw	r28, r24
  qnotify_t nfy = oqp->q_notify;
     dac:	ee 84       	ldd	r14, Y+14	; 0x0e
  size_t wr;

  osalDbgCheckClassI();

  wr = oq_write(oqp, bp, n);
     dae:	ff 84       	ldd	r15, Y+15	; 0x0f
     db0:	4f de       	rcall	.-866    	; 0xa50 <oq_write>

  /* Inform the low side that the queue has at least one character
     available.*/
  if ((wr > (size_t)0) && (nfy != NULL)) {
     db2:	8c 01       	movw	r16, r24
     db4:	89 2b       	or	r24, r25
     db6:	31 f0       	breq	.+12     	; 0xdc4 <oqWriteI+0x26>
     db8:	e1 14       	cp	r14, r1
     dba:	f1 04       	cpc	r15, r1
    nfy(oqp);
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <oqWriteI+0x26>
     dbe:	ce 01       	movw	r24, r28
     dc0:	f7 01       	movw	r30, r14
  }

  return wr;
}
     dc2:	09 95       	icall
     dc4:	c8 01       	movw	r24, r16
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	08 95       	ret

00000dd4 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     dd4:	6f 92       	push	r6
     dd6:	7f 92       	push	r7
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	4c 01       	movw	r8, r24
     df2:	7b 01       	movw	r14, r22
     df4:	6a 01       	movw	r12, r20
     df6:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     df8:	fc 01       	movw	r30, r24
     dfa:	a6 84       	ldd	r10, Z+14	; 0x0e
     dfc:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     dfe:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     e00:	00 e0       	ldi	r16, 0x00	; 0
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	45 2b       	or	r20, r21
     e06:	81 f4       	brne	.+32     	; 0xe28 <oqWriteTimeout+0x54>
     e08:	1b c0       	rjmp	.+54     	; 0xe40 <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     e0a:	a1 14       	cp	r10, r1
     e0c:	b1 04       	cpc	r11, r1
     e0e:	19 f0       	breq	.+6      	; 0xe16 <oqWriteTimeout+0x42>
        nfy(oqp);
     e10:	c4 01       	movw	r24, r8
     e12:	f5 01       	movw	r30, r10
     e14:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     e16:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
     e18:	0c 0f       	add	r16, r28
     e1a:	1d 1f       	adc	r17, r29
      bp += done;
     e1c:	ec 0e       	add	r14, r28
     e1e:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     e20:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     e22:	0c 15       	cp	r16, r12
     e24:	1d 05       	cpc	r17, r13
     e26:	60 f4       	brcc	.+24     	; 0xe40 <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
     e28:	a6 01       	movw	r20, r12
     e2a:	b7 01       	movw	r22, r14
     e2c:	c4 01       	movw	r24, r8
     e2e:	10 de       	rcall	.-992    	; 0xa50 <oq_write>
     e30:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     e32:	89 2b       	or	r24, r25
     e34:	51 f7       	brne	.-44     	; 0xe0a <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     e36:	b3 01       	movw	r22, r6
     e38:	c4 01       	movw	r24, r8
     e3a:	b4 dc       	rcall	.-1688   	; 0x7a4 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     e3c:	89 2b       	or	r24, r25
     e3e:	89 f3       	breq	.-30     	; 0xe22 <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     e40:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
     e42:	c8 01       	movw	r24, r16
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	08 95       	ret

00000e62 <extStart>:
  ext_lld_stop(extp);
  extp->config = NULL;
  extp->state  = EXT_STOP;

  osalSysUnlock();
}
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
     e68:	f8 94       	cli
     e6a:	7a 83       	std	Y+2, r23	; 0x02
     e6c:	69 83       	std	Y+1, r22	; 0x01
     e6e:	13 d1       	rcall	.+550    	; 0x1096 <ext_lld_start>
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	88 83       	st	Y, r24
     e74:	78 94       	sei
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <extChannelEnable>:
  osalSysLock();
  osalDbgAssert((extp->state == EXT_ACTIVE) &&
                ((extp->config->channels[channel].mode &
                  EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
                "invalid state");
  extChannelEnableI(extp, channel);
     e7c:	f8 94       	cli
     e7e:	fe d0       	rcall	.+508    	; 0x107c <ext_lld_channel_enable>
     e80:	78 94       	sei
     e82:	08 95       	ret

00000e84 <gptInit>:
     e84:	05 c2       	rjmp	.+1034   	; 0x1290 <gpt_lld_init>

00000e86 <gptObjectInit>:
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
     e8c:	12 82       	std	Z+2, r1	; 0x02
     e8e:	11 82       	std	Z+1, r1	; 0x01
     e90:	08 95       	ret

00000e92 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     e92:	05 96       	adiw	r24, 0x05	; 5
     e94:	b7 ce       	rjmp	.-658    	; 0xc04 <iqReadTimeout>

00000e96 <_read>:
     e96:	2f ef       	ldi	r18, 0xFF	; 255
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	05 96       	adiw	r24, 0x05	; 5
     e9c:	b3 ce       	rjmp	.-666    	; 0xc04 <iqReadTimeout>

00000e9e <_writet>:
     e9e:	47 96       	adiw	r24, 0x17	; 23
     ea0:	99 cf       	rjmp	.-206    	; 0xdd4 <oqWriteTimeout>

00000ea2 <_write>:
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	47 96       	adiw	r24, 0x17	; 23
     ea8:	95 cf       	rjmp	.-214    	; 0xdd4 <oqWriteTimeout>

00000eaa <_gett>:
     eaa:	05 96       	adiw	r24, 0x05	; 5
     eac:	71 ce       	rjmp	.-798    	; 0xb90 <iqGetTimeout>

00000eae <_get>:
     eae:	6f ef       	ldi	r22, 0xFF	; 255
     eb0:	7f ef       	ldi	r23, 0xFF	; 255
     eb2:	05 96       	adiw	r24, 0x05	; 5
     eb4:	6d ce       	rjmp	.-806    	; 0xb90 <iqGetTimeout>

00000eb6 <_putt>:
     eb6:	47 96       	adiw	r24, 0x17	; 23
     eb8:	06 cf       	rjmp	.-500    	; 0xcc6 <oqPutTimeout>

00000eba <_put>:
     eba:	4f ef       	ldi	r20, 0xFF	; 255
     ebc:	5f ef       	ldi	r21, 0xFF	; 255
     ebe:	47 96       	adiw	r24, 0x17	; 23
     ec0:	02 cf       	rjmp	.-508    	; 0xcc6 <oqPutTimeout>

00000ec2 <_ctl>:
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	08 95       	ret

00000ec8 <sdInit>:
     ec8:	64 c2       	rjmp	.+1224   	; 0x1392 <sd_lld_init>

00000eca <sdObjectInit>:
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	9b 01       	movw	r18, r22
     eda:	7a 01       	movw	r14, r20
     edc:	fc 01       	movw	r30, r24
     ede:	86 e2       	ldi	r24, 0x26	; 38
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	81 93       	st	Z+, r24
     ee4:	91 93       	st	Z+, r25
     ee6:	fb 83       	std	Y+3, r31	; 0x03
     ee8:	ea 83       	std	Y+2, r30	; 0x02
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8c 83       	std	Y+4, r24	; 0x04
     eee:	be 01       	movw	r22, r28
     ef0:	67 5d       	subi	r22, 0xD7	; 215
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8e 01       	movw	r16, r28
     ef6:	40 e1       	ldi	r20, 0x10	; 16
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	ce 01       	movw	r24, r28
     efc:	05 96       	adiw	r24, 0x05	; 5
     efe:	03 de       	rcall	.-1018   	; 0xb06 <iqObjectInit>
     f00:	be 01       	movw	r22, r28
     f02:	67 5c       	subi	r22, 0xC7	; 199
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	97 01       	movw	r18, r14
     f08:	40 e1       	ldi	r20, 0x10	; 16
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	ce 01       	movw	r24, r28
     f0e:	47 96       	adiw	r24, 0x17	; 23
     f10:	c0 de       	rcall	.-640    	; 0xc92 <oqObjectInit>
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	08 95       	ret

00000f20 <sdStart>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	f8 94       	cli
     f28:	3b d2       	rcall	.+1142   	; 0x13a0 <sd_lld_start>
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	8c 83       	std	Y+4, r24	; 0x04
     f2e:	78 94       	sei
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	89 2b       	or	r24, r25
     f46:	51 f0       	breq	.+20     	; 0xf5c <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f48:	61 2f       	mov	r22, r17
     f4a:	ce 01       	movw	r24, r28
     f4c:	05 96       	adiw	r24, 0x05	; 5
     f4e:	f5 dd       	rcall	.-1046   	; 0xb3a <iqPutI>
     f50:	97 fd       	sbrc	r25, 7
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     f5c:	64 e0       	ldi	r22, 0x04	; 4
     f5e:	ce 01       	movw	r24, r28
     f60:	02 96       	adiw	r24, 0x02	; 2
     f62:	74 dc       	rcall	.-1816   	; 0x84c <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     f64:	61 2f       	mov	r22, r17
     f66:	ce 01       	movw	r24, r28
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	e7 dd       	rcall	.-1074   	; 0xb3a <iqPutI>
     f6c:	97 ff       	sbrs	r25, 7
     f6e:	f2 cf       	rjmp	.-28     	; 0xf54 <sdIncomingDataI+0x1e>
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	ce 01       	movw	r24, r28
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     f74:	02 96       	adiw	r24, 0x02	; 2
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
     f7c:	67 cc       	rjmp	.-1842   	; 0x84c <chEvtBroadcastFlagsI>

00000f7e <sdRequestDataI>:
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	8c 01       	movw	r16, r24
     f88:	47 96       	adiw	r24, 0x17	; 23
     f8a:	dd de       	rcall	.-582    	; 0xd46 <oqGetI>
     f8c:	ec 01       	movw	r28, r24
     f8e:	97 fd       	sbrc	r25, 7
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <sdRequestDataI+0x20>
     f92:	ce 01       	movw	r24, r28
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret
     f9e:	68 e0       	ldi	r22, 0x08	; 8
     fa0:	c8 01       	movw	r24, r16
     fa2:	02 96       	adiw	r24, 0x02	; 2
     fa4:	53 dc       	rcall	.-1882   	; 0x84c <chEvtBroadcastFlagsI>
     fa6:	ce 01       	movw	r24, r28
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	08 95       	ret

00000fb2 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     fb2:	08 95       	ret

00000fb4 <ext_lld_set_intx_edges>:
 * @notapi
 */
void ext_lld_init(void) {

  /* Driver initialization. */
  extObjectInit(&EXTD1);
     fb4:	89 2b       	or	r24, r25
     fb6:	81 f4       	brne	.+32     	; 0xfd8 <ext_lld_set_intx_edges+0x24>
     fb8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fbc:	61 30       	cpi	r22, 0x01	; 1
     fbe:	69 f0       	breq	.+26     	; 0xfda <ext_lld_set_intx_edges+0x26>
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	a1 f0       	breq	.+40     	; 0xfec <ext_lld_set_intx_edges+0x38>
     fc4:	63 30       	cpi	r22, 0x03	; 3
     fc6:	d9 f0       	breq	.+54     	; 0xffe <ext_lld_set_intx_edges+0x4a>
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fd8:	08 95       	ret
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fe0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     fea:	08 95       	ret
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ff2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ffc:	08 95       	ret
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1004:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    100e:	08 95       	ret

00001010 <__vector_1>:
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__avr_in_isr>
    1038:	e0 91 c5 04 	lds	r30, 0x04C5	; 0x8004c5 <EXTD1+0x1>
    103c:	f0 91 c6 04 	lds	r31, 0x04C6	; 0x8004c6 <EXTD1+0x2>
    1040:	04 80       	ldd	r0, Z+4	; 0x04
    1042:	f5 81       	ldd	r31, Z+5	; 0x05
    1044:	e0 2d       	mov	r30, r0
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	84 ec       	ldi	r24, 0xC4	; 196
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	09 95       	icall
    1050:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__avr_in_isr>
    1054:	91 da       	rcall	.-2782   	; 0x578 <chSchIsPreemptionRequired>
    1056:	81 11       	cpse	r24, r1
    1058:	9f da       	rcall	.-2754   	; 0x598 <chSchDoReschedule>
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <ext_lld_channel_enable>:
    107c:	67 2b       	or	r22, r23
    107e:	09 f0       	breq	.+2      	; 0x1082 <ext_lld_channel_enable+0x6>
    1080:	08 95       	ret
    1082:	e8 9a       	sbi	0x1d, 0	; 29
    1084:	dc 01       	movw	r26, r24
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	ed 91       	ld	r30, X+
    108a:	fc 91       	ld	r31, X
    108c:	12 97       	sbiw	r26, 0x02	; 2
    108e:	60 81       	ld	r22, Z
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	8f cf       	rjmp	.-226    	; 0xfb4 <ext_lld_set_intx_edges>

00001096 <ext_lld_start>:
 *
 * @param[in] extp  pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	7c 01       	movw	r14, r24

  expchannel_t line;

  if (extp->state == EXT_STOP)
    10a4:	dc 01       	movw	r26, r24
    10a6:	8c 91       	ld	r24, X
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	51 f1       	breq	.+84     	; 0x1100 <ext_lld_start+0x6a>
    10ac:	f7 01       	movw	r30, r14
    10ae:	21 81       	ldd	r18, Z+1	; 0x01
    10b0:	32 81       	ldd	r19, Z+2	; 0x02
 *
 * @param[in] extp  pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
    10b2:	01 e0       	ldi	r16, 0x01	; 1
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <ext_lld_start+0x36>
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {

#if AVR_EXT_USE_INT0 || defined(__DOXYGEN__)
  if (channel == INT0) {
    10bc:	20 97       	sbiw	r28, 0x00	; 0
    10be:	11 f1       	breq	.+68     	; 0x1104 <ext_lld_start+0x6e>

  if (extp->state == EXT_STOP)
    osalSysUnlock();

  /* Configuration of automatic channels. */
  for (line = 0; line < EXT_MAX_CHANNELS; line++) {
    10c0:	06 30       	cpi	r16, 0x06	; 6
    10c2:	11 05       	cpc	r17, r1
    10c4:	b1 f0       	breq	.+44     	; 0x10f2 <ext_lld_start+0x5c>
    10c6:	0f 5f       	subi	r16, 0xFF	; 255
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	21 96       	adiw	r28, 0x01	; 1
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
    10cc:	fe 01       	movw	r30, r28
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	ec 0f       	add	r30, r28
    10d4:	fd 1f       	adc	r31, r29
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	80 81       	ld	r24, Z
    10e0:	82 fd       	sbrc	r24, 2
    10e2:	ec cf       	rjmp	.-40     	; 0x10bc <ext_lld_start+0x26>
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {

#if AVR_EXT_USE_INT0 || defined(__DOXYGEN__)
  if (channel == INT0)
    10e4:	20 97       	sbiw	r28, 0x00	; 0
    10e6:	61 f7       	brne	.-40     	; 0x10c0 <ext_lld_start+0x2a>
    EIMSK &= ~(1 << INT0);
    10e8:	e8 98       	cbi	0x1d, 0	; 29
    10ea:	f7 01       	movw	r30, r14
    10ec:	21 81       	ldd	r18, Z+1	; 0x01
    10ee:	32 81       	ldd	r19, Z+2	; 0x02
    10f0:	ea cf       	rjmp	.-44     	; 0x10c6 <ext_lld_start+0x30>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    else
      ext_lld_channel_disable(extp, line);
  }
}
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret
    1100:	78 94       	sei
    1102:	d4 cf       	rjmp	.-88     	; 0x10ac <ext_lld_start+0x16>
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {

#if AVR_EXT_USE_INT0 || defined(__DOXYGEN__)
  if (channel == INT0) {
    EIMSK |= 1 << INT0;
    1104:	e8 9a       	sbi	0x1d, 0	; 29
    ext_lld_set_intx_edges(channel, extp->config->channels[channel].mode);
    1106:	d7 01       	movw	r26, r14
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	12 97       	sbiw	r26, 0x02	; 2
    1110:	60 81       	ld	r22, Z
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	4e df       	rcall	.-356    	; 0xfb4 <ext_lld_set_intx_edges>
    1118:	e8 cf       	rjmp	.-48     	; 0x10ea <ext_lld_start+0x54>

0000111a <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    111a:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    111c:	80 81       	ld	r24, Z
    111e:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    1128:	83 81       	ldd	r24, Z+3	; 0x03
    112a:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    112c:	84 81       	ldd	r24, Z+4	; 0x04
    112e:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    1130:	85 81       	ldd	r24, Z+5	; 0x05
    1132:	8a b9       	out	0x0a, r24	; 10
    1134:	08 95       	ret

00001136 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
    1136:	fc 01       	movw	r30, r24

  switch (mode) {
    1138:	42 30       	cpi	r20, 0x02	; 2
    113a:	c9 f0       	breq	.+50     	; 0x116e <_pal_lld_setgroupmode+0x38>
    113c:	98 f0       	brcs	.+38     	; 0x1164 <_pal_lld_setgroupmode+0x2e>
    113e:	45 30       	cpi	r20, 0x05	; 5
    1140:	b1 f0       	breq	.+44     	; 0x116e <_pal_lld_setgroupmode+0x38>
    1142:	46 30       	cpi	r20, 0x06	; 6
    1144:	21 f4       	brne	.+8      	; 0x114e <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	68 2b       	or	r22, r24
    114a:	61 83       	std	Z+1, r22	; 0x01
    114c:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    114e:	43 30       	cpi	r20, 0x03	; 3
    1150:	e9 f7       	brne	.-6      	; 0x114c <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    1152:	81 81       	ldd	r24, Z+1	; 0x01
    1154:	96 2f       	mov	r25, r22
    1156:	90 95       	com	r25
    1158:	89 23       	and	r24, r25
    115a:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	68 2b       	or	r22, r24
    1160:	62 83       	std	Z+2, r22	; 0x02
    break;
    1162:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
    1164:	44 23       	and	r20, r20
    1166:	19 f0       	breq	.+6      	; 0x116e <_pal_lld_setgroupmode+0x38>
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	99 f3       	breq	.-26     	; 0x1152 <_pal_lld_setgroupmode+0x1c>
    116c:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
    116e:	81 81       	ldd	r24, Z+1	; 0x01
    1170:	60 95       	com	r22
    1172:	86 23       	and	r24, r22
    1174:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	68 23       	and	r22, r24
    117a:	62 83       	std	Z+2, r22	; 0x02
    break;
    117c:	08 95       	ret

0000117e <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__avr_in_isr>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    11a6:	11 d8       	rcall	.-4062   	; 0x1ca <chSysTimerHandlerI>
    11a8:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__avr_in_isr>
    11ac:	e5 d9       	rcall	.-3126   	; 0x578 <chSchIsPreemptionRequired>
    11ae:	81 11       	cpse	r24, r1
}
    11b0:	f3 d9       	rcall	.-3098   	; 0x598 <chSchDoReschedule>
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
    11d8:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
    11da:	9f e7       	ldi	r25, 0x7F	; 127
    11dc:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
    11de:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
    11e0:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
    11e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    11e6:	08 95       	ret

000011e8 <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
    1210:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <GPTD1+0x6>
    1214:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <GPTD1+0x7>
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <GPTD1+0x7>
    121e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
    1222:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <GPTD1+0x4>
    1226:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <GPTD1+0x5>
    122a:	82 17       	cp	r24, r18
    122c:	93 07       	cpc	r25, r19
    122e:	b1 f0       	breq	.+44     	; 0x125c <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
    1230:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__avr_in_isr>
    1234:	a1 d9       	rcall	.-3262   	; 0x578 <chSchIsPreemptionRequired>
    1236:	81 11       	cpse	r24, r1
    1238:	af d9       	rcall	.-3234   	; 0x598 <chSchDoReschedule>
}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    125c:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <GPTD1+0x7>
    1260:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <GPTD1+0x6>
    if (gptp->state == GPT_ONESHOT) {
    1264:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <GPTD1>
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	41 f0       	breq	.+16     	; 0x127c <__vector_11+0x94>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
    126c:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <GPTD1+0x8>
    1270:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <GPTD1+0x9>
    1274:	87 ec       	ldi	r24, 0xC7	; 199
    1276:	94 e0       	ldi	r25, 0x04	; 4
    1278:	09 95       	icall
    127a:	da cf       	rjmp	.-76     	; 0x1230 <__vector_11+0x48>

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <GPTD1>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
    1282:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1286:	88 7f       	andi	r24, 0xF8	; 248
    1288:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  *regs_table[i].tifr = (1 << OCF1A);
    128c:	96 bb       	out	0x16, r25	; 22
    128e:	ee cf       	rjmp	.-36     	; 0x126c <__vector_11+0x84>

00001290 <gpt_lld_init>:
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
    1290:	87 ec       	ldi	r24, 0xC7	; 199
    1292:	94 e0       	ldi	r25, 0x04	; 4
    1294:	f8 cd       	rjmp	.-1040   	; 0xe86 <gptObjectInit>

00001296 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    1296:	e1 ec       	ldi	r30, 0xC1	; 193
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 62       	ori	r24, 0x20	; 32
    129e:	80 83       	st	Z, r24
    12a0:	08 95       	ret

000012a2 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__avr_in_isr>

  sra = UCSR0A;
    12ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    12ce:	98 2f       	mov	r25, r24
    12d0:	9c 71       	andi	r25, 0x1C	; 28
    12d2:	d9 f4       	brne	.+54     	; 0x130a <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    12d4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12d8:	81 ed       	ldi	r24, 0xD1	; 209
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	2c de       	rcall	.-936    	; 0xf36 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    12de:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__avr_in_isr>
    12e2:	4a d9       	rcall	.-3436   	; 0x578 <chSchIsPreemptionRequired>
    12e4:	81 11       	cpse	r24, r1
    12e6:	58 d9       	rcall	.-3408   	; 0x598 <chSchDoReschedule>
}
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    130a:	83 fd       	sbrc	r24, 3
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    130e:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    1310:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    1312:	60 62       	ori	r22, 0x20	; 32
    1314:	84 fd       	sbrc	r24, 4
    1316:	60 64       	ori	r22, 0x40	; 64
    1318:	83 ed       	ldi	r24, 0xD3	; 211
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	97 da       	rcall	.-2770   	; 0x84c <chEvtBroadcastFlagsI>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    131e:	da cf       	rjmp	.-76     	; 0x12d4 <__vector_18+0x32>
    1320:	60 e8       	ldi	r22, 0x80	; 128
    1322:	f6 cf       	rjmp	.-20     	; 0x1310 <__vector_18+0x6e>

00001324 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    134c:	81 ed       	ldi	r24, 0xD1	; 209
    134e:	94 e0       	ldi	r25, 0x04	; 4
    1350:	16 de       	rcall	.-980    	; 0xf7e <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1352:	97 fd       	sbrc	r25, 7
    1354:	18 c0       	rjmp	.+48     	; 0x1386 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1356:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  OSAL_IRQ_EPILOGUE();
    135a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__avr_in_isr>
    135e:	0c d9       	rcall	.-3560   	; 0x578 <chSchIsPreemptionRequired>
    1360:	81 11       	cpse	r24, r1
    1362:	1a d9       	rcall	.-3532   	; 0x598 <chSchDoReschedule>
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    1386:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    138a:	8f 7d       	andi	r24, 0xDF	; 223
    138c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1390:	e4 cf       	rjmp	.-56     	; 0x135a <__vector_19+0x36>

00001392 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    1392:	4b e4       	ldi	r20, 0x4B	; 75
    1394:	59 e0       	ldi	r21, 0x09	; 9
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	81 ed       	ldi	r24, 0xD1	; 209
    139c:	94 e0       	ldi	r25, 0x04	; 4
    139e:	95 cd       	rjmp	.-1238   	; 0xeca <sdObjectInit>

000013a0 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    13a0:	61 15       	cp	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	19 f1       	breq	.+70     	; 0x13ec <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    13a6:	81 5d       	subi	r24, 0xD1	; 209
    13a8:	94 40       	sbci	r25, 0x04	; 4
    13aa:	09 f0       	breq	.+2      	; 0x13ae <sd_lld_start+0xe>
    13ac:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    13ae:	fb 01       	movw	r30, r22
    13b0:	80 81       	ld	r24, Z
    13b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UCSR0A = (1 << U2X0);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    13c4:	88 e9       	ldi	r24, 0x98	; 152
    13c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  switch (config->sc_bits_per_char) {
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	b9 f0       	breq	.+46     	; 0x13fe <sd_lld_start+0x5e>
    13d0:	a0 f0       	brcs	.+40     	; 0x13fa <sd_lld_start+0x5a>
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <sd_lld_start+0x52>
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	71 f4       	brne	.+28     	; 0x13f6 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    13da:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13de:	84 60       	ori	r24, 0x04	; 4
    13e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    13e4:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    13e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    13ea:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    13ec:	6a e3       	ldi	r22, 0x3A	; 58
    13ee:	71 e0       	ldi	r23, 0x01	; 1
    13f0:	da cf       	rjmp	.-76     	; 0x13a6 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	f8 cf       	rjmp	.-16     	; 0x13e6 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    13f6:	86 e0       	ldi	r24, 0x06	; 6
    13f8:	f6 cf       	rjmp	.-20     	; 0x13e6 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	f4 cf       	rjmp	.-24     	; 0x13e6 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	f2 cf       	rjmp	.-28     	; 0x13e6 <sd_lld_start+0x46>

00001402 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    1402:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  EIMSK  = 0x00;
    1406:	1d ba       	out	0x1d, r1	; 29
    1408:	08 95       	ret

0000140a <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    140a:	2f 92       	push	r2
    140c:	3f 92       	push	r3
    140e:	4f 92       	push	r4
    1410:	5f 92       	push	r5
    1412:	6f 92       	push	r6
    1414:	7f 92       	push	r7
    1416:	8f 92       	push	r8
    1418:	9f 92       	push	r9
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	a2 97       	sbiw	r28, 0x22	; 34
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	1c 01       	movw	r2, r24
    1440:	6b 01       	movw	r12, r22
    1442:	58 8f       	std	Y+24, r21	; 0x18
    1444:	4f 8b       	std	Y+23, r20	; 0x17
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    1446:	1e 8a       	std	Y+22, r1	; 0x16
    1448:	1d 8a       	std	Y+21, r1	; 0x15
    144a:	9e 01       	movw	r18, r28
    144c:	2e 5f       	subi	r18, 0xFE	; 254
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	3e 87       	std	Y+14, r19	; 0x0e
    1452:	2d 87       	std	Y+13, r18	; 0x0d
    1454:	ae 01       	movw	r20, r28
    1456:	4f 5f       	subi	r20, 0xFF	; 255
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	58 8b       	std	Y+16, r21	; 0x10
    145c:	4f 87       	std	Y+15, r20	; 0x0f
    145e:	24 1b       	sub	r18, r20
    1460:	35 0b       	sbc	r19, r21
    1462:	38 a3       	std	Y+32, r19	; 0x20
    1464:	2f 8f       	std	Y+31, r18	; 0x1f
    1466:	21 50       	subi	r18, 0x01	; 1
    1468:	31 09       	sbc	r19, r1
    146a:	3a a3       	std	Y+34, r19	; 0x22
    146c:	29 a3       	std	Y+33, r18	; 0x21
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    146e:	ce 01       	movw	r24, r28
    1470:	0c 96       	adiw	r24, 0x0c	; 12
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	89 8b       	std	Y+17, r24	; 0x11
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1476:	86 01       	movw	r16, r12
    1478:	0f 5f       	subi	r16, 0xFF	; 255
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	d6 01       	movw	r26, r12
    147e:	6c 91       	ld	r22, X
    if (c == 0)
    1480:	66 23       	and	r22, r22
    1482:	b9 f0       	breq	.+46     	; 0x14b2 <chvprintf+0xa8>
      return n;
    if (c != '%') {
    1484:	65 32       	cpi	r22, 0x25	; 37
    1486:	81 f1       	breq	.+96     	; 0x14e8 <chvprintf+0xde>
      streamPut(chp, (uint8_t)c);
    1488:	d1 01       	movw	r26, r2
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	06 80       	ldd	r0, Z+6	; 0x06
    1490:	f7 81       	ldd	r31, Z+7	; 0x07
    1492:	e0 2d       	mov	r30, r0
    1494:	c1 01       	movw	r24, r2
    1496:	09 95       	icall
      n++;
    1498:	ed 89       	ldd	r30, Y+21	; 0x15
    149a:	fe 89       	ldd	r31, Y+22	; 0x16
    149c:	31 96       	adiw	r30, 0x01	; 1
    149e:	fe 8b       	std	Y+22, r31	; 0x16
    14a0:	ed 8b       	std	Y+21, r30	; 0x15
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    14a2:	68 01       	movw	r12, r16
    14a4:	86 01       	movw	r16, r12
    14a6:	0f 5f       	subi	r16, 0xFF	; 255
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	d6 01       	movw	r26, r12
    14ac:	6c 91       	ld	r22, X
    if (c == 0)
    14ae:	61 11       	cpse	r22, r1
    14b0:	e9 cf       	rjmp	.-46     	; 0x1484 <chvprintf+0x7a>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    14b2:	8d 89       	ldd	r24, Y+21	; 0x15
    14b4:	9e 89       	ldd	r25, Y+22	; 0x16
    14b6:	a2 96       	adiw	r28, 0x22	; 34
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	af 90       	pop	r10
    14d6:	9f 90       	pop	r9
    14d8:	8f 90       	pop	r8
    14da:	7f 90       	pop	r7
    14dc:	6f 90       	pop	r6
    14de:	5f 90       	pop	r5
    14e0:	4f 90       	pop	r4
    14e2:	3f 90       	pop	r3
    14e4:	2f 90       	pop	r2
    14e6:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    14e8:	d6 01       	movw	r26, r12
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	8c 91       	ld	r24, X
    14ee:	11 97       	sbiw	r26, 0x01	; 1
    14f0:	8d 32       	cpi	r24, 0x2D	; 45
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <chvprintf+0xec>
    14f4:	ec c0       	rjmp	.+472    	; 0x16ce <chvprintf+0x2c4>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    14f6:	1a 8e       	std	Y+26, r1	; 0x1a
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    14f8:	80 33       	cpi	r24, 0x30	; 48
    14fa:	09 f4       	brne	.+2      	; 0x14fe <chvprintf+0xf4>
    14fc:	e1 c0       	rjmp	.+450    	; 0x16c0 <chvprintf+0x2b6>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    14fe:	20 e2       	ldi	r18, 0x20	; 32
    1500:	29 8f       	std	Y+25, r18	; 0x19
    1502:	a8 01       	movw	r20, r16
    1504:	4f 5f       	subi	r20, 0xFF	; 255
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	ef 89       	ldd	r30, Y+23	; 0x17
    150e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1510:	13 c0       	rjmp	.+38     	; 0x1538 <chvprintf+0x12e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    1512:	90 81       	ld	r25, Z
    1514:	32 96       	adiw	r30, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    1516:	98 01       	movw	r18, r16
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	00 0f       	add	r16, r16
    151e:	11 1f       	adc	r17, r17
    1520:	00 0f       	add	r16, r16
    1522:	11 1f       	adc	r17, r17
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	02 0f       	add	r16, r18
    152a:	13 1f       	adc	r17, r19
    152c:	09 0f       	add	r16, r25
    152e:	11 1d       	adc	r17, r1
    1530:	4f 5f       	subi	r20, 0xFF	; 255
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	d6 01       	movw	r26, r12
    1536:	8c 91       	ld	r24, X
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    1538:	6a 01       	movw	r12, r20
      if (c >= '0' && c <= '9')
    153a:	90 ed       	ldi	r25, 0xD0	; 208
    153c:	98 0f       	add	r25, r24
    153e:	9a 30       	cpi	r25, 0x0A	; 10
    1540:	50 f3       	brcs	.-44     	; 0x1516 <chvprintf+0x10c>
        c -= '0';
      else if (c == '*')
    1542:	8a 32       	cpi	r24, 0x2A	; 42
    1544:	31 f3       	breq	.-52     	; 0x1512 <chvprintf+0x108>
    1546:	f8 8f       	std	Y+24, r31	; 0x18
    1548:	ef 8b       	std	Y+23, r30	; 0x17
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    154e:	8e 32       	cpi	r24, 0x2E	; 46
    1550:	09 f4       	brne	.+2      	; 0x1554 <chvprintf+0x14a>
    1552:	96 c0       	rjmp	.+300    	; 0x1680 <chvprintf+0x276>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1554:	98 2f       	mov	r25, r24
    1556:	9f 7d       	andi	r25, 0xDF	; 223
    1558:	9c 34       	cpi	r25, 0x4C	; 76
    155a:	09 f4       	brne	.+2      	; 0x155e <chvprintf+0x154>
    155c:	7e c0       	rjmp	.+252    	; 0x165a <chvprintf+0x250>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    155e:	af eb       	ldi	r26, 0xBF	; 191
    1560:	a8 0f       	add	r26, r24
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	aa 31       	cpi	r26, 0x1A	; 26
    1566:	08 f0       	brcs	.+2      	; 0x156a <chvprintf+0x160>
    1568:	90 e0       	ldi	r25, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    156a:	48 2f       	mov	r20, r24
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	fa 01       	movw	r30, r20
    1570:	e4 54       	subi	r30, 0x44	; 68
    1572:	f1 09       	sbc	r31, r1
    1574:	e5 33       	cpi	r30, 0x35	; 53
    1576:	f1 05       	cpc	r31, r1
    1578:	08 f4       	brcc	.+2      	; 0x157c <chvprintf+0x172>
    157a:	b1 c0       	rjmp	.+354    	; 0x16de <chvprintf+0x2d4>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1580:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    1582:	89 a0       	ldd	r8, Y+33	; 0x21
    1584:	9a a0       	ldd	r9, Y+34	; 0x22
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1586:	ae 01       	movw	r20, r28
    1588:	4f 5f       	subi	r20, 0xFF	; 255
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	7a 01       	movw	r14, r20
    158e:	58 01       	movw	r10, r16
    1590:	ae 1a       	sub	r10, r30
    1592:	bf 0a       	sbc	r11, r31
    1594:	b7 fc       	sbrc	r11, 7
    1596:	da c0       	rjmp	.+436    	; 0x174c <chvprintf+0x342>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1598:	5a 8d       	ldd	r21, Y+26	; 0x1a
    159a:	51 11       	cpse	r21, r1
    159c:	5b c0       	rjmp	.+182    	; 0x1654 <chvprintf+0x24a>
      width = -width;
    159e:	00 27       	eor	r16, r16
    15a0:	11 27       	eor	r17, r17
    15a2:	0a 19       	sub	r16, r10
    15a4:	1b 09       	sbc	r17, r11
    if (width < 0) {
    15a6:	09 f4       	brne	.+2      	; 0x15aa <chvprintf+0x1a0>
    15a8:	5f c1       	rjmp	.+702    	; 0x1868 <chvprintf+0x45e>
      if (*s == '-' && filler == '0') {
    15aa:	d7 01       	movw	r26, r14
    15ac:	8c 91       	ld	r24, X
    15ae:	8d 32       	cpi	r24, 0x2D	; 45
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <chvprintf+0x1aa>
    15b2:	64 c1       	rjmp	.+712    	; 0x187c <chvprintf+0x472>
    15b4:	79 8c       	ldd	r7, Y+25	; 0x19
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    15b6:	d1 01       	movw	r26, r2
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	06 80       	ldd	r0, Z+6	; 0x06
    15be:	f7 81       	ldd	r31, Z+7	; 0x07
    15c0:	e0 2d       	mov	r30, r0
    15c2:	67 2d       	mov	r22, r7
    15c4:	c1 01       	movw	r24, r2
    15c6:	09 95       	icall
        n++;
      } while (++width != 0);
    15c8:	0f 5f       	subi	r16, 0xFF	; 255
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	a1 f7       	brne	.-24     	; 0x15b6 <chvprintf+0x1ac>
    15ce:	2d 89       	ldd	r18, Y+21	; 0x15
    15d0:	3e 89       	ldd	r19, Y+22	; 0x16
    15d2:	2f 5f       	subi	r18, 0xFF	; 255
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	8a 19       	sub	r24, r10
    15dc:	9b 09       	sbc	r25, r11
    15de:	a9 01       	movw	r20, r18
    15e0:	48 1b       	sub	r20, r24
    15e2:	59 0b       	sbc	r21, r25
    15e4:	5e 8b       	std	Y+22, r21	; 0x16
    15e6:	4d 8b       	std	Y+21, r20	; 0x15
    }
    while (--i >= 0) {
    15e8:	97 fc       	sbrc	r9, 7
    15ea:	45 cf       	rjmp	.-374    	; 0x1476 <chvprintf+0x6c>
    15ec:	a1 2c       	mov	r10, r1
    15ee:	b1 2c       	mov	r11, r1
    15f0:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)*s++);
    15f2:	f7 01       	movw	r30, r14
    15f4:	61 91       	ld	r22, Z+
    15f6:	7f 01       	movw	r14, r30
    15f8:	d1 01       	movw	r26, r2
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	06 80       	ldd	r0, Z+6	; 0x06
    1600:	f7 81       	ldd	r31, Z+7	; 0x07
    1602:	e0 2d       	mov	r30, r0
    1604:	c1 01       	movw	r24, r2
    1606:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1608:	01 50       	subi	r16, 0x01	; 1
    160a:	11 09       	sbc	r17, r1
    160c:	90 f7       	brcc	.-28     	; 0x15f2 <chvprintf+0x1e8>
    160e:	8d 89       	ldd	r24, Y+21	; 0x15
    1610:	9e 89       	ldd	r25, Y+22	; 0x16
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	97 fc       	sbrc	r9, 7
    1616:	2f c1       	rjmp	.+606    	; 0x1876 <chvprintf+0x46c>
    1618:	f4 01       	movw	r30, r8
    161a:	e8 0f       	add	r30, r24
    161c:	f9 1f       	adc	r31, r25
    161e:	fe 8b       	std	Y+22, r31	; 0x16
    1620:	ed 8b       	std	Y+21, r30	; 0x15
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1622:	a1 14       	cp	r10, r1
    1624:	b1 04       	cpc	r11, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <chvprintf+0x220>
    1628:	26 cf       	rjmp	.-436    	; 0x1476 <chvprintf+0x6c>
    162a:	85 01       	movw	r16, r10
    162c:	f9 8c       	ldd	r15, Y+25	; 0x19
      streamPut(chp, (uint8_t)filler);
    162e:	d1 01       	movw	r26, r2
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	06 80       	ldd	r0, Z+6	; 0x06
    1636:	f7 81       	ldd	r31, Z+7	; 0x07
    1638:	e0 2d       	mov	r30, r0
    163a:	6f 2d       	mov	r22, r15
    163c:	c1 01       	movw	r24, r2
    163e:	09 95       	icall
      n++;
      width--;
    1640:	01 50       	subi	r16, 0x01	; 1
    1642:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1644:	a1 f7       	brne	.-24     	; 0x162e <chvprintf+0x224>
    1646:	ed 89       	ldd	r30, Y+21	; 0x15
    1648:	fe 89       	ldd	r31, Y+22	; 0x16
    164a:	ea 0d       	add	r30, r10
    164c:	fb 1d       	adc	r31, r11
    164e:	fe 8b       	std	Y+22, r31	; 0x16
    1650:	ed 8b       	std	Y+21, r30	; 0x15
    1652:	11 cf       	rjmp	.-478    	; 0x1476 <chvprintf+0x6c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1654:	97 fe       	sbrs	r9, 7
    1656:	cc cf       	rjmp	.-104    	; 0x15f0 <chvprintf+0x1e6>
    1658:	e4 cf       	rjmp	.-56     	; 0x1622 <chvprintf+0x218>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
    165a:	d6 01       	movw	r26, r12
    165c:	4c 91       	ld	r20, X
    165e:	44 23       	and	r20, r20
    1660:	09 f4       	brne	.+2      	; 0x1664 <chvprintf+0x25a>
    1662:	8c cf       	rjmp	.-232    	; 0x157c <chvprintf+0x172>
        c = *fmt++;
    1664:	ff ef       	ldi	r31, 0xFF	; 255
    1666:	cf 1a       	sub	r12, r31
    1668:	df 0a       	sbc	r13, r31
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    166a:	84 2f       	mov	r24, r20
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	fc 01       	movw	r30, r24
    1670:	e4 54       	subi	r30, 0x44	; 68
    1672:	f1 09       	sbc	r31, r1
    1674:	e5 33       	cpi	r30, 0x35	; 53
    1676:	f1 05       	cpc	r31, r1
    1678:	08 f4       	brcc	.+2      	; 0x167c <chvprintf+0x272>
    167a:	f9 c0       	rjmp	.+498    	; 0x186e <chvprintf+0x464>
    167c:	84 2f       	mov	r24, r20
    167e:	7e cf       	rjmp	.-260    	; 0x157c <chvprintf+0x172>
    1680:	df 01       	movw	r26, r30
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <chvprintf+0x298>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    1684:	9c 91       	ld	r25, X
    1686:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    1688:	a9 01       	movw	r20, r18
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	24 0f       	add	r18, r20
    169c:	35 1f       	adc	r19, r21
        precision += c;
    169e:	29 0f       	add	r18, r25
    16a0:	31 1d       	adc	r19, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    16a2:	ef ef       	ldi	r30, 0xFF	; 255
    16a4:	ce 1a       	sub	r12, r30
    16a6:	de 0a       	sbc	r13, r30
    16a8:	f6 01       	movw	r30, r12
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    16ae:	90 ed       	ldi	r25, 0xD0	; 208
    16b0:	98 0f       	add	r25, r24
    16b2:	9a 30       	cpi	r25, 0x0A	; 10
    16b4:	48 f3       	brcs	.-46     	; 0x1688 <chvprintf+0x27e>
          c -= '0';
        else if (c == '*')
    16b6:	8a 32       	cpi	r24, 0x2A	; 42
    16b8:	29 f3       	breq	.-54     	; 0x1684 <chvprintf+0x27a>
    16ba:	b8 8f       	std	Y+24, r27	; 0x18
    16bc:	af 8b       	std	Y+23, r26	; 0x17
    16be:	4a cf       	rjmp	.-364    	; 0x1554 <chvprintf+0x14a>
    16c0:	f8 01       	movw	r30, r16
    16c2:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    16c4:	0f 5f       	subi	r16, 0xFF	; 255
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    16c8:	f0 e3       	ldi	r31, 0x30	; 48
    16ca:	f9 8f       	std	Y+25, r31	; 0x19
    16cc:	1a cf       	rjmp	.-460    	; 0x1502 <chvprintf+0xf8>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    16ce:	86 01       	movw	r16, r12
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	8c 91       	ld	r24, X
      left_align = TRUE;
    16d8:	b1 e0       	ldi	r27, 0x01	; 1
    16da:	ba 8f       	std	Y+26, r27	; 0x1a
    16dc:	0d cf       	rjmp	.-486    	; 0x14f8 <chvprintf+0xee>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    16de:	ec 5c       	subi	r30, 0xCC	; 204
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    16e6:	8f 89       	ldd	r24, Y+23	; 0x17
    16e8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ea:	02 96       	adiw	r24, 0x02	; 2
    16ec:	af 89       	ldd	r26, Y+23	; 0x17
    16ee:	b8 8d       	ldd	r27, Y+24	; 0x18
    16f0:	ed 90       	ld	r14, X+
    16f2:	fc 90       	ld	r15, X
    16f4:	e1 14       	cp	r14, r1
    16f6:	f1 04       	cpc	r15, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <chvprintf+0x2f2>
    16fa:	6f c1       	rjmp	.+734    	; 0x19da <chvprintf+0x5d0>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    16fc:	f7 01       	movw	r30, r14
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    16fe:	21 15       	cp	r18, r1
    1700:	31 05       	cpc	r19, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <chvprintf+0x2fc>
    1704:	d5 c0       	rjmp	.+426    	; 0x18b0 <chvprintf+0x4a6>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1706:	40 81       	ld	r20, Z
    1708:	44 23       	and	r20, r20
    170a:	09 f4       	brne	.+2      	; 0x170e <chvprintf+0x304>
    170c:	6b c1       	rjmp	.+726    	; 0x19e4 <chvprintf+0x5da>
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	31 09       	sbc	r19, r1
    1712:	f7 01       	movw	r30, r14
    1714:	31 96       	adiw	r30, 0x01	; 1
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <chvprintf+0x318>
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	31 09       	sbc	r19, r1
    171c:	08 f4       	brcc	.+2      	; 0x1720 <chvprintf+0x316>
    171e:	52 c1       	rjmp	.+676    	; 0x19c4 <chvprintf+0x5ba>
    1720:	fb 01       	movw	r30, r22
    1722:	bf 01       	movw	r22, r30
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	40 81       	ld	r20, Z
    172a:	41 11       	cpse	r20, r1
    172c:	f5 cf       	rjmp	.-22     	; 0x1718 <chvprintf+0x30e>
    172e:	ee 19       	sub	r30, r14
    1730:	ff 09       	sbc	r31, r15
    1732:	4f 01       	movw	r8, r30
    1734:	21 e0       	ldi	r18, 0x01	; 1
    1736:	82 1a       	sub	r8, r18
    1738:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    173a:	98 8f       	std	Y+24, r25	; 0x18
    173c:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    173e:	30 e2       	ldi	r19, 0x20	; 32
    1740:	39 8f       	std	Y+25, r19	; 0x19
    1742:	58 01       	movw	r10, r16
    1744:	ae 1a       	sub	r10, r30
    1746:	bf 0a       	sbc	r11, r31
    1748:	b7 fe       	sbrs	r11, 7
    174a:	26 cf       	rjmp	.-436    	; 0x1598 <chvprintf+0x18e>
    174c:	a1 2c       	mov	r10, r1
    174e:	b1 2c       	mov	r11, r1
    1750:	23 cf       	rjmp	.-442    	; 0x1598 <chvprintf+0x18e>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1752:	af 89       	ldd	r26, Y+23	; 0x17
    1754:	b8 8d       	ldd	r27, Y+24	; 0x18
    1756:	8c 91       	ld	r24, X
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    175c:	f8 a1       	ldd	r31, Y+32	; 0x20
      break;
    175e:	89 a0       	ldd	r8, Y+33	; 0x21
    1760:	9a a0       	ldd	r9, Y+34	; 0x22

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1762:	12 96       	adiw	r26, 0x02	; 2
    1764:	b8 8f       	std	Y+24, r27	; 0x18
    1766:	af 8b       	std	Y+23, r26	; 0x17
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1768:	b0 e2       	ldi	r27, 0x20	; 32
    176a:	b9 8f       	std	Y+25, r27	; 0x19
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    176c:	9e 01       	movw	r18, r28
    176e:	2f 5f       	subi	r18, 0xFF	; 255
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1774:	0c cf       	rjmp	.-488    	; 0x158e <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1776:	91 e0       	ldi	r25, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1778:	4a e0       	ldi	r20, 0x0A	; 10
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	70 e0       	ldi	r23, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1780:	91 11       	cpse	r25, r1
    1782:	67 c0       	rjmp	.+206    	; 0x1852 <chvprintf+0x448>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1784:	ef 89       	ldd	r30, Y+23	; 0x17
    1786:	f8 8d       	ldd	r31, Y+24	; 0x18
    1788:	80 80       	ld	r8, Z
    178a:	91 80       	ldd	r9, Z+1	; 0x01
    178c:	a1 2c       	mov	r10, r1
    178e:	b1 2c       	mov	r11, r1
    1790:	32 96       	adiw	r30, 0x02	; 2
    1792:	f8 8f       	std	Y+24, r31	; 0x18
    1794:	ef 8b       	std	Y+23, r30	; 0x17
    1796:	24 01       	movw	r4, r8
    1798:	35 01       	movw	r6, r10
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    179a:	9e 01       	movw	r18, r28
    179c:	24 5f       	subi	r18, 0xF4	; 244
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	3c 8b       	std	Y+20, r19	; 0x14
    17a2:	2b 8b       	std	Y+19, r18	; 0x13
    17a4:	1c 8f       	std	Y+28, r17	; 0x1c
    17a6:	0b 8f       	std	Y+27, r16	; 0x1b
    17a8:	7a 01       	movw	r14, r20
    17aa:	8b 01       	movw	r16, r22
    17ac:	de 8e       	std	Y+30, r13	; 0x1e
    17ae:	cd 8e       	std	Y+29, r12	; 0x1d
  do {
    i = (int)(l % radix);
    17b0:	c5 01       	movw	r24, r10
    17b2:	b4 01       	movw	r22, r8
    17b4:	a8 01       	movw	r20, r16
    17b6:	97 01       	movw	r18, r14
    17b8:	0e 94 92 14 	call	0x2924	; 0x2924 <__divmodsi4>
    i += '0';
    17bc:	9b 01       	movw	r18, r22
    17be:	20 5d       	subi	r18, 0xD0	; 208
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i > '9')
    17c2:	2a 33       	cpi	r18, 0x3A	; 58
    17c4:	31 05       	cpc	r19, r1
    17c6:	14 f0       	brlt	.+4      	; 0x17cc <chvprintf+0x3c2>
      i += 'A' - '0' - 10;
    17c8:	29 5f       	subi	r18, 0xF9	; 249
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    *--q = i;
    17cc:	d2 2e       	mov	r13, r18
    17ce:	ab 89       	ldd	r26, Y+19	; 0x13
    17d0:	bc 89       	ldd	r27, Y+20	; 0x14
    17d2:	2e 93       	st	-X, r18
    17d4:	bc 8b       	std	Y+20, r27	; 0x14
    17d6:	ab 8b       	std	Y+19, r26	; 0x13
    l /= radix;
    17d8:	c5 01       	movw	r24, r10
    17da:	b4 01       	movw	r22, r8
    17dc:	a8 01       	movw	r20, r16
    17de:	97 01       	movw	r18, r14
    17e0:	0e 94 92 14 	call	0x2924	; 0x2924 <__divmodsi4>
    17e4:	49 01       	movw	r8, r18
    17e6:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    17e8:	c3 01       	movw	r24, r6
    17ea:	b2 01       	movw	r22, r4
    17ec:	a8 01       	movw	r20, r16
    17ee:	97 01       	movw	r18, r14
    17f0:	0e 94 92 14 	call	0x2924	; 0x2924 <__divmodsi4>
    17f4:	29 01       	movw	r4, r18
    17f6:	3a 01       	movw	r6, r20
    17f8:	23 2b       	or	r18, r19
    17fa:	24 2b       	or	r18, r20
    17fc:	25 2b       	or	r18, r21
    17fe:	c1 f6       	brne	.-80     	; 0x17b0 <chvprintf+0x3a6>
    1800:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1802:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1804:	fd 2c       	mov	r15, r13
    1806:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1808:	de 8c       	ldd	r13, Y+30	; 0x1e

  i = (int)(p + MAX_FILLER - q);
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	9a 89       	ldd	r25, Y+18	; 0x12
    180e:	eb 89       	ldd	r30, Y+19	; 0x13
    1810:	fc 89       	ldd	r31, Y+20	; 0x14
    1812:	8e 1b       	sub	r24, r30
    1814:	9f 0b       	sbc	r25, r31
    1816:	de 01       	movw	r26, r28
    1818:	11 96       	adiw	r26, 0x01	; 1
    181a:	31 96       	adiw	r30, 0x01	; 1
    181c:	9d 01       	movw	r18, r26
    181e:	28 0f       	add	r18, r24
    1820:	39 1f       	adc	r19, r25
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <chvprintf+0x41c>
    1824:	f1 90       	ld	r15, Z+
  do
    *p++ = *q++;
    1826:	fd 92       	st	X+, r15
  while (--i);
    1828:	a2 17       	cp	r26, r18
    182a:	b3 07       	cpc	r27, r19
    182c:	d9 f7       	brne	.-10     	; 0x1824 <chvprintf+0x41a>
    182e:	4c 01       	movw	r8, r24
    1830:	f1 e0       	ldi	r31, 0x01	; 1
    1832:	8f 1a       	sub	r8, r31
    1834:	91 08       	sbc	r9, r1
    1836:	fc 01       	movw	r30, r24
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1838:	9e 01       	movw	r18, r28
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	79 01       	movw	r14, r18
    1840:	a6 ce       	rjmp	.-692    	; 0x158e <chvprintf+0x184>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	48 e0       	ldi	r20, 0x08	; 8
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    184c:	99 23       	and	r25, r25
    184e:	09 f4       	brne	.+2      	; 0x1852 <chvprintf+0x448>
    1850:	99 cf       	rjmp	.-206    	; 0x1784 <chvprintf+0x37a>
        l = va_arg(ap, unsigned long);
    1852:	af 89       	ldd	r26, Y+23	; 0x17
    1854:	b8 8d       	ldd	r27, Y+24	; 0x18
    1856:	8d 90       	ld	r8, X+
    1858:	9d 90       	ld	r9, X+
    185a:	ad 90       	ld	r10, X+
    185c:	bc 90       	ld	r11, X
    185e:	13 97       	sbiw	r26, 0x03	; 3
    1860:	14 96       	adiw	r26, 0x04	; 4
    1862:	b8 8f       	std	Y+24, r27	; 0x18
    1864:	af 8b       	std	Y+23, r26	; 0x17
    1866:	97 cf       	rjmp	.-210    	; 0x1796 <chvprintf+0x38c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1868:	97 fe       	sbrs	r9, 7
    186a:	c0 ce       	rjmp	.-640    	; 0x15ec <chvprintf+0x1e2>
    186c:	04 ce       	rjmp	.-1016   	; 0x1476 <chvprintf+0x6c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    186e:	e7 59       	subi	r30, 0x97	; 151
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__tablejump2__>
    1876:	81 2c       	mov	r8, r1
    1878:	91 2c       	mov	r9, r1
    187a:	ce ce       	rjmp	.-612    	; 0x1618 <chvprintf+0x20e>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    187c:	b9 8d       	ldd	r27, Y+25	; 0x19
    187e:	b0 33       	cpi	r27, 0x30	; 48
    1880:	09 f0       	breq	.+2      	; 0x1884 <chvprintf+0x47a>
    1882:	98 ce       	rjmp	.-720    	; 0x15b4 <chvprintf+0x1aa>
        streamPut(chp, (uint8_t)*s++);
    1884:	ef ef       	ldi	r30, 0xFF	; 255
    1886:	ee 1a       	sub	r14, r30
    1888:	fe 0a       	sbc	r15, r30
    188a:	d1 01       	movw	r26, r2
    188c:	ed 91       	ld	r30, X+
    188e:	fc 91       	ld	r31, X
    1890:	06 80       	ldd	r0, Z+6	; 0x06
    1892:	f7 81       	ldd	r31, Z+7	; 0x07
    1894:	e0 2d       	mov	r30, r0
    1896:	6d e2       	ldi	r22, 0x2D	; 45
    1898:	c1 01       	movw	r24, r2
    189a:	09 95       	icall
        n++;
    189c:	ed 89       	ldd	r30, Y+21	; 0x15
    189e:	fe 89       	ldd	r31, Y+22	; 0x16
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	fe 8b       	std	Y+22, r31	; 0x16
    18a4:	ed 8b       	std	Y+21, r30	; 0x15
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	8f 1a       	sub	r8, r31
    18aa:	91 08       	sbc	r9, r1
    18ac:	79 8c       	ldd	r7, Y+25	; 0x19
    18ae:	83 ce       	rjmp	.-762    	; 0x15b6 <chvprintf+0x1ac>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    18b0:	20 81       	ld	r18, Z
    18b2:	22 23       	and	r18, r18
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <chvprintf+0x4ae>
    18b6:	96 c0       	rjmp	.+300    	; 0x19e4 <chvprintf+0x5da>
    18b8:	2e ef       	ldi	r18, 0xFE	; 254
    18ba:	3f e7       	ldi	r19, 0x7F	; 127
    18bc:	2a cf       	rjmp	.-428    	; 0x1712 <chvprintf+0x308>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    18be:	40 e1       	ldi	r20, 0x10	; 16
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	5c cf       	rjmp	.-328    	; 0x1780 <chvprintf+0x376>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    18c8:	aa 31       	cpi	r26, 0x1A	; 26
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <chvprintf+0x4c4>
    18cc:	5a c0       	rjmp	.+180    	; 0x1982 <chvprintf+0x578>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    18ce:	ef 89       	ldd	r30, Y+23	; 0x17
    18d0:	f8 8d       	ldd	r31, Y+24	; 0x18
    18d2:	80 80       	ld	r8, Z
    18d4:	91 80       	ldd	r9, Z+1	; 0x01
    18d6:	09 2c       	mov	r0, r9
    18d8:	00 0c       	add	r0, r0
    18da:	aa 08       	sbc	r10, r10
    18dc:	bb 08       	sbc	r11, r11
    18de:	32 96       	adiw	r30, 0x02	; 2
    18e0:	f8 8f       	std	Y+24, r31	; 0x18
    18e2:	ef 8b       	std	Y+23, r30	; 0x17
      if (l < 0) {
    18e4:	b7 fc       	sbrc	r11, 7
    18e6:	59 c0       	rjmp	.+178    	; 0x199a <chvprintf+0x590>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    18e8:	ae 01       	movw	r20, r28
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	5c 8f       	std	Y+28, r21	; 0x1c
    18f0:	4b 8f       	std	Y+27, r20	; 0x1b
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    18f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f6:	0b 96       	adiw	r24, 0x0b	; 11
    18f8:	9c 8b       	std	Y+20, r25	; 0x14
    18fa:	8b 8b       	std	Y+19, r24	; 0x13
    18fc:	24 01       	movw	r4, r8
    18fe:	35 01       	movw	r6, r10
    1900:	1e 8f       	std	Y+30, r17	; 0x1e
    1902:	0d 8f       	std	Y+29, r16	; 0x1d
    1904:	7c 01       	movw	r14, r24
  do {
    i = (int)(l % radix);
    1906:	c5 01       	movw	r24, r10
    1908:	b4 01       	movw	r22, r8
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	0e 94 92 14 	call	0x2924	; 0x2924 <__divmodsi4>
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    1916:	60 5d       	subi	r22, 0xD0	; 208
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	16 2f       	mov	r17, r22
    191c:	d7 01       	movw	r26, r14
    191e:	6e 93       	st	-X, r22
    1920:	7d 01       	movw	r14, r26
    l /= radix;
    1922:	49 01       	movw	r8, r18
    1924:	5a 01       	movw	r10, r20
  } while ((ll /= radix) != 0);
    1926:	c3 01       	movw	r24, r6
    1928:	b2 01       	movw	r22, r4
    192a:	2a e0       	ldi	r18, 0x0A	; 10
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	f8 d7       	rcall	.+4080   	; 0x2924 <__divmodsi4>
    1934:	29 01       	movw	r4, r18
    1936:	3a 01       	movw	r6, r20
    1938:	23 2b       	or	r18, r19
    193a:	24 2b       	or	r18, r20
    193c:	25 2b       	or	r18, r21
    193e:	19 f7       	brne	.-58     	; 0x1906 <chvprintf+0x4fc>
    1940:	c7 01       	movw	r24, r14
    1942:	f1 2e       	mov	r15, r17
    1944:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1946:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1948:	eb 8d       	ldd	r30, Y+27	; 0x1b
    194a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    194c:	dc 01       	movw	r26, r24
    194e:	11 96       	adiw	r26, 0x01	; 1
    1950:	2b 89       	ldd	r18, Y+19	; 0x13
    1952:	3c 89       	ldd	r19, Y+20	; 0x14
    1954:	28 1b       	sub	r18, r24
    1956:	39 0b       	sbc	r19, r25
    1958:	c9 01       	movw	r24, r18
    195a:	8e 0f       	add	r24, r30
    195c:	9f 1f       	adc	r25, r31
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <chvprintf+0x558>
    1960:	fd 90       	ld	r15, X+

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
    1962:	f1 92       	st	Z+, r15
  while (--i);
    1964:	e8 17       	cp	r30, r24
    1966:	f9 07       	cpc	r31, r25
    1968:	d9 f7       	brne	.-10     	; 0x1960 <chvprintf+0x556>
    196a:	4f 85       	ldd	r20, Y+15	; 0x0f
    196c:	58 89       	ldd	r21, Y+16	; 0x10
    196e:	e4 1b       	sub	r30, r20
    1970:	f5 0b       	sbc	r31, r21
    1972:	4f 01       	movw	r8, r30
    1974:	51 e0       	ldi	r21, 0x01	; 1
    1976:	85 1a       	sub	r8, r21
    1978:	91 08       	sbc	r9, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	7c 01       	movw	r14, r24
    1980:	06 ce       	rjmp	.-1012   	; 0x158e <chvprintf+0x184>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    1982:	af 89       	ldd	r26, Y+23	; 0x17
    1984:	b8 8d       	ldd	r27, Y+24	; 0x18
    1986:	8d 90       	ld	r8, X+
    1988:	9d 90       	ld	r9, X+
    198a:	ad 90       	ld	r10, X+
    198c:	bc 90       	ld	r11, X
    198e:	13 97       	sbiw	r26, 0x03	; 3
    1990:	14 96       	adiw	r26, 0x04	; 4
    1992:	b8 8f       	std	Y+24, r27	; 0x18
    1994:	af 8b       	std	Y+23, r26	; 0x17
      else
        l = va_arg(ap, int);
      if (l < 0) {
    1996:	b7 fe       	sbrs	r11, 7
    1998:	a7 cf       	rjmp	.-178    	; 0x18e8 <chvprintf+0x4de>
        *p++ = '-';
    199a:	8d e2       	ldi	r24, 0x2D	; 45
    199c:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    199e:	b0 94       	com	r11
    19a0:	a0 94       	com	r10
    19a2:	90 94       	com	r9
    19a4:	80 94       	com	r8
    19a6:	81 1c       	adc	r8, r1
    19a8:	91 1c       	adc	r9, r1
    19aa:	a1 1c       	adc	r10, r1
    19ac:	b1 1c       	adc	r11, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    19ae:	9e 01       	movw	r18, r28
    19b0:	2e 5f       	subi	r18, 0xFE	; 254
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	3c 8f       	std	Y+28, r19	; 0x1c
    19b6:	2b 8f       	std	Y+27, r18	; 0x1b
    19b8:	9c cf       	rjmp	.-200    	; 0x18f2 <chvprintf+0x4e8>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    19ba:	40 e1       	ldi	r20, 0x10	; 16
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	47 cf       	rjmp	.-370    	; 0x1852 <chvprintf+0x448>
    19c4:	ee 19       	sub	r30, r14
    19c6:	ff 09       	sbc	r31, r15
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    19c8:	4f 01       	movw	r8, r30
    19ca:	51 e0       	ldi	r21, 0x01	; 1
    19cc:	85 1a       	sub	r8, r21
    19ce:	91 08       	sbc	r9, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    19d0:	98 8f       	std	Y+24, r25	; 0x18
    19d2:	8f 8b       	std	Y+23, r24	; 0x17
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	89 8f       	std	Y+25, r24	; 0x19
    19d8:	da cd       	rjmp	.-1100   	; 0x158e <chvprintf+0x184>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    19da:	43 e4       	ldi	r20, 0x43	; 67
    19dc:	e4 2e       	mov	r14, r20
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	f4 2e       	mov	r15, r20
    19e2:	8c ce       	rjmp	.-744    	; 0x16fc <chvprintf+0x2f2>
    19e4:	58 01       	movw	r10, r16
    19e6:	17 fd       	sbrc	r17, 7
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <chvprintf+0x5fc>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    19ea:	5a 8d       	ldd	r21, Y+26	; 0x1a
    19ec:	98 8f       	std	Y+24, r25	; 0x18
    19ee:	8f 8b       	std	Y+23, r24	; 0x17
    19f0:	51 11       	cpse	r21, r1
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <chvprintf+0x5f6>
    19f4:	88 24       	eor	r8, r8
    19f6:	8a 94       	dec	r8
    19f8:	98 2c       	mov	r9, r8
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	89 8f       	std	Y+25, r24	; 0x19
    19fe:	cf cd       	rjmp	.-1122   	; 0x159e <chvprintf+0x194>
    1a00:	f0 e2       	ldi	r31, 0x20	; 32
    1a02:	f9 8f       	std	Y+25, r31	; 0x19
    1a04:	0e ce       	rjmp	.-996    	; 0x1622 <chvprintf+0x218>
    1a06:	a1 2c       	mov	r10, r1
    1a08:	b1 2c       	mov	r11, r1
    1a0a:	ef cf       	rjmp	.-34     	; 0x19ea <chvprintf+0x5e0>

00001a0c <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1a14:	ae 01       	movw	r20, r28
    1a16:	47 5f       	subi	r20, 0xF7	; 247
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	f3 dc       	rcall	.-1562   	; 0x140a <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <emergency_cb>:

}

/* Interupt Callback*/

static void emergency_cb(){
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	63 97       	sbiw	r28, 0x13	; 19
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
  char msg[] = "PORTA ABERTA !!!\n\r";
    1a3e:	83 e1       	ldi	r24, 0x13	; 19
    1a40:	ea e4       	ldi	r30, 0x4A	; 74
    1a42:	f1 e0       	ldi	r31, 0x01	; 1
    1a44:	de 01       	movw	r26, r28
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	01 90       	ld	r0, Z+
    1a4a:	0d 92       	st	X+, r0
    1a4c:	8a 95       	dec	r24
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <emergency_cb+0x1e>
  sdWriteI(&SD1, msg, strlen(msg));
    1a50:	42 e1       	ldi	r20, 0x12	; 18
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	be 01       	movw	r22, r28
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	88 ee       	ldi	r24, 0xE8	; 232
    1a5c:	94 e0       	ldi	r25, 0x04	; 4
    1a5e:	9f d9       	rcall	.-3266   	; 0xd9e <oqWriteI>
  lavar = EMERGENCIA;
    1a60:	85 e0       	ldi	r24, 0x05	; 5
    1a62:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
}
    1a66:	63 96       	adiw	r28, 0x13	; 19
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <starting>:


/* Functions*/
void starting(){
  // Output
  palSetPadMode(IOPORT2, SECA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1a78:	46 e0       	ldi	r20, 0x06	; 6
    1a7a:	60 e2       	ldi	r22, 0x20	; 32
    1a7c:	83 e2       	ldi	r24, 0x23	; 35
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	5a db       	rcall	.-2380   	; 0x1136 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1a82:	46 e0       	ldi	r20, 0x06	; 6
    1a84:	60 e1       	ldi	r22, 0x10	; 16
    1a86:	83 e2       	ldi	r24, 0x23	; 35
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	55 db       	rcall	.-2390   	; 0x1136 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1a8c:	46 e0       	ldi	r20, 0x06	; 6
    1a8e:	68 e0       	ldi	r22, 0x08	; 8
    1a90:	83 e2       	ldi	r24, 0x23	; 35
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	50 db       	rcall	.-2400   	; 0x1136 <_pal_lld_setgroupmode>
  palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1a96:	46 e0       	ldi	r20, 0x06	; 6
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	83 e2       	ldi	r24, 0x23	; 35
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
  palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1a9e:	4b db       	rcall	.-2410   	; 0x1136 <_pal_lld_setgroupmode>
    1aa0:	46 e0       	ldi	r20, 0x06	; 6
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	46 db       	rcall	.-2420   	; 0x1136 <_pal_lld_setgroupmode>
    1aaa:	46 e0       	ldi	r20, 0x06	; 6
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	83 e2       	ldi	r24, 0x23	; 35
  palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	41 db       	rcall	.-2430   	; 0x1136 <_pal_lld_setgroupmode>
    1ab4:	46 e0       	ldi	r20, 0x06	; 6
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	3c db       	rcall	.-2440   	; 0x1136 <_pal_lld_setgroupmode>
    1abe:	46 e0       	ldi	r20, 0x06	; 6
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	86 e2       	ldi	r24, 0x26	; 38
  palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	37 db       	rcall	.-2450   	; 0x1136 <_pal_lld_setgroupmode>
    1ac8:	46 e0       	ldi	r20, 0x06	; 6
    1aca:	60 e8       	ldi	r22, 0x80	; 128


  // Input
  palSetPadMode(IOPORT4, EMER, PAL_MODE_INPUT);
    1acc:	89 e2       	ldi	r24, 0x29	; 41
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	32 db       	rcall	.-2460   	; 0x1136 <_pal_lld_setgroupmode>
    1ad2:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
    1ad4:	64 e0       	ldi	r22, 0x04	; 4
    1ad6:	89 e2       	ldi	r24, 0x29	; 41
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	2d db       	rcall	.-2470   	; 0x1136 <_pal_lld_setgroupmode>
    1adc:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
    1ade:	68 e0       	ldi	r22, 0x08	; 8
    1ae0:	89 e2       	ldi	r24, 0x29	; 41
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	28 db       	rcall	.-2480   	; 0x1136 <_pal_lld_setgroupmode>
    1ae6:	42 e0       	ldi	r20, 0x02	; 2
  palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
    1ae8:	60 e1       	ldi	r22, 0x10	; 16
    1aea:	89 e2       	ldi	r24, 0x29	; 41
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	23 db       	rcall	.-2490   	; 0x1136 <_pal_lld_setgroupmode>
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	60 e2       	ldi	r22, 0x20	; 32
  palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
    1af4:	89 e2       	ldi	r24, 0x29	; 41
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	1e db       	rcall	.-2500   	; 0x1136 <_pal_lld_setgroupmode>
    1afa:	42 e0       	ldi	r20, 0x02	; 2
    1afc:	60 e4       	ldi	r22, 0x40	; 64
    1afe:	89 e2       	ldi	r24, 0x29	; 41

  // Start
  palClearPad(IOPORT2, SECA_ID);
    1b00:	90 e0       	ldi	r25, 0x00	; 0
  palClearPad(IOPORT2, ENCHE_ID);
    1b02:	19 db       	rcall	.-2510   	; 0x1136 <_pal_lld_setgroupmode>
  palClearPad(IOPORT2, CENTRI_ID);
  palClearPad(IOPORT2, ENXAGUE_ID);
  palClearPad(IOPORT2, LAVAGEM_ID);
    1b04:	2d 98       	cbi	0x05, 5	; 5
  palClearPad(IOPORT2, MOLHO_ID);
    1b06:	2c 98       	cbi	0x05, 4	; 5
  palSetPad(IOPORT3, MOTOR_DIR);
    1b08:	2b 98       	cbi	0x05, 3	; 5
  palSetPad(IOPORT3, MOTOR_ESQ);
    1b0a:	2a 98       	cbi	0x05, 2	; 5
  palClearPad(IOPORT4, PARADA_ID);
    1b0c:	29 98       	cbi	0x05, 1	; 5

  chprintf((BaseSequentialStream *)&SD1, "pinos iniciados \n\r");
    1b0e:	28 98       	cbi	0x05, 0	; 5
    1b10:	40 9a       	sbi	0x08, 0	; 8
    1b12:	41 9a       	sbi	0x08, 1	; 8
    1b14:	5f 98       	cbi	0x0b, 7	; 11
    1b16:	8d e5       	ldi	r24, 0x5D	; 93
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	9f 93       	push	r25
    1b1c:	8f 93       	push	r24
    1b1e:	81 ed       	ldi	r24, 0xD1	; 209
    1b20:	94 e0       	ldi	r25, 0x04	; 4

}
    1b22:	9f 93       	push	r25
    1b24:	8f 93       	push	r24
    1b26:	72 df       	rcall	.-284    	; 0x1a0c <chprintf>
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	08 95       	ret

00001b32 <spinning>:
}


/* Spin Function */

void spinning(int timer) {
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1b4a:	f8 94       	cli
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
    1b4c:	80 90 9f 04 	lds	r8, 0x049F	; 0x80049f <ch+0x13>
    1b50:	90 90 a0 04 	lds	r9, 0x04A0	; 0x8004a0 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1b54:	78 94       	sei
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1b56:	28 e0       	ldi	r18, 0x08	; 8
    1b58:	3d e3       	ldi	r19, 0x3D	; 61
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	05 d7       	rcall	.+3594   	; 0x2968 <__usmulhisi3>
    1b5e:	69 51       	subi	r22, 0x19	; 25
    1b60:	7c 4f       	sbci	r23, 0xFC	; 252
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	28 ee       	ldi	r18, 0xE8	; 232
    1b68:	33 e0       	ldi	r19, 0x03	; 3
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	b8 d6       	rcall	.+3440   	; 0x28e0 <__udivmodsi4>
    1b70:	89 01       	movw	r16, r18
void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
  systime_t ls_report,init_time;

  ls_report = agora;
    1b72:	94 01       	movw	r18, r8

/* Spin Function */

void spinning(int timer) {
  systime_t agora = chVTGetSystemTime();
  rodar_e rd = GIRA_R;
    1b74:	80 e0       	ldi	r24, 0x00	; 0
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1b76:	99 e8       	ldi	r25, 0x89	; 137
    1b78:	a9 2e       	mov	r10, r25
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	b9 2e       	mov	r11, r25
    1b7e:	41 ed       	ldi	r20, 0xD1	; 209
    1b80:	e4 2e       	mov	r14, r20
    1b82:	44 e0       	ldi	r20, 0x04	; 4
    1b84:	f4 2e       	mov	r15, r20
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1b86:	50 e7       	ldi	r21, 0x70	; 112
    1b88:	c5 2e       	mov	r12, r21
    1b8a:	51 e0       	ldi	r21, 0x01	; 1
    1b8c:	d5 2e       	mov	r13, r21
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1b8e:	f8 94       	cli
    1b90:	c0 91 9f 04 	lds	r28, 0x049F	; 0x80049f <ch+0x13>
    1b94:	d0 91 a0 04 	lds	r29, 0x04A0	; 0x8004a0 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1b98:	78 94       	sei

  ls_report = agora;
  init_time = agora;
  while(1){
    agora = chVTGetSystemTime();
    switch(rd){
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	b1 f0       	breq	.+44     	; 0x1bca <spinning+0x98>
      case(GIRA_R):
      // palClearPad(IOPORT3, MOTOR_DIR);
        if(lavar == EMERGENCIA){
    1b9e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <lavar>
    1ba2:	85 30       	cpi	r24, 0x05	; 5
    1ba4:	89 f1       	breq	.+98     	; 0x1c08 <spinning+0xd6>
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
    1ba6:	40 98       	cbi	0x08, 0	; 8
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    1ba8:	ce 01       	movw	r24, r28
    1baa:	82 1b       	sub	r24, r18
    1bac:	93 0b       	sbc	r25, r19
    1bae:	84 38       	cpi	r24, 0x84	; 132
    1bb0:	9e 41       	sbci	r25, 0x1E	; 30
    1bb2:	b8 f5       	brcc	.+110    	; 0x1c22 <spinning+0xf0>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
          ls_report = agora;
          rd = GIRA_L;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1bb6:	c8 19       	sub	r28, r8
    1bb8:	d9 09       	sbc	r29, r9
    1bba:	0c 17       	cp	r16, r28
    1bbc:	1d 07       	cpc	r17, r29
    1bbe:	38 f7       	brcc	.-50     	; 0x1b8e <spinning+0x5c>
          // printf("Fim do Giro\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    1bc0:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    1bc2:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
    1bc4:	8f e7       	ldi	r24, 0x7F	; 127
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <spinning+0xc0>
          return;
        }
        break;
      case(GIRA_L):
      palClearPad(IOPORT3, MOTOR_ESQ);
    1bca:	41 98       	cbi	0x08, 1	; 8
        if(lavar == EMERGENCIA){
    1bcc:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <lavar>
    1bd0:	95 30       	cpi	r25, 0x05	; 5
    1bd2:	d1 f0       	breq	.+52     	; 0x1c08 <spinning+0xd6>
          return;
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
    1bd4:	ae 01       	movw	r20, r28
    1bd6:	42 1b       	sub	r20, r18
    1bd8:	53 0b       	sbc	r21, r19
    1bda:	44 38       	cpi	r20, 0x84	; 132
    1bdc:	5e 41       	sbci	r21, 0x1E	; 30
    1bde:	70 f5       	brcc	.+92     	; 0x1c3c <spinning+0x10a>
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
          palSetPad(IOPORT3, MOTOR_ESQ);
          ls_report = agora;
          rd = GIRA_R;
          }
        if(agora - init_time > TIME_MS2I(timer)){
    1be0:	c8 19       	sub	r28, r8
    1be2:	d9 09       	sbc	r29, r9
    1be4:	0c 17       	cp	r16, r28
    1be6:	1d 07       	cpc	r17, r29
    1be8:	90 f6       	brcc	.-92     	; 0x1b8e <spinning+0x5c>
          // printf("saindo\n");
          palSetPad(IOPORT3, MOTOR_DIR);
    1bea:	40 9a       	sbi	0x08, 0	; 8
          palSetPad(IOPORT3, MOTOR_ESQ);
    1bec:	41 9a       	sbi	0x08, 1	; 8
          chprintf((BaseSequentialStream *)&SD1, "Fim Giro\n\r");
    1bee:	88 e9       	ldi	r24, 0x98	; 152
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	9f 93       	push	r25
    1bf4:	8f 93       	push	r24
    1bf6:	81 ed       	ldi	r24, 0xD1	; 209
    1bf8:	94 e0       	ldi	r25, 0x04	; 4
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	06 df       	rcall	.-500    	; 0x1a0c <chprintf>
          return;
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
          }
        break;
        }
     }
  }
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	08 95       	ret
          return;
        } // verifcar emergência
        palClearPad(IOPORT3, MOTOR_DIR);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Esqueda\n");
          chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
    1c22:	df 92       	push	r13
    1c24:	cf 92       	push	r12
    1c26:	ff 92       	push	r15
    1c28:	ef 92       	push	r14
    1c2a:	f0 de       	rcall	.-544    	; 0x1a0c <chprintf>
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          palSetPad(IOPORT3, MOTOR_DIR);
    1c2c:	40 9a       	sbi	0x08, 0	; 8
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	9e 01       	movw	r18, r28
          ls_report = agora;
          rd = GIRA_L;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
        } // verifcar emergência
        // palClearPad(IOPORT3, MOTOR_ESQ);
        if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
          // printf("Girando pra Direita\n");
          // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
          chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
    1c3a:	bd cf       	rjmp	.-134    	; 0x1bb6 <spinning+0x84>
    1c3c:	bf 92       	push	r11
    1c3e:	af 92       	push	r10
    1c40:	ff 92       	push	r15
    1c42:	ef 92       	push	r14
          palSetPad(IOPORT3, MOTOR_ESQ);
    1c44:	e3 de       	rcall	.-570    	; 0x1a0c <chprintf>
    1c46:	41 9a       	sbi	0x08, 1	; 8
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
          ls_report = agora;
          rd = GIRA_R;
    1c50:	9e 01       	movw	r18, r28
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	c5 cf       	rjmp	.-118    	; 0x1be0 <spinning+0xae>

00001c56 <lavar_maquina>:
     }
  }

/* Main Machine */

void lavar_maquina(){
    1c56:	2f 92       	push	r2
    1c58:	3f 92       	push	r3
    1c5a:	4f 92       	push	r4
    1c5c:	5f 92       	push	r5
    1c5e:	6f 92       	push	r6
    1c60:	7f 92       	push	r7
    1c62:	8f 92       	push	r8
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
  // int t_cheio;
  // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
  switch(lavar){
    1c7a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <lavar>
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <lavar_maquina+0x2e>
    1c82:	d7 c0       	rjmp	.+430    	; 0x1e32 <lavar_maquina+0x1dc>
    1c84:	e8 f0       	brcs	.+58     	; 0x1cc0 <lavar_maquina+0x6a>
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <lavar_maquina+0x36>
    1c8a:	75 c0       	rjmp	.+234    	; 0x1d76 <lavar_maquina+0x120>
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <lavar_maquina+0x3a>
    1c8e:	b9 c0       	rjmp	.+370    	; 0x1e02 <lavar_maquina+0x1ac>
    1c90:	85 30       	cpi	r24, 0x05	; 5
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <lavar_maquina+0x44>
    break; // break de centrífuga.


    case(EMERGENCIA):
      // printf("PORTA ABERTA. ERRO !!\n");
      if(palReadPad(IOPORT4, EMER) == PAL_LOW){
    1c94:	4a 9b       	sbis	0x09, 2	; 9
        lavar = PARADA;
    1c96:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <lavar>
      }

    break; // break de emergência
  } // fim switch máquina principal
} // fim função da máquina principal.
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	9f 90       	pop	r9
    1cb0:	8f 90       	pop	r8
    1cb2:	7f 90       	pop	r7
    1cb4:	6f 90       	pop	r6
    1cb6:	5f 90       	pop	r5
    1cb8:	4f 90       	pop	r4
    1cba:	3f 90       	pop	r3
    1cbc:	2f 90       	pop	r2
    1cbe:	08 95       	ret
/* Main Machine */

void lavar_maquina(){
  // int t_cheio;
  // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
  switch(lavar){
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <lavar_maquina+0x70>
    1cc4:	f1 c0       	rjmp	.+482    	; 0x1ea8 <lavar_maquina+0x252>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	41 f7       	brne	.-48     	; 0x1c9a <lavar_maquina+0x44>


    case(MOLHO):
    // printf("Inicio Molho\n");
    // chprintf((BaseSequentialStream *)&SD1, "Inicio MOLHO \n\r");
    palSetPad(IOPORT2, MOLHO_ID);
    1cca:	28 9a       	sbi	0x05, 0	; 5
    palClearPad(IOPORT2, LAVAGEM_ID);
    1ccc:	29 98       	cbi	0x05, 1	; 5
    palClearPad(IOPORT2, ENXAGUE_ID);
    1cce:	2a 98       	cbi	0x05, 2	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1cd0:	2b 98       	cbi	0x05, 3	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1cd2:	5f 98       	cbi	0x0b, 7	; 11

      switch(fsm_ml.ml){
    1cd4:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <fsm_ml>
    1cd8:	86 30       	cpi	r24, 0x06	; 6
    1cda:	09 f4       	brne	.+2      	; 0x1cde <lavar_maquina+0x88>
    1cdc:	09 c2       	rjmp	.+1042   	; 0x20f0 <lavar_maquina+0x49a>
    1cde:	87 30       	cpi	r24, 0x07	; 7
    1ce0:	e1 f6       	brne	.-72     	; 0x1c9a <lavar_maquina+0x44>
        case(RODAR_ML):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado RODAR_ML\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
    1ce2:	89 e7       	ldi	r24, 0x79	; 121
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
    1ce6:	9f 93       	push	r25
    1ce8:	8f 93       	push	r24
    1cea:	c1 ed       	ldi	r28, 0xD1	; 209
    1cec:	d4 e0       	ldi	r29, 0x04	; 4
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	8c de       	rcall	.-744    	; 0x1a0c <chprintf>
          spinning(fsm_ml.t_giro);
    1cf4:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <fsm_ml+0x1>
    1cf8:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <fsm_ml+0x2>
    1cfc:	1a df       	rcall	.-460    	; 0x1b32 <spinning>
          lavar = LAVAGEM;
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
  st->t_giro = 2000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    1d04:	88 e0       	ldi	r24, 0x08	; 8
    1d06:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <fsm_lvg>
  st->turns = 0;
    1d0a:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <fsm_lvg+0x6>
    1d0e:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <fsm_lvg+0x5>
  st->t_espera = 1000;
    1d12:	88 ee       	ldi	r24, 0xE8	; 232
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <fsm_lvg+0x8>
    1d1a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <fsm_lvg+0x7>
  st->t_giros = 2400;
    1d1e:	80 e6       	ldi	r24, 0x60	; 96
    1d20:	99 e0       	ldi	r25, 0x09	; 9
    1d22:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <fsm_lvg+0xa>
    1d26:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <fsm_lvg+0x9>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1d2a:	f8 94       	cli
    1d2c:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
    1d30:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1d34:	78 94       	sei
  st->instante = chVTGetSystemTime();
    1d36:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <fsm_lvg+0x2>
    1d3a:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <fsm_lvg+0x1>
  st->ul_espera = st->instante;
    1d3e:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <fsm_lvg+0x4>
    1d42:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
          spinning(fsm_ml.t_giro);
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          // printf("Fim Molho\n");
          chprintf((BaseSequentialStream *)&SD1, "FIM Molho\n\r");
    1d46:	87 e8       	ldi	r24, 0x87	; 135
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	5c de       	rcall	.-840    	; 0x1a0c <chprintf>
          palClearPad(IOPORT2, MOLHO_ID);
    1d54:	28 98       	cbi	0x05, 0	; 5
          chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
    1d56:	83 e9       	ldi	r24, 0x93	; 147
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	9f 93       	push	r25
    1d5c:	8f 93       	push	r24
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	54 de       	rcall	.-856    	; 0x1a0c <chprintf>
          // printf("Inicio LAVAGEM\n");
          break;
    1d64:	8d b7       	in	r24, 0x3d	; 61
    1d66:	9e b7       	in	r25, 0x3e	; 62
    1d68:	0c 96       	adiw	r24, 0x0c	; 12
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	9e bf       	out	0x3e, r25	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	8d bf       	out	0x3d, r24	; 61
    1d74:	92 cf       	rjmp	.-220    	; 0x1c9a <lavar_maquina+0x44>
      break;


      case(CENTRIFUGA):
      // printf("Inicio Centrifuga\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1d76:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, LAVAGEM_ID);
    1d78:	29 98       	cbi	0x05, 1	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1d7a:	2a 98       	cbi	0x05, 2	; 5
      palSetPad(IOPORT2, CENTRI_ID);
    1d7c:	2b 9a       	sbi	0x05, 3	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1d7e:	5f 98       	cbi	0x0b, 7	; 11

        switch(fsm_cen.cen){
    1d80:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <fsm_cen>
    1d84:	8e 30       	cpi	r24, 0x0E	; 14
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <lavar_maquina+0x134>
    1d88:	88 cf       	rjmp	.-240    	; 0x1c9a <lavar_maquina+0x44>
          case(GIRA_R_CENTRI):
            if(lavar == EMERGENCIA){
              break;
            }
            palClearPad(IOPORT3, MOTOR_DIR);
    1d8a:	40 98       	cbi	0x08, 0	; 8
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1d8c:	f8 94       	cli
    1d8e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
    1d92:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1d96:	78 94       	sei
            // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
            fsm_cen.tempo = chVTGetSystemTime();
    1d98:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fsm_cen+0x2>
    1d9c:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fsm_cen+0x1>
            // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
    1da0:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <fsm_cen+0x5>
    1da4:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <fsm_cen+0x6>
    1da8:	20 91 30 05 	lds	r18, 0x0530	; 0x800530 <fsm_cen+0x3>
    1dac:	30 91 31 05 	lds	r19, 0x0531	; 0x800531 <fsm_cen+0x4>
    1db0:	ec 01       	movw	r28, r24
    1db2:	c2 1b       	sub	r28, r18
    1db4:	d3 0b       	sbc	r29, r19
    1db6:	28 e0       	ldi	r18, 0x08	; 8
    1db8:	3d e3       	ldi	r19, 0x3D	; 61
    1dba:	d6 d5       	rcall	.+2988   	; 0x2968 <__usmulhisi3>
    1dbc:	69 51       	subi	r22, 0x19	; 25
    1dbe:	7c 4f       	sbci	r23, 0xFC	; 252
    1dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	28 ee       	ldi	r18, 0xE8	; 232
    1dc6:	33 e0       	ldi	r19, 0x03	; 3
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	89 d5       	rcall	.+2834   	; 0x28e0 <__udivmodsi4>
    1dce:	2c 17       	cp	r18, r28
    1dd0:	3d 07       	cpc	r19, r29
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <lavar_maquina+0x180>
    1dd4:	62 cf       	rjmp	.-316    	; 0x1c9a <lavar_maquina+0x44>
              palSetPad(IOPORT3, MOTOR_DIR);
    1dd6:	40 9a       	sbi	0x08, 0	; 8
              lavar = PARADA;
    1dd8:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    1ddc:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fsm_prd+0x1>
    1de0:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fsm_prd>
            // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
            if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
              palSetPad(IOPORT3, MOTOR_DIR);
              lavar = PARADA;
              fsm_parada_init(&fsm_prd);
              palClearPad(IOPORT2, CENTRI_ID);
    1de4:	2b 98       	cbi	0x05, 3	; 5
              chprintf((BaseSequentialStream *)&SD1, "FIM DO PROCESSO\n\r");
    1de6:	8b e4       	ldi	r24, 0x4B	; 75
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    1de8:	93 e0       	ldi	r25, 0x03	; 3
    1dea:	9f 93       	push	r25
    1dec:	8f 93       	push	r24
    1dee:	81 ed       	ldi	r24, 0xD1	; 209
    1df0:	94 e0       	ldi	r25, 0x04	; 4
    1df2:	9f 93       	push	r25
    1df4:	8f 93       	push	r24
    1df6:	0a de       	rcall	.-1004   	; 0x1a0c <chprintf>
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
          } // fim switch LAVAGEM
          break;


    case(ENXAGUE):
    palClearPad(IOPORT2, MOLHO_ID);
    1e00:	4c cf       	rjmp	.-360    	; 0x1c9a <lavar_maquina+0x44>
    palClearPad(IOPORT2, LAVAGEM_ID);
    1e02:	28 98       	cbi	0x05, 0	; 5
    palSetPad(IOPORT2, ENXAGUE_ID);
    1e04:	29 98       	cbi	0x05, 1	; 5
    palClearPad(IOPORT2, CENTRI_ID);
    1e06:	2a 9a       	sbi	0x05, 2	; 5
    palClearPad(IOPORT4, PARADA_ID);
    1e08:	2b 98       	cbi	0x05, 3	; 5

      switch(fsm_exg.exg){
    1e0a:	5f 98       	cbi	0x0b, 7	; 11
    1e0c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <fsm_exg>
    1e10:	8c 30       	cpi	r24, 0x0C	; 12
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <lavar_maquina+0x1c0>
    1e14:	3a c2       	rjmp	.+1140   	; 0x228a <lavar_maquina+0x634>
    1e16:	8d 30       	cpi	r24, 0x0D	; 13
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <lavar_maquina+0x1c6>
    1e1a:	7f c1       	rjmp	.+766    	; 0x211a <lavar_maquina+0x4c4>
    1e1c:	8b 30       	cpi	r24, 0x0B	; 11
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <lavar_maquina+0x1cc>
        case(ENCHER_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado ENCHER_EXG\n");
          palSetPad(IOPORT2, ENCHE_ID);
    1e20:	3c cf       	rjmp	.-392    	; 0x1c9a <lavar_maquina+0x44>
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    1e22:	2c 9a       	sbi	0x05, 4	; 5
    1e24:	4c 9b       	sbis	0x09, 4	; 9
            // printf("Sensor Cheio: ON\n");
            palClearPad(IOPORT2, ENCHE_ID);
    1e26:	39 cf       	rjmp	.-398    	; 0x1c9a <lavar_maquina+0x44>
            fsm_exg.exg = RODAR_EXG;
    1e28:	2c 98       	cbi	0x05, 4	; 5
    1e2a:	8c e0       	ldi	r24, 0x0C	; 12
    1e2c:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <fsm_exg>
      break;


    case(LAVAGEM):
      // printf("Inicio Lavagem\n");
      palClearPad(IOPORT2, MOLHO_ID);
    1e30:	34 cf       	rjmp	.-408    	; 0x1c9a <lavar_maquina+0x44>
      palSetPad(IOPORT2, LAVAGEM_ID);
    1e32:	28 98       	cbi	0x05, 0	; 5
      palClearPad(IOPORT2, ENXAGUE_ID);
    1e34:	29 9a       	sbi	0x05, 1	; 5
      palClearPad(IOPORT2, CENTRI_ID);
    1e36:	2a 98       	cbi	0x05, 2	; 5
      palClearPad(IOPORT4, PARADA_ID);
    1e38:	2b 98       	cbi	0x05, 3	; 5

      switch(fsm_lvg.lvg){
    1e3a:	5f 98       	cbi	0x0b, 7	; 11
    1e3c:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <fsm_lvg>
    1e40:	89 30       	cpi	r24, 0x09	; 9
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <lavar_maquina+0x1f0>
    1e44:	d3 c1       	rjmp	.+934    	; 0x21ec <lavar_maquina+0x596>
    1e46:	8a 30       	cpi	r24, 0x0A	; 10
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <lavar_maquina+0x1f6>
    1e4a:	9f c1       	rjmp	.+830    	; 0x218a <lavar_maquina+0x534>
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <lavar_maquina+0x1fc>
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG Super LAVAGEM - estado RODAR_LVG\n");
          // printf("Inicio giros Lavagem\n");
          chprintf((BaseSequentialStream *)&SD1, "Giros Lavagem\n\r");
    1e50:	24 cf       	rjmp	.-440    	; 0x1c9a <lavar_maquina+0x44>
    1e52:	84 ea       	ldi	r24, 0xA4	; 164
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	c1 ed       	ldi	r28, 0xD1	; 209
    1e5c:	d4 e0       	ldi	r29, 0x04	; 4
    1e5e:	df 93       	push	r29
          spinning(fsm_lvg.t_giros);
    1e60:	cf 93       	push	r28
    1e62:	d4 dd       	rcall	.-1112   	; 0x1a0c <chprintf>
    1e64:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <fsm_lvg+0x9>
    1e68:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <fsm_lvg+0xa>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1e6c:	62 de       	rcall	.-828    	; 0x1b32 <spinning>
    1e6e:	f8 94       	cli
    1e70:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
    1e74:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
          fsm_lvg.ul_espera = chVTGetSystemTime();
    1e78:	78 94       	sei
    1e7a:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <fsm_lvg+0x4>
          fsm_lvg.lvg = ESPERA_LVG;
    1e7e:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <fsm_lvg+0x3>
          chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
    1e82:	89 e0       	ldi	r24, 0x09	; 9
    1e84:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <fsm_lvg>
    1e88:	84 eb       	ldi	r24, 0xB4	; 180
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	9f 93       	push	r25
    1e8e:	8f 93       	push	r24
    1e90:	df 93       	push	r29
          // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");

          break;
    1e92:	cf 93       	push	r28
    1e94:	bb dd       	rcall	.-1162   	; 0x1a0c <chprintf>
    1e96:	8d b7       	in	r24, 0x3d	; 61
    1e98:	9e b7       	in	r25, 0x3e	; 62
    1e9a:	08 96       	adiw	r24, 0x08	; 8
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	9e bf       	out	0x3e, r25	; 62
      if(lavar == EMERGENCIA){
        break;
      } // verifcar emergência
      // printf("Inicio da Parada\n");
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	8d bf       	out	0x3d, r24	; 61
    1ea6:	f9 ce       	rjmp	.-526    	; 0x1c9a <lavar_maquina+0x44>
    1ea8:	83 ea       	ldi	r24, 0xA3	; 163
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	9f 93       	push	r25
    1eae:	8f 93       	push	r24
    1eb0:	c1 ed       	ldi	r28, 0xD1	; 209
    1eb2:	d4 e0       	ldi	r29, 0x04	; 4
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	a9 dd       	rcall	.-1198   	; 0x1a0c <chprintf>
    1eba:	80 ec       	ldi	r24, 0xC0	; 192
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	a2 dd       	rcall	.-1212   	; 0x1a0c <chprintf>
    1ec8:	8d b7       	in	r24, 0x3d	; 61
    1eca:	9e b7       	in	r25, 0x3e	; 62
    1ecc:	08 96       	adiw	r24, 0x08	; 8
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	9e bf       	out	0x3e, r25	; 62
          // printf("Inicio ENXAGUE\n");
        }
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	8d bf       	out	0x3d, r24	; 61
    1ed8:	80 ec       	ldi	r24, 0xC0	; 192
    1eda:	68 2e       	mov	r6, r24
static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
  st->tempo = chVTGetSystemTime();
  st->ul_centri = st->tempo;
  st->t_centri = 4000;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	78 2e       	mov	r7, r24
    1ee0:	90 ea       	ldi	r25, 0xA0	; 160
    1ee2:	49 2e       	mov	r4, r25
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1ee4:	9f e0       	ldi	r25, 0x0F	; 15
    1ee6:	59 2e       	mov	r5, r25
    1ee8:	23 e0       	ldi	r18, 0x03	; 3
}

static void fsm_molho_init(fsm_molho_s *st)
{
  st->ml = ENCHER_ML;
  st->t_giro = 2000;
    1eea:	22 2e       	mov	r2, r18
    1eec:	31 2c       	mov	r3, r1

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
  st->turns = 0;
  st->t_espera = 1000;
    1eee:	00 ed       	ldi	r16, 0xD0	; 208
    1ef0:	17 e0       	ldi	r17, 0x07	; 7
    1ef2:	38 ee       	ldi	r19, 0xE8	; 232
    1ef4:	a3 2e       	mov	r10, r19
  st->t_giros = 2400;
    1ef6:	33 e0       	ldi	r19, 0x03	; 3
    1ef8:	b3 2e       	mov	r11, r19
    1efa:	40 e6       	ldi	r20, 0x60	; 96
    1efc:	c4 2e       	mov	r12, r20
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    1efe:	49 e0       	ldi	r20, 0x09	; 9
    1f00:	d4 2e       	mov	r13, r20
    1f02:	ee 24       	eor	r14, r14
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
    1f04:	e3 94       	inc	r14
    1f06:	f1 2c       	mov	r15, r1
    1f08:	66 ed       	ldi	r22, 0xD6	; 214
    1f0a:	86 2e       	mov	r8, r22
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
          palSetPad(IOPORT4, PARADA_ID);
    1f0e:	96 2e       	mov	r9, r22
          palSetPad(IOPORT2, MOLHO_ID);
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <lavar_maquina+0x2e2>
          palSetPad(IOPORT2, LAVAGEM_ID);
    1f12:	5f 9a       	sbi	0x0b, 7	; 11
          palSetPad(IOPORT2, ENXAGUE_ID);
    1f14:	28 9a       	sbi	0x05, 0	; 5
          palSetPad(IOPORT2, CENTRI_ID);
    1f16:	29 9a       	sbi	0x05, 1	; 5
          lavar = MOLHO;
    1f18:	2a 9a       	sbi	0x05, 2	; 5
    1f1a:	2b 9a       	sbi	0x05, 3	; 5
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
  st->select_init = 0;
}

static void fsm_molho_init(fsm_molho_s *st)
{
  st->ml = ENCHER_ML;
    1f1e:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
    1f22:	86 e0       	ldi	r24, 0x06	; 6
  st->t_giro = 2000;
    1f24:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <fsm_ml>
    1f28:	10 93 27 05 	sts	0x0527, r17	; 0x800527 <fsm_ml+0x2>
          palSetPad(IOPORT2, CENTRI_ID);
          lavar = MOLHO;
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1f2c:	00 93 26 05 	sts	0x0526, r16	; 0x800526 <fsm_ml+0x1>
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
          fsm_prd.select_init = 0;
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
    1f30:	4e 99       	sbic	0x09, 6	; 9
    1f32:	87 c0       	rjmp	.+270    	; 0x2042 <lavar_maquina+0x3ec>
      // printf("Escolha o estado inicial:\n");
      chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
      chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
      // scanf("%d", &fsm_prd.select_init);
      while(1){
        if(fsm_prd.select_init == 0){
    1f34:	4d 99       	sbic	0x09, 5	; 9
    1f36:	be c0       	rjmp	.+380    	; 0x20b4 <lavar_maquina+0x45e>
    1f38:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    1f3c:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
          fsm_prd.select_init = 1;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	39 f3       	breq	.-50     	; 0x1f12 <lavar_maquina+0x2bc>
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
          fsm_prd.select_init = 2;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
          palClearPad(IOPORT2, LAVAGEM_ID);

        }
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <lavar_maquina+0x2f6>
    1f4a:	50 c0       	rjmp	.+160    	; 0x1fec <lavar_maquina+0x396>
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	91 05       	cpc	r25, r1
    1f50:	a1 f5       	brne	.+104    	; 0x1fba <lavar_maquina+0x364>
          chThdSleepMilliseconds(20); // Debouncing time
    1f52:	4e 9b       	sbis	0x09, 6	; 9
    1f54:	ef cf       	rjmp	.-34     	; 0x1f34 <lavar_maquina+0x2de>
    1f56:	89 e3       	ldi	r24, 0x39	; 57
    1f58:	91 e0       	ldi	r25, 0x01	; 1
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
    1f5a:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          lavar = CENTRIFUGA;
    1f5e:	4e 99       	sbic	0x09, 6	; 9
    1f60:	fe cf       	rjmp	.-4      	; 0x1f5e <lavar_maquina+0x308>
    1f62:	84 e0       	ldi	r24, 0x04	; 4
  st->t_giro = 3000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    1f64:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
    1f68:	8e e0       	ldi	r24, 0x0E	; 14
    1f6a:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <fsm_cen>
    1f6e:	f8 94       	cli
    1f70:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1f74:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
  st->tempo = chVTGetSystemTime();
    1f78:	78 94       	sei
    1f7a:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fsm_cen+0x2>
  st->ul_centri = st->tempo;
    1f7e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fsm_cen+0x1>
    1f82:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <fsm_cen+0x4>
  st->t_centri = 4000;
    1f86:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <fsm_cen+0x3>
    1f8a:	50 92 33 05 	sts	0x0533, r5	; 0x800533 <fsm_cen+0x6>
        if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          lavar = CENTRIFUGA;
          fsm_centrifuga_init(&fsm_cen);
          fsm_prd.select_init = 3;
    1f8e:	40 92 32 05 	sts	0x0532, r4	; 0x800532 <fsm_cen+0x5>
    1f92:	30 92 2c 05 	sts	0x052C, r3	; 0x80052c <fsm_prd+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
    1f96:	20 92 2b 05 	sts	0x052B, r2	; 0x80052b <fsm_prd>
    1f9a:	87 e0       	ldi	r24, 0x07	; 7
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	9f 93       	push	r25
    1fa0:	8f 93       	push	r24
    1fa2:	df 93       	push	r29
          palClearPad(IOPORT2, ENXAGUE_ID);
    1fa4:	cf 93       	push	r28
    1fa6:	32 dd       	rcall	.-1436   	; 0x1a0c <chprintf>
    1fa8:	2a 98       	cbi	0x05, 2	; 5
    1faa:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    1fae:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
          // printf("Inicio ENXAGUE\n");
        }
        if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	03 97       	sbiw	r24, 0x03	; 3
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <lavar_maquina+0x36a>
          chThdSleepMilliseconds(20); // Debouncing time
    1fbe:	ba cf       	rjmp	.-140    	; 0x1f34 <lavar_maquina+0x2de>
    1fc0:	4e 9b       	sbis	0x09, 6	; 9
    1fc2:	b8 cf       	rjmp	.-144    	; 0x1f34 <lavar_maquina+0x2de>
    1fc4:	89 e3       	ldi	r24, 0x39	; 57
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
    1fcc:	4e 99       	sbic	0x09, 6	; 9
    1fce:	fe cf       	rjmp	.-4      	; 0x1fcc <lavar_maquina+0x376>
    1fd0:	7f 92       	push	r7
    1fd2:	6f 92       	push	r6
    1fd4:	df 93       	push	r29
          fsm_prd.select_init = 0;
    1fd6:	cf 93       	push	r28
    1fd8:	19 dd       	rcall	.-1486   	; 0x1a0c <chprintf>
    1fda:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fsm_prd+0x1>
    1fde:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fsm_prd>
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
          fsm_prd.select_init = 1;
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
          palClearPad(IOPORT2, MOLHO_ID);
        }

        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
    1fe8:	0f 90       	pop	r0
    1fea:	a4 cf       	rjmp	.-184    	; 0x1f34 <lavar_maquina+0x2de>
          chThdSleepMilliseconds(20); // Debouncing time
    1fec:	4e 9b       	sbis	0x09, 6	; 9
    1fee:	a2 cf       	rjmp	.-188    	; 0x1f34 <lavar_maquina+0x2de>
    1ff0:	89 e3       	ldi	r24, 0x39	; 57
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
    1ff4:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          lavar = ENXAGUE;
    1ff8:	4e 99       	sbic	0x09, 6	; 9
    1ffa:	fe cf       	rjmp	.-4      	; 0x1ff8 <lavar_maquina+0x3a2>
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    1ffe:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
    2002:	8b e0       	ldi	r24, 0x0B	; 11
  st->t_giro = 3000;
    2004:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <fsm_exg>
    2008:	88 eb       	ldi	r24, 0xB8	; 184
    200a:	9b e0       	ldi	r25, 0x0B	; 11
    200c:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <fsm_exg+0x2>
        if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          lavar = ENXAGUE;
          fsm_enxague_init(&fsm_exg);
          fsm_prd.select_init = 2;
    2010:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <fsm_exg+0x1>
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <fsm_prd+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
    201c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <fsm_prd>
    2020:	8f ee       	ldi	r24, 0xEF	; 239
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	9f 93       	push	r25
    2026:	8f 93       	push	r24
    2028:	df 93       	push	r29
          palClearPad(IOPORT2, LAVAGEM_ID);
    202a:	cf 93       	push	r28
    202c:	ef dc       	rcall	.-1570   	; 0x1a0c <chprintf>
    202e:	29 98       	cbi	0x05, 1	; 5
    2030:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    2034:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
          lavar = MOLHO;
          fsm_molho_init(&fsm_ml);
        }

        if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
    203e:	0f 90       	pop	r0
    2040:	85 cf       	rjmp	.-246    	; 0x1f4c <lavar_maquina+0x2f6>
    2042:	89 e3       	ldi	r24, 0x39	; 57
    2044:	91 e0       	ldi	r25, 0x01	; 1
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
    2046:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
    204a:	4e 99       	sbic	0x09, 6	; 9
    204c:	fe cf       	rjmp	.-4      	; 0x204a <lavar_maquina+0x3f4>
    204e:	82 e0       	ldi	r24, 0x02	; 2
  st->t_giro = 2000;
}

static void fsm_lavagem_init(fsm_lavagem_s *st)
{
  st->lvg = RODAR_LVG;
    2050:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
    2054:	88 e0       	ldi	r24, 0x08	; 8
  st->turns = 0;
    2056:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <fsm_lvg>
    205a:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <fsm_lvg+0x6>
  st->t_espera = 1000;
    205e:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <fsm_lvg+0x5>
    2062:	b0 92 22 05 	sts	0x0522, r11	; 0x800522 <fsm_lvg+0x8>
  st->t_giros = 2400;
    2066:	a0 92 21 05 	sts	0x0521, r10	; 0x800521 <fsm_lvg+0x7>
    206a:	d0 92 24 05 	sts	0x0524, r13	; 0x800524 <fsm_lvg+0xa>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    206e:	c0 92 23 05 	sts	0x0523, r12	; 0x800523 <fsm_lvg+0x9>
    2072:	f8 94       	cli
    2074:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    2078:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
  st->instante = chVTGetSystemTime();
    207c:	78 94       	sei
    207e:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <fsm_lvg+0x2>
  st->ul_espera = st->instante;
    2082:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <fsm_lvg+0x1>
    2086:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <fsm_lvg+0x4>
          chThdSleepMilliseconds(20); // Debouncing time
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          // printf("Inicio MOLHO\n");
          lavar = LAVAGEM;
          fsm_lavagem_init(&fsm_lvg);
          fsm_prd.select_init = 1;
    208a:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <fsm_lvg+0x3>
    208e:	f0 92 2c 05 	sts	0x052C, r15	; 0x80052c <fsm_prd+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
    2092:	e0 92 2b 05 	sts	0x052B, r14	; 0x80052b <fsm_prd>
    2096:	9f 92       	push	r9
    2098:	8f 92       	push	r8
    209a:	df 93       	push	r29
          palClearPad(IOPORT2, MOLHO_ID);
    209c:	cf 93       	push	r28
    209e:	b6 dc       	rcall	.-1684   	; 0x1a0c <chprintf>
    20a0:	28 98       	cbi	0x05, 0	; 5
    20a2:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    20a6:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
          while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
          chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
          fsm_prd.select_init = 0;
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	48 cf       	rjmp	.-368    	; 0x1f44 <lavar_maquina+0x2ee>
    20b4:	89 e3       	ldi	r24, 0x39	; 57
          chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	0e 94 cc 03 	call	0x798	; 0x798 <chThdSleep>
    20bc:	82 e2       	ldi	r24, 0x22	; 34
    20be:	92 e0       	ldi	r25, 0x02	; 2
    20c0:	9f 93       	push	r25
    20c2:	8f 93       	push	r24
    20c4:	c1 ed       	ldi	r28, 0xD1	; 209
    20c6:	d4 e0       	ldi	r29, 0x04	; 4
    20c8:	df 93       	push	r29
          if(fsm_prd.select_init == 0){
    20ca:	cf 93       	push	r28
    20cc:	9f dc       	rcall	.-1730   	; 0x1a0c <chprintf>
    20ce:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    20d2:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
            chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
          }
          if(fsm_prd.select_init == 2){
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <lavar_maquina+0x48e>
            chprintf((BaseSequentialStream *)&SD1, "Enchendo para o enxague\n\r");
    20e2:	c3 c0       	rjmp	.+390    	; 0x226a <lavar_maquina+0x614>
    20e4:	02 97       	sbiw	r24, 0x02	; 2
    20e6:	09 f0       	breq	.+2      	; 0x20ea <lavar_maquina+0x494>
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          // printf("DEBUG: Super MOLHO - estado ENCHER_ML\n");
          // printf("Abrir água\n");
          palSetPad(IOPORT2, ENCHE_ID);
    20e8:	d8 cd       	rjmp	.-1104   	; 0x1c9a <lavar_maquina+0x44>
          if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
    20ea:	80 e5       	ldi	r24, 0x50	; 80
    20ec:	92 e0       	ldi	r25, 0x02	; 2
            // printf("Sensor Cheio\n");
            chprintf((BaseSequentialStream *)&SD1, "Sensor cheio\n\r");
    20ee:	7d ce       	rjmp	.-774    	; 0x1dea <lavar_maquina+0x194>
    20f0:	2c 9a       	sbi	0x05, 4	; 5
    20f2:	4c 9b       	sbis	0x09, 4	; 9
    20f4:	d2 cd       	rjmp	.-1116   	; 0x1c9a <lavar_maquina+0x44>
    20f6:	8a e6       	ldi	r24, 0x6A	; 106
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	9f 93       	push	r25
    20fc:	8f 93       	push	r24
    20fe:	81 ed       	ldi	r24, 0xD1	; 209
    2100:	94 e0       	ldi	r25, 0x04	; 4
            palClearPad(IOPORT2, ENCHE_ID);
    2102:	9f 93       	push	r25
            fsm_ml.ml = RODAR_ML;
    2104:	8f 93       	push	r24
    2106:	82 dc       	rcall	.-1788   	; 0x1a0c <chprintf>
    2108:	2c 98       	cbi	0x05, 4	; 5
    210a:	87 e0       	ldi	r24, 0x07	; 7
    210c:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <fsm_ml>
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
          if(lavar == EMERGENCIA){
            break;
          } //  verificar a emergência

          // printf("DEBUG: Super ENXAGUE - estados ESVAZIA_EXG\n");
          palSetPad(IOPORT2, SECA_ID);
    2114:	0f 90       	pop	r0
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    2116:	0f 90       	pop	r0
    2118:	c0 cd       	rjmp	.-1152   	; 0x1c9a <lavar_maquina+0x44>
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
    211a:	2d 9a       	sbi	0x05, 5	; 5
             lavar = CENTRIFUGA;
    211c:	4b 9b       	sbis	0x09, 3	; 9
    211e:	bd cd       	rjmp	.-1158   	; 0x1c9a <lavar_maquina+0x44>
    2120:	2d 98       	cbi	0x05, 5	; 5
  st->t_giro = 3000;
}

static void fsm_centrifuga_init(fsm_centrifuga_s *st)
{
  st->cen = GIRA_R_CENTRI;
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    2128:	8e e0       	ldi	r24, 0x0E	; 14
    212a:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <fsm_cen>
    212e:	f8 94       	cli
    2130:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
  st->tempo = chVTGetSystemTime();
    2134:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
    2138:	78 94       	sei
  st->ul_centri = st->tempo;
    213a:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fsm_cen+0x2>
    213e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fsm_cen+0x1>
  st->t_centri = 4000;
    2142:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <fsm_cen+0x4>
    2146:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <fsm_cen+0x3>
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
             // printf("Sensor Vazio: ON\n");
             palClearPad(IOPORT2, SECA_ID);
             lavar = CENTRIFUGA;
             fsm_centrifuga_init(&fsm_cen);
             chprintf((BaseSequentialStream *)&SD1, "Fim Enxague\n\r");
    214a:	80 ea       	ldi	r24, 0xA0	; 160
    214c:	9f e0       	ldi	r25, 0x0F	; 15
    214e:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <fsm_cen+0x6>
    2152:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <fsm_cen+0x5>
    2156:	89 e2       	ldi	r24, 0x29	; 41
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	9f 93       	push	r25
    215c:	8f 93       	push	r24
             // printf("Fim Enxágue\n");
             palClearPad(IOPORT2, ENXAGUE_ID);
    215e:	c1 ed       	ldi	r28, 0xD1	; 209
             // printf("Inicio CENTRIFUGA\n");
             chprintf((BaseSequentialStream *)&SD1, "Inicio Centrifuga\n\r");
    2160:	d4 e0       	ldi	r29, 0x04	; 4
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	52 dc       	rcall	.-1884   	; 0x1a0c <chprintf>
    2168:	2a 98       	cbi	0x05, 2	; 5
    216a:	87 e3       	ldi	r24, 0x37	; 55
    216c:	93 e0       	ldi	r25, 0x03	; 3
    216e:	9f 93       	push	r25
    2170:	8f 93       	push	r24
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	4a dc       	rcall	.-1900   	; 0x1a0c <chprintf>
    2178:	8d b7       	in	r24, 0x3d	; 61
    217a:	9e b7       	in	r25, 0x3e	; 62
    217c:	08 96       	adiw	r24, 0x08	; 8
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          palSetPad(IOPORT2, SECA_ID);
          // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
          if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
            // printf("Sensor Vazio: ON\n");
            palClearPad(IOPORT2, SECA_ID);
    2182:	9e bf       	out	0x3e, r25	; 62
            // printf("Fim LAVAGEM\n");
            chprintf((BaseSequentialStream *)&SD1, "Fim Lavagem\n\r");
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	8d bf       	out	0x3d, r24	; 61
    2188:	88 cd       	rjmp	.-1264   	; 0x1c9a <lavar_maquina+0x44>
    218a:	2d 9a       	sbi	0x05, 5	; 5
    218c:	4b 9b       	sbis	0x09, 3	; 9
    218e:	85 cd       	rjmp	.-1270   	; 0x1c9a <lavar_maquina+0x44>
    2190:	2d 98       	cbi	0x05, 5	; 5
    2192:	88 ed       	ldi	r24, 0xD8	; 216
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	9f 93       	push	r25
            palClearPad(IOPORT2, LAVAGEM_ID);
    2198:	8f 93       	push	r24

            // printf("Inicio ENXAGUE\n");
            chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
    219a:	c1 ed       	ldi	r28, 0xD1	; 209
    219c:	d4 e0       	ldi	r29, 0x04	; 4
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	34 dc       	rcall	.-1944   	; 0x1a0c <chprintf>
    21a4:	29 98       	cbi	0x05, 1	; 5
    21a6:	86 ee       	ldi	r24, 0xE6	; 230
              lavar = ENXAGUE;
    21a8:	92 e0       	ldi	r25, 0x02	; 2
    21aa:	9f 93       	push	r25
    21ac:	8f 93       	push	r24
  st->ul_espera = st->instante;
}

static void fsm_enxague_init(fsm_enxague_s *st)
{
  st->exg = ENCHER_EXG;
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	2c dc       	rcall	.-1960   	; 0x1a0c <chprintf>
  st->t_giro = 3000;
    21b4:	83 e0       	ldi	r24, 0x03	; 3
    21b6:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <lavar>
    21ba:	8b e0       	ldi	r24, 0x0B	; 11
    21bc:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <fsm_exg>
            // printf("Inicio ENXAGUE\n");
            chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
              lavar = ENXAGUE;

              fsm_enxague_init(&fsm_exg);
              chprintf((BaseSequentialStream *)&SD1, "Enche Enxague\n\r");
    21c0:	88 eb       	ldi	r24, 0xB8	; 184
    21c2:	9b e0       	ldi	r25, 0x0B	; 11
    21c4:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <fsm_exg+0x2>
    21c8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <fsm_exg+0x1>
    21cc:	87 ef       	ldi	r24, 0xF7	; 247
    21ce:	92 e0       	ldi	r25, 0x02	; 2
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	19 dc       	rcall	.-1998   	; 0x1a0c <chprintf>
    21da:	8d b7       	in	r24, 0x3d	; 61
    21dc:	9e b7       	in	r25, 0x3e	; 62
    21de:	0c 96       	adiw	r24, 0x0c	; 12
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	9e bf       	out	0x3e, r25	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    21e8:	8d bf       	out	0x3d, r24	; 61

        case(ESPERA_LVG):
          if(lavar == EMERGENCIA){
            break;
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
    21ea:	57 cd       	rjmp	.-1362   	; 0x1c9a <lavar_maquina+0x44>
    21ec:	f8 94       	cli
    21ee:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
    21f2:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
    21f6:	78 94       	sei
    21f8:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <fsm_lvg+0x2>
    21fc:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <fsm_lvg+0x1>
    2200:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <fsm_lvg+0x7>
    2204:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <fsm_lvg+0x8>
    2208:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <fsm_lvg+0x3>
    220c:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <fsm_lvg+0x4>
    2210:	ec 01       	movw	r28, r24
    2212:	c2 1b       	sub	r28, r18
    2214:	d3 0b       	sbc	r29, r19
    2216:	28 e0       	ldi	r18, 0x08	; 8
    2218:	3d e3       	ldi	r19, 0x3D	; 61
    221a:	a6 d3       	rcall	.+1868   	; 0x2968 <__usmulhisi3>
    221c:	69 51       	subi	r22, 0x19	; 25
    221e:	7c 4f       	sbci	r23, 0xFC	; 252
    2220:	8f 4f       	sbci	r24, 0xFF	; 255
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	28 ee       	ldi	r18, 0xE8	; 232
    2226:	33 e0       	ldi	r19, 0x03	; 3
    2228:	40 e0       	ldi	r20, 0x00	; 0
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	59 d3       	rcall	.+1714   	; 0x28e0 <__udivmodsi4>
    222e:	2c 17       	cp	r18, r28
    2230:	3d 07       	cpc	r19, r29
    2232:	08 f0       	brcs	.+2      	; 0x2236 <lavar_maquina+0x5e0>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    2234:	32 cd       	rjmp	.-1436   	; 0x1c9a <lavar_maquina+0x44>
            fsm_lvg.ul_espera = chVTGetSystemTime();
    2236:	f8 94       	cli
    2238:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <ch+0x13>
            if(fsm_lvg.turns >= 3){
    223c:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <ch+0x14>
    2240:	78 94       	sei
    2242:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <fsm_lvg+0x4>
    2246:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <fsm_lvg+0x3>
              fsm_lvg.lvg = ESVAZIA_LVG;
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
              // printf("Fim giros Lavagem\n");

            } else {
              fsm_lvg.turns ++;
    224a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <fsm_lvg+0x5>
    224e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <fsm_lvg+0x6>
    2252:	83 30       	cpi	r24, 0x03	; 3
              fsm_lvg.lvg = RODAR_LVG;
    2254:	91 05       	cpc	r25, r1
    2256:	d4 f5       	brge	.+116    	; 0x22cc <lavar_maquina+0x676>
    2258:	01 96       	adiw	r24, 0x01	; 1
        }
        if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
          chThdSleepMilliseconds(20); // Debouncing time
          chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
          if(fsm_prd.select_init == 0){
            chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
    225a:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <fsm_lvg+0x6>
    225e:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <fsm_lvg+0x5>
    2262:	88 e0       	ldi	r24, 0x08	; 8
    2264:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <fsm_lvg>
    2268:	18 cd       	rjmp	.-1488   	; 0x1c9a <lavar_maquina+0x44>
    226a:	87 e3       	ldi	r24, 0x37	; 55
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	9f 93       	push	r25
    2270:	8f 93       	push	r24
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	ca db       	rcall	.-2156   	; 0x1a0c <chprintf>
        case(RODAR_EXG):
          if(lavar == EMERGENCIA){
            break;
          } // verificar emergência
          // printf("DEBUG: Super ENXAGUE - estado RODAR_EXG\n");
          chprintf((BaseSequentialStream *)&SD1, "Rodar Enxague\n\r");
    2278:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <fsm_prd>
    227c:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <fsm_prd+0x1>
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	2d cf       	rjmp	.-422    	; 0x20e4 <lavar_maquina+0x48e>
    228a:	87 e0       	ldi	r24, 0x07	; 7
          spinning(fsm_exg.t_giro);
    228c:	93 e0       	ldi	r25, 0x03	; 3
    228e:	9f 93       	push	r25
    2290:	8f 93       	push	r24
    2292:	c1 ed       	ldi	r28, 0xD1	; 209
    2294:	d4 e0       	ldi	r29, 0x04	; 4
    2296:	df 93       	push	r29
          fsm_exg.exg = ESVAZIA_EXG;
    2298:	cf 93       	push	r28
    229a:	b8 db       	rcall	.-2192   	; 0x1a0c <chprintf>
    229c:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <fsm_exg+0x1>
          chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
    22a0:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <fsm_exg+0x2>
    22a4:	46 dc       	rcall	.-1908   	; 0x1b32 <spinning>
    22a6:	8d e0       	ldi	r24, 0x0D	; 13
    22a8:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <fsm_exg>
    22ac:	87 e1       	ldi	r24, 0x17	; 23

        break;
    22ae:	93 e0       	ldi	r25, 0x03	; 3
    22b0:	9f 93       	push	r25
    22b2:	8f 93       	push	r24
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	a9 db       	rcall	.-2222   	; 0x1a0c <chprintf>
    22ba:	8d b7       	in	r24, 0x3d	; 61
    22bc:	9e b7       	in	r25, 0x3e	; 62
    22be:	08 96       	adiw	r24, 0x08	; 8
          } // verifcar emergência
          fsm_lvg.instante = chVTGetSystemTime();
          if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
            fsm_lvg.ul_espera = chVTGetSystemTime();
            if(fsm_lvg.turns >= 3){
              fsm_lvg.turns = 0;
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	9e bf       	out	0x3e, r25	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
              fsm_lvg.lvg = ESVAZIA_LVG;
    22c8:	8d bf       	out	0x3d, r24	; 61
    22ca:	e7 cc       	rjmp	.-1586   	; 0x1c9a <lavar_maquina+0x44>
    22cc:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <fsm_lvg+0x6>
              chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
    22d0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <fsm_lvg+0x5>
    22d4:	8a e0       	ldi	r24, 0x0A	; 10
    22d6:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <fsm_lvg>
    22da:	85 ec       	ldi	r24, 0xC5	; 197
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	85 cd       	rjmp	.-1270   	; 0x1dea <lavar_maquina+0x194>

000022e0 <main>:
      {EXT_CH_MODE_DISABLED , NULL},      /* INT3 Config. */
    }
};


  halInit();
    22e0:	0e 94 c4 04 	call	0x988	; 0x988 <halInit>
  chSysInit();
    22e4:	0e 94 ce 00 	call	0x19c	; 0x19c <chSysInit>

/* ChibiOS Config*/
  sdStart(&SD1, 0);
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	81 ed       	ldi	r24, 0xD1	; 209
    22ee:	94 e0       	ldi	r25, 0x04	; 4
    22f0:	0e 94 90 07 	call	0xf20	; 0xf20 <sdStart>
  extStart(&EXTD1, &extcfg);
    22f4:	6f e6       	ldi	r22, 0x6F	; 111
    22f6:	73 e0       	ldi	r23, 0x03	; 3
    22f8:	84 ec       	ldi	r24, 0xC4	; 196
    22fa:	94 e0       	ldi	r25, 0x04	; 4
    22fc:	0e 94 31 07 	call	0xe62	; 0xe62 <extStart>
  extChannelEnable(&EXTD1, INT0); // PD2 (4)
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	84 ec       	ldi	r24, 0xC4	; 196
    2306:	94 e0       	ldi	r25, 0x04	; 4
    2308:	0e 94 3e 07 	call	0xe7c	; 0xe7c <extChannelEnable>

  chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
    230c:	8d e5       	ldi	r24, 0x5D	; 93
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	81 ed       	ldi	r24, 0xD1	; 209
    2316:	94 e0       	ldi	r25, 0x04	; 4
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
  starting();
    231c:	77 db       	rcall	.-2322   	; 0x1a0c <chprintf>
    231e:	ac db       	rcall	.-2216   	; 0x1a78 <starting>
  lavar = PARADA;
    2320:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <lavar>
} fsm_centrifuga_s;


/* Start Condition functions*/
static void fsm_parada_init(fsm_parada_s *st){
  st->select_init = 0;
    2324:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fsm_prd+0x1>
    2328:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fsm_prd>
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
  starting();
  lavar = PARADA;
  fsm_parada_init(&fsm_prd);

  while(1){
    lavar_maquina();
    2332:	0f 90       	pop	r0
    2334:	90 dc       	rcall	.-1760   	; 0x1c56 <lavar_maquina>
    2336:	fe cf       	rjmp	.-4      	; 0x2334 <main+0x54>

00002338 <vfprintf>:
    2338:	ab e0       	ldi	r26, 0x0B	; 11
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e1 ea       	ldi	r30, 0xA1	; 161
    233e:	f1 e1       	ldi	r31, 0x11	; 17
    2340:	1d c3       	rjmp	.+1594   	; 0x297c <__prologue_saves__+0x8>
    2342:	6c 01       	movw	r12, r24
    2344:	7b 01       	movw	r14, r22
    2346:	3a 01       	movw	r6, r20
    2348:	fc 01       	movw	r30, r24
    234a:	17 82       	std	Z+7, r1	; 0x07
    234c:	16 82       	std	Z+6, r1	; 0x06
    234e:	83 81       	ldd	r24, Z+3	; 0x03
    2350:	81 ff       	sbrs	r24, 1
    2352:	f9 c0       	rjmp	.+498    	; 0x2546 <vfprintf+0x20e>
    2354:	ce 01       	movw	r24, r28
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	4c 01       	movw	r8, r24
    235a:	f6 01       	movw	r30, r12
    235c:	b3 80       	ldd	r11, Z+3	; 0x03
    235e:	f7 01       	movw	r30, r14
    2360:	b3 fc       	sbrc	r11, 3
    2362:	05 91       	lpm	r16, Z+
    2364:	b3 fe       	sbrs	r11, 3
    2366:	01 91       	ld	r16, Z+
    2368:	7f 01       	movw	r14, r30
    236a:	00 23       	and	r16, r16
    236c:	09 f4       	brne	.+2      	; 0x2370 <vfprintf+0x38>
    236e:	e7 c0       	rjmp	.+462    	; 0x253e <vfprintf+0x206>
    2370:	05 32       	cpi	r16, 0x25	; 37
    2372:	49 f4       	brne	.+18     	; 0x2386 <vfprintf+0x4e>
    2374:	b3 fc       	sbrc	r11, 3
    2376:	05 91       	lpm	r16, Z+
    2378:	b3 fe       	sbrs	r11, 3
    237a:	01 91       	ld	r16, Z+
    237c:	7f 01       	movw	r14, r30
    237e:	05 32       	cpi	r16, 0x25	; 37
    2380:	11 f0       	breq	.+4      	; 0x2386 <vfprintf+0x4e>
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	17 c0       	rjmp	.+46     	; 0x23b4 <vfprintf+0x7c>
    2386:	b6 01       	movw	r22, r12
    2388:	80 2f       	mov	r24, r16
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	93 d3       	rcall	.+1830   	; 0x2ab4 <fputc>
    238e:	53 01       	movw	r10, r6
    2390:	35 01       	movw	r6, r10
    2392:	e3 cf       	rjmp	.-58     	; 0x235a <vfprintf+0x22>
    2394:	00 23       	and	r16, r16
    2396:	09 f4       	brne	.+2      	; 0x239a <vfprintf+0x62>
    2398:	d2 c0       	rjmp	.+420    	; 0x253e <vfprintf+0x206>
    239a:	60 2f       	mov	r22, r16
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	83 e4       	ldi	r24, 0x43	; 67
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	36 d3       	rcall	.+1644   	; 0x2a10 <strchr_P>
    23a4:	89 2b       	or	r24, r25
    23a6:	49 f0       	breq	.+18     	; 0x23ba <vfprintf+0x82>
    23a8:	f7 01       	movw	r30, r14
    23aa:	b3 fc       	sbrc	r11, 3
    23ac:	05 91       	lpm	r16, Z+
    23ae:	b3 fe       	sbrs	r11, 3
    23b0:	01 91       	ld	r16, Z+
    23b2:	7f 01       	movw	r14, r30
    23b4:	17 ff       	sbrs	r17, 7
    23b6:	ee cf       	rjmp	.-36     	; 0x2394 <vfprintf+0x5c>
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <vfprintf+0x8a>
    23ba:	03 32       	cpi	r16, 0x23	; 35
    23bc:	39 f0       	breq	.+14     	; 0x23cc <vfprintf+0x94>
    23be:	0c 36       	cpi	r16, 0x6C	; 108
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <vfprintf+0x90>
    23c2:	01 11       	cpse	r16, r1
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <vfprintf+0x98>
    23c6:	bb c0       	rjmp	.+374    	; 0x253e <vfprintf+0x206>
    23c8:	10 68       	ori	r17, 0x80	; 128
    23ca:	ee cf       	rjmp	.-36     	; 0x23a8 <vfprintf+0x70>
    23cc:	10 e1       	ldi	r17, 0x10	; 16
    23ce:	ec cf       	rjmp	.-40     	; 0x23a8 <vfprintf+0x70>
    23d0:	60 2f       	mov	r22, r16
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	8c e3       	ldi	r24, 0x3C	; 60
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	1b d3       	rcall	.+1590   	; 0x2a10 <strchr_P>
    23da:	89 2b       	or	r24, r25
    23dc:	41 f0       	breq	.+16     	; 0x23ee <vfprintf+0xb6>
    23de:	53 01       	movw	r10, r6
    23e0:	f4 e0       	ldi	r31, 0x04	; 4
    23e2:	af 0e       	add	r10, r31
    23e4:	b1 1c       	adc	r11, r1
    23e6:	b6 01       	movw	r22, r12
    23e8:	8f e3       	ldi	r24, 0x3F	; 63
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	10 c0       	rjmp	.+32     	; 0x240e <vfprintf+0xd6>
    23ee:	03 36       	cpi	r16, 0x63	; 99
    23f0:	31 f0       	breq	.+12     	; 0x23fe <vfprintf+0xc6>
    23f2:	03 37       	cpi	r16, 0x73	; 115
    23f4:	71 f0       	breq	.+28     	; 0x2412 <vfprintf+0xda>
    23f6:	03 35       	cpi	r16, 0x53	; 83
    23f8:	01 f5       	brne	.+64     	; 0x243a <vfprintf+0x102>
    23fa:	11 60       	ori	r17, 0x01	; 1
    23fc:	0a c0       	rjmp	.+20     	; 0x2412 <vfprintf+0xda>
    23fe:	53 01       	movw	r10, r6
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	a8 0e       	add	r10, r24
    2404:	b1 1c       	adc	r11, r1
    2406:	b6 01       	movw	r22, r12
    2408:	f3 01       	movw	r30, r6
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	52 d3       	rcall	.+1700   	; 0x2ab4 <fputc>
    2410:	bf cf       	rjmp	.-130    	; 0x2390 <vfprintf+0x58>
    2412:	53 01       	movw	r10, r6
    2414:	f2 e0       	ldi	r31, 0x02	; 2
    2416:	af 0e       	add	r10, r31
    2418:	b1 1c       	adc	r11, r1
    241a:	f3 01       	movw	r30, r6
    241c:	60 80       	ld	r6, Z
    241e:	71 80       	ldd	r7, Z+1	; 0x01
    2420:	f3 01       	movw	r30, r6
    2422:	10 fd       	sbrc	r17, 0
    2424:	85 91       	lpm	r24, Z+
    2426:	10 ff       	sbrs	r17, 0
    2428:	81 91       	ld	r24, Z+
    242a:	3f 01       	movw	r6, r30
    242c:	88 23       	and	r24, r24
    242e:	09 f4       	brne	.+2      	; 0x2432 <vfprintf+0xfa>
    2430:	af cf       	rjmp	.-162    	; 0x2390 <vfprintf+0x58>
    2432:	b6 01       	movw	r22, r12
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	3e d3       	rcall	.+1660   	; 0x2ab4 <fputc>
    2438:	f3 cf       	rjmp	.-26     	; 0x2420 <vfprintf+0xe8>
    243a:	04 36       	cpi	r16, 0x64	; 100
    243c:	11 f0       	breq	.+4      	; 0x2442 <vfprintf+0x10a>
    243e:	09 36       	cpi	r16, 0x69	; 105
    2440:	21 f5       	brne	.+72     	; 0x248a <vfprintf+0x152>
    2442:	53 01       	movw	r10, r6
    2444:	17 ff       	sbrs	r17, 7
    2446:	09 c0       	rjmp	.+18     	; 0x245a <vfprintf+0x122>
    2448:	f4 e0       	ldi	r31, 0x04	; 4
    244a:	af 0e       	add	r10, r31
    244c:	b1 1c       	adc	r11, r1
    244e:	f3 01       	movw	r30, r6
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	0a c0       	rjmp	.+20     	; 0x246e <vfprintf+0x136>
    245a:	f2 e0       	ldi	r31, 0x02	; 2
    245c:	af 0e       	add	r10, r31
    245e:	b1 1c       	adc	r11, r1
    2460:	f3 01       	movw	r30, r6
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	07 2e       	mov	r0, r23
    2468:	00 0c       	add	r0, r0
    246a:	88 0b       	sbc	r24, r24
    246c:	99 0b       	sbc	r25, r25
    246e:	1f 7e       	andi	r17, 0xEF	; 239
    2470:	97 ff       	sbrs	r25, 7
    2472:	08 c0       	rjmp	.+16     	; 0x2484 <vfprintf+0x14c>
    2474:	90 95       	com	r25
    2476:	80 95       	com	r24
    2478:	70 95       	com	r23
    247a:	61 95       	neg	r22
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8f 4f       	sbci	r24, 0xFF	; 255
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	10 64       	ori	r17, 0x40	; 64
    2484:	2a e0       	ldi	r18, 0x0A	; 10
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	30 c0       	rjmp	.+96     	; 0x24ea <vfprintf+0x1b2>
    248a:	00 37       	cpi	r16, 0x70	; 112
    248c:	91 f0       	breq	.+36     	; 0x24b2 <vfprintf+0x17a>
    248e:	40 f4       	brcc	.+16     	; 0x24a0 <vfprintf+0x168>
    2490:	08 35       	cpi	r16, 0x58	; 88
    2492:	a1 f0       	breq	.+40     	; 0x24bc <vfprintf+0x184>
    2494:	0f 36       	cpi	r16, 0x6F	; 111
    2496:	09 f0       	breq	.+2      	; 0x249a <vfprintf+0x162>
    2498:	52 c0       	rjmp	.+164    	; 0x253e <vfprintf+0x206>
    249a:	28 e0       	ldi	r18, 0x08	; 8
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	11 c0       	rjmp	.+34     	; 0x24c2 <vfprintf+0x18a>
    24a0:	05 37       	cpi	r16, 0x75	; 117
    24a2:	19 f0       	breq	.+6      	; 0x24aa <vfprintf+0x172>
    24a4:	08 37       	cpi	r16, 0x78	; 120
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <vfprintf+0x17c>
    24a8:	4a c0       	rjmp	.+148    	; 0x253e <vfprintf+0x206>
    24aa:	1f 7e       	andi	r17, 0xEF	; 239
    24ac:	2a e0       	ldi	r18, 0x0A	; 10
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <vfprintf+0x18a>
    24b2:	10 61       	ori	r17, 0x10	; 16
    24b4:	14 62       	ori	r17, 0x24	; 36
    24b6:	20 e1       	ldi	r18, 0x10	; 16
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <vfprintf+0x18a>
    24bc:	14 60       	ori	r17, 0x04	; 4
    24be:	20 e1       	ldi	r18, 0x10	; 16
    24c0:	32 e0       	ldi	r19, 0x02	; 2
    24c2:	53 01       	movw	r10, r6
    24c4:	17 ff       	sbrs	r17, 7
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <vfprintf+0x1a2>
    24c8:	f4 e0       	ldi	r31, 0x04	; 4
    24ca:	af 0e       	add	r10, r31
    24cc:	b1 1c       	adc	r11, r1
    24ce:	f3 01       	movw	r30, r6
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	08 c0       	rjmp	.+16     	; 0x24ea <vfprintf+0x1b2>
    24da:	f2 e0       	ldi	r31, 0x02	; 2
    24dc:	af 0e       	add	r10, r31
    24de:	b1 1c       	adc	r11, r1
    24e0:	f3 01       	movw	r30, r6
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	a4 01       	movw	r20, r8
    24ec:	38 d3       	rcall	.+1648   	; 0x2b5e <__ultoa_invert>
    24ee:	08 2f       	mov	r16, r24
    24f0:	08 19       	sub	r16, r8
    24f2:	16 ff       	sbrs	r17, 6
    24f4:	04 c0       	rjmp	.+8      	; 0x24fe <vfprintf+0x1c6>
    24f6:	b6 01       	movw	r22, r12
    24f8:	8d e2       	ldi	r24, 0x2D	; 45
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	db d2       	rcall	.+1462   	; 0x2ab4 <fputc>
    24fe:	14 ff       	sbrs	r17, 4
    2500:	13 c0       	rjmp	.+38     	; 0x2528 <vfprintf+0x1f0>
    2502:	fe 01       	movw	r30, r28
    2504:	e0 0f       	add	r30, r16
    2506:	f1 1d       	adc	r31, r1
    2508:	80 81       	ld	r24, Z
    250a:	80 33       	cpi	r24, 0x30	; 48
    250c:	69 f0       	breq	.+26     	; 0x2528 <vfprintf+0x1f0>
    250e:	b6 01       	movw	r22, r12
    2510:	80 e3       	ldi	r24, 0x30	; 48
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	cf d2       	rcall	.+1438   	; 0x2ab4 <fputc>
    2516:	12 ff       	sbrs	r17, 2
    2518:	07 c0       	rjmp	.+14     	; 0x2528 <vfprintf+0x1f0>
    251a:	10 72       	andi	r17, 0x20	; 32
    251c:	81 2f       	mov	r24, r17
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	b6 01       	movw	r22, r12
    2522:	88 5a       	subi	r24, 0xA8	; 168
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	c6 d2       	rcall	.+1420   	; 0x2ab4 <fputc>
    2528:	01 50       	subi	r16, 0x01	; 1
    252a:	f4 01       	movw	r30, r8
    252c:	e0 0f       	add	r30, r16
    252e:	f1 1d       	adc	r31, r1
    2530:	80 81       	ld	r24, Z
    2532:	b6 01       	movw	r22, r12
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	be d2       	rcall	.+1404   	; 0x2ab4 <fputc>
    2538:	01 11       	cpse	r16, r1
    253a:	f6 cf       	rjmp	.-20     	; 0x2528 <vfprintf+0x1f0>
    253c:	29 cf       	rjmp	.-430    	; 0x2390 <vfprintf+0x58>
    253e:	f6 01       	movw	r30, r12
    2540:	86 81       	ldd	r24, Z+6	; 0x06
    2542:	97 81       	ldd	r25, Z+7	; 0x07
    2544:	02 c0       	rjmp	.+4      	; 0x254a <vfprintf+0x212>
    2546:	8f ef       	ldi	r24, 0xFF	; 255
    2548:	9f ef       	ldi	r25, 0xFF	; 255
    254a:	2b 96       	adiw	r28, 0x0b	; 11
    254c:	ee e0       	ldi	r30, 0x0E	; 14
    254e:	32 c2       	rjmp	.+1124   	; 0x29b4 <__epilogue_restores__+0x8>

00002550 <putval>:
    2550:	20 fd       	sbrc	r18, 0
    2552:	09 c0       	rjmp	.+18     	; 0x2566 <putval+0x16>
    2554:	fc 01       	movw	r30, r24
    2556:	23 fd       	sbrc	r18, 3
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <putval+0x14>
    255a:	22 ff       	sbrs	r18, 2
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <putval+0x12>
    255e:	73 83       	std	Z+3, r23	; 0x03
    2560:	62 83       	std	Z+2, r22	; 0x02
    2562:	51 83       	std	Z+1, r21	; 0x01
    2564:	40 83       	st	Z, r20
    2566:	08 95       	ret

00002568 <mulacc>:
    2568:	44 fd       	sbrc	r20, 4
    256a:	17 c0       	rjmp	.+46     	; 0x259a <mulacc+0x32>
    256c:	46 fd       	sbrc	r20, 6
    256e:	17 c0       	rjmp	.+46     	; 0x259e <mulacc+0x36>
    2570:	ab 01       	movw	r20, r22
    2572:	bc 01       	movw	r22, r24
    2574:	da 01       	movw	r26, r20
    2576:	fb 01       	movw	r30, r22
    2578:	aa 0f       	add	r26, r26
    257a:	bb 1f       	adc	r27, r27
    257c:	ee 1f       	adc	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	10 94       	com	r1
    2582:	d1 f7       	brne	.-12     	; 0x2578 <mulacc+0x10>
    2584:	4a 0f       	add	r20, r26
    2586:	5b 1f       	adc	r21, r27
    2588:	6e 1f       	adc	r22, r30
    258a:	7f 1f       	adc	r23, r31
    258c:	cb 01       	movw	r24, r22
    258e:	ba 01       	movw	r22, r20
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	09 c0       	rjmp	.+18     	; 0x25ac <mulacc+0x44>
    259a:	33 e0       	ldi	r19, 0x03	; 3
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <mulacc+0x38>
    259e:	34 e0       	ldi	r19, 0x04	; 4
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 1f       	adc	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	31 50       	subi	r19, 0x01	; 1
    25aa:	d1 f7       	brne	.-12     	; 0x25a0 <mulacc+0x38>
    25ac:	62 0f       	add	r22, r18
    25ae:	71 1d       	adc	r23, r1
    25b0:	81 1d       	adc	r24, r1
    25b2:	91 1d       	adc	r25, r1
    25b4:	08 95       	ret

000025b6 <skip_spaces>:
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	8c 01       	movw	r16, r24
    25c0:	c8 01       	movw	r24, r16
    25c2:	3a d2       	rcall	.+1140   	; 0x2a38 <fgetc>
    25c4:	ec 01       	movw	r28, r24
    25c6:	97 fd       	sbrc	r25, 7
    25c8:	06 c0       	rjmp	.+12     	; 0x25d6 <skip_spaces+0x20>
    25ca:	1a d2       	rcall	.+1076   	; 0x2a00 <isspace>
    25cc:	89 2b       	or	r24, r25
    25ce:	c1 f7       	brne	.-16     	; 0x25c0 <skip_spaces+0xa>
    25d0:	b8 01       	movw	r22, r16
    25d2:	ce 01       	movw	r24, r28
    25d4:	ab d2       	rcall	.+1366   	; 0x2b2c <ungetc>
    25d6:	ce 01       	movw	r24, r28
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <conv_int>:
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	8c 01       	movw	r16, r24
    25f8:	d6 2f       	mov	r29, r22
    25fa:	7a 01       	movw	r14, r20
    25fc:	b2 2e       	mov	r11, r18
    25fe:	1c d2       	rcall	.+1080   	; 0x2a38 <fgetc>
    2600:	9c 01       	movw	r18, r24
    2602:	33 27       	eor	r19, r19
    2604:	2b 32       	cpi	r18, 0x2B	; 43
    2606:	31 05       	cpc	r19, r1
    2608:	31 f0       	breq	.+12     	; 0x2616 <conv_int+0x34>
    260a:	2d 32       	cpi	r18, 0x2D	; 45
    260c:	31 05       	cpc	r19, r1
    260e:	59 f4       	brne	.+22     	; 0x2626 <conv_int+0x44>
    2610:	8b 2d       	mov	r24, r11
    2612:	80 68       	ori	r24, 0x80	; 128
    2614:	b8 2e       	mov	r11, r24
    2616:	d1 50       	subi	r29, 0x01	; 1
    2618:	11 f4       	brne	.+4      	; 0x261e <conv_int+0x3c>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	61 c0       	rjmp	.+194    	; 0x26e0 <conv_int+0xfe>
    261e:	c8 01       	movw	r24, r16
    2620:	0b d2       	rcall	.+1046   	; 0x2a38 <fgetc>
    2622:	97 fd       	sbrc	r25, 7
    2624:	fa cf       	rjmp	.-12     	; 0x261a <conv_int+0x38>
    2626:	cb 2d       	mov	r28, r11
    2628:	cd 7f       	andi	r28, 0xFD	; 253
    262a:	2b 2d       	mov	r18, r11
    262c:	20 73       	andi	r18, 0x30	; 48
    262e:	f9 f4       	brne	.+62     	; 0x266e <conv_int+0x8c>
    2630:	80 33       	cpi	r24, 0x30	; 48
    2632:	e9 f4       	brne	.+58     	; 0x266e <conv_int+0x8c>
    2634:	aa 24       	eor	r10, r10
    2636:	aa 94       	dec	r10
    2638:	ad 0e       	add	r10, r29
    263a:	09 f4       	brne	.+2      	; 0x263e <conv_int+0x5c>
    263c:	3e c0       	rjmp	.+124    	; 0x26ba <conv_int+0xd8>
    263e:	c8 01       	movw	r24, r16
    2640:	fb d1       	rcall	.+1014   	; 0x2a38 <fgetc>
    2642:	97 fd       	sbrc	r25, 7
    2644:	3a c0       	rjmp	.+116    	; 0x26ba <conv_int+0xd8>
    2646:	9c 01       	movw	r18, r24
    2648:	2f 7d       	andi	r18, 0xDF	; 223
    264a:	33 27       	eor	r19, r19
    264c:	28 35       	cpi	r18, 0x58	; 88
    264e:	31 05       	cpc	r19, r1
    2650:	41 f4       	brne	.+16     	; 0x2662 <conv_int+0x80>
    2652:	c2 64       	ori	r28, 0x42	; 66
    2654:	d2 50       	subi	r29, 0x02	; 2
    2656:	89 f1       	breq	.+98     	; 0x26ba <conv_int+0xd8>
    2658:	c8 01       	movw	r24, r16
    265a:	ee d1       	rcall	.+988    	; 0x2a38 <fgetc>
    265c:	97 ff       	sbrs	r25, 7
    265e:	07 c0       	rjmp	.+14     	; 0x266e <conv_int+0x8c>
    2660:	2c c0       	rjmp	.+88     	; 0x26ba <conv_int+0xd8>
    2662:	b6 fe       	sbrs	r11, 6
    2664:	02 c0       	rjmp	.+4      	; 0x266a <conv_int+0x88>
    2666:	c2 60       	ori	r28, 0x02	; 2
    2668:	01 c0       	rjmp	.+2      	; 0x266c <conv_int+0x8a>
    266a:	c2 61       	ori	r28, 0x12	; 18
    266c:	da 2d       	mov	r29, r10
    266e:	81 2c       	mov	r8, r1
    2670:	91 2c       	mov	r9, r1
    2672:	54 01       	movw	r10, r8
    2674:	20 ed       	ldi	r18, 0xD0	; 208
    2676:	28 0f       	add	r18, r24
    2678:	28 30       	cpi	r18, 0x08	; 8
    267a:	78 f0       	brcs	.+30     	; 0x269a <conv_int+0xb8>
    267c:	c4 ff       	sbrs	r28, 4
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <conv_int+0xa4>
    2680:	b8 01       	movw	r22, r16
    2682:	54 d2       	rcall	.+1192   	; 0x2b2c <ungetc>
    2684:	17 c0       	rjmp	.+46     	; 0x26b4 <conv_int+0xd2>
    2686:	2a 30       	cpi	r18, 0x0A	; 10
    2688:	40 f0       	brcs	.+16     	; 0x269a <conv_int+0xb8>
    268a:	c6 ff       	sbrs	r28, 6
    268c:	f9 cf       	rjmp	.-14     	; 0x2680 <conv_int+0x9e>
    268e:	2f 7d       	andi	r18, 0xDF	; 223
    2690:	3f ee       	ldi	r19, 0xEF	; 239
    2692:	32 0f       	add	r19, r18
    2694:	36 30       	cpi	r19, 0x06	; 6
    2696:	a0 f7       	brcc	.-24     	; 0x2680 <conv_int+0x9e>
    2698:	27 50       	subi	r18, 0x07	; 7
    269a:	4c 2f       	mov	r20, r28
    269c:	c5 01       	movw	r24, r10
    269e:	b4 01       	movw	r22, r8
    26a0:	63 df       	rcall	.-314    	; 0x2568 <mulacc>
    26a2:	4b 01       	movw	r8, r22
    26a4:	5c 01       	movw	r10, r24
    26a6:	c2 60       	ori	r28, 0x02	; 2
    26a8:	d1 50       	subi	r29, 0x01	; 1
    26aa:	51 f0       	breq	.+20     	; 0x26c0 <conv_int+0xde>
    26ac:	c8 01       	movw	r24, r16
    26ae:	c4 d1       	rcall	.+904    	; 0x2a38 <fgetc>
    26b0:	97 ff       	sbrs	r25, 7
    26b2:	e0 cf       	rjmp	.-64     	; 0x2674 <conv_int+0x92>
    26b4:	c1 fd       	sbrc	r28, 1
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <conv_int+0xde>
    26b8:	b0 cf       	rjmp	.-160    	; 0x261a <conv_int+0x38>
    26ba:	81 2c       	mov	r8, r1
    26bc:	91 2c       	mov	r9, r1
    26be:	54 01       	movw	r10, r8
    26c0:	c7 ff       	sbrs	r28, 7
    26c2:	08 c0       	rjmp	.+16     	; 0x26d4 <conv_int+0xf2>
    26c4:	b0 94       	com	r11
    26c6:	a0 94       	com	r10
    26c8:	90 94       	com	r9
    26ca:	80 94       	com	r8
    26cc:	81 1c       	adc	r8, r1
    26ce:	91 1c       	adc	r9, r1
    26d0:	a1 1c       	adc	r10, r1
    26d2:	b1 1c       	adc	r11, r1
    26d4:	2c 2f       	mov	r18, r28
    26d6:	b5 01       	movw	r22, r10
    26d8:	a4 01       	movw	r20, r8
    26da:	c7 01       	movw	r24, r14
    26dc:	39 df       	rcall	.-398    	; 0x2550 <putval>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	08 95       	ret

000026f6 <vfscanf>:
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e0 e8       	ldi	r30, 0x80	; 128
    26fc:	f3 e1       	ldi	r31, 0x13	; 19
    26fe:	3d c1       	rjmp	.+634    	; 0x297a <__prologue_saves__+0x6>
    2700:	6c 01       	movw	r12, r24
    2702:	eb 01       	movw	r28, r22
    2704:	5a 01       	movw	r10, r20
    2706:	fc 01       	movw	r30, r24
    2708:	17 82       	std	Z+7, r1	; 0x07
    270a:	16 82       	std	Z+6, r1	; 0x06
    270c:	51 2c       	mov	r5, r1
    270e:	f6 01       	movw	r30, r12
    2710:	f3 80       	ldd	r15, Z+3	; 0x03
    2712:	fe 01       	movw	r30, r28
    2714:	f3 fc       	sbrc	r15, 3
    2716:	85 91       	lpm	r24, Z+
    2718:	f3 fe       	sbrs	r15, 3
    271a:	81 91       	ld	r24, Z+
    271c:	18 2f       	mov	r17, r24
    271e:	ef 01       	movw	r28, r30
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <vfscanf+0x30>
    2724:	d4 c0       	rjmp	.+424    	; 0x28ce <vfscanf+0x1d8>
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	6b d1       	rcall	.+726    	; 0x2a00 <isspace>
    272a:	89 2b       	or	r24, r25
    272c:	19 f0       	breq	.+6      	; 0x2734 <vfscanf+0x3e>
    272e:	c6 01       	movw	r24, r12
    2730:	42 df       	rcall	.-380    	; 0x25b6 <skip_spaces>
    2732:	ed cf       	rjmp	.-38     	; 0x270e <vfscanf+0x18>
    2734:	15 32       	cpi	r17, 0x25	; 37
    2736:	41 f4       	brne	.+16     	; 0x2748 <vfscanf+0x52>
    2738:	fe 01       	movw	r30, r28
    273a:	f3 fc       	sbrc	r15, 3
    273c:	15 91       	lpm	r17, Z+
    273e:	f3 fe       	sbrs	r15, 3
    2740:	11 91       	ld	r17, Z+
    2742:	ef 01       	movw	r28, r30
    2744:	15 32       	cpi	r17, 0x25	; 37
    2746:	71 f4       	brne	.+28     	; 0x2764 <vfscanf+0x6e>
    2748:	c6 01       	movw	r24, r12
    274a:	76 d1       	rcall	.+748    	; 0x2a38 <fgetc>
    274c:	97 fd       	sbrc	r25, 7
    274e:	bd c0       	rjmp	.+378    	; 0x28ca <vfscanf+0x1d4>
    2750:	41 2f       	mov	r20, r17
    2752:	50 e0       	ldi	r21, 0x00	; 0
    2754:	9c 01       	movw	r18, r24
    2756:	33 27       	eor	r19, r19
    2758:	24 17       	cp	r18, r20
    275a:	35 07       	cpc	r19, r21
    275c:	c1 f2       	breq	.-80     	; 0x270e <vfscanf+0x18>
    275e:	b6 01       	movw	r22, r12
    2760:	e5 d1       	rcall	.+970    	; 0x2b2c <ungetc>
    2762:	b5 c0       	rjmp	.+362    	; 0x28ce <vfscanf+0x1d8>
    2764:	1a 32       	cpi	r17, 0x2A	; 42
    2766:	39 f4       	brne	.+14     	; 0x2776 <vfscanf+0x80>
    2768:	f3 fc       	sbrc	r15, 3
    276a:	15 91       	lpm	r17, Z+
    276c:	f3 fe       	sbrs	r15, 3
    276e:	11 91       	ld	r17, Z+
    2770:	ef 01       	movw	r28, r30
    2772:	01 e0       	ldi	r16, 0x01	; 1
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <vfscanf+0x82>
    2776:	00 e0       	ldi	r16, 0x00	; 0
    2778:	e1 2c       	mov	r14, r1
    277a:	20 ed       	ldi	r18, 0xD0	; 208
    277c:	21 0f       	add	r18, r17
    277e:	2a 30       	cpi	r18, 0x0A	; 10
    2780:	78 f4       	brcc	.+30     	; 0x27a0 <vfscanf+0xaa>
    2782:	02 60       	ori	r16, 0x02	; 2
    2784:	6e 2d       	mov	r22, r14
    2786:	70 e0       	ldi	r23, 0x00	; 0
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	ec de       	rcall	.-552    	; 0x2568 <mulacc>
    2790:	e6 2e       	mov	r14, r22
    2792:	fe 01       	movw	r30, r28
    2794:	f3 fc       	sbrc	r15, 3
    2796:	15 91       	lpm	r17, Z+
    2798:	f3 fe       	sbrs	r15, 3
    279a:	11 91       	ld	r17, Z+
    279c:	ef 01       	movw	r28, r30
    279e:	ed cf       	rjmp	.-38     	; 0x277a <vfscanf+0x84>
    27a0:	01 ff       	sbrs	r16, 1
    27a2:	03 c0       	rjmp	.+6      	; 0x27aa <vfscanf+0xb4>
    27a4:	e1 10       	cpse	r14, r1
    27a6:	03 c0       	rjmp	.+6      	; 0x27ae <vfscanf+0xb8>
    27a8:	92 c0       	rjmp	.+292    	; 0x28ce <vfscanf+0x1d8>
    27aa:	ee 24       	eor	r14, r14
    27ac:	ea 94       	dec	r14
    27ae:	18 36       	cpi	r17, 0x68	; 104
    27b0:	19 f0       	breq	.+6      	; 0x27b8 <vfscanf+0xc2>
    27b2:	1c 36       	cpi	r17, 0x6C	; 108
    27b4:	51 f0       	breq	.+20     	; 0x27ca <vfscanf+0xd4>
    27b6:	10 c0       	rjmp	.+32     	; 0x27d8 <vfscanf+0xe2>
    27b8:	fe 01       	movw	r30, r28
    27ba:	f3 fc       	sbrc	r15, 3
    27bc:	15 91       	lpm	r17, Z+
    27be:	f3 fe       	sbrs	r15, 3
    27c0:	11 91       	ld	r17, Z+
    27c2:	ef 01       	movw	r28, r30
    27c4:	18 36       	cpi	r17, 0x68	; 104
    27c6:	41 f4       	brne	.+16     	; 0x27d8 <vfscanf+0xe2>
    27c8:	08 60       	ori	r16, 0x08	; 8
    27ca:	04 60       	ori	r16, 0x04	; 4
    27cc:	fe 01       	movw	r30, r28
    27ce:	f3 fc       	sbrc	r15, 3
    27d0:	15 91       	lpm	r17, Z+
    27d2:	f3 fe       	sbrs	r15, 3
    27d4:	11 91       	ld	r17, Z+
    27d6:	ef 01       	movw	r28, r30
    27d8:	11 23       	and	r17, r17
    27da:	09 f4       	brne	.+2      	; 0x27de <vfscanf+0xe8>
    27dc:	78 c0       	rjmp	.+240    	; 0x28ce <vfscanf+0x1d8>
    27de:	61 2f       	mov	r22, r17
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	83 e5       	ldi	r24, 0x53	; 83
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	14 d1       	rcall	.+552    	; 0x2a10 <strchr_P>
    27e8:	89 2b       	or	r24, r25
    27ea:	09 f4       	brne	.+2      	; 0x27ee <vfscanf+0xf8>
    27ec:	70 c0       	rjmp	.+224    	; 0x28ce <vfscanf+0x1d8>
    27ee:	00 fd       	sbrc	r16, 0
    27f0:	07 c0       	rjmp	.+14     	; 0x2800 <vfscanf+0x10a>
    27f2:	f5 01       	movw	r30, r10
    27f4:	80 80       	ld	r8, Z
    27f6:	91 80       	ldd	r9, Z+1	; 0x01
    27f8:	c5 01       	movw	r24, r10
    27fa:	02 96       	adiw	r24, 0x02	; 2
    27fc:	5c 01       	movw	r10, r24
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <vfscanf+0x10e>
    2800:	81 2c       	mov	r8, r1
    2802:	91 2c       	mov	r9, r1
    2804:	1e 36       	cpi	r17, 0x6E	; 110
    2806:	49 f4       	brne	.+18     	; 0x281a <vfscanf+0x124>
    2808:	f6 01       	movw	r30, r12
    280a:	46 81       	ldd	r20, Z+6	; 0x06
    280c:	57 81       	ldd	r21, Z+7	; 0x07
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	20 2f       	mov	r18, r16
    2814:	c4 01       	movw	r24, r8
    2816:	9c de       	rcall	.-712    	; 0x2550 <putval>
    2818:	7a cf       	rjmp	.-268    	; 0x270e <vfscanf+0x18>
    281a:	13 36       	cpi	r17, 0x63	; 99
    281c:	a1 f4       	brne	.+40     	; 0x2846 <vfscanf+0x150>
    281e:	01 fd       	sbrc	r16, 1
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <vfscanf+0x130>
    2822:	ee 24       	eor	r14, r14
    2824:	e3 94       	inc	r14
    2826:	c6 01       	movw	r24, r12
    2828:	07 d1       	rcall	.+526    	; 0x2a38 <fgetc>
    282a:	97 fd       	sbrc	r25, 7
    282c:	4e c0       	rjmp	.+156    	; 0x28ca <vfscanf+0x1d4>
    282e:	81 14       	cp	r8, r1
    2830:	91 04       	cpc	r9, r1
    2832:	29 f0       	breq	.+10     	; 0x283e <vfscanf+0x148>
    2834:	f4 01       	movw	r30, r8
    2836:	80 83       	st	Z, r24
    2838:	c4 01       	movw	r24, r8
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	4c 01       	movw	r8, r24
    283e:	ea 94       	dec	r14
    2840:	e1 10       	cpse	r14, r1
    2842:	f1 cf       	rjmp	.-30     	; 0x2826 <vfscanf+0x130>
    2844:	3e c0       	rjmp	.+124    	; 0x28c2 <vfscanf+0x1cc>
    2846:	c6 01       	movw	r24, r12
    2848:	b6 de       	rcall	.-660    	; 0x25b6 <skip_spaces>
    284a:	97 fd       	sbrc	r25, 7
    284c:	3e c0       	rjmp	.+124    	; 0x28ca <vfscanf+0x1d4>
    284e:	1f 36       	cpi	r17, 0x6F	; 111
    2850:	49 f1       	breq	.+82     	; 0x28a4 <vfscanf+0x1ae>
    2852:	28 f4       	brcc	.+10     	; 0x285e <vfscanf+0x168>
    2854:	14 36       	cpi	r17, 0x64	; 100
    2856:	21 f1       	breq	.+72     	; 0x28a0 <vfscanf+0x1aa>
    2858:	19 36       	cpi	r17, 0x69	; 105
    285a:	39 f1       	breq	.+78     	; 0x28aa <vfscanf+0x1b4>
    285c:	25 c0       	rjmp	.+74     	; 0x28a8 <vfscanf+0x1b2>
    285e:	13 37       	cpi	r17, 0x73	; 115
    2860:	71 f0       	breq	.+28     	; 0x287e <vfscanf+0x188>
    2862:	15 37       	cpi	r17, 0x75	; 117
    2864:	e9 f0       	breq	.+58     	; 0x28a0 <vfscanf+0x1aa>
    2866:	20 c0       	rjmp	.+64     	; 0x28a8 <vfscanf+0x1b2>
    2868:	81 14       	cp	r8, r1
    286a:	91 04       	cpc	r9, r1
    286c:	29 f0       	breq	.+10     	; 0x2878 <vfscanf+0x182>
    286e:	f4 01       	movw	r30, r8
    2870:	60 82       	st	Z, r6
    2872:	c4 01       	movw	r24, r8
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	4c 01       	movw	r8, r24
    2878:	ea 94       	dec	r14
    287a:	ee 20       	and	r14, r14
    287c:	59 f0       	breq	.+22     	; 0x2894 <vfscanf+0x19e>
    287e:	c6 01       	movw	r24, r12
    2880:	db d0       	rcall	.+438    	; 0x2a38 <fgetc>
    2882:	3c 01       	movw	r6, r24
    2884:	97 fd       	sbrc	r25, 7
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <vfscanf+0x19e>
    2888:	bb d0       	rcall	.+374    	; 0x2a00 <isspace>
    288a:	89 2b       	or	r24, r25
    288c:	69 f3       	breq	.-38     	; 0x2868 <vfscanf+0x172>
    288e:	b6 01       	movw	r22, r12
    2890:	c3 01       	movw	r24, r6
    2892:	4c d1       	rcall	.+664    	; 0x2b2c <ungetc>
    2894:	81 14       	cp	r8, r1
    2896:	91 04       	cpc	r9, r1
    2898:	a1 f0       	breq	.+40     	; 0x28c2 <vfscanf+0x1cc>
    289a:	f4 01       	movw	r30, r8
    289c:	10 82       	st	Z, r1
    289e:	11 c0       	rjmp	.+34     	; 0x28c2 <vfscanf+0x1cc>
    28a0:	00 62       	ori	r16, 0x20	; 32
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <vfscanf+0x1b4>
    28a4:	00 61       	ori	r16, 0x10	; 16
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <vfscanf+0x1b4>
    28a8:	00 64       	ori	r16, 0x40	; 64
    28aa:	20 2f       	mov	r18, r16
    28ac:	a4 01       	movw	r20, r8
    28ae:	6e 2d       	mov	r22, r14
    28b0:	c6 01       	movw	r24, r12
    28b2:	97 de       	rcall	.-722    	; 0x25e2 <conv_int>
    28b4:	81 11       	cpse	r24, r1
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <vfscanf+0x1cc>
    28b8:	f6 01       	movw	r30, r12
    28ba:	83 81       	ldd	r24, Z+3	; 0x03
    28bc:	80 73       	andi	r24, 0x30	; 48
    28be:	29 f4       	brne	.+10     	; 0x28ca <vfscanf+0x1d4>
    28c0:	06 c0       	rjmp	.+12     	; 0x28ce <vfscanf+0x1d8>
    28c2:	00 fd       	sbrc	r16, 0
    28c4:	24 cf       	rjmp	.-440    	; 0x270e <vfscanf+0x18>
    28c6:	53 94       	inc	r5
    28c8:	22 cf       	rjmp	.-444    	; 0x270e <vfscanf+0x18>
    28ca:	55 20       	and	r5, r5
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <vfscanf+0x1de>
    28ce:	85 2d       	mov	r24, r5
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <vfscanf+0x1e2>
    28d4:	8f ef       	ldi	r24, 0xFF	; 255
    28d6:	9f ef       	ldi	r25, 0xFF	; 255
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	ef e0       	ldi	r30, 0x0F	; 15
    28de:	69 c0       	rjmp	.+210    	; 0x29b2 <__epilogue_restores__+0x6>

000028e0 <__udivmodsi4>:
    28e0:	a1 e2       	ldi	r26, 0x21	; 33
    28e2:	1a 2e       	mov	r1, r26
    28e4:	aa 1b       	sub	r26, r26
    28e6:	bb 1b       	sub	r27, r27
    28e8:	fd 01       	movw	r30, r26
    28ea:	0d c0       	rjmp	.+26     	; 0x2906 <__udivmodsi4_ep>

000028ec <__udivmodsi4_loop>:
    28ec:	aa 1f       	adc	r26, r26
    28ee:	bb 1f       	adc	r27, r27
    28f0:	ee 1f       	adc	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	a2 17       	cp	r26, r18
    28f6:	b3 07       	cpc	r27, r19
    28f8:	e4 07       	cpc	r30, r20
    28fa:	f5 07       	cpc	r31, r21
    28fc:	20 f0       	brcs	.+8      	; 0x2906 <__udivmodsi4_ep>
    28fe:	a2 1b       	sub	r26, r18
    2900:	b3 0b       	sbc	r27, r19
    2902:	e4 0b       	sbc	r30, r20
    2904:	f5 0b       	sbc	r31, r21

00002906 <__udivmodsi4_ep>:
    2906:	66 1f       	adc	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	88 1f       	adc	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	1a 94       	dec	r1
    2910:	69 f7       	brne	.-38     	; 0x28ec <__udivmodsi4_loop>
    2912:	60 95       	com	r22
    2914:	70 95       	com	r23
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	bd 01       	movw	r22, r26
    2920:	cf 01       	movw	r24, r30
    2922:	08 95       	ret

00002924 <__divmodsi4>:
    2924:	05 2e       	mov	r0, r21
    2926:	97 fb       	bst	r25, 7
    2928:	16 f4       	brtc	.+4      	; 0x292e <__divmodsi4+0xa>
    292a:	00 94       	com	r0
    292c:	0f d0       	rcall	.+30     	; 0x294c <__negsi2>
    292e:	57 fd       	sbrc	r21, 7
    2930:	05 d0       	rcall	.+10     	; 0x293c <__divmodsi4_neg2>
    2932:	d6 df       	rcall	.-84     	; 0x28e0 <__udivmodsi4>
    2934:	07 fc       	sbrc	r0, 7
    2936:	02 d0       	rcall	.+4      	; 0x293c <__divmodsi4_neg2>
    2938:	46 f4       	brtc	.+16     	; 0x294a <__divmodsi4_exit>
    293a:	08 c0       	rjmp	.+16     	; 0x294c <__negsi2>

0000293c <__divmodsi4_neg2>:
    293c:	50 95       	com	r21
    293e:	40 95       	com	r20
    2940:	30 95       	com	r19
    2942:	21 95       	neg	r18
    2944:	3f 4f       	sbci	r19, 0xFF	; 255
    2946:	4f 4f       	sbci	r20, 0xFF	; 255
    2948:	5f 4f       	sbci	r21, 0xFF	; 255

0000294a <__divmodsi4_exit>:
    294a:	08 95       	ret

0000294c <__negsi2>:
    294c:	90 95       	com	r25
    294e:	80 95       	com	r24
    2950:	70 95       	com	r23
    2952:	61 95       	neg	r22
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	08 95       	ret

0000295c <__tablejump2__>:
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	05 90       	lpm	r0, Z+
    2962:	f4 91       	lpm	r31, Z
    2964:	e0 2d       	mov	r30, r0
    2966:	09 94       	ijmp

00002968 <__usmulhisi3>:
    2968:	3c d0       	rcall	.+120    	; 0x29e2 <__umulhisi3>

0000296a <__usmulhisi3_tail>:
    296a:	b7 ff       	sbrs	r27, 7
    296c:	08 95       	ret
    296e:	82 1b       	sub	r24, r18
    2970:	93 0b       	sbc	r25, r19
    2972:	08 95       	ret

00002974 <__prologue_saves__>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	ca 1b       	sub	r28, r26
    299e:	db 0b       	sbc	r29, r27
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	09 94       	ijmp

000029ac <__epilogue_restores__>:
    29ac:	2a 88       	ldd	r2, Y+18	; 0x12
    29ae:	39 88       	ldd	r3, Y+17	; 0x11
    29b0:	48 88       	ldd	r4, Y+16	; 0x10
    29b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    29bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29be:	b9 84       	ldd	r11, Y+9	; 0x09
    29c0:	c8 84       	ldd	r12, Y+8	; 0x08
    29c2:	df 80       	ldd	r13, Y+7	; 0x07
    29c4:	ee 80       	ldd	r14, Y+6	; 0x06
    29c6:	fd 80       	ldd	r15, Y+5	; 0x05
    29c8:	0c 81       	ldd	r16, Y+4	; 0x04
    29ca:	1b 81       	ldd	r17, Y+3	; 0x03
    29cc:	aa 81       	ldd	r26, Y+2	; 0x02
    29ce:	b9 81       	ldd	r27, Y+1	; 0x01
    29d0:	ce 0f       	add	r28, r30
    29d2:	d1 1d       	adc	r29, r1
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	ed 01       	movw	r28, r26
    29e0:	08 95       	ret

000029e2 <__umulhisi3>:
    29e2:	a2 9f       	mul	r26, r18
    29e4:	b0 01       	movw	r22, r0
    29e6:	b3 9f       	mul	r27, r19
    29e8:	c0 01       	movw	r24, r0
    29ea:	a3 9f       	mul	r26, r19
    29ec:	70 0d       	add	r23, r0
    29ee:	81 1d       	adc	r24, r1
    29f0:	11 24       	eor	r1, r1
    29f2:	91 1d       	adc	r25, r1
    29f4:	b2 9f       	mul	r27, r18
    29f6:	70 0d       	add	r23, r0
    29f8:	81 1d       	adc	r24, r1
    29fa:	11 24       	eor	r1, r1
    29fc:	91 1d       	adc	r25, r1
    29fe:	08 95       	ret

00002a00 <isspace>:
    2a00:	91 11       	cpse	r25, r1
    2a02:	0b c1       	rjmp	.+534    	; 0x2c1a <__ctype_isfalse>
    2a04:	80 32       	cpi	r24, 0x20	; 32
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <isspace+0xe>
    2a08:	89 50       	subi	r24, 0x09	; 9
    2a0a:	85 50       	subi	r24, 0x05	; 5
    2a0c:	d0 f7       	brcc	.-12     	; 0x2a02 <isspace+0x2>
    2a0e:	08 95       	ret

00002a10 <strchr_P>:
    2a10:	fc 01       	movw	r30, r24
    2a12:	05 90       	lpm	r0, Z+
    2a14:	06 16       	cp	r0, r22
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <strchr_P+0x10>
    2a18:	00 20       	and	r0, r0
    2a1a:	d9 f7       	brne	.-10     	; 0x2a12 <strchr_P+0x2>
    2a1c:	c0 01       	movw	r24, r0
    2a1e:	08 95       	ret
    2a20:	31 97       	sbiw	r30, 0x01	; 1
    2a22:	cf 01       	movw	r24, r30
    2a24:	08 95       	ret

00002a26 <memcpy>:
    2a26:	fb 01       	movw	r30, r22
    2a28:	dc 01       	movw	r26, r24
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <memcpy+0xa>
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	0d 92       	st	X+, r0
    2a30:	41 50       	subi	r20, 0x01	; 1
    2a32:	50 40       	sbci	r21, 0x00	; 0
    2a34:	d8 f7       	brcc	.-10     	; 0x2a2c <memcpy+0x6>
    2a36:	08 95       	ret

00002a38 <fgetc>:
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	ec 01       	movw	r28, r24
    2a3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a40:	20 ff       	sbrs	r18, 0
    2a42:	33 c0       	rjmp	.+102    	; 0x2aaa <fgetc+0x72>
    2a44:	26 ff       	sbrs	r18, 6
    2a46:	0a c0       	rjmp	.+20     	; 0x2a5c <fgetc+0x24>
    2a48:	2f 7b       	andi	r18, 0xBF	; 191
    2a4a:	2b 83       	std	Y+3, r18	; 0x03
    2a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	9f 83       	std	Y+7, r25	; 0x07
    2a54:	8e 83       	std	Y+6, r24	; 0x06
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	29 c0       	rjmp	.+82     	; 0x2aae <fgetc+0x76>
    2a5c:	22 ff       	sbrs	r18, 2
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <fgetc+0x46>
    2a60:	e8 81       	ld	r30, Y
    2a62:	f9 81       	ldd	r31, Y+1	; 0x01
    2a64:	80 81       	ld	r24, Z
    2a66:	08 2e       	mov	r0, r24
    2a68:	00 0c       	add	r0, r0
    2a6a:	99 0b       	sbc	r25, r25
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	19 f4       	brne	.+6      	; 0x2a76 <fgetc+0x3e>
    2a70:	20 62       	ori	r18, 0x20	; 32
    2a72:	2b 83       	std	Y+3, r18	; 0x03
    2a74:	1a c0       	rjmp	.+52     	; 0x2aaa <fgetc+0x72>
    2a76:	31 96       	adiw	r30, 0x01	; 1
    2a78:	f9 83       	std	Y+1, r31	; 0x01
    2a7a:	e8 83       	st	Y, r30
    2a7c:	0e c0       	rjmp	.+28     	; 0x2a9a <fgetc+0x62>
    2a7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2a80:	fb 85       	ldd	r31, Y+11	; 0x0b
    2a82:	09 95       	icall
    2a84:	97 ff       	sbrs	r25, 7
    2a86:	09 c0       	rjmp	.+18     	; 0x2a9a <fgetc+0x62>
    2a88:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	11 f0       	breq	.+4      	; 0x2a92 <fgetc+0x5a>
    2a8e:	80 e2       	ldi	r24, 0x20	; 32
    2a90:	01 c0       	rjmp	.+2      	; 0x2a94 <fgetc+0x5c>
    2a92:	80 e1       	ldi	r24, 0x10	; 16
    2a94:	82 2b       	or	r24, r18
    2a96:	8b 83       	std	Y+3, r24	; 0x03
    2a98:	08 c0       	rjmp	.+16     	; 0x2aaa <fgetc+0x72>
    2a9a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a9c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a9e:	2f 5f       	subi	r18, 0xFF	; 255
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	3f 83       	std	Y+7, r19	; 0x07
    2aa4:	2e 83       	std	Y+6, r18	; 0x06
    2aa6:	99 27       	eor	r25, r25
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <fgetc+0x76>
    2aaa:	8f ef       	ldi	r24, 0xFF	; 255
    2aac:	9f ef       	ldi	r25, 0xFF	; 255
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

00002ab4 <fputc>:
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	fb 01       	movw	r30, r22
    2abe:	23 81       	ldd	r18, Z+3	; 0x03
    2ac0:	21 fd       	sbrc	r18, 1
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <fputc+0x16>
    2ac4:	8f ef       	ldi	r24, 0xFF	; 255
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	2c c0       	rjmp	.+88     	; 0x2b22 <fputc+0x6e>
    2aca:	22 ff       	sbrs	r18, 2
    2acc:	16 c0       	rjmp	.+44     	; 0x2afa <fputc+0x46>
    2ace:	46 81       	ldd	r20, Z+6	; 0x06
    2ad0:	57 81       	ldd	r21, Z+7	; 0x07
    2ad2:	24 81       	ldd	r18, Z+4	; 0x04
    2ad4:	35 81       	ldd	r19, Z+5	; 0x05
    2ad6:	42 17       	cp	r20, r18
    2ad8:	53 07       	cpc	r21, r19
    2ada:	44 f4       	brge	.+16     	; 0x2aec <fputc+0x38>
    2adc:	a0 81       	ld	r26, Z
    2ade:	b1 81       	ldd	r27, Z+1	; 0x01
    2ae0:	9d 01       	movw	r18, r26
    2ae2:	2f 5f       	subi	r18, 0xFF	; 255
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	31 83       	std	Z+1, r19	; 0x01
    2ae8:	20 83       	st	Z, r18
    2aea:	8c 93       	st	X, r24
    2aec:	26 81       	ldd	r18, Z+6	; 0x06
    2aee:	37 81       	ldd	r19, Z+7	; 0x07
    2af0:	2f 5f       	subi	r18, 0xFF	; 255
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	37 83       	std	Z+7, r19	; 0x07
    2af6:	26 83       	std	Z+6, r18	; 0x06
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <fputc+0x6e>
    2afa:	8b 01       	movw	r16, r22
    2afc:	ec 01       	movw	r28, r24
    2afe:	fb 01       	movw	r30, r22
    2b00:	00 84       	ldd	r0, Z+8	; 0x08
    2b02:	f1 85       	ldd	r31, Z+9	; 0x09
    2b04:	e0 2d       	mov	r30, r0
    2b06:	09 95       	icall
    2b08:	89 2b       	or	r24, r25
    2b0a:	e1 f6       	brne	.-72     	; 0x2ac4 <fputc+0x10>
    2b0c:	d8 01       	movw	r26, r16
    2b0e:	16 96       	adiw	r26, 0x06	; 6
    2b10:	8d 91       	ld	r24, X+
    2b12:	9c 91       	ld	r25, X
    2b14:	17 97       	sbiw	r26, 0x07	; 7
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	17 96       	adiw	r26, 0x07	; 7
    2b1a:	9c 93       	st	X, r25
    2b1c:	8e 93       	st	-X, r24
    2b1e:	16 97       	sbiw	r26, 0x06	; 6
    2b20:	ce 01       	movw	r24, r28
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <ungetc>:
    2b2c:	fb 01       	movw	r30, r22
    2b2e:	23 81       	ldd	r18, Z+3	; 0x03
    2b30:	20 ff       	sbrs	r18, 0
    2b32:	12 c0       	rjmp	.+36     	; 0x2b58 <ungetc+0x2c>
    2b34:	26 fd       	sbrc	r18, 6
    2b36:	10 c0       	rjmp	.+32     	; 0x2b58 <ungetc+0x2c>
    2b38:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3a:	3f ef       	ldi	r19, 0xFF	; 255
    2b3c:	93 07       	cpc	r25, r19
    2b3e:	61 f0       	breq	.+24     	; 0x2b58 <ungetc+0x2c>
    2b40:	82 83       	std	Z+2, r24	; 0x02
    2b42:	2f 7d       	andi	r18, 0xDF	; 223
    2b44:	20 64       	ori	r18, 0x40	; 64
    2b46:	23 83       	std	Z+3, r18	; 0x03
    2b48:	26 81       	ldd	r18, Z+6	; 0x06
    2b4a:	37 81       	ldd	r19, Z+7	; 0x07
    2b4c:	21 50       	subi	r18, 0x01	; 1
    2b4e:	31 09       	sbc	r19, r1
    2b50:	37 83       	std	Z+7, r19	; 0x07
    2b52:	26 83       	std	Z+6, r18	; 0x06
    2b54:	99 27       	eor	r25, r25
    2b56:	08 95       	ret
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	08 95       	ret

00002b5e <__ultoa_invert>:
    2b5e:	fa 01       	movw	r30, r20
    2b60:	aa 27       	eor	r26, r26
    2b62:	28 30       	cpi	r18, 0x08	; 8
    2b64:	51 f1       	breq	.+84     	; 0x2bba <__ultoa_invert+0x5c>
    2b66:	20 31       	cpi	r18, 0x10	; 16
    2b68:	81 f1       	breq	.+96     	; 0x2bca <__ultoa_invert+0x6c>
    2b6a:	e8 94       	clt
    2b6c:	6f 93       	push	r22
    2b6e:	6e 7f       	andi	r22, 0xFE	; 254
    2b70:	6e 5f       	subi	r22, 0xFE	; 254
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	8f 4f       	sbci	r24, 0xFF	; 255
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	af 4f       	sbci	r26, 0xFF	; 255
    2b7a:	b1 e0       	ldi	r27, 0x01	; 1
    2b7c:	3e d0       	rcall	.+124    	; 0x2bfa <__ultoa_invert+0x9c>
    2b7e:	b4 e0       	ldi	r27, 0x04	; 4
    2b80:	3c d0       	rcall	.+120    	; 0x2bfa <__ultoa_invert+0x9c>
    2b82:	67 0f       	add	r22, r23
    2b84:	78 1f       	adc	r23, r24
    2b86:	89 1f       	adc	r24, r25
    2b88:	9a 1f       	adc	r25, r26
    2b8a:	a1 1d       	adc	r26, r1
    2b8c:	68 0f       	add	r22, r24
    2b8e:	79 1f       	adc	r23, r25
    2b90:	8a 1f       	adc	r24, r26
    2b92:	91 1d       	adc	r25, r1
    2b94:	a1 1d       	adc	r26, r1
    2b96:	6a 0f       	add	r22, r26
    2b98:	71 1d       	adc	r23, r1
    2b9a:	81 1d       	adc	r24, r1
    2b9c:	91 1d       	adc	r25, r1
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	20 d0       	rcall	.+64     	; 0x2be2 <__ultoa_invert+0x84>
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <__ultoa_invert+0x48>
    2ba4:	68 94       	set
    2ba6:	3f 91       	pop	r19
    2ba8:	2a e0       	ldi	r18, 0x0A	; 10
    2baa:	26 9f       	mul	r18, r22
    2bac:	11 24       	eor	r1, r1
    2bae:	30 19       	sub	r19, r0
    2bb0:	30 5d       	subi	r19, 0xD0	; 208
    2bb2:	31 93       	st	Z+, r19
    2bb4:	de f6       	brtc	.-74     	; 0x2b6c <__ultoa_invert+0xe>
    2bb6:	cf 01       	movw	r24, r30
    2bb8:	08 95       	ret
    2bba:	46 2f       	mov	r20, r22
    2bbc:	47 70       	andi	r20, 0x07	; 7
    2bbe:	40 5d       	subi	r20, 0xD0	; 208
    2bc0:	41 93       	st	Z+, r20
    2bc2:	b3 e0       	ldi	r27, 0x03	; 3
    2bc4:	0f d0       	rcall	.+30     	; 0x2be4 <__ultoa_invert+0x86>
    2bc6:	c9 f7       	brne	.-14     	; 0x2bba <__ultoa_invert+0x5c>
    2bc8:	f6 cf       	rjmp	.-20     	; 0x2bb6 <__ultoa_invert+0x58>
    2bca:	46 2f       	mov	r20, r22
    2bcc:	4f 70       	andi	r20, 0x0F	; 15
    2bce:	40 5d       	subi	r20, 0xD0	; 208
    2bd0:	4a 33       	cpi	r20, 0x3A	; 58
    2bd2:	18 f0       	brcs	.+6      	; 0x2bda <__ultoa_invert+0x7c>
    2bd4:	49 5d       	subi	r20, 0xD9	; 217
    2bd6:	31 fd       	sbrc	r19, 1
    2bd8:	40 52       	subi	r20, 0x20	; 32
    2bda:	41 93       	st	Z+, r20
    2bdc:	02 d0       	rcall	.+4      	; 0x2be2 <__ultoa_invert+0x84>
    2bde:	a9 f7       	brne	.-22     	; 0x2bca <__ultoa_invert+0x6c>
    2be0:	ea cf       	rjmp	.-44     	; 0x2bb6 <__ultoa_invert+0x58>
    2be2:	b4 e0       	ldi	r27, 0x04	; 4
    2be4:	a6 95       	lsr	r26
    2be6:	97 95       	ror	r25
    2be8:	87 95       	ror	r24
    2bea:	77 95       	ror	r23
    2bec:	67 95       	ror	r22
    2bee:	ba 95       	dec	r27
    2bf0:	c9 f7       	brne	.-14     	; 0x2be4 <__ultoa_invert+0x86>
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	61 05       	cpc	r22, r1
    2bf6:	71 05       	cpc	r23, r1
    2bf8:	08 95       	ret
    2bfa:	9b 01       	movw	r18, r22
    2bfc:	ac 01       	movw	r20, r24
    2bfe:	0a 2e       	mov	r0, r26
    2c00:	06 94       	lsr	r0
    2c02:	57 95       	ror	r21
    2c04:	47 95       	ror	r20
    2c06:	37 95       	ror	r19
    2c08:	27 95       	ror	r18
    2c0a:	ba 95       	dec	r27
    2c0c:	c9 f7       	brne	.-14     	; 0x2c00 <__ultoa_invert+0xa2>
    2c0e:	62 0f       	add	r22, r18
    2c10:	73 1f       	adc	r23, r19
    2c12:	84 1f       	adc	r24, r20
    2c14:	95 1f       	adc	r25, r21
    2c16:	a0 1d       	adc	r26, r0
    2c18:	08 95       	ret

00002c1a <__ctype_isfalse>:
    2c1a:	99 27       	eor	r25, r25
    2c1c:	88 27       	eor	r24, r24

00002c1e <__ctype_istrue>:
    2c1e:	08 95       	ret

00002c20 <_exit>:
    2c20:	f8 94       	cli

00002c22 <__stop_program>:
    2c22:	ff cf       	rjmp	.-2      	; 0x2c22 <__stop_program>
