   1               		.file	"W_M.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 504F 5254 		.string	"PORTA ABERTA !!!\n\r"
  12      4120 4142 
  12      4552 5441 
  12      2021 2121 
  12      0A0D 00
  13               		.section	.text.emergency_cb,"ax",@progbits
  15               	emergency_cb:
  16               	.LFB174:
  17               		.file 1 "W_M.c"
   1:W_M.c         **** // W_M.c
   2:W_M.c         **** // Implement a state machine to execute a washing machine taks, with ChibiOS
   3:W_M.c         **** // Author: Bruno Duarte <brduart95@gmail.com>
   4:W_M.c         **** 
   5:W_M.c         **** #include <stdint.h>
   6:W_M.c         **** #include <string.h>
   7:W_M.c         **** #include <ch.h>
   8:W_M.c         **** #include <hal.h>
   9:W_M.c         **** #include <chprintf.h>
  10:W_M.c         **** 
  11:W_M.c         **** 
  12:W_M.c         **** /* Define Outputs*/
  13:W_M.c         **** #define PARADA_ID 7
  14:W_M.c         **** #define MOLHO_ID 0
  15:W_M.c         **** #define LAVAGEM_ID 1
  16:W_M.c         **** #define ENXAGUE_ID 2
  17:W_M.c         **** #define CENTRI_ID 3
  18:W_M.c         **** #define ENCHE_ID 4
  19:W_M.c         **** #define SECA_ID 5
  20:W_M.c         **** #define MOTOR_DIR 0
  21:W_M.c         **** #define MOTOR_ESQ 1
  22:W_M.c         **** 
  23:W_M.c         **** 
  24:W_M.c         **** /*Define Inputs*/
  25:W_M.c         **** #define BOT_SELECT 6
  26:W_M.c         **** #define BOT_INIT 5
  27:W_M.c         **** #define SEN_CHEIO 4
  28:W_M.c         **** #define SEN_VAZIO 3
  29:W_M.c         **** #define EMER 2
  30:W_M.c         **** 
  31:W_M.c         **** /* System variables*/
  32:W_M.c         **** #define GIRO_TEMPO 500
  33:W_M.c         **** 
  34:W_M.c         **** /* All State machines of the project */
  35:W_M.c         **** 
  36:W_M.c         **** /* Main Machine*/
  37:W_M.c         **** typedef enum{
  38:W_M.c         ****   PARADA = 0,
  39:W_M.c         ****   MOLHO,
  40:W_M.c         ****   LAVAGEM,
  41:W_M.c         ****   ENXAGUE,
  42:W_M.c         ****   CENTRIFUGA,
  43:W_M.c         ****   EMERGENCIA
  44:W_M.c         **** } maquina_e;
  45:W_M.c         **** 
  46:W_M.c         **** maquina_e lavar = PARADA; // Create an object of Main Machine;
  47:W_M.c         **** 
  48:W_M.c         **** 
  49:W_M.c         **** /* Spinning States*/
  50:W_M.c         **** typedef enum {
  51:W_M.c         ****   GIRA_R = 0,
  52:W_M.c         ****   GIRA_L
  53:W_M.c         **** } rodar_e;
  54:W_M.c         **** 
  55:W_M.c         **** 
  56:W_M.c         **** /* Moisten states*/
  57:W_M.c         **** typedef enum{
  58:W_M.c         ****   ENCHER_ML = 6,
  59:W_M.c         ****   RODAR_ML
  60:W_M.c         **** } estados_molho_e;
  61:W_M.c         **** 
  62:W_M.c         **** 
  63:W_M.c         **** /* Washing states*/
  64:W_M.c         **** typedef enum{
  65:W_M.c         ****   RODAR_LVG = 8,
  66:W_M.c         ****   ESPERA_LVG,
  67:W_M.c         ****   ESVAZIA_LVG
  68:W_M.c         **** } estados_lavagem_e;
  69:W_M.c         **** 
  70:W_M.c         **** 
  71:W_M.c         **** /* Rinse states*/
  72:W_M.c         **** typedef enum{
  73:W_M.c         ****   ENCHER_EXG = 11,
  74:W_M.c         ****   RODAR_EXG,
  75:W_M.c         ****   ESVAZIA_EXG
  76:W_M.c         **** } estados_enxague_e;
  77:W_M.c         **** 
  78:W_M.c         **** 
  79:W_M.c         **** /* Centrifugal states*/
  80:W_M.c         **** typedef enum{
  81:W_M.c         ****   GIRA_R_CENTRI = 14,
  82:W_M.c         **** } estados_centrifuga_e;
  83:W_M.c         **** 
  84:W_M.c         **** 
  85:W_M.c         **** /* Variables of intern Machines */
  86:W_M.c         **** typedef struct {
  87:W_M.c         ****   int select_init;
  88:W_M.c         **** } fsm_parada_s;
  89:W_M.c         **** 
  90:W_M.c         **** typedef struct {
  91:W_M.c         ****   estados_molho_e ml;
  92:W_M.c         ****   int t_giro;
  93:W_M.c         **** } fsm_molho_s;
  94:W_M.c         **** 
  95:W_M.c         **** typedef struct {
  96:W_M.c         ****   estados_lavagem_e lvg;
  97:W_M.c         ****   systime_t instante;
  98:W_M.c         ****   systime_t ul_espera;
  99:W_M.c         ****   int turns;
 100:W_M.c         ****   int t_espera;
 101:W_M.c         ****   int t_giros;
 102:W_M.c         **** } fsm_lavagem_s;
 103:W_M.c         **** 
 104:W_M.c         **** typedef struct {
 105:W_M.c         ****   estados_enxague_e exg;
 106:W_M.c         ****   int t_giro;
 107:W_M.c         **** } fsm_enxague_s;
 108:W_M.c         **** 
 109:W_M.c         **** typedef struct {
 110:W_M.c         ****   estados_centrifuga_e cen;
 111:W_M.c         ****   systime_t tempo;
 112:W_M.c         ****   systime_t ul_centri;
 113:W_M.c         ****   int t_centri;
 114:W_M.c         **** } fsm_centrifuga_s;
 115:W_M.c         **** 
 116:W_M.c         **** 
 117:W_M.c         **** /* Start Condition functions*/
 118:W_M.c         **** static void fsm_parada_init(fsm_parada_s *st){
 119:W_M.c         ****   st->select_init = 0;
 120:W_M.c         **** }
 121:W_M.c         **** 
 122:W_M.c         **** static void fsm_molho_init(fsm_molho_s *st)
 123:W_M.c         **** {
 124:W_M.c         ****   st->ml = ENCHER_ML;
 125:W_M.c         ****   st->t_giro = 2000;
 126:W_M.c         **** }
 127:W_M.c         **** 
 128:W_M.c         **** static void fsm_lavagem_init(fsm_lavagem_s *st)
 129:W_M.c         **** {
 130:W_M.c         ****   st->lvg = RODAR_LVG;
 131:W_M.c         ****   st->turns = 0;
 132:W_M.c         ****   st->t_espera = 1000;
 133:W_M.c         ****   st->t_giros = 2400;
 134:W_M.c         ****   st->instante = chVTGetSystemTime();
 135:W_M.c         ****   st->ul_espera = st->instante;
 136:W_M.c         **** }
 137:W_M.c         **** 
 138:W_M.c         **** static void fsm_enxague_init(fsm_enxague_s *st)
 139:W_M.c         **** {
 140:W_M.c         ****   st->exg = ENCHER_EXG;
 141:W_M.c         ****   st->t_giro = 3000;
 142:W_M.c         **** }
 143:W_M.c         **** 
 144:W_M.c         **** static void fsm_centrifuga_init(fsm_centrifuga_s *st)
 145:W_M.c         **** {
 146:W_M.c         ****   st->cen = GIRA_R_CENTRI;
 147:W_M.c         ****   st->tempo = chVTGetSystemTime();
 148:W_M.c         ****   st->ul_centri = st->tempo;
 149:W_M.c         ****   st->t_centri = 4000;
 150:W_M.c         **** }
 151:W_M.c         **** 
 152:W_M.c         **** 
 153:W_M.c         **** /* Variables of the states */
 154:W_M.c         **** fsm_parada_s fsm_prd;
 155:W_M.c         **** 
 156:W_M.c         **** fsm_molho_s fsm_ml;
 157:W_M.c         **** 
 158:W_M.c         **** fsm_lavagem_s fsm_lvg;
 159:W_M.c         **** 
 160:W_M.c         **** 
 161:W_M.c         **** fsm_enxague_s fsm_exg;
 162:W_M.c         **** 
 163:W_M.c         **** fsm_centrifuga_s fsm_cen;
 164:W_M.c         **** 
 165:W_M.c         **** 
 166:W_M.c         **** /* Functions*/
 167:W_M.c         **** void starting(){
 168:W_M.c         ****   // Output
 169:W_M.c         ****   palSetPadMode(IOPORT2, SECA_ID, PAL_MODE_OUTPUT_PUSHPULL);
 170:W_M.c         ****   palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
 171:W_M.c         ****   palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
 172:W_M.c         ****   palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
 173:W_M.c         ****   palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
 174:W_M.c         ****   palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
 175:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
 176:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
 177:W_M.c         ****   palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
 178:W_M.c         **** 
 179:W_M.c         **** 
 180:W_M.c         ****   // Input
 181:W_M.c         ****   palSetPadMode(IOPORT4, EMER, PAL_MODE_INPUT);
 182:W_M.c         ****   palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
 183:W_M.c         ****   palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
 184:W_M.c         ****   palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
 185:W_M.c         ****   palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
 186:W_M.c         **** 
 187:W_M.c         ****   // Start
 188:W_M.c         ****   palClearPad(IOPORT2, SECA_ID);
 189:W_M.c         ****   palClearPad(IOPORT2, ENCHE_ID);
 190:W_M.c         ****   palClearPad(IOPORT2, CENTRI_ID);
 191:W_M.c         ****   palClearPad(IOPORT2, ENXAGUE_ID);
 192:W_M.c         ****   palClearPad(IOPORT2, LAVAGEM_ID);
 193:W_M.c         ****   palClearPad(IOPORT2, MOLHO_ID);
 194:W_M.c         ****   palSetPad(IOPORT3, MOTOR_DIR);
 195:W_M.c         ****   palSetPad(IOPORT3, MOTOR_ESQ);
 196:W_M.c         ****   palClearPad(IOPORT4, PARADA_ID);
 197:W_M.c         **** 
 198:W_M.c         ****   chprintf((BaseSequentialStream *)&SD1, "pinos iniciados \n\r");
 199:W_M.c         **** 
 200:W_M.c         **** }
 201:W_M.c         **** 
 202:W_M.c         **** /* Interupt Callback*/
 203:W_M.c         **** 
 204:W_M.c         **** static void emergency_cb(){
  18               		.loc 1 204 0
  19               		.cfi_startproc
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28 0004 CDB7      		in r28,__SP_L__
  29 0006 DEB7      		in r29,__SP_H__
  30               	.LCFI2:
  31               		.cfi_def_cfa_register 28
  32 0008 6397      		sbiw r28,19
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 23
  35 000a 0FB6      		in __tmp_reg__,__SREG__
  36 000c F894      		cli
  37 000e DEBF      		out __SP_H__,r29
  38 0010 0FBE      		out __SREG__,__tmp_reg__
  39 0012 CDBF      		out __SP_L__,r28
  40               	/* prologue: function */
  41               	/* frame size = 19 */
  42               	/* stack size = 21 */
  43               	.L__stack_usage = 21
 205:W_M.c         ****   char msg[] = "PORTA ABERTA !!!\n\r";
  44               		.loc 1 205 0
  45 0014 83E1      		ldi r24,lo8(19)
  46 0016 E0E0      		ldi r30,lo8(.LC0)
  47 0018 F0E0      		ldi r31,hi8(.LC0)
  48 001a DE01      		movw r26,r28
  49 001c 1196      		adiw r26,1
  50               		0:
  51 001e 0190      		ld r0,Z+
  52 0020 0D92      		st X+,r0
  53 0022 8A95      		dec r24
  54 0024 01F4      		brne 0b
 206:W_M.c         ****   sdWriteI(&SD1, msg, strlen(msg));
  55               		.loc 1 206 0
  56 0026 42E1      		ldi r20,lo8(18)
  57 0028 50E0      		ldi r21,0
  58 002a BE01      		movw r22,r28
  59 002c 6F5F      		subi r22,-1
  60 002e 7F4F      		sbci r23,-1
  61 0030 80E0      		ldi r24,lo8(SD1+23)
  62 0032 90E0      		ldi r25,hi8(SD1+23)
  63 0034 0E94 0000 		call oqWriteI
  64               	.LVL0:
 207:W_M.c         ****   lavar = EMERGENCIA;
  65               		.loc 1 207 0
  66 0038 85E0      		ldi r24,lo8(5)
  67 003a 8093 0000 		sts lavar,r24
  68               	/* epilogue start */
 208:W_M.c         **** }
  69               		.loc 1 208 0
  70 003e 6396      		adiw r28,19
  71 0040 0FB6      		in __tmp_reg__,__SREG__
  72 0042 F894      		cli
  73 0044 DEBF      		out __SP_H__,r29
  74 0046 0FBE      		out __SREG__,__tmp_reg__
  75 0048 CDBF      		out __SP_L__,r28
  76 004a DF91      		pop r29
  77 004c CF91      		pop r28
  78 004e 0895      		ret
  79               		.cfi_endproc
  80               	.LFE174:
  82               		.section	.rodata.str1.1
  83               	.LC1:
  84 0013 7069 6E6F 		.string	"pinos iniciados \n\r"
  84      7320 696E 
  84      6963 6961 
  84      646F 7320 
  84      0A0D 00
  85               		.section	.text.starting,"ax",@progbits
  86               	.global	starting
  88               	starting:
  89               	.LFB173:
 167:W_M.c         ****   // Output
  90               		.loc 1 167 0
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
 169:W_M.c         ****   palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
  96               		.loc 1 169 0
  97 0000 46E0      		ldi r20,lo8(6)
  98 0002 60E2      		ldi r22,lo8(32)
  99 0004 83E2      		ldi r24,lo8(35)
 100 0006 90E0      		ldi r25,0
 101 0008 0E94 0000 		call _pal_lld_setgroupmode
 102               	.LVL1:
 170:W_M.c         ****   palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
 103               		.loc 1 170 0
 104 000c 46E0      		ldi r20,lo8(6)
 105 000e 60E1      		ldi r22,lo8(16)
 106 0010 83E2      		ldi r24,lo8(35)
 107 0012 90E0      		ldi r25,0
 108 0014 0E94 0000 		call _pal_lld_setgroupmode
 109               	.LVL2:
 171:W_M.c         ****   palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
 110               		.loc 1 171 0
 111 0018 46E0      		ldi r20,lo8(6)
 112 001a 68E0      		ldi r22,lo8(8)
 113 001c 83E2      		ldi r24,lo8(35)
 114 001e 90E0      		ldi r25,0
 115 0020 0E94 0000 		call _pal_lld_setgroupmode
 116               	.LVL3:
 172:W_M.c         ****   palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
 117               		.loc 1 172 0
 118 0024 46E0      		ldi r20,lo8(6)
 119 0026 64E0      		ldi r22,lo8(4)
 120 0028 83E2      		ldi r24,lo8(35)
 121 002a 90E0      		ldi r25,0
 122 002c 0E94 0000 		call _pal_lld_setgroupmode
 123               	.LVL4:
 173:W_M.c         ****   palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
 124               		.loc 1 173 0
 125 0030 46E0      		ldi r20,lo8(6)
 126 0032 62E0      		ldi r22,lo8(2)
 127 0034 83E2      		ldi r24,lo8(35)
 128 0036 90E0      		ldi r25,0
 129 0038 0E94 0000 		call _pal_lld_setgroupmode
 130               	.LVL5:
 174:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
 131               		.loc 1 174 0
 132 003c 46E0      		ldi r20,lo8(6)
 133 003e 61E0      		ldi r22,lo8(1)
 134 0040 83E2      		ldi r24,lo8(35)
 135 0042 90E0      		ldi r25,0
 136 0044 0E94 0000 		call _pal_lld_setgroupmode
 137               	.LVL6:
 175:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
 138               		.loc 1 175 0
 139 0048 46E0      		ldi r20,lo8(6)
 140 004a 61E0      		ldi r22,lo8(1)
 141 004c 86E2      		ldi r24,lo8(38)
 142 004e 90E0      		ldi r25,0
 143 0050 0E94 0000 		call _pal_lld_setgroupmode
 144               	.LVL7:
 176:W_M.c         ****   palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
 145               		.loc 1 176 0
 146 0054 46E0      		ldi r20,lo8(6)
 147 0056 62E0      		ldi r22,lo8(2)
 148 0058 86E2      		ldi r24,lo8(38)
 149 005a 90E0      		ldi r25,0
 150 005c 0E94 0000 		call _pal_lld_setgroupmode
 151               	.LVL8:
 177:W_M.c         **** 
 152               		.loc 1 177 0
 153 0060 46E0      		ldi r20,lo8(6)
 154 0062 60E8      		ldi r22,lo8(-128)
 155 0064 89E2      		ldi r24,lo8(41)
 156 0066 90E0      		ldi r25,0
 157 0068 0E94 0000 		call _pal_lld_setgroupmode
 158               	.LVL9:
 181:W_M.c         ****   palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
 159               		.loc 1 181 0
 160 006c 42E0      		ldi r20,lo8(2)
 161 006e 64E0      		ldi r22,lo8(4)
 162 0070 89E2      		ldi r24,lo8(41)
 163 0072 90E0      		ldi r25,0
 164 0074 0E94 0000 		call _pal_lld_setgroupmode
 165               	.LVL10:
 182:W_M.c         ****   palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
 166               		.loc 1 182 0
 167 0078 42E0      		ldi r20,lo8(2)
 168 007a 68E0      		ldi r22,lo8(8)
 169 007c 89E2      		ldi r24,lo8(41)
 170 007e 90E0      		ldi r25,0
 171 0080 0E94 0000 		call _pal_lld_setgroupmode
 172               	.LVL11:
 183:W_M.c         ****   palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
 173               		.loc 1 183 0
 174 0084 42E0      		ldi r20,lo8(2)
 175 0086 60E1      		ldi r22,lo8(16)
 176 0088 89E2      		ldi r24,lo8(41)
 177 008a 90E0      		ldi r25,0
 178 008c 0E94 0000 		call _pal_lld_setgroupmode
 179               	.LVL12:
 184:W_M.c         ****   palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
 180               		.loc 1 184 0
 181 0090 42E0      		ldi r20,lo8(2)
 182 0092 60E2      		ldi r22,lo8(32)
 183 0094 89E2      		ldi r24,lo8(41)
 184 0096 90E0      		ldi r25,0
 185 0098 0E94 0000 		call _pal_lld_setgroupmode
 186               	.LVL13:
 185:W_M.c         **** 
 187               		.loc 1 185 0
 188 009c 42E0      		ldi r20,lo8(2)
 189 009e 60E4      		ldi r22,lo8(64)
 190 00a0 89E2      		ldi r24,lo8(41)
 191 00a2 90E0      		ldi r25,0
 192 00a4 0E94 0000 		call _pal_lld_setgroupmode
 193               	.LVL14:
 188:W_M.c         ****   palClearPad(IOPORT2, ENCHE_ID);
 194               		.loc 1 188 0
 195 00a8 2D98      		cbi 0x5,5
 189:W_M.c         ****   palClearPad(IOPORT2, CENTRI_ID);
 196               		.loc 1 189 0
 197 00aa 2C98      		cbi 0x5,4
 190:W_M.c         ****   palClearPad(IOPORT2, ENXAGUE_ID);
 198               		.loc 1 190 0
 199 00ac 2B98      		cbi 0x5,3
 191:W_M.c         ****   palClearPad(IOPORT2, LAVAGEM_ID);
 200               		.loc 1 191 0
 201 00ae 2A98      		cbi 0x5,2
 192:W_M.c         ****   palClearPad(IOPORT2, MOLHO_ID);
 202               		.loc 1 192 0
 203 00b0 2998      		cbi 0x5,1
 193:W_M.c         ****   palSetPad(IOPORT3, MOTOR_DIR);
 204               		.loc 1 193 0
 205 00b2 2898      		cbi 0x5,0
 194:W_M.c         ****   palSetPad(IOPORT3, MOTOR_ESQ);
 206               		.loc 1 194 0
 207 00b4 409A      		sbi 0x8,0
 195:W_M.c         ****   palClearPad(IOPORT4, PARADA_ID);
 208               		.loc 1 195 0
 209 00b6 419A      		sbi 0x8,1
 196:W_M.c         **** 
 210               		.loc 1 196 0
 211 00b8 5F98      		cbi 0xb,7
 198:W_M.c         **** 
 212               		.loc 1 198 0
 213 00ba 80E0      		ldi r24,lo8(.LC1)
 214 00bc 90E0      		ldi r25,hi8(.LC1)
 215 00be 9F93      		push r25
 216               	.LCFI4:
 217               		.cfi_def_cfa_offset 3
 218 00c0 8F93      		push r24
 219               	.LCFI5:
 220               		.cfi_def_cfa_offset 4
 221 00c2 80E0      		ldi r24,lo8(SD1)
 222 00c4 90E0      		ldi r25,hi8(SD1)
 223 00c6 9F93      		push r25
 224               	.LCFI6:
 225               		.cfi_def_cfa_offset 5
 226 00c8 8F93      		push r24
 227               	.LCFI7:
 228               		.cfi_def_cfa_offset 6
 229 00ca 0E94 0000 		call chprintf
 230               	.LVL15:
 200:W_M.c         **** 
 231               		.loc 1 200 0
 232 00ce 0F90      		pop __tmp_reg__
 233 00d0 0F90      		pop __tmp_reg__
 234 00d2 0F90      		pop __tmp_reg__
 235 00d4 0F90      		pop __tmp_reg__
 236               	.LCFI8:
 237               		.cfi_def_cfa_offset 2
 238 00d6 0895      		ret
 239               		.cfi_endproc
 240               	.LFE173:
 242               		.section	.rodata.str1.1
 243               	.LC2:
 244 0026 4769 7261 		.string	"Gira Esqueda\n\r"
 244      2045 7371 
 244      7565 6461 
 244      0A0D 00
 245               	.LC3:
 246 0035 7361 696E 		.string	"saindo \n\r"
 246      646F 200A 
 246      0D00 
 247               	.LC4:
 248 003f 4769 7261 		.string	"Gira Direita\n\r"
 248      2044 6972 
 248      6569 7461 
 248      0A0D 00
 249               	.LC5:
 250 004e 4669 6D20 		.string	"Fim Giro\n\r"
 250      4769 726F 
 250      0A0D 00
 251               		.section	.text.spinning,"ax",@progbits
 252               	.global	spinning
 254               	spinning:
 255               	.LFB175:
 209:W_M.c         **** 
 210:W_M.c         **** 
 211:W_M.c         **** /* Spin Function */
 212:W_M.c         **** 
 213:W_M.c         **** void spinning(int timer) {
 256               		.loc 1 213 0
 257               		.cfi_startproc
 258               	.LVL16:
 259 0000 8F92      		push r8
 260               	.LCFI9:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 8, -2
 263 0002 9F92      		push r9
 264               	.LCFI10:
 265               		.cfi_def_cfa_offset 4
 266               		.cfi_offset 9, -3
 267 0004 AF92      		push r10
 268               	.LCFI11:
 269               		.cfi_def_cfa_offset 5
 270               		.cfi_offset 10, -4
 271 0006 BF92      		push r11
 272               	.LCFI12:
 273               		.cfi_def_cfa_offset 6
 274               		.cfi_offset 11, -5
 275 0008 CF92      		push r12
 276               	.LCFI13:
 277               		.cfi_def_cfa_offset 7
 278               		.cfi_offset 12, -6
 279 000a DF92      		push r13
 280               	.LCFI14:
 281               		.cfi_def_cfa_offset 8
 282               		.cfi_offset 13, -7
 283 000c EF92      		push r14
 284               	.LCFI15:
 285               		.cfi_def_cfa_offset 9
 286               		.cfi_offset 14, -8
 287 000e FF92      		push r15
 288               	.LCFI16:
 289               		.cfi_def_cfa_offset 10
 290               		.cfi_offset 15, -9
 291 0010 0F93      		push r16
 292               	.LCFI17:
 293               		.cfi_def_cfa_offset 11
 294               		.cfi_offset 16, -10
 295 0012 1F93      		push r17
 296               	.LCFI18:
 297               		.cfi_def_cfa_offset 12
 298               		.cfi_offset 17, -11
 299 0014 CF93      		push r28
 300               	.LCFI19:
 301               		.cfi_def_cfa_offset 13
 302               		.cfi_offset 28, -12
 303 0016 DF93      		push r29
 304               	.LCFI20:
 305               		.cfi_def_cfa_offset 14
 306               		.cfi_offset 29, -13
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 12 */
 310               	.L__stack_usage = 12
 311               	.LBB168:
 312               	.LBB169:
 313               	.LBB170:
 314               	.LBB171:
 315               	.LBB172:
 316               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 317               		.loc 2 437 0
 318               	/* #APP */
 319               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 320 0018 F894      		cli
 321               	 ;  0 "" 2
 322               	/* #NOAPP */
 323               	.LBE172:
 324               	.LBE171:
 325               	.LBE170:
 326               	.LBB173:
 327               	.LBB174:
 328               		.file 3 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 329               		.loc 3 118 0
 330 001a 8090 0000 		lds r8,ch+19
 331 001e 9090 0000 		lds r9,ch+19+1
 332               	.LBE174:
 333               	.LBE173:
 334               	.LBB175:
 335               	.LBB176:
 336               	.LBB177:
 337               	.LBB178:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 338               		.loc 2 447 0
 339               	/* #APP */
 340               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 341 0022 7894      		sei
 342               	 ;  0 "" 2
 343               	.LVL17:
 344               	/* #NOAPP */
 345               	.LBE178:
 346               	.LBE177:
 347               	.LBE176:
 348               	.LBE175:
 349               	.LBE169:
 350               	.LBE168:
 214:W_M.c         ****   systime_t agora = chVTGetSystemTime();
 215:W_M.c         ****   rodar_e rd = GIRA_R;
 216:W_M.c         ****   systime_t ls_report,init_time;
 217:W_M.c         **** 
 218:W_M.c         ****   ls_report = agora;
 219:W_M.c         ****   init_time = agora;
 220:W_M.c         ****   while(1){
 221:W_M.c         ****     agora = chVTGetSystemTime();
 222:W_M.c         ****     switch(rd){
 223:W_M.c         ****       case(GIRA_R):
 224:W_M.c         ****       // palClearPad(IOPORT3, MOTOR_DIR);
 225:W_M.c         ****         if(lavar == EMERGENCIA){
 226:W_M.c         ****           return;
 227:W_M.c         ****         } // verifcar emergência
 228:W_M.c         ****         palClearPad(IOPORT3, MOTOR_DIR);
 229:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 230:W_M.c         ****           // printf("Girando pra Esqueda\n");
 231:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
 232:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 233:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 234:W_M.c         ****           ls_report = agora;
 235:W_M.c         ****           rd = GIRA_L;
 236:W_M.c         ****           }
 237:W_M.c         ****         if(agora - init_time > TIME_MS2I(timer)){
 238:W_M.c         ****           // printf("Fim do Giro\n");
 239:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 240:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 241:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
 242:W_M.c         ****           return;
 243:W_M.c         ****         }
 244:W_M.c         ****         break;
 245:W_M.c         ****       case(GIRA_L):
 246:W_M.c         ****       palClearPad(IOPORT3, MOTOR_ESQ);
 247:W_M.c         ****         if(lavar == EMERGENCIA){
 248:W_M.c         ****           return;
 249:W_M.c         ****         } // verifcar emergência
 250:W_M.c         ****         // palClearPad(IOPORT3, MOTOR_ESQ);
 251:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 252:W_M.c         ****           // printf("Girando pra Direita\n");
 253:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 254:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
 255:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 256:W_M.c         ****           ls_report = agora;
 257:W_M.c         ****           rd = GIRA_R;
 258:W_M.c         ****           }
 259:W_M.c         ****         if(agora - init_time > TIME_MS2I(timer)){
 351               		.loc 1 259 0
 352 0024 28E0      		ldi r18,lo8(8)
 353 0026 3DE3      		ldi r19,lo8(61)
 354 0028 DC01      		movw r26,r24
 355 002a 0E94 0000 		call __usmulhisi3
 356 002e 6951      		subi r22,25
 357 0030 7C4F      		sbci r23,-4
 358 0032 8F4F      		sbci r24,-1
 359 0034 9F4F      		sbci r25,-1
 360 0036 28EE      		ldi r18,lo8(-24)
 361 0038 33E0      		ldi r19,lo8(3)
 362 003a 40E0      		ldi r20,0
 363 003c 50E0      		ldi r21,0
 364 003e 0E94 0000 		call __udivmodsi4
 365 0042 8901      		movw r16,r18
 218:W_M.c         ****   init_time = agora;
 366               		.loc 1 218 0
 367 0044 9401      		movw r18,r8
 215:W_M.c         ****   systime_t ls_report,init_time;
 368               		.loc 1 215 0
 369 0046 80E0      		ldi r24,0
 370               	.LVL18:
 254:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 371               		.loc 1 254 0
 372 0048 90E0      		ldi r25,lo8(.LC4)
 373 004a A92E      		mov r10,r25
 374 004c 90E0      		ldi r25,hi8(.LC4)
 375 004e B92E      		mov r11,r25
 376 0050 40E0      		ldi r20,lo8(SD1)
 377 0052 E42E      		mov r14,r20
 378 0054 40E0      		ldi r20,hi8(SD1)
 379 0056 F42E      		mov r15,r20
 231:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 380               		.loc 1 231 0
 381 0058 50E0      		ldi r21,lo8(.LC2)
 382 005a C52E      		mov r12,r21
 383 005c 50E0      		ldi r21,hi8(.LC2)
 384 005e D52E      		mov r13,r21
 385               	.LVL19:
 386               	.L4:
 387               	.LBB179:
 388               	.LBB180:
 389               	.LBB181:
 390               	.LBB182:
 391               	.LBB183:
 437:../../../os/common/ports/AVR/chcore.h **** }
 392               		.loc 2 437 0
 393               	/* #APP */
 394               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 395 0060 F894      		cli
 396               	 ;  0 "" 2
 397               	/* #NOAPP */
 398               	.LBE183:
 399               	.LBE182:
 400               	.LBE181:
 401               	.LBB184:
 402               	.LBB185:
 403               		.loc 3 118 0
 404 0062 C091 0000 		lds r28,ch+19
 405 0066 D091 0000 		lds r29,ch+19+1
 406               	.LVL20:
 407               	.LBE185:
 408               	.LBE184:
 409               	.LBB188:
 410               	.LBB189:
 411               	.LBB190:
 412               	.LBB191:
 413               		.loc 2 447 0
 414               	/* #APP */
 415               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 416 006a 7894      		sei
 417               	 ;  0 "" 2
 418               	/* #NOAPP */
 419               	.LBE191:
 420               	.LBE190:
 421               	.LBE189:
 422               	.LBE188:
 423               	.LBE180:
 424               	.LBE179:
 222:W_M.c         ****       case(GIRA_R):
 425               		.loc 1 222 0
 426 006c 8130      		cpi r24,lo8(1)
 427 006e 01F0      		breq .L6
 225:W_M.c         ****           return;
 428               		.loc 1 225 0
 429 0070 8091 0000 		lds r24,lavar
 430               	.LVL21:
 431 0074 8530      		cpi r24,lo8(5)
 432 0076 01F0      		breq .L3
 228:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 433               		.loc 1 228 0
 434 0078 4098      		cbi 0x8,0
 229:W_M.c         ****           // printf("Girando pra Esqueda\n");
 435               		.loc 1 229 0
 436 007a CE01      		movw r24,r28
 437 007c 821B      		sub r24,r18
 438 007e 930B      		sbc r25,r19
 439 0080 8438      		cpi r24,-124
 440 0082 9E41      		sbci r25,30
 441 0084 00F4      		brsh .L19
 442 0086 80E0      		ldi r24,0
 443               	.L9:
 444               	.LVL22:
 237:W_M.c         ****           // printf("Fim do Giro\n");
 445               		.loc 1 237 0
 446 0088 C819      		sub r28,r8
 447 008a D909      		sbc r29,r9
 448 008c 0C17      		cp r16,r28
 449 008e 1D07      		cpc r17,r29
 450 0090 00F4      		brsh .L4
 239:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 451               		.loc 1 239 0
 452 0092 409A      		sbi 0x8,0
 240:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
 453               		.loc 1 240 0
 454 0094 419A      		sbi 0x8,1
 241:W_M.c         ****           return;
 455               		.loc 1 241 0
 456 0096 80E0      		ldi r24,lo8(.LC3)
 457 0098 90E0      		ldi r25,hi8(.LC3)
 458               	.LVL23:
 459 009a 00C0      		rjmp .L17
 460               	.LVL24:
 461               	.L6:
 246:W_M.c         ****         if(lavar == EMERGENCIA){
 462               		.loc 1 246 0
 463 009c 4198      		cbi 0x8,1
 247:W_M.c         ****           return;
 464               		.loc 1 247 0
 465 009e 9091 0000 		lds r25,lavar
 466 00a2 9530      		cpi r25,lo8(5)
 467 00a4 01F0      		breq .L3
 251:W_M.c         ****           // printf("Girando pra Direita\n");
 468               		.loc 1 251 0
 469 00a6 AE01      		movw r20,r28
 470 00a8 421B      		sub r20,r18
 471 00aa 530B      		sbc r21,r19
 472 00ac 4438      		cpi r20,-124
 473 00ae 5E41      		sbci r21,30
 474 00b0 00F4      		brsh .L20
 475               	.LVL25:
 476               	.L12:
 477               		.loc 1 259 0
 478 00b2 C819      		sub r28,r8
 479 00b4 D909      		sbc r29,r9
 480 00b6 0C17      		cp r16,r28
 481 00b8 1D07      		cpc r17,r29
 482 00ba 00F4      		brsh .L4
 260:W_M.c         ****           // printf("saindo\n");
 261:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 483               		.loc 1 261 0
 484 00bc 409A      		sbi 0x8,0
 262:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 485               		.loc 1 262 0
 486 00be 419A      		sbi 0x8,1
 263:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Fim Giro\n\r");
 487               		.loc 1 263 0
 488 00c0 80E0      		ldi r24,lo8(.LC5)
 489 00c2 90E0      		ldi r25,hi8(.LC5)
 490               	.LVL26:
 491               	.L17:
 492 00c4 9F93      		push r25
 493               	.LCFI21:
 494               		.cfi_def_cfa_offset 15
 495 00c6 8F93      		push r24
 496               	.LCFI22:
 497               		.cfi_def_cfa_offset 16
 498 00c8 80E0      		ldi r24,lo8(SD1)
 499 00ca 90E0      		ldi r25,hi8(SD1)
 500 00cc 9F93      		push r25
 501               	.LCFI23:
 502               		.cfi_def_cfa_offset 17
 503 00ce 8F93      		push r24
 504               	.LCFI24:
 505               		.cfi_def_cfa_offset 18
 506 00d0 0E94 0000 		call chprintf
 507               	.LVL27:
 264:W_M.c         ****           return;
 508               		.loc 1 264 0
 509 00d4 0F90      		pop __tmp_reg__
 510 00d6 0F90      		pop __tmp_reg__
 511 00d8 0F90      		pop __tmp_reg__
 512 00da 0F90      		pop __tmp_reg__
 513               	.LCFI25:
 514               		.cfi_def_cfa_offset 14
 515               	.L3:
 516               	/* epilogue start */
 265:W_M.c         ****           }
 266:W_M.c         ****         break;
 267:W_M.c         ****         }
 268:W_M.c         ****      }
 269:W_M.c         ****   }
 517               		.loc 1 269 0
 518 00dc DF91      		pop r29
 519 00de CF91      		pop r28
 520 00e0 1F91      		pop r17
 521 00e2 0F91      		pop r16
 522 00e4 FF90      		pop r15
 523 00e6 EF90      		pop r14
 524 00e8 DF90      		pop r13
 525 00ea CF90      		pop r12
 526 00ec BF90      		pop r11
 527 00ee AF90      		pop r10
 528 00f0 9F90      		pop r9
 529 00f2 8F90      		pop r8
 530               	.LVL28:
 531 00f4 0895      		ret
 532               	.LVL29:
 533               	.L19:
 231:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 534               		.loc 1 231 0
 535 00f6 DF92      		push r13
 536               	.LCFI26:
 537               		.cfi_def_cfa_offset 15
 538 00f8 CF92      		push r12
 539               	.LCFI27:
 540               		.cfi_def_cfa_offset 16
 541 00fa FF92      		push r15
 542               	.LCFI28:
 543               		.cfi_def_cfa_offset 17
 544 00fc EF92      		push r14
 545               	.LCFI29:
 546               		.cfi_def_cfa_offset 18
 547 00fe 0E94 0000 		call chprintf
 548               	.LVL30:
 233:W_M.c         ****           ls_report = agora;
 549               		.loc 1 233 0
 550 0102 409A      		sbi 0x8,0
 551               	.LVL31:
 552 0104 0F90      		pop __tmp_reg__
 553 0106 0F90      		pop __tmp_reg__
 554 0108 0F90      		pop __tmp_reg__
 555 010a 0F90      		pop __tmp_reg__
 556               	.LCFI30:
 557               		.cfi_def_cfa_offset 14
 558               	.LBB196:
 559               	.LBB194:
 560               	.LBB192:
 561               	.LBB186:
 562               		.loc 3 118 0
 563 010c 9E01      		movw r18,r28
 564               	.LBE186:
 565               	.LBE192:
 566               	.LBE194:
 567               	.LBE196:
 235:W_M.c         ****           }
 568               		.loc 1 235 0
 569 010e 81E0      		ldi r24,lo8(1)
 570 0110 00C0      		rjmp .L9
 571               	.LVL32:
 572               	.L20:
 254:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 573               		.loc 1 254 0
 574 0112 BF92      		push r11
 575               	.LCFI31:
 576               		.cfi_def_cfa_offset 15
 577 0114 AF92      		push r10
 578               	.LCFI32:
 579               		.cfi_def_cfa_offset 16
 580 0116 FF92      		push r15
 581               	.LCFI33:
 582               		.cfi_def_cfa_offset 17
 583 0118 EF92      		push r14
 584               	.LCFI34:
 585               		.cfi_def_cfa_offset 18
 586 011a 0E94 0000 		call chprintf
 587               	.LVL33:
 255:W_M.c         ****           ls_report = agora;
 588               		.loc 1 255 0
 589 011e 419A      		sbi 0x8,1
 590               	.LVL34:
 591 0120 0F90      		pop __tmp_reg__
 592 0122 0F90      		pop __tmp_reg__
 593 0124 0F90      		pop __tmp_reg__
 594 0126 0F90      		pop __tmp_reg__
 595               	.LCFI35:
 596               		.cfi_def_cfa_offset 14
 597               	.LBB197:
 598               	.LBB195:
 599               	.LBB193:
 600               	.LBB187:
 601               		.loc 3 118 0
 602 0128 9E01      		movw r18,r28
 603               	.LBE187:
 604               	.LBE193:
 605               	.LBE195:
 606               	.LBE197:
 257:W_M.c         ****           }
 607               		.loc 1 257 0
 608 012a 80E0      		ldi r24,0
 609 012c 00C0      		rjmp .L12
 610               		.cfi_endproc
 611               	.LFE175:
 613               		.section	.rodata.str1.1
 614               	.LC6:
 615 0059 5365 6C65 		.string	"Selecione o estado inicial\n\r"
 615      6369 6F6E 
 615      6520 6F20 
 615      6573 7461 
 615      646F 2069 
 616               	.LC7:
 617 0076 4D6F 646F 		.string	"Modo inicial: Molho\n\r"
 617      2069 6E69 
 617      6369 616C 
 617      3A20 4D6F 
 617      6C68 6F0A 
 618               	.LC8:
 619 008c 4D6F 646F 		.string	"Modo inicial: Lavagem \n\r"
 619      2069 6E69 
 619      6369 616C 
 619      3A20 4C61 
 619      7661 6765 
 620               	.LC9:
 621 00a5 4D6F 646F 		.string	"Modo inicial: Enxague\n\r"
 621      2069 6E69 
 621      6369 616C 
 621      3A20 456E 
 621      7861 6775 
 622               	.LC10:
 623 00bd 4D6F 646F 		.string	"Modo inicial: Centrifuga\n\r"
 623      2069 6E69 
 623      6369 616C 
 623      3A20 4365 
 623      6E74 7269 
 624               	.LC11:
 625 00d8 496E 6963 		.string	"Inicio do processo\n\r"
 625      696F 2064 
 625      6F20 7072 
 625      6F63 6573 
 625      736F 0A0D 
 626               	.LC12:
 627 00ed 456E 6368 		.string	"Enchendo para o Molho \n\r"
 627      656E 646F 
 627      2070 6172 
 627      6120 6F20 
 627      4D6F 6C68 
 628               	.LC13:
 629 0106 456E 6368 		.string	"Enchendo para o enxague\n\r"
 629      656E 646F 
 629      2070 6172 
 629      6120 6F20 
 629      656E 7861 
 630               	.LC14:
 631 0120 5365 6E73 		.string	"Sensor cheio\n\r"
 631      6F72 2063 
 631      6865 696F 
 631      0A0D 00
 632               	.LC15:
 633 012f 4769 726F 		.string	"Giros Molho\n\r"
 633      7320 4D6F 
 633      6C68 6F0A 
 633      0D00 
 634               	.LC16:
 635 013d 4649 4D20 		.string	"FIM Molho\n\r"
 635      4D6F 6C68 
 635      6F0A 0D00 
 636               	.LC17:
 637 0149 496E 6963 		.string	"Inicio LAVAGEM\n\r"
 637      696F 204C 
 637      4156 4147 
 637      454D 0A0D 
 637      00
 638               	.LC18:
 639 015a 4769 726F 		.string	"Giros Lavagem\n\r"
 639      7320 4C61 
 639      7661 6765 
 639      6D0A 0D00 
 640               	.LC19:
 641 016a 4573 7065 		.string	"Espera Lavagem\n\r"
 641      7261 204C 
 641      6176 6167 
 641      656D 0A0D 
 641      00
 642               	.LC20:
 643 017b 4573 7661 		.string	"Esvazia Lavagem \n\r"
 643      7A69 6120 
 643      4C61 7661 
 643      6765 6D20 
 643      0A0D 00
 644               	.LC21:
 645 018e 4669 6D20 		.string	"Fim Lavagem\n\r"
 645      4C61 7661 
 645      6765 6D0A 
 645      0D00 
 646               	.LC22:
 647 019c 496E 6963 		.string	"Inicio Enxague\n\r"
 647      696F 2045 
 647      6E78 6167 
 647      7565 0A0D 
 647      00
 648               	.LC23:
 649 01ad 456E 6368 		.string	"Enche Enxague\n\r"
 649      6520 456E 
 649      7861 6775 
 649      650A 0D00 
 650               	.LC24:
 651 01bd 526F 6461 		.string	"Rodar Enxague\n\r"
 651      7220 456E 
 651      7861 6775 
 651      650A 0D00 
 652               	.LC25:
 653 01cd 4573 7661 		.string	"Esvazia Enxague\n\r"
 653      7A69 6120 
 653      456E 7861 
 653      6775 650A 
 653      0D00 
 654               	.LC26:
 655 01df 4669 6D20 		.string	"Fim Enxague\n\r"
 655      456E 7861 
 655      6775 650A 
 655      0D00 
 656               	.LC27:
 657 01ed 496E 6963 		.string	"Inicio Centrifuga\n\r"
 657      696F 2043 
 657      656E 7472 
 657      6966 7567 
 657      610A 0D00 
 658               	.LC28:
 659 0201 4649 4D20 		.string	"FIM DO PROCESSO\n\r"
 659      444F 2050 
 659      524F 4345 
 659      5353 4F0A 
 659      0D00 
 660               		.section	.text.lavar_maquina,"ax",@progbits
 661               	.global	lavar_maquina
 663               	lavar_maquina:
 664               	.LFB176:
 270:W_M.c         **** 
 271:W_M.c         **** /* Main Machine */
 272:W_M.c         **** 
 273:W_M.c         **** void lavar_maquina(){
 665               		.loc 1 273 0
 666               		.cfi_startproc
 667 0000 2F92      		push r2
 668               	.LCFI36:
 669               		.cfi_def_cfa_offset 3
 670               		.cfi_offset 2, -2
 671 0002 3F92      		push r3
 672               	.LCFI37:
 673               		.cfi_def_cfa_offset 4
 674               		.cfi_offset 3, -3
 675 0004 4F92      		push r4
 676               	.LCFI38:
 677               		.cfi_def_cfa_offset 5
 678               		.cfi_offset 4, -4
 679 0006 5F92      		push r5
 680               	.LCFI39:
 681               		.cfi_def_cfa_offset 6
 682               		.cfi_offset 5, -5
 683 0008 6F92      		push r6
 684               	.LCFI40:
 685               		.cfi_def_cfa_offset 7
 686               		.cfi_offset 6, -6
 687 000a 7F92      		push r7
 688               	.LCFI41:
 689               		.cfi_def_cfa_offset 8
 690               		.cfi_offset 7, -7
 691 000c 8F92      		push r8
 692               	.LCFI42:
 693               		.cfi_def_cfa_offset 9
 694               		.cfi_offset 8, -8
 695 000e 9F92      		push r9
 696               	.LCFI43:
 697               		.cfi_def_cfa_offset 10
 698               		.cfi_offset 9, -9
 699 0010 AF92      		push r10
 700               	.LCFI44:
 701               		.cfi_def_cfa_offset 11
 702               		.cfi_offset 10, -10
 703 0012 BF92      		push r11
 704               	.LCFI45:
 705               		.cfi_def_cfa_offset 12
 706               		.cfi_offset 11, -11
 707 0014 CF92      		push r12
 708               	.LCFI46:
 709               		.cfi_def_cfa_offset 13
 710               		.cfi_offset 12, -12
 711 0016 DF92      		push r13
 712               	.LCFI47:
 713               		.cfi_def_cfa_offset 14
 714               		.cfi_offset 13, -13
 715 0018 EF92      		push r14
 716               	.LCFI48:
 717               		.cfi_def_cfa_offset 15
 718               		.cfi_offset 14, -14
 719 001a FF92      		push r15
 720               	.LCFI49:
 721               		.cfi_def_cfa_offset 16
 722               		.cfi_offset 15, -15
 723 001c 0F93      		push r16
 724               	.LCFI50:
 725               		.cfi_def_cfa_offset 17
 726               		.cfi_offset 16, -16
 727 001e 1F93      		push r17
 728               	.LCFI51:
 729               		.cfi_def_cfa_offset 18
 730               		.cfi_offset 17, -17
 731 0020 CF93      		push r28
 732               	.LCFI52:
 733               		.cfi_def_cfa_offset 19
 734               		.cfi_offset 28, -18
 735 0022 DF93      		push r29
 736               	.LCFI53:
 737               		.cfi_def_cfa_offset 20
 738               		.cfi_offset 29, -19
 739               	/* prologue: function */
 740               	/* frame size = 0 */
 741               	/* stack size = 18 */
 742               	.L__stack_usage = 18
 274:W_M.c         ****   // int t_cheio;
 275:W_M.c         ****   // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
 276:W_M.c         ****   switch(lavar){
 743               		.loc 1 276 0
 744 0024 8091 0000 		lds r24,lavar
 745 0028 8230      		cpi r24,lo8(2)
 746 002a 01F4      		brne .+2
 747 002c 00C0      		rjmp .L23
 748 002e 00F0      		brlo .L82
 749 0030 8430      		cpi r24,lo8(4)
 750 0032 01F4      		brne .+2
 751 0034 00C0      		rjmp .L27
 752 0036 00F4      		brsh .+2
 753 0038 00C0      		rjmp .L28
 754 003a 8530      		cpi r24,lo8(5)
 755 003c 01F4      		brne .L21
 277:W_M.c         **** 
 278:W_M.c         ****     case(PARADA):
 279:W_M.c         ****       if(lavar == EMERGENCIA){
 280:W_M.c         ****         break;
 281:W_M.c         ****       } // verifcar emergência
 282:W_M.c         ****       // printf("Inicio da Parada\n");
 283:W_M.c         ****       // printf("Escolha o estado inicial:\n");
 284:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
 285:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 286:W_M.c         ****       // scanf("%d", &fsm_prd.select_init);
 287:W_M.c         ****       while(1){
 288:W_M.c         ****         if(fsm_prd.select_init == 0){
 289:W_M.c         ****           palSetPad(IOPORT4, PARADA_ID);
 290:W_M.c         ****           palSetPad(IOPORT2, MOLHO_ID);
 291:W_M.c         ****           palSetPad(IOPORT2, LAVAGEM_ID);
 292:W_M.c         ****           palSetPad(IOPORT2, ENXAGUE_ID);
 293:W_M.c         ****           palSetPad(IOPORT2, CENTRI_ID);
 294:W_M.c         ****           lavar = MOLHO;
 295:W_M.c         ****           fsm_molho_init(&fsm_ml);
 296:W_M.c         ****         }
 297:W_M.c         **** 
 298:W_M.c         ****         if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 299:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 300:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 301:W_M.c         ****           // printf("Inicio MOLHO\n");
 302:W_M.c         ****           lavar = LAVAGEM;
 303:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 304:W_M.c         ****           fsm_prd.select_init = 1;
 305:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 306:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 307:W_M.c         ****         }
 308:W_M.c         **** 
 309:W_M.c         ****         if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 310:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 311:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 312:W_M.c         ****           lavar = ENXAGUE;
 313:W_M.c         ****           fsm_enxague_init(&fsm_exg);
 314:W_M.c         ****           fsm_prd.select_init = 2;
 315:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
 316:W_M.c         ****           palClearPad(IOPORT2, LAVAGEM_ID);
 317:W_M.c         **** 
 318:W_M.c         ****         }
 319:W_M.c         ****         if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 320:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 321:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 322:W_M.c         ****           lavar = CENTRIFUGA;
 323:W_M.c         ****           fsm_centrifuga_init(&fsm_cen);
 324:W_M.c         ****           fsm_prd.select_init = 3;
 325:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
 326:W_M.c         ****           palClearPad(IOPORT2, ENXAGUE_ID);
 327:W_M.c         ****           // printf("Inicio ENXAGUE\n");
 328:W_M.c         ****         }
 329:W_M.c         ****         if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 330:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 331:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 332:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 333:W_M.c         ****           fsm_prd.select_init = 0;
 334:W_M.c         ****         }
 335:W_M.c         ****         if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
 336:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 337:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
 338:W_M.c         ****           if(fsm_prd.select_init == 0){
 339:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
 340:W_M.c         ****           }
 341:W_M.c         ****           if(fsm_prd.select_init == 2){
 342:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o enxague\n\r");
 343:W_M.c         ****           }
 344:W_M.c         ****           return;
 345:W_M.c         ****         }
 346:W_M.c         ****       }// end of PARADA loop
 347:W_M.c         **** 
 348:W_M.c         ****     break;
 349:W_M.c         **** 
 350:W_M.c         **** 
 351:W_M.c         ****     case(MOLHO):
 352:W_M.c         ****     // printf("Inicio Molho\n");
 353:W_M.c         ****     // chprintf((BaseSequentialStream *)&SD1, "Inicio MOLHO \n\r");
 354:W_M.c         ****     palSetPad(IOPORT2, MOLHO_ID);
 355:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 356:W_M.c         ****     palClearPad(IOPORT2, ENXAGUE_ID);
 357:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 358:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 359:W_M.c         **** 
 360:W_M.c         ****       switch(fsm_ml.ml){
 361:W_M.c         ****         case(ENCHER_ML):
 362:W_M.c         ****           if(lavar == EMERGENCIA){
 363:W_M.c         ****             break;
 364:W_M.c         ****           } // verifcar emergência
 365:W_M.c         ****           // printf("DEBUG: Super MOLHO - estado ENCHER_ML\n");
 366:W_M.c         ****           // printf("Abrir água\n");
 367:W_M.c         ****           palSetPad(IOPORT2, ENCHE_ID);
 368:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 369:W_M.c         ****             // printf("Sensor Cheio\n");
 370:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Sensor cheio\n\r");
 371:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 372:W_M.c         ****             fsm_ml.ml = RODAR_ML;
 373:W_M.c         ****             // printf("Início Giros Molho\n");
 374:W_M.c         ****           }
 375:W_M.c         ****           break;
 376:W_M.c         **** 
 377:W_M.c         ****         case(RODAR_ML):
 378:W_M.c         ****           if(lavar == EMERGENCIA){
 379:W_M.c         ****             break;
 380:W_M.c         ****           } // verifcar emergência
 381:W_M.c         ****           // printf("DEBUG: Super MOLHO - estado RODAR_ML\n");
 382:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
 383:W_M.c         ****           spinning(fsm_ml.t_giro);
 384:W_M.c         ****           lavar = LAVAGEM;
 385:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 386:W_M.c         ****           // printf("Fim Molho\n");
 387:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "FIM Molho\n\r");
 388:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 389:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
 390:W_M.c         ****           // printf("Inicio LAVAGEM\n");
 391:W_M.c         ****           break;
 392:W_M.c         ****       }
 393:W_M.c         ****       break;
 394:W_M.c         **** 
 395:W_M.c         **** 
 396:W_M.c         ****     case(LAVAGEM):
 397:W_M.c         ****       // printf("Inicio Lavagem\n");
 398:W_M.c         ****       palClearPad(IOPORT2, MOLHO_ID);
 399:W_M.c         ****       palSetPad(IOPORT2, LAVAGEM_ID);
 400:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 401:W_M.c         ****       palClearPad(IOPORT2, CENTRI_ID);
 402:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 403:W_M.c         **** 
 404:W_M.c         ****       switch(fsm_lvg.lvg){
 405:W_M.c         ****         case(RODAR_LVG):
 406:W_M.c         ****           if(lavar == EMERGENCIA){
 407:W_M.c         ****             break;
 408:W_M.c         ****           } // verifcar emergência
 409:W_M.c         ****           // printf("DEBUG Super LAVAGEM - estado RODAR_LVG\n");
 410:W_M.c         ****           // printf("Inicio giros Lavagem\n");
 411:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Giros Lavagem\n\r");
 412:W_M.c         ****           spinning(fsm_lvg.t_giros);
 413:W_M.c         ****           fsm_lvg.ul_espera = chVTGetSystemTime();
 414:W_M.c         ****           fsm_lvg.lvg = ESPERA_LVG;
 415:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
 416:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");
 417:W_M.c         **** 
 418:W_M.c         ****           break;
 419:W_M.c         **** 
 420:W_M.c         ****         case(ESPERA_LVG):
 421:W_M.c         ****           if(lavar == EMERGENCIA){
 422:W_M.c         ****             break;
 423:W_M.c         ****           } // verifcar emergência
 424:W_M.c         ****           fsm_lvg.instante = chVTGetSystemTime();
 425:W_M.c         ****           if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
 426:W_M.c         ****             fsm_lvg.ul_espera = chVTGetSystemTime();
 427:W_M.c         ****             if(fsm_lvg.turns >= 3){
 428:W_M.c         ****               fsm_lvg.turns = 0;
 429:W_M.c         ****               fsm_lvg.lvg = ESVAZIA_LVG;
 430:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
 431:W_M.c         ****               // printf("Fim giros Lavagem\n");
 432:W_M.c         **** 
 433:W_M.c         ****             } else {
 434:W_M.c         ****               fsm_lvg.turns ++;
 435:W_M.c         ****               fsm_lvg.lvg = RODAR_LVG;
 436:W_M.c         ****             } // fim if voltas
 437:W_M.c         ****           } // fim if tempo
 438:W_M.c         ****           break;
 439:W_M.c         **** 
 440:W_M.c         **** 
 441:W_M.c         ****         case(ESVAZIA_LVG):
 442:W_M.c         ****           if(lavar == EMERGENCIA){
 443:W_M.c         ****             break;
 444:W_M.c         ****           } // verificar emergência
 445:W_M.c         ****           palSetPad(IOPORT2, SECA_ID);
 446:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
 447:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 448:W_M.c         ****             // printf("Sensor Vazio: ON\n");
 449:W_M.c         ****             palClearPad(IOPORT2, SECA_ID);
 450:W_M.c         ****             // printf("Fim LAVAGEM\n");
 451:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Fim Lavagem\n\r");
 452:W_M.c         ****             palClearPad(IOPORT2, LAVAGEM_ID);
 453:W_M.c         **** 
 454:W_M.c         ****             // printf("Inicio ENXAGUE\n");
 455:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
 456:W_M.c         ****               lavar = ENXAGUE;
 457:W_M.c         **** 
 458:W_M.c         ****               fsm_enxague_init(&fsm_exg);
 459:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Enche Enxague\n\r");
 460:W_M.c         ****             } // fim "if" sensor vazio
 461:W_M.c         ****             break;
 462:W_M.c         ****           } // fim switch LAVAGEM
 463:W_M.c         ****           break;
 464:W_M.c         **** 
 465:W_M.c         **** 
 466:W_M.c         ****     case(ENXAGUE):
 467:W_M.c         ****     palClearPad(IOPORT2, MOLHO_ID);
 468:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 469:W_M.c         ****     palSetPad(IOPORT2, ENXAGUE_ID);
 470:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 471:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 472:W_M.c         **** 
 473:W_M.c         ****       switch(fsm_exg.exg){
 474:W_M.c         ****         case(ENCHER_EXG):
 475:W_M.c         ****           if(lavar == EMERGENCIA){
 476:W_M.c         ****             break;
 477:W_M.c         ****           } // verificar emergência
 478:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estado ENCHER_EXG\n");
 479:W_M.c         ****           palSetPad(IOPORT2, ENCHE_ID);
 480:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 481:W_M.c         ****             // printf("Sensor Cheio: ON\n");
 482:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 483:W_M.c         ****             fsm_exg.exg = RODAR_EXG;
 484:W_M.c         **** 
 485:W_M.c         ****           } // fim "if" Sensor cheio
 486:W_M.c         ****           break;
 487:W_M.c         **** 
 488:W_M.c         ****         case(RODAR_EXG):
 489:W_M.c         ****           if(lavar == EMERGENCIA){
 490:W_M.c         ****             break;
 491:W_M.c         ****           } // verificar emergência
 492:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estado RODAR_EXG\n");
 493:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Rodar Enxague\n\r");
 494:W_M.c         ****           spinning(fsm_exg.t_giro);
 495:W_M.c         ****           fsm_exg.exg = ESVAZIA_EXG;
 496:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
 497:W_M.c         **** 
 498:W_M.c         ****         break;
 499:W_M.c         **** 
 500:W_M.c         ****         case(ESVAZIA_EXG):
 501:W_M.c         ****           if(lavar == EMERGENCIA){
 502:W_M.c         ****             break;
 503:W_M.c         ****           } //  verificar a emergência
 504:W_M.c         **** 
 505:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estados ESVAZIA_EXG\n");
 506:W_M.c         ****           palSetPad(IOPORT2, SECA_ID);
 507:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 508:W_M.c         ****              // printf("Sensor Vazio: ON\n");
 509:W_M.c         ****              palClearPad(IOPORT2, SECA_ID);
 510:W_M.c         ****              lavar = CENTRIFUGA;
 511:W_M.c         ****              fsm_centrifuga_init(&fsm_cen);
 512:W_M.c         ****              chprintf((BaseSequentialStream *)&SD1, "Fim Enxague\n\r");
 513:W_M.c         ****              // printf("Fim Enxágue\n");
 514:W_M.c         ****              palClearPad(IOPORT2, ENXAGUE_ID);
 515:W_M.c         ****              // printf("Inicio CENTRIFUGA\n");
 516:W_M.c         ****              chprintf((BaseSequentialStream *)&SD1, "Inicio Centrifuga\n\r");
 517:W_M.c         ****           }// fim "if" sensor vazio
 518:W_M.c         ****         break;
 519:W_M.c         ****       } // fim switch ENXAGUE
 520:W_M.c         ****       break;
 521:W_M.c         **** 
 522:W_M.c         **** 
 523:W_M.c         ****       case(CENTRIFUGA):
 524:W_M.c         ****       // printf("Inicio Centrifuga\n");
 525:W_M.c         ****       palClearPad(IOPORT2, MOLHO_ID);
 526:W_M.c         ****       palClearPad(IOPORT2, LAVAGEM_ID);
 527:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 528:W_M.c         ****       palSetPad(IOPORT2, CENTRI_ID);
 529:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 530:W_M.c         **** 
 531:W_M.c         ****         switch(fsm_cen.cen){
 532:W_M.c         ****           case(GIRA_R_CENTRI):
 533:W_M.c         ****             if(lavar == EMERGENCIA){
 534:W_M.c         ****               break;
 535:W_M.c         ****             }
 536:W_M.c         ****             palClearPad(IOPORT3, MOTOR_DIR);
 537:W_M.c         ****             // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
 538:W_M.c         ****             fsm_cen.tempo = chVTGetSystemTime();
 539:W_M.c         ****             // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
 540:W_M.c         ****             // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
 541:W_M.c         ****             if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
 542:W_M.c         ****               palSetPad(IOPORT3, MOTOR_DIR);
 543:W_M.c         ****               lavar = PARADA;
 544:W_M.c         ****               fsm_parada_init(&fsm_prd);
 545:W_M.c         ****               palClearPad(IOPORT2, CENTRI_ID);
 546:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "FIM DO PROCESSO\n\r");
 547:W_M.c         ****               // printf("FIM DA Máquina\n");
 548:W_M.c         ****             }
 549:W_M.c         ****           break; // break de GIRA_R_CENTRI
 550:W_M.c         ****         } // fim switch CENTRIFUGA
 551:W_M.c         ****     break; // break de centrífuga.
 552:W_M.c         **** 
 553:W_M.c         **** 
 554:W_M.c         ****     case(EMERGENCIA):
 555:W_M.c         ****       // printf("PORTA ABERTA. ERRO !!\n");
 556:W_M.c         ****       if(palReadPad(IOPORT4, EMER) == PAL_LOW){
 756               		.loc 1 556 0
 757 003e 4A99      		sbic 0x9,2
 758 0040 00C0      		rjmp .L21
 557:W_M.c         ****         lavar = PARADA;
 759               		.loc 1 557 0
 760 0042 1092 0000 		sts lavar,__zero_reg__
 761               	.LBB198:
 762               	.LBB199:
 119:W_M.c         **** }
 763               		.loc 1 119 0
 764 0046 1092 0000 		sts fsm_prd+1,__zero_reg__
 765 004a 1092 0000 		sts fsm_prd,__zero_reg__
 766               	.L21:
 767               	/* epilogue start */
 768               	.LBE199:
 769               	.LBE198:
 558:W_M.c         ****         fsm_parada_init(&fsm_prd);
 559:W_M.c         ****       }
 560:W_M.c         **** 
 561:W_M.c         ****     break; // break de emergência
 562:W_M.c         ****   } // fim switch máquina principal
 563:W_M.c         **** } // fim função da máquina principal.
 770               		.loc 1 563 0
 771 004e DF91      		pop r29
 772 0050 CF91      		pop r28
 773 0052 1F91      		pop r17
 774 0054 0F91      		pop r16
 775 0056 FF90      		pop r15
 776 0058 EF90      		pop r14
 777 005a DF90      		pop r13
 778 005c CF90      		pop r12
 779 005e BF90      		pop r11
 780 0060 AF90      		pop r10
 781 0062 9F90      		pop r9
 782 0064 8F90      		pop r8
 783 0066 7F90      		pop r7
 784 0068 6F90      		pop r6
 785 006a 5F90      		pop r5
 786 006c 4F90      		pop r4
 787 006e 3F90      		pop r3
 788 0070 2F90      		pop r2
 789 0072 0895      		ret
 790               	.L82:
 276:W_M.c         **** 
 791               		.loc 1 276 0
 792 0074 8823      		tst r24
 793 0076 01F4      		brne .+2
 794 0078 00C0      		rjmp .L25
 795 007a 8130      		cpi r24,lo8(1)
 796 007c 01F4      		brne .L21
 354:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 797               		.loc 1 354 0
 798 007e 289A      		sbi 0x5,0
 355:W_M.c         ****     palClearPad(IOPORT2, ENXAGUE_ID);
 799               		.loc 1 355 0
 800 0080 2998      		cbi 0x5,1
 356:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 801               		.loc 1 356 0
 802 0082 2A98      		cbi 0x5,2
 357:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 803               		.loc 1 357 0
 804 0084 2B98      		cbi 0x5,3
 358:W_M.c         **** 
 805               		.loc 1 358 0
 806 0086 5F98      		cbi 0xb,7
 360:W_M.c         ****         case(ENCHER_ML):
 807               		.loc 1 360 0
 808 0088 8091 0000 		lds r24,fsm_ml
 809 008c 8630      		cpi r24,lo8(6)
 810 008e 01F4      		brne .+2
 811 0090 00C0      		rjmp .L43
 812 0092 8730      		cpi r24,lo8(7)
 813 0094 01F4      		brne .L21
 382:W_M.c         ****           spinning(fsm_ml.t_giro);
 814               		.loc 1 382 0
 815 0096 80E0      		ldi r24,lo8(.LC15)
 816 0098 90E0      		ldi r25,hi8(.LC15)
 817 009a 9F93      		push r25
 818               	.LCFI54:
 819               		.cfi_def_cfa_offset 21
 820 009c 8F93      		push r24
 821               	.LCFI55:
 822               		.cfi_def_cfa_offset 22
 823 009e C0E0      		ldi r28,lo8(SD1)
 824 00a0 D0E0      		ldi r29,hi8(SD1)
 825 00a2 DF93      		push r29
 826               	.LCFI56:
 827               		.cfi_def_cfa_offset 23
 828 00a4 CF93      		push r28
 829               	.LCFI57:
 830               		.cfi_def_cfa_offset 24
 831 00a6 0E94 0000 		call chprintf
 383:W_M.c         ****           lavar = LAVAGEM;
 832               		.loc 1 383 0
 833 00aa 8091 0000 		lds r24,fsm_ml+1
 834 00ae 9091 0000 		lds r25,fsm_ml+1+1
 835 00b2 0E94 0000 		call spinning
 384:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 836               		.loc 1 384 0
 837 00b6 82E0      		ldi r24,lo8(2)
 838 00b8 8093 0000 		sts lavar,r24
 839               	.LBB200:
 840               	.LBB201:
 130:W_M.c         ****   st->turns = 0;
 841               		.loc 1 130 0
 842 00bc 88E0      		ldi r24,lo8(8)
 843 00be 8093 0000 		sts fsm_lvg,r24
 131:W_M.c         ****   st->t_espera = 1000;
 844               		.loc 1 131 0
 845 00c2 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 846 00c6 1092 0000 		sts fsm_lvg+5,__zero_reg__
 132:W_M.c         ****   st->t_giros = 2400;
 847               		.loc 1 132 0
 848 00ca 88EE      		ldi r24,lo8(-24)
 849 00cc 93E0      		ldi r25,lo8(3)
 850 00ce 9093 0000 		sts fsm_lvg+7+1,r25
 851 00d2 8093 0000 		sts fsm_lvg+7,r24
 133:W_M.c         ****   st->instante = chVTGetSystemTime();
 852               		.loc 1 133 0
 853 00d6 80E6      		ldi r24,lo8(96)
 854 00d8 99E0      		ldi r25,lo8(9)
 855 00da 9093 0000 		sts fsm_lvg+9+1,r25
 856 00de 8093 0000 		sts fsm_lvg+9,r24
 857               	.LBB202:
 858               	.LBB203:
 859               	.LBB204:
 860               	.LBB205:
 861               	.LBB206:
 437:../../../os/common/ports/AVR/chcore.h **** }
 862               		.loc 2 437 0
 863               	/* #APP */
 864               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 865 00e2 F894      		cli
 866               	 ;  0 "" 2
 867               	/* #NOAPP */
 868               	.LBE206:
 869               	.LBE205:
 870               	.LBE204:
 871               	.LBB207:
 872               	.LBB208:
 873               		.loc 3 118 0
 874 00e4 8091 0000 		lds r24,ch+19
 875 00e8 9091 0000 		lds r25,ch+19+1
 876               	.LBE208:
 877               	.LBE207:
 878               	.LBB209:
 879               	.LBB210:
 880               	.LBB211:
 881               	.LBB212:
 882               		.loc 2 447 0
 883               	/* #APP */
 884               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 885 00ec 7894      		sei
 886               	 ;  0 "" 2
 887               	/* #NOAPP */
 888               	.LBE212:
 889               	.LBE211:
 890               	.LBE210:
 891               	.LBE209:
 892               	.LBE203:
 893               	.LBE202:
 134:W_M.c         ****   st->ul_espera = st->instante;
 894               		.loc 1 134 0
 895 00ee 9093 0000 		sts fsm_lvg+1+1,r25
 896 00f2 8093 0000 		sts fsm_lvg+1,r24
 135:W_M.c         **** }
 897               		.loc 1 135 0
 898 00f6 9093 0000 		sts fsm_lvg+3+1,r25
 899 00fa 8093 0000 		sts fsm_lvg+3,r24
 900               	.LBE201:
 901               	.LBE200:
 387:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 902               		.loc 1 387 0
 903 00fe 80E0      		ldi r24,lo8(.LC16)
 904 0100 90E0      		ldi r25,hi8(.LC16)
 905 0102 9F93      		push r25
 906               	.LCFI58:
 907               		.cfi_def_cfa_offset 25
 908 0104 8F93      		push r24
 909               	.LCFI59:
 910               		.cfi_def_cfa_offset 26
 911 0106 DF93      		push r29
 912               	.LCFI60:
 913               		.cfi_def_cfa_offset 27
 914 0108 CF93      		push r28
 915               	.LCFI61:
 916               		.cfi_def_cfa_offset 28
 917 010a 0E94 0000 		call chprintf
 388:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
 918               		.loc 1 388 0
 919 010e 2898      		cbi 0x5,0
 389:W_M.c         ****           // printf("Inicio LAVAGEM\n");
 920               		.loc 1 389 0
 921 0110 80E0      		ldi r24,lo8(.LC17)
 922 0112 90E0      		ldi r25,hi8(.LC17)
 923 0114 9F93      		push r25
 924               	.LCFI62:
 925               		.cfi_def_cfa_offset 29
 926 0116 8F93      		push r24
 927               	.LCFI63:
 928               		.cfi_def_cfa_offset 30
 929 0118 DF93      		push r29
 930               	.LCFI64:
 931               		.cfi_def_cfa_offset 31
 932 011a CF93      		push r28
 933               	.LCFI65:
 934               		.cfi_def_cfa_offset 32
 935 011c 0E94 0000 		call chprintf
 391:W_M.c         ****       }
 936               		.loc 1 391 0
 937 0120 8DB7      		in r24,__SP_L__
 938 0122 9EB7      		in r25,__SP_H__
 939 0124 0C96      		adiw r24,12
 940 0126 0FB6      		in __tmp_reg__,__SREG__
 941 0128 F894      		cli
 942 012a 9EBF      		out __SP_H__,r25
 943 012c 0FBE      		out __SREG__,__tmp_reg__
 944 012e 8DBF      		out __SP_L__,r24
 945               	.LCFI66:
 946               		.cfi_def_cfa_offset 20
 947 0130 00C0      		rjmp .L21
 948               	.L27:
 525:W_M.c         ****       palClearPad(IOPORT2, LAVAGEM_ID);
 949               		.loc 1 525 0
 950 0132 2898      		cbi 0x5,0
 526:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 951               		.loc 1 526 0
 952 0134 2998      		cbi 0x5,1
 527:W_M.c         ****       palSetPad(IOPORT2, CENTRI_ID);
 953               		.loc 1 527 0
 954 0136 2A98      		cbi 0x5,2
 528:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 955               		.loc 1 528 0
 956 0138 2B9A      		sbi 0x5,3
 529:W_M.c         **** 
 957               		.loc 1 529 0
 958 013a 5F98      		cbi 0xb,7
 531:W_M.c         ****           case(GIRA_R_CENTRI):
 959               		.loc 1 531 0
 960 013c 8091 0000 		lds r24,fsm_cen
 961 0140 8E30      		cpi r24,lo8(14)
 962 0142 01F0      		breq .+2
 963 0144 00C0      		rjmp .L21
 536:W_M.c         ****             // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
 964               		.loc 1 536 0
 965 0146 4098      		cbi 0x8,0
 966               	.LBB213:
 967               	.LBB214:
 968               	.LBB215:
 969               	.LBB216:
 970               	.LBB217:
 437:../../../os/common/ports/AVR/chcore.h **** }
 971               		.loc 2 437 0
 972               	/* #APP */
 973               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 974 0148 F894      		cli
 975               	 ;  0 "" 2
 976               	/* #NOAPP */
 977               	.LBE217:
 978               	.LBE216:
 979               	.LBE215:
 980               	.LBB218:
 981               	.LBB219:
 982               		.loc 3 118 0
 983 014a 8091 0000 		lds r24,ch+19
 984 014e 9091 0000 		lds r25,ch+19+1
 985               	.LBE219:
 986               	.LBE218:
 987               	.LBB220:
 988               	.LBB221:
 989               	.LBB222:
 990               	.LBB223:
 991               		.loc 2 447 0
 992               	/* #APP */
 993               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 994 0152 7894      		sei
 995               	 ;  0 "" 2
 996               	/* #NOAPP */
 997               	.LBE223:
 998               	.LBE222:
 999               	.LBE221:
 1000               	.LBE220:
 1001               	.LBE214:
 1002               	.LBE213:
 538:W_M.c         ****             // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
 1003               		.loc 1 538 0
 1004 0154 9093 0000 		sts fsm_cen+1+1,r25
 1005 0158 8093 0000 		sts fsm_cen+1,r24
 541:W_M.c         ****               palSetPad(IOPORT3, MOTOR_DIR);
 1006               		.loc 1 541 0
 1007 015c A091 0000 		lds r26,fsm_cen+5
 1008 0160 B091 0000 		lds r27,fsm_cen+5+1
 1009 0164 2091 0000 		lds r18,fsm_cen+3
 1010 0168 3091 0000 		lds r19,fsm_cen+3+1
 1011 016c EC01      		movw r28,r24
 1012 016e C21B      		sub r28,r18
 1013 0170 D30B      		sbc r29,r19
 1014 0172 28E0      		ldi r18,lo8(8)
 1015 0174 3DE3      		ldi r19,lo8(61)
 1016 0176 0E94 0000 		call __usmulhisi3
 1017 017a 6951      		subi r22,25
 1018 017c 7C4F      		sbci r23,-4
 1019 017e 8F4F      		sbci r24,-1
 1020 0180 9F4F      		sbci r25,-1
 1021 0182 28EE      		ldi r18,lo8(-24)
 1022 0184 33E0      		ldi r19,lo8(3)
 1023 0186 40E0      		ldi r20,0
 1024 0188 50E0      		ldi r21,0
 1025 018a 0E94 0000 		call __udivmodsi4
 1026 018e 2C17      		cp r18,r28
 1027 0190 3D07      		cpc r19,r29
 1028 0192 00F0      		brlo .+2
 1029 0194 00C0      		rjmp .L21
 542:W_M.c         ****               lavar = PARADA;
 1030               		.loc 1 542 0
 1031 0196 409A      		sbi 0x8,0
 543:W_M.c         ****               fsm_parada_init(&fsm_prd);
 1032               		.loc 1 543 0
 1033 0198 1092 0000 		sts lavar,__zero_reg__
 1034               	.LBB224:
 1035               	.LBB225:
 119:W_M.c         **** }
 1036               		.loc 1 119 0
 1037 019c 1092 0000 		sts fsm_prd+1,__zero_reg__
 1038 01a0 1092 0000 		sts fsm_prd,__zero_reg__
 1039               	.LBE225:
 1040               	.LBE224:
 545:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "FIM DO PROCESSO\n\r");
 1041               		.loc 1 545 0
 1042 01a4 2B98      		cbi 0x5,3
 546:W_M.c         ****               // printf("FIM DA Máquina\n");
 1043               		.loc 1 546 0
 1044 01a6 80E0      		ldi r24,lo8(.LC28)
 1045 01a8 90E0      		ldi r25,hi8(.LC28)
 1046               	.L81:
 430:W_M.c         ****               // printf("Fim giros Lavagem\n");
 1047               		.loc 1 430 0
 1048 01aa 9F93      		push r25
 1049               	.LCFI67:
 1050               		.cfi_def_cfa_offset 21
 1051 01ac 8F93      		push r24
 1052               	.LCFI68:
 1053               		.cfi_def_cfa_offset 22
 1054 01ae 80E0      		ldi r24,lo8(SD1)
 1055 01b0 90E0      		ldi r25,hi8(SD1)
 1056 01b2 9F93      		push r25
 1057               	.LCFI69:
 1058               		.cfi_def_cfa_offset 23
 1059 01b4 8F93      		push r24
 1060               	.LCFI70:
 1061               		.cfi_def_cfa_offset 24
 1062 01b6 0E94 0000 		call chprintf
 1063 01ba 0F90      		pop __tmp_reg__
 1064 01bc 0F90      		pop __tmp_reg__
 1065 01be 0F90      		pop __tmp_reg__
 1066 01c0 0F90      		pop __tmp_reg__
 1067               	.LCFI71:
 1068               		.cfi_def_cfa_offset 20
 1069 01c2 00C0      		rjmp .L21
 1070               	.L28:
 467:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 1071               		.loc 1 467 0
 1072 01c4 2898      		cbi 0x5,0
 468:W_M.c         ****     palSetPad(IOPORT2, ENXAGUE_ID);
 1073               		.loc 1 468 0
 1074 01c6 2998      		cbi 0x5,1
 469:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 1075               		.loc 1 469 0
 1076 01c8 2A9A      		sbi 0x5,2
 470:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 1077               		.loc 1 470 0
 1078 01ca 2B98      		cbi 0x5,3
 471:W_M.c         **** 
 1079               		.loc 1 471 0
 1080 01cc 5F98      		cbi 0xb,7
 473:W_M.c         ****         case(ENCHER_EXG):
 1081               		.loc 1 473 0
 1082 01ce 8091 0000 		lds r24,fsm_exg
 1083 01d2 8C30      		cpi r24,lo8(12)
 1084 01d4 01F4      		brne .+2
 1085 01d6 00C0      		rjmp .L50
 1086 01d8 8D30      		cpi r24,lo8(13)
 1087 01da 01F4      		brne .+2
 1088 01dc 00C0      		rjmp .L51
 1089 01de 8B30      		cpi r24,lo8(11)
 1090 01e0 01F0      		breq .+2
 1091 01e2 00C0      		rjmp .L21
 479:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 1092               		.loc 1 479 0
 1093 01e4 2C9A      		sbi 0x5,4
 480:W_M.c         ****             // printf("Sensor Cheio: ON\n");
 1094               		.loc 1 480 0
 1095 01e6 4C9B      		sbis 0x9,4
 1096 01e8 00C0      		rjmp .L21
 482:W_M.c         ****             fsm_exg.exg = RODAR_EXG;
 1097               		.loc 1 482 0
 1098 01ea 2C98      		cbi 0x5,4
 483:W_M.c         **** 
 1099               		.loc 1 483 0
 1100 01ec 8CE0      		ldi r24,lo8(12)
 1101 01ee 8093 0000 		sts fsm_exg,r24
 1102 01f2 00C0      		rjmp .L21
 1103               	.L23:
 398:W_M.c         ****       palSetPad(IOPORT2, LAVAGEM_ID);
 1104               		.loc 1 398 0
 1105 01f4 2898      		cbi 0x5,0
 399:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 1106               		.loc 1 399 0
 1107 01f6 299A      		sbi 0x5,1
 400:W_M.c         ****       palClearPad(IOPORT2, CENTRI_ID);
 1108               		.loc 1 400 0
 1109 01f8 2A98      		cbi 0x5,2
 401:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 1110               		.loc 1 401 0
 1111 01fa 2B98      		cbi 0x5,3
 402:W_M.c         **** 
 1112               		.loc 1 402 0
 1113 01fc 5F98      		cbi 0xb,7
 404:W_M.c         ****         case(RODAR_LVG):
 1114               		.loc 1 404 0
 1115 01fe 8091 0000 		lds r24,fsm_lvg
 1116 0202 8930      		cpi r24,lo8(9)
 1117 0204 01F4      		brne .+2
 1118 0206 00C0      		rjmp .L46
 1119 0208 8A30      		cpi r24,lo8(10)
 1120 020a 01F4      		brne .+2
 1121 020c 00C0      		rjmp .L47
 1122 020e 8830      		cpi r24,lo8(8)
 1123 0210 01F0      		breq .+2
 1124 0212 00C0      		rjmp .L21
 411:W_M.c         ****           spinning(fsm_lvg.t_giros);
 1125               		.loc 1 411 0
 1126 0214 80E0      		ldi r24,lo8(.LC18)
 1127 0216 90E0      		ldi r25,hi8(.LC18)
 1128 0218 9F93      		push r25
 1129               	.LCFI72:
 1130               		.cfi_def_cfa_offset 21
 1131 021a 8F93      		push r24
 1132               	.LCFI73:
 1133               		.cfi_def_cfa_offset 22
 1134 021c C0E0      		ldi r28,lo8(SD1)
 1135 021e D0E0      		ldi r29,hi8(SD1)
 1136 0220 DF93      		push r29
 1137               	.LCFI74:
 1138               		.cfi_def_cfa_offset 23
 1139 0222 CF93      		push r28
 1140               	.LCFI75:
 1141               		.cfi_def_cfa_offset 24
 1142 0224 0E94 0000 		call chprintf
 412:W_M.c         ****           fsm_lvg.ul_espera = chVTGetSystemTime();
 1143               		.loc 1 412 0
 1144 0228 8091 0000 		lds r24,fsm_lvg+9
 1145 022c 9091 0000 		lds r25,fsm_lvg+9+1
 1146 0230 0E94 0000 		call spinning
 1147               	.LBB226:
 1148               	.LBB227:
 1149               	.LBB228:
 1150               	.LBB229:
 1151               	.LBB230:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1152               		.loc 2 437 0
 1153               	/* #APP */
 1154               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1155 0234 F894      		cli
 1156               	 ;  0 "" 2
 1157               	/* #NOAPP */
 1158               	.LBE230:
 1159               	.LBE229:
 1160               	.LBE228:
 1161               	.LBB231:
 1162               	.LBB232:
 1163               		.loc 3 118 0
 1164 0236 8091 0000 		lds r24,ch+19
 1165 023a 9091 0000 		lds r25,ch+19+1
 1166               	.LBE232:
 1167               	.LBE231:
 1168               	.LBB233:
 1169               	.LBB234:
 1170               	.LBB235:
 1171               	.LBB236:
 1172               		.loc 2 447 0
 1173               	/* #APP */
 1174               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1175 023e 7894      		sei
 1176               	 ;  0 "" 2
 1177               	/* #NOAPP */
 1178               	.LBE236:
 1179               	.LBE235:
 1180               	.LBE234:
 1181               	.LBE233:
 1182               	.LBE227:
 1183               	.LBE226:
 413:W_M.c         ****           fsm_lvg.lvg = ESPERA_LVG;
 1184               		.loc 1 413 0
 1185 0240 9093 0000 		sts fsm_lvg+3+1,r25
 1186 0244 8093 0000 		sts fsm_lvg+3,r24
 414:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
 1187               		.loc 1 414 0
 1188 0248 89E0      		ldi r24,lo8(9)
 1189 024a 8093 0000 		sts fsm_lvg,r24
 415:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");
 1190               		.loc 1 415 0
 1191 024e 80E0      		ldi r24,lo8(.LC19)
 1192 0250 90E0      		ldi r25,hi8(.LC19)
 1193 0252 9F93      		push r25
 1194               	.LCFI76:
 1195               		.cfi_def_cfa_offset 25
 1196 0254 8F93      		push r24
 1197               	.LCFI77:
 1198               		.cfi_def_cfa_offset 26
 1199 0256 DF93      		push r29
 1200               	.LCFI78:
 1201               		.cfi_def_cfa_offset 27
 1202 0258 CF93      		push r28
 1203               	.LCFI79:
 1204               		.cfi_def_cfa_offset 28
 1205 025a 0E94 0000 		call chprintf
 418:W_M.c         **** 
 1206               		.loc 1 418 0
 1207 025e 8DB7      		in r24,__SP_L__
 1208 0260 9EB7      		in r25,__SP_H__
 1209 0262 0896      		adiw r24,8
 1210 0264 0FB6      		in __tmp_reg__,__SREG__
 1211 0266 F894      		cli
 1212 0268 9EBF      		out __SP_H__,r25
 1213 026a 0FBE      		out __SREG__,__tmp_reg__
 1214 026c 8DBF      		out __SP_L__,r24
 1215               	.LCFI80:
 1216               		.cfi_def_cfa_offset 20
 1217 026e 00C0      		rjmp .L21
 1218               	.L25:
 284:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 1219               		.loc 1 284 0
 1220 0270 80E0      		ldi r24,lo8(.LC6)
 1221 0272 90E0      		ldi r25,hi8(.LC6)
 1222 0274 9F93      		push r25
 1223               	.LCFI81:
 1224               		.cfi_def_cfa_offset 21
 1225 0276 8F93      		push r24
 1226               	.LCFI82:
 1227               		.cfi_def_cfa_offset 22
 1228 0278 C0E0      		ldi r28,lo8(SD1)
 1229 027a D0E0      		ldi r29,hi8(SD1)
 1230 027c DF93      		push r29
 1231               	.LCFI83:
 1232               		.cfi_def_cfa_offset 23
 1233 027e CF93      		push r28
 1234               	.LCFI84:
 1235               		.cfi_def_cfa_offset 24
 1236 0280 0E94 0000 		call chprintf
 285:W_M.c         ****       // scanf("%d", &fsm_prd.select_init);
 1237               		.loc 1 285 0
 1238 0284 80E0      		ldi r24,lo8(.LC7)
 1239 0286 90E0      		ldi r25,hi8(.LC7)
 1240 0288 9F93      		push r25
 1241               	.LCFI85:
 1242               		.cfi_def_cfa_offset 25
 1243 028a 8F93      		push r24
 1244               	.LCFI86:
 1245               		.cfi_def_cfa_offset 26
 1246 028c DF93      		push r29
 1247               	.LCFI87:
 1248               		.cfi_def_cfa_offset 27
 1249 028e CF93      		push r28
 1250               	.LCFI88:
 1251               		.cfi_def_cfa_offset 28
 1252 0290 0E94 0000 		call chprintf
 1253 0294 8DB7      		in r24,__SP_L__
 1254 0296 9EB7      		in r25,__SP_H__
 1255 0298 0896      		adiw r24,8
 1256 029a 0FB6      		in __tmp_reg__,__SREG__
 1257 029c F894      		cli
 1258 029e 9EBF      		out __SP_H__,r25
 1259 02a0 0FBE      		out __SREG__,__tmp_reg__
 1260 02a2 8DBF      		out __SP_L__,r24
 1261               	.LCFI89:
 1262               		.cfi_def_cfa_offset 20
 332:W_M.c         ****           fsm_prd.select_init = 0;
 1263               		.loc 1 332 0
 1264 02a4 80E0      		ldi r24,lo8(.LC7)
 1265 02a6 682E      		mov r6,r24
 1266 02a8 80E0      		ldi r24,hi8(.LC7)
 1267 02aa 782E      		mov r7,r24
 1268               	.LBB237:
 1269               	.LBB238:
 149:W_M.c         **** }
 1270               		.loc 1 149 0
 1271 02ac 90EA      		ldi r25,lo8(-96)
 1272 02ae 492E      		mov r4,r25
 1273 02b0 9FE0      		ldi r25,lo8(15)
 1274 02b2 592E      		mov r5,r25
 1275               	.LBE238:
 1276               	.LBE237:
 324:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
 1277               		.loc 1 324 0
 1278 02b4 23E0      		ldi r18,lo8(3)
 1279 02b6 222E      		mov r2,r18
 1280 02b8 312C      		mov r3,__zero_reg__
 1281               	.LBB251:
 1282               	.LBB252:
 125:W_M.c         **** }
 1283               		.loc 1 125 0
 1284 02ba 00ED      		ldi r16,lo8(-48)
 1285 02bc 17E0      		ldi r17,lo8(7)
 1286               	.LBE252:
 1287               	.LBE251:
 1288               	.LBB254:
 1289               	.LBB255:
 132:W_M.c         ****   st->t_giros = 2400;
 1290               		.loc 1 132 0
 1291 02be 38EE      		ldi r19,lo8(-24)
 1292 02c0 A32E      		mov r10,r19
 1293 02c2 33E0      		ldi r19,lo8(3)
 1294 02c4 B32E      		mov r11,r19
 133:W_M.c         ****   st->instante = chVTGetSystemTime();
 1295               		.loc 1 133 0
 1296 02c6 40E6      		ldi r20,lo8(96)
 1297 02c8 C42E      		mov r12,r20
 1298 02ca 49E0      		ldi r20,lo8(9)
 1299 02cc D42E      		mov r13,r20
 1300               	.LBE255:
 1301               	.LBE254:
 304:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 1302               		.loc 1 304 0
 1303 02ce EE24      		clr r14
 1304 02d0 E394      		inc r14
 1305 02d2 F12C      		mov r15,__zero_reg__
 305:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 1306               		.loc 1 305 0
 1307 02d4 60E0      		ldi r22,lo8(.LC8)
 1308 02d6 862E      		mov r8,r22
 1309 02d8 60E0      		ldi r22,hi8(.LC8)
 1310 02da 962E      		mov r9,r22
 1311 02dc 00C0      		rjmp .L40
 1312               	.L85:
 289:W_M.c         ****           palSetPad(IOPORT2, MOLHO_ID);
 1313               		.loc 1 289 0
 1314 02de 5F9A      		sbi 0xb,7
 290:W_M.c         ****           palSetPad(IOPORT2, LAVAGEM_ID);
 1315               		.loc 1 290 0
 1316 02e0 289A      		sbi 0x5,0
 291:W_M.c         ****           palSetPad(IOPORT2, ENXAGUE_ID);
 1317               		.loc 1 291 0
 1318 02e2 299A      		sbi 0x5,1
 292:W_M.c         ****           palSetPad(IOPORT2, CENTRI_ID);
 1319               		.loc 1 292 0
 1320 02e4 2A9A      		sbi 0x5,2
 293:W_M.c         ****           lavar = MOLHO;
 1321               		.loc 1 293 0
 1322 02e6 2B9A      		sbi 0x5,3
 294:W_M.c         ****           fsm_molho_init(&fsm_ml);
 1323               		.loc 1 294 0
 1324 02e8 81E0      		ldi r24,lo8(1)
 1325 02ea 8093 0000 		sts lavar,r24
 1326               	.LBB268:
 1327               	.LBB253:
 124:W_M.c         ****   st->t_giro = 2000;
 1328               		.loc 1 124 0
 1329 02ee 86E0      		ldi r24,lo8(6)
 1330 02f0 8093 0000 		sts fsm_ml,r24
 125:W_M.c         **** }
 1331               		.loc 1 125 0
 1332 02f4 1093 0000 		sts fsm_ml+1+1,r17
 1333 02f8 0093 0000 		sts fsm_ml+1,r16
 1334               	.LBE253:
 1335               	.LBE268:
 298:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1336               		.loc 1 298 0
 1337 02fc 4E99      		sbic 0x9,6
 1338 02fe 00C0      		rjmp .L83
 1339               	.L37:
 335:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1340               		.loc 1 335 0
 1341 0300 4D99      		sbic 0x9,5
 1342 0302 00C0      		rjmp .L84
 1343               	.L40:
 288:W_M.c         ****           palSetPad(IOPORT4, PARADA_ID);
 1344               		.loc 1 288 0
 1345 0304 8091 0000 		lds r24,fsm_prd
 1346 0308 9091 0000 		lds r25,fsm_prd+1
 1347 030c 0097      		sbiw r24,0
 1348 030e 01F0      		breq .L85
 1349               	.L30:
 309:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1350               		.loc 1 309 0
 1351 0310 8130      		cpi r24,1
 1352 0312 9105      		cpc r25,__zero_reg__
 1353 0314 01F4      		brne .+2
 1354 0316 00C0      		rjmp .L86
 1355               	.L33:
 319:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1356               		.loc 1 319 0
 1357 0318 8230      		cpi r24,2
 1358 031a 9105      		cpc r25,__zero_reg__
 1359 031c 01F4      		brne .L35
 319:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1360               		.loc 1 319 0 is_stmt 0 discriminator 1
 1361 031e 4E9B      		sbis 0x9,6
 1362 0320 00C0      		rjmp .L37
 320:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1363               		.loc 1 320 0 is_stmt 1
 1364 0322 89E3      		ldi r24,lo8(57)
 1365 0324 91E0      		ldi r25,lo8(1)
 1366 0326 0E94 0000 		call chThdSleep
 1367               	.L38:
 321:W_M.c         ****           lavar = CENTRIFUGA;
 1368               		.loc 1 321 0 discriminator 1
 1369 032a 4E99      		sbic 0x9,6
 1370 032c 00C0      		rjmp .L38
 322:W_M.c         ****           fsm_centrifuga_init(&fsm_cen);
 1371               		.loc 1 322 0
 1372 032e 84E0      		ldi r24,lo8(4)
 1373 0330 8093 0000 		sts lavar,r24
 1374               	.LBB269:
 1375               	.LBB250:
 146:W_M.c         ****   st->tempo = chVTGetSystemTime();
 1376               		.loc 1 146 0
 1377 0334 8EE0      		ldi r24,lo8(14)
 1378 0336 8093 0000 		sts fsm_cen,r24
 1379               	.LBB239:
 1380               	.LBB240:
 1381               	.LBB241:
 1382               	.LBB242:
 1383               	.LBB243:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1384               		.loc 2 437 0
 1385               	/* #APP */
 1386               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1387 033a F894      		cli
 1388               	 ;  0 "" 2
 1389               	/* #NOAPP */
 1390               	.LBE243:
 1391               	.LBE242:
 1392               	.LBE241:
 1393               	.LBB244:
 1394               	.LBB245:
 1395               		.loc 3 118 0
 1396 033c 8091 0000 		lds r24,ch+19
 1397 0340 9091 0000 		lds r25,ch+19+1
 1398               	.LBE245:
 1399               	.LBE244:
 1400               	.LBB246:
 1401               	.LBB247:
 1402               	.LBB248:
 1403               	.LBB249:
 1404               		.loc 2 447 0
 1405               	/* #APP */
 1406               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1407 0344 7894      		sei
 1408               	 ;  0 "" 2
 1409               	/* #NOAPP */
 1410               	.LBE249:
 1411               	.LBE248:
 1412               	.LBE247:
 1413               	.LBE246:
 1414               	.LBE240:
 1415               	.LBE239:
 147:W_M.c         ****   st->ul_centri = st->tempo;
 1416               		.loc 1 147 0
 1417 0346 9093 0000 		sts fsm_cen+1+1,r25
 1418 034a 8093 0000 		sts fsm_cen+1,r24
 148:W_M.c         ****   st->t_centri = 4000;
 1419               		.loc 1 148 0
 1420 034e 9093 0000 		sts fsm_cen+3+1,r25
 1421 0352 8093 0000 		sts fsm_cen+3,r24
 149:W_M.c         **** }
 1422               		.loc 1 149 0
 1423 0356 5092 0000 		sts fsm_cen+5+1,r5
 1424 035a 4092 0000 		sts fsm_cen+5,r4
 1425               	.LBE250:
 1426               	.LBE269:
 324:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
 1427               		.loc 1 324 0
 1428 035e 3092 0000 		sts fsm_prd+1,r3
 1429 0362 2092 0000 		sts fsm_prd,r2
 325:W_M.c         ****           palClearPad(IOPORT2, ENXAGUE_ID);
 1430               		.loc 1 325 0
 1431 0366 80E0      		ldi r24,lo8(.LC10)
 1432 0368 90E0      		ldi r25,hi8(.LC10)
 1433 036a 9F93      		push r25
 1434               	.LCFI90:
 1435               		.cfi_def_cfa_offset 21
 1436 036c 8F93      		push r24
 1437               	.LCFI91:
 1438               		.cfi_def_cfa_offset 22
 1439 036e DF93      		push r29
 1440               	.LCFI92:
 1441               		.cfi_def_cfa_offset 23
 1442 0370 CF93      		push r28
 1443               	.LCFI93:
 1444               		.cfi_def_cfa_offset 24
 1445 0372 0E94 0000 		call chprintf
 326:W_M.c         ****           // printf("Inicio ENXAGUE\n");
 1446               		.loc 1 326 0
 1447 0376 2A98      		cbi 0x5,2
 1448 0378 8091 0000 		lds r24,fsm_prd
 1449 037c 9091 0000 		lds r25,fsm_prd+1
 1450 0380 0F90      		pop __tmp_reg__
 1451 0382 0F90      		pop __tmp_reg__
 1452 0384 0F90      		pop __tmp_reg__
 1453 0386 0F90      		pop __tmp_reg__
 1454               	.LCFI94:
 1455               		.cfi_def_cfa_offset 20
 1456               	.L35:
 329:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1457               		.loc 1 329 0
 1458 0388 0397      		sbiw r24,3
 1459 038a 01F0      		breq .+2
 1460 038c 00C0      		rjmp .L37
 329:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1461               		.loc 1 329 0 is_stmt 0 discriminator 1
 1462 038e 4E9B      		sbis 0x9,6
 1463 0390 00C0      		rjmp .L37
 330:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1464               		.loc 1 330 0 is_stmt 1
 1465 0392 89E3      		ldi r24,lo8(57)
 1466 0394 91E0      		ldi r25,lo8(1)
 1467 0396 0E94 0000 		call chThdSleep
 1468               	.L39:
 331:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 1469               		.loc 1 331 0 discriminator 1
 1470 039a 4E99      		sbic 0x9,6
 1471 039c 00C0      		rjmp .L39
 332:W_M.c         ****           fsm_prd.select_init = 0;
 1472               		.loc 1 332 0
 1473 039e 7F92      		push r7
 1474               	.LCFI95:
 1475               		.cfi_def_cfa_offset 21
 1476 03a0 6F92      		push r6
 1477               	.LCFI96:
 1478               		.cfi_def_cfa_offset 22
 1479 03a2 DF93      		push r29
 1480               	.LCFI97:
 1481               		.cfi_def_cfa_offset 23
 1482 03a4 CF93      		push r28
 1483               	.LCFI98:
 1484               		.cfi_def_cfa_offset 24
 1485 03a6 0E94 0000 		call chprintf
 333:W_M.c         ****         }
 1486               		.loc 1 333 0
 1487 03aa 1092 0000 		sts fsm_prd+1,__zero_reg__
 1488 03ae 1092 0000 		sts fsm_prd,__zero_reg__
 1489 03b2 0F90      		pop __tmp_reg__
 1490 03b4 0F90      		pop __tmp_reg__
 1491 03b6 0F90      		pop __tmp_reg__
 1492 03b8 0F90      		pop __tmp_reg__
 1493               	.LCFI99:
 1494               		.cfi_def_cfa_offset 20
 1495 03ba 00C0      		rjmp .L37
 1496               	.L86:
 309:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1497               		.loc 1 309 0 discriminator 1
 1498 03bc 4E9B      		sbis 0x9,6
 1499 03be 00C0      		rjmp .L37
 310:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1500               		.loc 1 310 0
 1501 03c0 89E3      		ldi r24,lo8(57)
 1502 03c2 91E0      		ldi r25,lo8(1)
 1503 03c4 0E94 0000 		call chThdSleep
 1504               	.L34:
 311:W_M.c         ****           lavar = ENXAGUE;
 1505               		.loc 1 311 0 discriminator 1
 1506 03c8 4E99      		sbic 0x9,6
 1507 03ca 00C0      		rjmp .L34
 312:W_M.c         ****           fsm_enxague_init(&fsm_exg);
 1508               		.loc 1 312 0
 1509 03cc 83E0      		ldi r24,lo8(3)
 1510 03ce 8093 0000 		sts lavar,r24
 1511               	.LBB270:
 1512               	.LBB271:
 140:W_M.c         ****   st->t_giro = 3000;
 1513               		.loc 1 140 0
 1514 03d2 8BE0      		ldi r24,lo8(11)
 1515 03d4 8093 0000 		sts fsm_exg,r24
 141:W_M.c         **** }
 1516               		.loc 1 141 0
 1517 03d8 88EB      		ldi r24,lo8(-72)
 1518 03da 9BE0      		ldi r25,lo8(11)
 1519 03dc 9093 0000 		sts fsm_exg+1+1,r25
 1520 03e0 8093 0000 		sts fsm_exg+1,r24
 1521               	.LBE271:
 1522               	.LBE270:
 314:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
 1523               		.loc 1 314 0
 1524 03e4 82E0      		ldi r24,lo8(2)
 1525 03e6 90E0      		ldi r25,0
 1526 03e8 9093 0000 		sts fsm_prd+1,r25
 1527 03ec 8093 0000 		sts fsm_prd,r24
 315:W_M.c         ****           palClearPad(IOPORT2, LAVAGEM_ID);
 1528               		.loc 1 315 0
 1529 03f0 80E0      		ldi r24,lo8(.LC9)
 1530 03f2 90E0      		ldi r25,hi8(.LC9)
 1531 03f4 9F93      		push r25
 1532               	.LCFI100:
 1533               		.cfi_def_cfa_offset 21
 1534 03f6 8F93      		push r24
 1535               	.LCFI101:
 1536               		.cfi_def_cfa_offset 22
 1537 03f8 DF93      		push r29
 1538               	.LCFI102:
 1539               		.cfi_def_cfa_offset 23
 1540 03fa CF93      		push r28
 1541               	.LCFI103:
 1542               		.cfi_def_cfa_offset 24
 1543 03fc 0E94 0000 		call chprintf
 316:W_M.c         **** 
 1544               		.loc 1 316 0
 1545 0400 2998      		cbi 0x5,1
 1546 0402 8091 0000 		lds r24,fsm_prd
 1547 0406 9091 0000 		lds r25,fsm_prd+1
 1548 040a 0F90      		pop __tmp_reg__
 1549 040c 0F90      		pop __tmp_reg__
 1550 040e 0F90      		pop __tmp_reg__
 1551 0410 0F90      		pop __tmp_reg__
 1552               	.LCFI104:
 1553               		.cfi_def_cfa_offset 20
 1554 0412 00C0      		rjmp .L33
 1555               	.L83:
 299:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1556               		.loc 1 299 0
 1557 0414 89E3      		ldi r24,lo8(57)
 1558 0416 91E0      		ldi r25,lo8(1)
 1559 0418 0E94 0000 		call chThdSleep
 1560               	.L32:
 300:W_M.c         ****           // printf("Inicio MOLHO\n");
 1561               		.loc 1 300 0 discriminator 1
 1562 041c 4E99      		sbic 0x9,6
 1563 041e 00C0      		rjmp .L32
 302:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 1564               		.loc 1 302 0
 1565 0420 82E0      		ldi r24,lo8(2)
 1566 0422 8093 0000 		sts lavar,r24
 1567               	.LBB272:
 1568               	.LBB267:
 130:W_M.c         ****   st->turns = 0;
 1569               		.loc 1 130 0
 1570 0426 88E0      		ldi r24,lo8(8)
 1571 0428 8093 0000 		sts fsm_lvg,r24
 131:W_M.c         ****   st->t_espera = 1000;
 1572               		.loc 1 131 0
 1573 042c 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 1574 0430 1092 0000 		sts fsm_lvg+5,__zero_reg__
 132:W_M.c         ****   st->t_giros = 2400;
 1575               		.loc 1 132 0
 1576 0434 B092 0000 		sts fsm_lvg+7+1,r11
 1577 0438 A092 0000 		sts fsm_lvg+7,r10
 133:W_M.c         ****   st->instante = chVTGetSystemTime();
 1578               		.loc 1 133 0
 1579 043c D092 0000 		sts fsm_lvg+9+1,r13
 1580 0440 C092 0000 		sts fsm_lvg+9,r12
 1581               	.LBB256:
 1582               	.LBB257:
 1583               	.LBB258:
 1584               	.LBB259:
 1585               	.LBB260:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1586               		.loc 2 437 0
 1587               	/* #APP */
 1588               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1589 0444 F894      		cli
 1590               	 ;  0 "" 2
 1591               	/* #NOAPP */
 1592               	.LBE260:
 1593               	.LBE259:
 1594               	.LBE258:
 1595               	.LBB261:
 1596               	.LBB262:
 1597               		.loc 3 118 0
 1598 0446 8091 0000 		lds r24,ch+19
 1599 044a 9091 0000 		lds r25,ch+19+1
 1600               	.LBE262:
 1601               	.LBE261:
 1602               	.LBB263:
 1603               	.LBB264:
 1604               	.LBB265:
 1605               	.LBB266:
 1606               		.loc 2 447 0
 1607               	/* #APP */
 1608               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1609 044e 7894      		sei
 1610               	 ;  0 "" 2
 1611               	/* #NOAPP */
 1612               	.LBE266:
 1613               	.LBE265:
 1614               	.LBE264:
 1615               	.LBE263:
 1616               	.LBE257:
 1617               	.LBE256:
 134:W_M.c         ****   st->ul_espera = st->instante;
 1618               		.loc 1 134 0
 1619 0450 9093 0000 		sts fsm_lvg+1+1,r25
 1620 0454 8093 0000 		sts fsm_lvg+1,r24
 135:W_M.c         **** }
 1621               		.loc 1 135 0
 1622 0458 9093 0000 		sts fsm_lvg+3+1,r25
 1623 045c 8093 0000 		sts fsm_lvg+3,r24
 1624               	.LBE267:
 1625               	.LBE272:
 304:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 1626               		.loc 1 304 0
 1627 0460 F092 0000 		sts fsm_prd+1,r15
 1628 0464 E092 0000 		sts fsm_prd,r14
 305:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 1629               		.loc 1 305 0
 1630 0468 9F92      		push r9
 1631               	.LCFI105:
 1632               		.cfi_def_cfa_offset 21
 1633 046a 8F92      		push r8
 1634               	.LCFI106:
 1635               		.cfi_def_cfa_offset 22
 1636 046c DF93      		push r29
 1637               	.LCFI107:
 1638               		.cfi_def_cfa_offset 23
 1639 046e CF93      		push r28
 1640               	.LCFI108:
 1641               		.cfi_def_cfa_offset 24
 1642 0470 0E94 0000 		call chprintf
 306:W_M.c         ****         }
 1643               		.loc 1 306 0
 1644 0474 2898      		cbi 0x5,0
 1645 0476 8091 0000 		lds r24,fsm_prd
 1646 047a 9091 0000 		lds r25,fsm_prd+1
 1647 047e 0F90      		pop __tmp_reg__
 1648 0480 0F90      		pop __tmp_reg__
 1649 0482 0F90      		pop __tmp_reg__
 1650 0484 0F90      		pop __tmp_reg__
 1651               	.LCFI109:
 1652               		.cfi_def_cfa_offset 20
 1653 0486 00C0      		rjmp .L30
 1654               	.L84:
 336:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
 1655               		.loc 1 336 0
 1656 0488 89E3      		ldi r24,lo8(57)
 1657 048a 91E0      		ldi r25,lo8(1)
 1658 048c 0E94 0000 		call chThdSleep
 337:W_M.c         ****           if(fsm_prd.select_init == 0){
 1659               		.loc 1 337 0
 1660 0490 80E0      		ldi r24,lo8(.LC11)
 1661 0492 90E0      		ldi r25,hi8(.LC11)
 1662 0494 9F93      		push r25
 1663               	.LCFI110:
 1664               		.cfi_def_cfa_offset 21
 1665 0496 8F93      		push r24
 1666               	.LCFI111:
 1667               		.cfi_def_cfa_offset 22
 1668 0498 C0E0      		ldi r28,lo8(SD1)
 1669 049a D0E0      		ldi r29,hi8(SD1)
 1670 049c DF93      		push r29
 1671               	.LCFI112:
 1672               		.cfi_def_cfa_offset 23
 1673 049e CF93      		push r28
 1674               	.LCFI113:
 1675               		.cfi_def_cfa_offset 24
 1676 04a0 0E94 0000 		call chprintf
 338:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
 1677               		.loc 1 338 0
 1678 04a4 8091 0000 		lds r24,fsm_prd
 1679 04a8 9091 0000 		lds r25,fsm_prd+1
 1680 04ac 0F90      		pop __tmp_reg__
 1681 04ae 0F90      		pop __tmp_reg__
 1682 04b0 0F90      		pop __tmp_reg__
 1683 04b2 0F90      		pop __tmp_reg__
 1684               	.LCFI114:
 1685               		.cfi_def_cfa_offset 20
 1686 04b4 0097      		sbiw r24,0
 1687 04b6 01F4      		brne .+2
 1688 04b8 00C0      		rjmp .L87
 1689               	.L41:
 341:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o enxague\n\r");
 1690               		.loc 1 341 0
 1691 04ba 0297      		sbiw r24,2
 1692 04bc 01F0      		breq .+2
 1693 04be 00C0      		rjmp .L21
 342:W_M.c         ****           }
 1694               		.loc 1 342 0
 1695 04c0 80E0      		ldi r24,lo8(.LC13)
 1696 04c2 90E0      		ldi r25,hi8(.LC13)
 1697 04c4 00C0      		rjmp .L81
 1698               	.L43:
 367:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 1699               		.loc 1 367 0
 1700 04c6 2C9A      		sbi 0x5,4
 368:W_M.c         ****             // printf("Sensor Cheio\n");
 1701               		.loc 1 368 0
 1702 04c8 4C9B      		sbis 0x9,4
 1703 04ca 00C0      		rjmp .L21
 370:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 1704               		.loc 1 370 0
 1705 04cc 80E0      		ldi r24,lo8(.LC14)
 1706 04ce 90E0      		ldi r25,hi8(.LC14)
 1707 04d0 9F93      		push r25
 1708               	.LCFI115:
 1709               		.cfi_def_cfa_offset 21
 1710 04d2 8F93      		push r24
 1711               	.LCFI116:
 1712               		.cfi_def_cfa_offset 22
 1713 04d4 80E0      		ldi r24,lo8(SD1)
 1714 04d6 90E0      		ldi r25,hi8(SD1)
 1715 04d8 9F93      		push r25
 1716               	.LCFI117:
 1717               		.cfi_def_cfa_offset 23
 1718 04da 8F93      		push r24
 1719               	.LCFI118:
 1720               		.cfi_def_cfa_offset 24
 1721 04dc 0E94 0000 		call chprintf
 371:W_M.c         ****             fsm_ml.ml = RODAR_ML;
 1722               		.loc 1 371 0
 1723 04e0 2C98      		cbi 0x5,4
 372:W_M.c         ****             // printf("Início Giros Molho\n");
 1724               		.loc 1 372 0
 1725 04e2 87E0      		ldi r24,lo8(7)
 1726 04e4 8093 0000 		sts fsm_ml,r24
 1727 04e8 0F90      		pop __tmp_reg__
 1728 04ea 0F90      		pop __tmp_reg__
 1729 04ec 0F90      		pop __tmp_reg__
 1730 04ee 0F90      		pop __tmp_reg__
 1731               	.LCFI119:
 1732               		.cfi_def_cfa_offset 20
 1733 04f0 00C0      		rjmp .L21
 1734               	.L51:
 506:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 1735               		.loc 1 506 0
 1736 04f2 2D9A      		sbi 0x5,5
 507:W_M.c         ****              // printf("Sensor Vazio: ON\n");
 1737               		.loc 1 507 0
 1738 04f4 4B9B      		sbis 0x9,3
 1739 04f6 00C0      		rjmp .L21
 509:W_M.c         ****              lavar = CENTRIFUGA;
 1740               		.loc 1 509 0
 1741 04f8 2D98      		cbi 0x5,5
 510:W_M.c         ****              fsm_centrifuga_init(&fsm_cen);
 1742               		.loc 1 510 0
 1743 04fa 84E0      		ldi r24,lo8(4)
 1744 04fc 8093 0000 		sts lavar,r24
 1745               	.LBB273:
 1746               	.LBB274:
 146:W_M.c         ****   st->tempo = chVTGetSystemTime();
 1747               		.loc 1 146 0
 1748 0500 8EE0      		ldi r24,lo8(14)
 1749 0502 8093 0000 		sts fsm_cen,r24
 1750               	.LBB275:
 1751               	.LBB276:
 1752               	.LBB277:
 1753               	.LBB278:
 1754               	.LBB279:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1755               		.loc 2 437 0
 1756               	/* #APP */
 1757               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1758 0506 F894      		cli
 1759               	 ;  0 "" 2
 1760               	/* #NOAPP */
 1761               	.LBE279:
 1762               	.LBE278:
 1763               	.LBE277:
 1764               	.LBB280:
 1765               	.LBB281:
 1766               		.loc 3 118 0
 1767 0508 8091 0000 		lds r24,ch+19
 1768 050c 9091 0000 		lds r25,ch+19+1
 1769               	.LBE281:
 1770               	.LBE280:
 1771               	.LBB282:
 1772               	.LBB283:
 1773               	.LBB284:
 1774               	.LBB285:
 1775               		.loc 2 447 0
 1776               	/* #APP */
 1777               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1778 0510 7894      		sei
 1779               	 ;  0 "" 2
 1780               	/* #NOAPP */
 1781               	.LBE285:
 1782               	.LBE284:
 1783               	.LBE283:
 1784               	.LBE282:
 1785               	.LBE276:
 1786               	.LBE275:
 147:W_M.c         ****   st->ul_centri = st->tempo;
 1787               		.loc 1 147 0
 1788 0512 9093 0000 		sts fsm_cen+1+1,r25
 1789 0516 8093 0000 		sts fsm_cen+1,r24
 148:W_M.c         ****   st->t_centri = 4000;
 1790               		.loc 1 148 0
 1791 051a 9093 0000 		sts fsm_cen+3+1,r25
 1792 051e 8093 0000 		sts fsm_cen+3,r24
 149:W_M.c         **** }
 1793               		.loc 1 149 0
 1794 0522 80EA      		ldi r24,lo8(-96)
 1795 0524 9FE0      		ldi r25,lo8(15)
 1796 0526 9093 0000 		sts fsm_cen+5+1,r25
 1797 052a 8093 0000 		sts fsm_cen+5,r24
 1798               	.LBE274:
 1799               	.LBE273:
 512:W_M.c         ****              // printf("Fim Enxágue\n");
 1800               		.loc 1 512 0
 1801 052e 80E0      		ldi r24,lo8(.LC26)
 1802 0530 90E0      		ldi r25,hi8(.LC26)
 1803 0532 9F93      		push r25
 1804               	.LCFI120:
 1805               		.cfi_def_cfa_offset 21
 1806 0534 8F93      		push r24
 1807               	.LCFI121:
 1808               		.cfi_def_cfa_offset 22
 1809 0536 C0E0      		ldi r28,lo8(SD1)
 1810 0538 D0E0      		ldi r29,hi8(SD1)
 1811 053a DF93      		push r29
 1812               	.LCFI122:
 1813               		.cfi_def_cfa_offset 23
 1814 053c CF93      		push r28
 1815               	.LCFI123:
 1816               		.cfi_def_cfa_offset 24
 1817 053e 0E94 0000 		call chprintf
 514:W_M.c         ****              // printf("Inicio CENTRIFUGA\n");
 1818               		.loc 1 514 0
 1819 0542 2A98      		cbi 0x5,2
 516:W_M.c         ****           }// fim "if" sensor vazio
 1820               		.loc 1 516 0
 1821 0544 80E0      		ldi r24,lo8(.LC27)
 1822 0546 90E0      		ldi r25,hi8(.LC27)
 1823 0548 9F93      		push r25
 1824               	.LCFI124:
 1825               		.cfi_def_cfa_offset 25
 1826 054a 8F93      		push r24
 1827               	.LCFI125:
 1828               		.cfi_def_cfa_offset 26
 1829 054c DF93      		push r29
 1830               	.LCFI126:
 1831               		.cfi_def_cfa_offset 27
 1832 054e CF93      		push r28
 1833               	.LCFI127:
 1834               		.cfi_def_cfa_offset 28
 1835 0550 0E94 0000 		call chprintf
 1836 0554 8DB7      		in r24,__SP_L__
 1837 0556 9EB7      		in r25,__SP_H__
 1838 0558 0896      		adiw r24,8
 1839 055a 0FB6      		in __tmp_reg__,__SREG__
 1840 055c F894      		cli
 1841 055e 9EBF      		out __SP_H__,r25
 1842 0560 0FBE      		out __SREG__,__tmp_reg__
 1843 0562 8DBF      		out __SP_L__,r24
 1844               	.LCFI128:
 1845               		.cfi_def_cfa_offset 20
 1846 0564 00C0      		rjmp .L21
 1847               	.L47:
 445:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
 1848               		.loc 1 445 0
 1849 0566 2D9A      		sbi 0x5,5
 447:W_M.c         ****             // printf("Sensor Vazio: ON\n");
 1850               		.loc 1 447 0
 1851 0568 4B9B      		sbis 0x9,3
 1852 056a 00C0      		rjmp .L21
 449:W_M.c         ****             // printf("Fim LAVAGEM\n");
 1853               		.loc 1 449 0
 1854 056c 2D98      		cbi 0x5,5
 451:W_M.c         ****             palClearPad(IOPORT2, LAVAGEM_ID);
 1855               		.loc 1 451 0
 1856 056e 80E0      		ldi r24,lo8(.LC21)
 1857 0570 90E0      		ldi r25,hi8(.LC21)
 1858 0572 9F93      		push r25
 1859               	.LCFI129:
 1860               		.cfi_def_cfa_offset 21
 1861 0574 8F93      		push r24
 1862               	.LCFI130:
 1863               		.cfi_def_cfa_offset 22
 1864 0576 C0E0      		ldi r28,lo8(SD1)
 1865 0578 D0E0      		ldi r29,hi8(SD1)
 1866 057a DF93      		push r29
 1867               	.LCFI131:
 1868               		.cfi_def_cfa_offset 23
 1869 057c CF93      		push r28
 1870               	.LCFI132:
 1871               		.cfi_def_cfa_offset 24
 1872 057e 0E94 0000 		call chprintf
 452:W_M.c         **** 
 1873               		.loc 1 452 0
 1874 0582 2998      		cbi 0x5,1
 455:W_M.c         ****               lavar = ENXAGUE;
 1875               		.loc 1 455 0
 1876 0584 80E0      		ldi r24,lo8(.LC22)
 1877 0586 90E0      		ldi r25,hi8(.LC22)
 1878 0588 9F93      		push r25
 1879               	.LCFI133:
 1880               		.cfi_def_cfa_offset 25
 1881 058a 8F93      		push r24
 1882               	.LCFI134:
 1883               		.cfi_def_cfa_offset 26
 1884 058c DF93      		push r29
 1885               	.LCFI135:
 1886               		.cfi_def_cfa_offset 27
 1887 058e CF93      		push r28
 1888               	.LCFI136:
 1889               		.cfi_def_cfa_offset 28
 1890 0590 0E94 0000 		call chprintf
 456:W_M.c         **** 
 1891               		.loc 1 456 0
 1892 0594 83E0      		ldi r24,lo8(3)
 1893 0596 8093 0000 		sts lavar,r24
 1894               	.LBB286:
 1895               	.LBB287:
 140:W_M.c         ****   st->t_giro = 3000;
 1896               		.loc 1 140 0
 1897 059a 8BE0      		ldi r24,lo8(11)
 1898 059c 8093 0000 		sts fsm_exg,r24
 141:W_M.c         **** }
 1899               		.loc 1 141 0
 1900 05a0 88EB      		ldi r24,lo8(-72)
 1901 05a2 9BE0      		ldi r25,lo8(11)
 1902 05a4 9093 0000 		sts fsm_exg+1+1,r25
 1903 05a8 8093 0000 		sts fsm_exg+1,r24
 1904               	.LBE287:
 1905               	.LBE286:
 459:W_M.c         ****             } // fim "if" sensor vazio
 1906               		.loc 1 459 0
 1907 05ac 80E0      		ldi r24,lo8(.LC23)
 1908 05ae 90E0      		ldi r25,hi8(.LC23)
 1909 05b0 9F93      		push r25
 1910               	.LCFI137:
 1911               		.cfi_def_cfa_offset 29
 1912 05b2 8F93      		push r24
 1913               	.LCFI138:
 1914               		.cfi_def_cfa_offset 30
 1915 05b4 DF93      		push r29
 1916               	.LCFI139:
 1917               		.cfi_def_cfa_offset 31
 1918 05b6 CF93      		push r28
 1919               	.LCFI140:
 1920               		.cfi_def_cfa_offset 32
 1921 05b8 0E94 0000 		call chprintf
 1922 05bc 8DB7      		in r24,__SP_L__
 1923 05be 9EB7      		in r25,__SP_H__
 1924 05c0 0C96      		adiw r24,12
 1925 05c2 0FB6      		in __tmp_reg__,__SREG__
 1926 05c4 F894      		cli
 1927 05c6 9EBF      		out __SP_H__,r25
 1928 05c8 0FBE      		out __SREG__,__tmp_reg__
 1929 05ca 8DBF      		out __SP_L__,r24
 1930               	.LCFI141:
 1931               		.cfi_def_cfa_offset 20
 1932 05cc 00C0      		rjmp .L21
 1933               	.L46:
 1934               	.LBB288:
 1935               	.LBB289:
 1936               	.LBB290:
 1937               	.LBB291:
 1938               	.LBB292:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1939               		.loc 2 437 0
 1940               	/* #APP */
 1941               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1942 05ce F894      		cli
 1943               	 ;  0 "" 2
 1944               	/* #NOAPP */
 1945               	.LBE292:
 1946               	.LBE291:
 1947               	.LBE290:
 1948               	.LBB293:
 1949               	.LBB294:
 1950               		.loc 3 118 0
 1951 05d0 8091 0000 		lds r24,ch+19
 1952 05d4 9091 0000 		lds r25,ch+19+1
 1953               	.LBE294:
 1954               	.LBE293:
 1955               	.LBB295:
 1956               	.LBB296:
 1957               	.LBB297:
 1958               	.LBB298:
 1959               		.loc 2 447 0
 1960               	/* #APP */
 1961               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1962 05d8 7894      		sei
 1963               	 ;  0 "" 2
 1964               	/* #NOAPP */
 1965               	.LBE298:
 1966               	.LBE297:
 1967               	.LBE296:
 1968               	.LBE295:
 1969               	.LBE289:
 1970               	.LBE288:
 424:W_M.c         ****           if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
 1971               		.loc 1 424 0
 1972 05da 9093 0000 		sts fsm_lvg+1+1,r25
 1973 05de 8093 0000 		sts fsm_lvg+1,r24
 425:W_M.c         ****             fsm_lvg.ul_espera = chVTGetSystemTime();
 1974               		.loc 1 425 0
 1975 05e2 A091 0000 		lds r26,fsm_lvg+7
 1976 05e6 B091 0000 		lds r27,fsm_lvg+7+1
 1977 05ea 2091 0000 		lds r18,fsm_lvg+3
 1978 05ee 3091 0000 		lds r19,fsm_lvg+3+1
 1979 05f2 EC01      		movw r28,r24
 1980 05f4 C21B      		sub r28,r18
 1981 05f6 D30B      		sbc r29,r19
 1982 05f8 28E0      		ldi r18,lo8(8)
 1983 05fa 3DE3      		ldi r19,lo8(61)
 1984 05fc 0E94 0000 		call __usmulhisi3
 1985 0600 6951      		subi r22,25
 1986 0602 7C4F      		sbci r23,-4
 1987 0604 8F4F      		sbci r24,-1
 1988 0606 9F4F      		sbci r25,-1
 1989 0608 28EE      		ldi r18,lo8(-24)
 1990 060a 33E0      		ldi r19,lo8(3)
 1991 060c 40E0      		ldi r20,0
 1992 060e 50E0      		ldi r21,0
 1993 0610 0E94 0000 		call __udivmodsi4
 1994 0614 2C17      		cp r18,r28
 1995 0616 3D07      		cpc r19,r29
 1996 0618 00F0      		brlo .+2
 1997 061a 00C0      		rjmp .L21
 1998               	.LBB299:
 1999               	.LBB300:
 2000               	.LBB301:
 2001               	.LBB302:
 2002               	.LBB303:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2003               		.loc 2 437 0
 2004               	/* #APP */
 2005               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2006 061c F894      		cli
 2007               	 ;  0 "" 2
 2008               	/* #NOAPP */
 2009               	.LBE303:
 2010               	.LBE302:
 2011               	.LBE301:
 2012               	.LBB304:
 2013               	.LBB305:
 2014               		.loc 3 118 0
 2015 061e 8091 0000 		lds r24,ch+19
 2016 0622 9091 0000 		lds r25,ch+19+1
 2017               	.LBE305:
 2018               	.LBE304:
 2019               	.LBB306:
 2020               	.LBB307:
 2021               	.LBB308:
 2022               	.LBB309:
 2023               		.loc 2 447 0
 2024               	/* #APP */
 2025               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2026 0626 7894      		sei
 2027               	 ;  0 "" 2
 2028               	/* #NOAPP */
 2029               	.LBE309:
 2030               	.LBE308:
 2031               	.LBE307:
 2032               	.LBE306:
 2033               	.LBE300:
 2034               	.LBE299:
 426:W_M.c         ****             if(fsm_lvg.turns >= 3){
 2035               		.loc 1 426 0
 2036 0628 9093 0000 		sts fsm_lvg+3+1,r25
 2037 062c 8093 0000 		sts fsm_lvg+3,r24
 427:W_M.c         ****               fsm_lvg.turns = 0;
 2038               		.loc 1 427 0
 2039 0630 8091 0000 		lds r24,fsm_lvg+5
 2040 0634 9091 0000 		lds r25,fsm_lvg+5+1
 2041 0638 8330      		cpi r24,3
 2042 063a 9105      		cpc r25,__zero_reg__
 2043 063c 04F4      		brge .L88
 434:W_M.c         ****               fsm_lvg.lvg = RODAR_LVG;
 2044               		.loc 1 434 0
 2045 063e 0196      		adiw r24,1
 2046 0640 9093 0000 		sts fsm_lvg+5+1,r25
 2047 0644 8093 0000 		sts fsm_lvg+5,r24
 435:W_M.c         ****             } // fim if voltas
 2048               		.loc 1 435 0
 2049 0648 88E0      		ldi r24,lo8(8)
 2050 064a 8093 0000 		sts fsm_lvg,r24
 2051 064e 00C0      		rjmp .L21
 2052               	.L87:
 339:W_M.c         ****           }
 2053               		.loc 1 339 0
 2054 0650 80E0      		ldi r24,lo8(.LC12)
 2055 0652 90E0      		ldi r25,hi8(.LC12)
 2056 0654 9F93      		push r25
 2057               	.LCFI142:
 2058               		.cfi_def_cfa_offset 21
 2059 0656 8F93      		push r24
 2060               	.LCFI143:
 2061               		.cfi_def_cfa_offset 22
 2062 0658 DF93      		push r29
 2063               	.LCFI144:
 2064               		.cfi_def_cfa_offset 23
 2065 065a CF93      		push r28
 2066               	.LCFI145:
 2067               		.cfi_def_cfa_offset 24
 2068 065c 0E94 0000 		call chprintf
 2069 0660 8091 0000 		lds r24,fsm_prd
 2070 0664 9091 0000 		lds r25,fsm_prd+1
 2071 0668 0F90      		pop __tmp_reg__
 2072 066a 0F90      		pop __tmp_reg__
 2073 066c 0F90      		pop __tmp_reg__
 2074 066e 0F90      		pop __tmp_reg__
 2075               	.LCFI146:
 2076               		.cfi_def_cfa_offset 20
 2077 0670 00C0      		rjmp .L41
 2078               	.L50:
 493:W_M.c         ****           spinning(fsm_exg.t_giro);
 2079               		.loc 1 493 0
 2080 0672 80E0      		ldi r24,lo8(.LC24)
 2081 0674 90E0      		ldi r25,hi8(.LC24)
 2082 0676 9F93      		push r25
 2083               	.LCFI147:
 2084               		.cfi_def_cfa_offset 21
 2085 0678 8F93      		push r24
 2086               	.LCFI148:
 2087               		.cfi_def_cfa_offset 22
 2088 067a C0E0      		ldi r28,lo8(SD1)
 2089 067c D0E0      		ldi r29,hi8(SD1)
 2090 067e DF93      		push r29
 2091               	.LCFI149:
 2092               		.cfi_def_cfa_offset 23
 2093 0680 CF93      		push r28
 2094               	.LCFI150:
 2095               		.cfi_def_cfa_offset 24
 2096 0682 0E94 0000 		call chprintf
 494:W_M.c         ****           fsm_exg.exg = ESVAZIA_EXG;
 2097               		.loc 1 494 0
 2098 0686 8091 0000 		lds r24,fsm_exg+1
 2099 068a 9091 0000 		lds r25,fsm_exg+1+1
 2100 068e 0E94 0000 		call spinning
 495:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
 2101               		.loc 1 495 0
 2102 0692 8DE0      		ldi r24,lo8(13)
 2103 0694 8093 0000 		sts fsm_exg,r24
 496:W_M.c         **** 
 2104               		.loc 1 496 0
 2105 0698 80E0      		ldi r24,lo8(.LC25)
 2106 069a 90E0      		ldi r25,hi8(.LC25)
 2107 069c 9F93      		push r25
 2108               	.LCFI151:
 2109               		.cfi_def_cfa_offset 25
 2110 069e 8F93      		push r24
 2111               	.LCFI152:
 2112               		.cfi_def_cfa_offset 26
 2113 06a0 DF93      		push r29
 2114               	.LCFI153:
 2115               		.cfi_def_cfa_offset 27
 2116 06a2 CF93      		push r28
 2117               	.LCFI154:
 2118               		.cfi_def_cfa_offset 28
 2119 06a4 0E94 0000 		call chprintf
 498:W_M.c         **** 
 2120               		.loc 1 498 0
 2121 06a8 8DB7      		in r24,__SP_L__
 2122 06aa 9EB7      		in r25,__SP_H__
 2123 06ac 0896      		adiw r24,8
 2124 06ae 0FB6      		in __tmp_reg__,__SREG__
 2125 06b0 F894      		cli
 2126 06b2 9EBF      		out __SP_H__,r25
 2127 06b4 0FBE      		out __SREG__,__tmp_reg__
 2128 06b6 8DBF      		out __SP_L__,r24
 2129               	.LCFI155:
 2130               		.cfi_def_cfa_offset 20
 2131 06b8 00C0      		rjmp .L21
 2132               	.L88:
 428:W_M.c         ****               fsm_lvg.lvg = ESVAZIA_LVG;
 2133               		.loc 1 428 0
 2134 06ba 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 2135 06be 1092 0000 		sts fsm_lvg+5,__zero_reg__
 429:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
 2136               		.loc 1 429 0
 2137 06c2 8AE0      		ldi r24,lo8(10)
 2138 06c4 8093 0000 		sts fsm_lvg,r24
 430:W_M.c         ****               // printf("Fim giros Lavagem\n");
 2139               		.loc 1 430 0
 2140 06c8 80E0      		ldi r24,lo8(.LC20)
 2141 06ca 90E0      		ldi r25,hi8(.LC20)
 2142 06cc 00C0      		rjmp .L81
 2143               		.cfi_endproc
 2144               	.LFE176:
 2146               		.section	.rodata.str1.1
 2147               	.LC29:
 2148 0213 494E 4943 		.string	"INICIO M\303\201QUINA\n\r"
 2148      494F 204D 
 2148      C381 5155 
 2148      494E 410A 
 2148      0D00 
 2149               		.section	.text.startup.main,"ax",@progbits
 2150               	.global	main
 2152               	main:
 2153               	.LFB177:
 564:W_M.c         **** 
 565:W_M.c         **** 
 566:W_M.c         **** int main(void) {
 2154               		.loc 1 566 0
 2155               		.cfi_startproc
 2156               	/* prologue: function */
 2157               	/* frame size = 0 */
 2158               	/* stack size = 0 */
 2159               	.L__stack_usage = 0
 567:W_M.c         **** 
 568:W_M.c         ****   /* Interruption Config */
 569:W_M.c         ****   static const EXTConfig extcfg = {
 570:W_M.c         ****     {
 571:W_M.c         ****       {EXT_CH_MODE_RISING_EDGE , emergency_cb},      /* INT0 Config. */
 572:W_M.c         ****       {EXT_CH_MODE_DISABLED , NULL},      /* INT1 Config. */
 573:W_M.c         ****       {EXT_CH_MODE_DISABLED , NULL},      /* INT2 Config. */
 574:W_M.c         ****       {EXT_CH_MODE_DISABLED , NULL},      /* INT3 Config. */
 575:W_M.c         ****     }
 576:W_M.c         **** };
 577:W_M.c         **** 
 578:W_M.c         **** 
 579:W_M.c         ****   halInit();
 2160               		.loc 1 579 0
 2161 0000 0E94 0000 		call halInit
 2162               	.LVL35:
 580:W_M.c         ****   chSysInit();
 2163               		.loc 1 580 0
 2164 0004 0E94 0000 		call chSysInit
 2165               	.LVL36:
 581:W_M.c         **** 
 582:W_M.c         **** /* ChibiOS Config*/
 583:W_M.c         ****   sdStart(&SD1, 0);
 2166               		.loc 1 583 0
 2167 0008 60E0      		ldi r22,0
 2168 000a 70E0      		ldi r23,0
 2169 000c 80E0      		ldi r24,lo8(SD1)
 2170 000e 90E0      		ldi r25,hi8(SD1)
 2171 0010 0E94 0000 		call sdStart
 2172               	.LVL37:
 584:W_M.c         ****   extStart(&EXTD1, &extcfg);
 2173               		.loc 1 584 0
 2174 0014 60E0      		ldi r22,lo8(extcfg.3718)
 2175 0016 70E0      		ldi r23,hi8(extcfg.3718)
 2176 0018 80E0      		ldi r24,lo8(EXTD1)
 2177 001a 90E0      		ldi r25,hi8(EXTD1)
 2178 001c 0E94 0000 		call extStart
 2179               	.LVL38:
 585:W_M.c         ****   extChannelEnable(&EXTD1, INT0); // PD2 (4)
 2180               		.loc 1 585 0
 2181 0020 60E0      		ldi r22,0
 2182 0022 70E0      		ldi r23,0
 2183 0024 80E0      		ldi r24,lo8(EXTD1)
 2184 0026 90E0      		ldi r25,hi8(EXTD1)
 2185 0028 0E94 0000 		call extChannelEnable
 2186               	.LVL39:
 586:W_M.c         **** 
 587:W_M.c         ****   chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
 2187               		.loc 1 587 0
 2188 002c 80E0      		ldi r24,lo8(.LC29)
 2189 002e 90E0      		ldi r25,hi8(.LC29)
 2190 0030 9F93      		push r25
 2191               	.LCFI156:
 2192               		.cfi_def_cfa_offset 3
 2193 0032 8F93      		push r24
 2194               	.LCFI157:
 2195               		.cfi_def_cfa_offset 4
 2196 0034 80E0      		ldi r24,lo8(SD1)
 2197 0036 90E0      		ldi r25,hi8(SD1)
 2198 0038 9F93      		push r25
 2199               	.LCFI158:
 2200               		.cfi_def_cfa_offset 5
 2201 003a 8F93      		push r24
 2202               	.LCFI159:
 2203               		.cfi_def_cfa_offset 6
 2204 003c 0E94 0000 		call chprintf
 2205               	.LVL40:
 588:W_M.c         ****   starting();
 2206               		.loc 1 588 0
 2207 0040 0E94 0000 		call starting
 2208               	.LVL41:
 589:W_M.c         ****   lavar = PARADA;
 2209               		.loc 1 589 0
 2210 0044 1092 0000 		sts lavar,__zero_reg__
 2211               	.LVL42:
 2212               	.LBB310:
 2213               	.LBB311:
 119:W_M.c         **** }
 2214               		.loc 1 119 0
 2215 0048 1092 0000 		sts fsm_prd+1,__zero_reg__
 2216 004c 1092 0000 		sts fsm_prd,__zero_reg__
 2217 0050 0F90      		pop __tmp_reg__
 2218 0052 0F90      		pop __tmp_reg__
 2219 0054 0F90      		pop __tmp_reg__
 2220 0056 0F90      		pop __tmp_reg__
 2221               	.LCFI160:
 2222               		.cfi_def_cfa_offset 2
 2223               	.L90:
 2224               	.LBE311:
 2225               	.LBE310:
 590:W_M.c         ****   fsm_parada_init(&fsm_prd);
 591:W_M.c         **** 
 592:W_M.c         ****   while(1){
 593:W_M.c         ****     lavar_maquina();
 2226               		.loc 1 593 0 discriminator 1
 2227 0058 0E94 0000 		call lavar_maquina
 2228               	.LVL43:
 2229 005c 00C0      		rjmp .L90
 2230               		.cfi_endproc
 2231               	.LFE177:
 2233               		.section	.rodata.extcfg.3718,"a",@progbits
 2236               	extcfg.3718:
 2237 0000 01        		.byte	1
 2238 0001 00        		.byte	0
 2239 0002 00        		.byte	0
 2240 0003 00        		.byte	0
 2241 0004 0000      		.word	gs(emergency_cb)
 2242 0006 00        		.byte	0
 2243 0007 00        		.byte	0
 2244 0008 00        		.byte	0
 2245 0009 00        		.byte	0
 2246 000a 0000      		.word	0
 2247 000c 00        		.byte	0
 2248 000d 00        		.byte	0
 2249 000e 00        		.byte	0
 2250 000f 00        		.byte	0
 2251 0010 0000      		.word	0
 2252 0012 00        		.byte	0
 2253 0013 00        		.byte	0
 2254 0014 00        		.byte	0
 2255 0015 00        		.byte	0
 2256 0016 0000      		.word	0
 2257 0018 0000 0000 		.zero	12
 2257      0000 0000 
 2257      0000 0000 
 2258               		.comm	fsm_cen,7,1
 2259               		.comm	fsm_exg,3,1
 2260               		.comm	fsm_lvg,11,1
 2261               		.comm	fsm_ml,3,1
 2262               		.comm	fsm_prd,2,1
 2263               	.global	lavar
 2264               		.section	.bss.lavar,"aw",@nobits
 2267               	lavar:
 2268 0000 00        		.zero	1
 2269               		.text
 2270               	.Letext0:
 2271               		.file 4 "/usr/lib/avr/include/stdint.h"
 2272               		.file 5 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2273               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2274               		.file 7 "../../../os/rt/include/chsystypes.h"
 2275               		.file 8 "../../../os/rt/include/chschd.h"
 2276               		.file 9 "../../../os/rt/include/chtime.h"
 2277               		.file 10 "../../../os/rt/include/chsem.h"
 2278               		.file 11 "../../../os/rt/include/chmtx.h"
 2279               		.file 12 "../../../os/rt/include/chevents.h"
 2280               		.file 13 "../../../os/hal/include/hal_streams.h"
 2281               		.file 14 "../../../os/hal/include/hal_queues.h"
 2282               		.file 15 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2283               		.file 16 "../../../os/hal/include/hal_ext.h"
 2284               		.file 17 "../../../os/hal/ports/AVR/MEGA/LLD/EXTv1/hal_ext_lld.h"
 2285               		.file 18 "../../../os/hal/include/hal_serial.h"
 2286               		.file 19 "../../../os/rt/include/chsys.h"
 2287               		.file 20 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2288               		.file 21 "../../../os/hal/lib/streams/chprintf.h"
 2289               		.file 22 "../../../os/hal/include/hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 W_M.c
     /tmp/ccYqQ5HI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYqQ5HI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYqQ5HI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYqQ5HI.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYqQ5HI.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYqQ5HI.s:15     .text.emergency_cb:0000000000000000 emergency_cb
     /tmp/ccYqQ5HI.s:2267   .bss.lavar:0000000000000000 lavar
     /tmp/ccYqQ5HI.s:88     .text.starting:0000000000000000 starting
     /tmp/ccYqQ5HI.s:254    .text.spinning:0000000000000000 spinning
     /tmp/ccYqQ5HI.s:663    .text.lavar_maquina:0000000000000000 lavar_maquina
                            *COM*:0000000000000002 fsm_prd
                            *COM*:0000000000000003 fsm_ml
                            *COM*:000000000000000b fsm_lvg
                            *COM*:0000000000000007 fsm_cen
                            *COM*:0000000000000003 fsm_exg
     /tmp/ccYqQ5HI.s:2152   .text.startup.main:0000000000000000 main
     /tmp/ccYqQ5HI.s:2236   .rodata.extcfg.3718:0000000000000000 extcfg.3718

UNDEFINED SYMBOLS
SD1
oqWriteI
_pal_lld_setgroupmode
chprintf
ch
__usmulhisi3
__udivmodsi4
chThdSleep
halInit
chSysInit
sdStart
EXTD1
extStart
extChannelEnable
__do_copy_data
__do_clear_bss
