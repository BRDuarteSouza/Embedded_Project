   1               		.file	"W_M.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 7069 6E6F 		.string	"pinos iniciados \n\r"
  12      7320 696E 
  12      6963 6961 
  12      646F 7320 
  12      0A0D 00
  13               		.section	.text.starting,"ax",@progbits
  14               	.global	starting
  16               	starting:
  17               	.LFB173:
  18               		.file 1 "W_M.c"
   1:W_M.c         **** // W_M.c
   2:W_M.c         **** // Implement a state machine to execute a washing machine taks, with ChibiOS
   3:W_M.c         **** // Author: Bruno Duarte <brduart95@gmail.com>
   4:W_M.c         **** 
   5:W_M.c         **** #include <stdint.h>
   6:W_M.c         **** #include <ch.h>
   7:W_M.c         **** #include <hal.h>
   8:W_M.c         **** #include <chprintf.h>
   9:W_M.c         **** 
  10:W_M.c         **** 
  11:W_M.c         **** /* Define Outputs*/
  12:W_M.c         **** #define PARADA_ID 7
  13:W_M.c         **** #define MOLHO_ID 0
  14:W_M.c         **** #define LAVAGEM_ID 1
  15:W_M.c         **** #define ENXAGUE_ID 2
  16:W_M.c         **** #define CENTRI_ID 3
  17:W_M.c         **** #define ENCHE_ID 4
  18:W_M.c         **** #define SECA_ID 5
  19:W_M.c         **** #define MOTOR_DIR 0
  20:W_M.c         **** #define MOTOR_ESQ 1
  21:W_M.c         **** 
  22:W_M.c         **** 
  23:W_M.c         **** /*Define Inputs*/
  24:W_M.c         **** #define BOT_SELECT 6
  25:W_M.c         **** #define BOT_INIT 5
  26:W_M.c         **** #define SEN_CHEIO 4
  27:W_M.c         **** #define SEN_VAZIO 3
  28:W_M.c         **** #define EMER 2
  29:W_M.c         **** 
  30:W_M.c         **** /* System variables*/
  31:W_M.c         **** #define GIRO_TEMPO 500
  32:W_M.c         **** 
  33:W_M.c         **** /* All State machines of the project */
  34:W_M.c         **** 
  35:W_M.c         **** /* Main Machine*/
  36:W_M.c         **** typedef enum{
  37:W_M.c         ****   PARADA = 0,
  38:W_M.c         ****   MOLHO,
  39:W_M.c         ****   LAVAGEM,
  40:W_M.c         ****   ENXAGUE,
  41:W_M.c         ****   CENTRIFUGA,
  42:W_M.c         ****   EMERGENCIA
  43:W_M.c         **** } maquina_e;
  44:W_M.c         **** 
  45:W_M.c         **** maquina_e lavar = PARADA; // Create an object of Main Machine;
  46:W_M.c         **** 
  47:W_M.c         **** 
  48:W_M.c         **** /* Spinning States*/
  49:W_M.c         **** typedef enum {
  50:W_M.c         ****   GIRA_R = 0,
  51:W_M.c         ****   GIRA_L
  52:W_M.c         **** } rodar_e;
  53:W_M.c         **** 
  54:W_M.c         **** 
  55:W_M.c         **** /* Moisten states*/
  56:W_M.c         **** typedef enum{
  57:W_M.c         ****   ENCHER_ML = 6,
  58:W_M.c         ****   RODAR_ML
  59:W_M.c         **** } estados_molho_e;
  60:W_M.c         **** 
  61:W_M.c         **** 
  62:W_M.c         **** /* Washing states*/
  63:W_M.c         **** typedef enum{
  64:W_M.c         ****   RODAR_LVG = 8,
  65:W_M.c         ****   ESPERA_LVG,
  66:W_M.c         ****   ESVAZIA_LVG
  67:W_M.c         **** } estados_lavagem_e;
  68:W_M.c         **** 
  69:W_M.c         **** 
  70:W_M.c         **** /* Rinse states*/
  71:W_M.c         **** typedef enum{
  72:W_M.c         ****   ENCHER_EXG = 11,
  73:W_M.c         ****   RODAR_EXG,
  74:W_M.c         ****   ESVAZIA_EXG
  75:W_M.c         **** } estados_enxague_e;
  76:W_M.c         **** 
  77:W_M.c         **** 
  78:W_M.c         **** /* Centrifugal states*/
  79:W_M.c         **** typedef enum{
  80:W_M.c         ****   GIRA_R_CENTRI = 14,
  81:W_M.c         **** } estados_centrifuga_e;
  82:W_M.c         **** 
  83:W_M.c         **** 
  84:W_M.c         **** /* Variables of intern Machines */
  85:W_M.c         **** typedef struct {
  86:W_M.c         ****   int select_init;
  87:W_M.c         **** } fsm_parada_s;
  88:W_M.c         **** 
  89:W_M.c         **** typedef struct {
  90:W_M.c         ****   estados_molho_e ml;
  91:W_M.c         ****   int t_giro;
  92:W_M.c         **** } fsm_molho_s;
  93:W_M.c         **** 
  94:W_M.c         **** typedef struct {
  95:W_M.c         ****   estados_lavagem_e lvg;
  96:W_M.c         ****   systime_t instante;
  97:W_M.c         ****   systime_t ul_espera;
  98:W_M.c         ****   int turns;
  99:W_M.c         ****   int t_espera;
 100:W_M.c         ****   int t_giros;
 101:W_M.c         **** } fsm_lavagem_s;
 102:W_M.c         **** 
 103:W_M.c         **** typedef struct {
 104:W_M.c         ****   estados_enxague_e exg;
 105:W_M.c         ****   int t_giro;
 106:W_M.c         **** } fsm_enxague_s;
 107:W_M.c         **** 
 108:W_M.c         **** typedef struct {
 109:W_M.c         ****   estados_centrifuga_e cen;
 110:W_M.c         ****   systime_t tempo;
 111:W_M.c         ****   systime_t ul_centri;
 112:W_M.c         ****   int t_centri;
 113:W_M.c         **** } fsm_centrifuga_s;
 114:W_M.c         **** 
 115:W_M.c         **** 
 116:W_M.c         **** /* Start Condition functions*/
 117:W_M.c         **** static void fsm_parada_init(fsm_parada_s *st){
 118:W_M.c         ****   st->select_init = 0;
 119:W_M.c         **** }
 120:W_M.c         **** 
 121:W_M.c         **** static void fsm_molho_init(fsm_molho_s *st)
 122:W_M.c         **** {
 123:W_M.c         ****   st->ml = ENCHER_ML;
 124:W_M.c         ****   st->t_giro = 2000;
 125:W_M.c         **** }
 126:W_M.c         **** 
 127:W_M.c         **** static void fsm_lavagem_init(fsm_lavagem_s *st)
 128:W_M.c         **** {
 129:W_M.c         ****   st->lvg = RODAR_LVG;
 130:W_M.c         ****   st->turns = 0;
 131:W_M.c         ****   st->t_espera = 1000;
 132:W_M.c         ****   st->t_giros = 2400;
 133:W_M.c         ****   st->instante = chVTGetSystemTime();
 134:W_M.c         ****   st->ul_espera = st->instante;
 135:W_M.c         **** }
 136:W_M.c         **** 
 137:W_M.c         **** static void fsm_enxague_init(fsm_enxague_s *st)
 138:W_M.c         **** {
 139:W_M.c         ****   st->exg = ENCHER_EXG;
 140:W_M.c         ****   st->t_giro = 3000;
 141:W_M.c         **** }
 142:W_M.c         **** 
 143:W_M.c         **** static void fsm_centrifuga_init(fsm_centrifuga_s *st)
 144:W_M.c         **** {
 145:W_M.c         ****   st->cen = GIRA_R_CENTRI;
 146:W_M.c         ****   st->tempo = chVTGetSystemTime();
 147:W_M.c         ****   st->ul_centri = st->tempo;
 148:W_M.c         ****   st->t_centri = 4000;
 149:W_M.c         **** }
 150:W_M.c         **** 
 151:W_M.c         **** 
 152:W_M.c         **** /* Variables of the states */
 153:W_M.c         **** fsm_parada_s fsm_prd;
 154:W_M.c         **** 
 155:W_M.c         **** fsm_molho_s fsm_ml;
 156:W_M.c         **** 
 157:W_M.c         **** fsm_lavagem_s fsm_lvg;
 158:W_M.c         **** 
 159:W_M.c         **** 
 160:W_M.c         **** fsm_enxague_s fsm_exg;
 161:W_M.c         **** 
 162:W_M.c         **** fsm_centrifuga_s fsm_cen;
 163:W_M.c         **** 
 164:W_M.c         **** 
 165:W_M.c         **** /* Functions*/
 166:W_M.c         **** void starting(){
  19               		.loc 1 166 0
  20               		.cfi_startproc
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
 167:W_M.c         ****   // Output
 168:W_M.c         ****   palSetPadMode(IOPORT2, SECA_ID, PAL_MODE_OUTPUT_PUSHPULL);
  25               		.loc 1 168 0
  26 0000 46E0      		ldi r20,lo8(6)
  27 0002 60E2      		ldi r22,lo8(32)
  28 0004 83E2      		ldi r24,lo8(35)
  29 0006 90E0      		ldi r25,0
  30 0008 0E94 0000 		call _pal_lld_setgroupmode
  31               	.LVL0:
 169:W_M.c         ****   palSetPadMode(IOPORT2, ENCHE_ID, PAL_MODE_OUTPUT_PUSHPULL);
  32               		.loc 1 169 0
  33 000c 46E0      		ldi r20,lo8(6)
  34 000e 60E1      		ldi r22,lo8(16)
  35 0010 83E2      		ldi r24,lo8(35)
  36 0012 90E0      		ldi r25,0
  37 0014 0E94 0000 		call _pal_lld_setgroupmode
  38               	.LVL1:
 170:W_M.c         ****   palSetPadMode(IOPORT2, CENTRI_ID, PAL_MODE_OUTPUT_PUSHPULL);
  39               		.loc 1 170 0
  40 0018 46E0      		ldi r20,lo8(6)
  41 001a 68E0      		ldi r22,lo8(8)
  42 001c 83E2      		ldi r24,lo8(35)
  43 001e 90E0      		ldi r25,0
  44 0020 0E94 0000 		call _pal_lld_setgroupmode
  45               	.LVL2:
 171:W_M.c         ****   palSetPadMode(IOPORT2, ENXAGUE_ID, PAL_MODE_OUTPUT_PUSHPULL);
  46               		.loc 1 171 0
  47 0024 46E0      		ldi r20,lo8(6)
  48 0026 64E0      		ldi r22,lo8(4)
  49 0028 83E2      		ldi r24,lo8(35)
  50 002a 90E0      		ldi r25,0
  51 002c 0E94 0000 		call _pal_lld_setgroupmode
  52               	.LVL3:
 172:W_M.c         ****   palSetPadMode(IOPORT2, LAVAGEM_ID, PAL_MODE_OUTPUT_PUSHPULL);
  53               		.loc 1 172 0
  54 0030 46E0      		ldi r20,lo8(6)
  55 0032 62E0      		ldi r22,lo8(2)
  56 0034 83E2      		ldi r24,lo8(35)
  57 0036 90E0      		ldi r25,0
  58 0038 0E94 0000 		call _pal_lld_setgroupmode
  59               	.LVL4:
 173:W_M.c         ****   palSetPadMode(IOPORT2, MOLHO_ID, PAL_MODE_OUTPUT_PUSHPULL);
  60               		.loc 1 173 0
  61 003c 46E0      		ldi r20,lo8(6)
  62 003e 61E0      		ldi r22,lo8(1)
  63 0040 83E2      		ldi r24,lo8(35)
  64 0042 90E0      		ldi r25,0
  65 0044 0E94 0000 		call _pal_lld_setgroupmode
  66               	.LVL5:
 174:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_DIR, PAL_MODE_OUTPUT_PUSHPULL);
  67               		.loc 1 174 0
  68 0048 46E0      		ldi r20,lo8(6)
  69 004a 61E0      		ldi r22,lo8(1)
  70 004c 86E2      		ldi r24,lo8(38)
  71 004e 90E0      		ldi r25,0
  72 0050 0E94 0000 		call _pal_lld_setgroupmode
  73               	.LVL6:
 175:W_M.c         ****   palSetPadMode(IOPORT3, MOTOR_ESQ, PAL_MODE_OUTPUT_PUSHPULL);
  74               		.loc 1 175 0
  75 0054 46E0      		ldi r20,lo8(6)
  76 0056 62E0      		ldi r22,lo8(2)
  77 0058 86E2      		ldi r24,lo8(38)
  78 005a 90E0      		ldi r25,0
  79 005c 0E94 0000 		call _pal_lld_setgroupmode
  80               	.LVL7:
 176:W_M.c         ****   palSetPadMode(IOPORT4, PARADA_ID, PAL_MODE_OUTPUT_PUSHPULL);
  81               		.loc 1 176 0
  82 0060 46E0      		ldi r20,lo8(6)
  83 0062 60E8      		ldi r22,lo8(-128)
  84 0064 89E2      		ldi r24,lo8(41)
  85 0066 90E0      		ldi r25,0
  86 0068 0E94 0000 		call _pal_lld_setgroupmode
  87               	.LVL8:
 177:W_M.c         **** 
 178:W_M.c         **** 
 179:W_M.c         ****   // Input
 180:W_M.c         ****   palSetPadMode(IOPORT4, EMER, PAL_MODE_INPUT);
  88               		.loc 1 180 0
  89 006c 42E0      		ldi r20,lo8(2)
  90 006e 64E0      		ldi r22,lo8(4)
  91 0070 89E2      		ldi r24,lo8(41)
  92 0072 90E0      		ldi r25,0
  93 0074 0E94 0000 		call _pal_lld_setgroupmode
  94               	.LVL9:
 181:W_M.c         ****   palSetPadMode(IOPORT4, SEN_VAZIO, PAL_MODE_INPUT);
  95               		.loc 1 181 0
  96 0078 42E0      		ldi r20,lo8(2)
  97 007a 68E0      		ldi r22,lo8(8)
  98 007c 89E2      		ldi r24,lo8(41)
  99 007e 90E0      		ldi r25,0
 100 0080 0E94 0000 		call _pal_lld_setgroupmode
 101               	.LVL10:
 182:W_M.c         ****   palSetPadMode(IOPORT4, SEN_CHEIO, PAL_MODE_INPUT);
 102               		.loc 1 182 0
 103 0084 42E0      		ldi r20,lo8(2)
 104 0086 60E1      		ldi r22,lo8(16)
 105 0088 89E2      		ldi r24,lo8(41)
 106 008a 90E0      		ldi r25,0
 107 008c 0E94 0000 		call _pal_lld_setgroupmode
 108               	.LVL11:
 183:W_M.c         ****   palSetPadMode(IOPORT4, BOT_INIT, PAL_MODE_INPUT);
 109               		.loc 1 183 0
 110 0090 42E0      		ldi r20,lo8(2)
 111 0092 60E2      		ldi r22,lo8(32)
 112 0094 89E2      		ldi r24,lo8(41)
 113 0096 90E0      		ldi r25,0
 114 0098 0E94 0000 		call _pal_lld_setgroupmode
 115               	.LVL12:
 184:W_M.c         ****   palSetPadMode(IOPORT4, BOT_SELECT, PAL_MODE_INPUT);
 116               		.loc 1 184 0
 117 009c 42E0      		ldi r20,lo8(2)
 118 009e 60E4      		ldi r22,lo8(64)
 119 00a0 89E2      		ldi r24,lo8(41)
 120 00a2 90E0      		ldi r25,0
 121 00a4 0E94 0000 		call _pal_lld_setgroupmode
 122               	.LVL13:
 185:W_M.c         **** 
 186:W_M.c         ****   // Start
 187:W_M.c         ****   palClearPad(IOPORT2, SECA_ID);
 123               		.loc 1 187 0
 124 00a8 2D98      		cbi 0x5,5
 188:W_M.c         ****   palClearPad(IOPORT2, ENCHE_ID);
 125               		.loc 1 188 0
 126 00aa 2C98      		cbi 0x5,4
 189:W_M.c         ****   palClearPad(IOPORT2, CENTRI_ID);
 127               		.loc 1 189 0
 128 00ac 2B98      		cbi 0x5,3
 190:W_M.c         ****   palClearPad(IOPORT2, ENXAGUE_ID);
 129               		.loc 1 190 0
 130 00ae 2A98      		cbi 0x5,2
 191:W_M.c         ****   palClearPad(IOPORT2, LAVAGEM_ID);
 131               		.loc 1 191 0
 132 00b0 2998      		cbi 0x5,1
 192:W_M.c         ****   palClearPad(IOPORT2, MOLHO_ID);
 133               		.loc 1 192 0
 134 00b2 2898      		cbi 0x5,0
 193:W_M.c         ****   palSetPad(IOPORT3, MOTOR_DIR);
 135               		.loc 1 193 0
 136 00b4 409A      		sbi 0x8,0
 194:W_M.c         ****   palSetPad(IOPORT3, MOTOR_ESQ);
 137               		.loc 1 194 0
 138 00b6 419A      		sbi 0x8,1
 195:W_M.c         ****   palClearPad(IOPORT4, PARADA_ID);
 139               		.loc 1 195 0
 140 00b8 5F98      		cbi 0xb,7
 196:W_M.c         **** 
 197:W_M.c         ****   chprintf((BaseSequentialStream *)&SD1, "pinos iniciados \n\r");
 141               		.loc 1 197 0
 142 00ba 80E0      		ldi r24,lo8(.LC0)
 143 00bc 90E0      		ldi r25,hi8(.LC0)
 144 00be 9F93      		push r25
 145               	.LCFI0:
 146               		.cfi_def_cfa_offset 3
 147 00c0 8F93      		push r24
 148               	.LCFI1:
 149               		.cfi_def_cfa_offset 4
 150 00c2 80E0      		ldi r24,lo8(SD1)
 151 00c4 90E0      		ldi r25,hi8(SD1)
 152 00c6 9F93      		push r25
 153               	.LCFI2:
 154               		.cfi_def_cfa_offset 5
 155 00c8 8F93      		push r24
 156               	.LCFI3:
 157               		.cfi_def_cfa_offset 6
 158 00ca 0E94 0000 		call chprintf
 159               	.LVL14:
 198:W_M.c         **** 
 199:W_M.c         **** }
 160               		.loc 1 199 0
 161 00ce 0F90      		pop __tmp_reg__
 162 00d0 0F90      		pop __tmp_reg__
 163 00d2 0F90      		pop __tmp_reg__
 164 00d4 0F90      		pop __tmp_reg__
 165               	.LCFI4:
 166               		.cfi_def_cfa_offset 2
 167 00d6 0895      		ret
 168               		.cfi_endproc
 169               	.LFE173:
 171               		.section	.rodata.str1.1
 172               	.LC1:
 173 0013 4769 7261 		.string	"Gira Esqueda\n\r"
 173      2045 7371 
 173      7565 6461 
 173      0A0D 00
 174               	.LC2:
 175 0022 7361 696E 		.string	"saindo \n\r"
 175      646F 200A 
 175      0D00 
 176               	.LC3:
 177 002c 4769 7261 		.string	"Gira Direita\n\r"
 177      2044 6972 
 177      6569 7461 
 177      0A0D 00
 178               	.LC4:
 179 003b 4669 6D20 		.string	"Fim Giro\n\r"
 179      4769 726F 
 179      0A0D 00
 180               		.section	.text.spinning,"ax",@progbits
 181               	.global	spinning
 183               	spinning:
 184               	.LFB174:
 200:W_M.c         **** 
 201:W_M.c         **** 
 202:W_M.c         **** /* Spin Function */
 203:W_M.c         **** 
 204:W_M.c         **** void spinning(int timer) {
 185               		.loc 1 204 0
 186               		.cfi_startproc
 187               	.LVL15:
 188 0000 8F92      		push r8
 189               	.LCFI5:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 8, -2
 192 0002 9F92      		push r9
 193               	.LCFI6:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 9, -3
 196 0004 AF92      		push r10
 197               	.LCFI7:
 198               		.cfi_def_cfa_offset 5
 199               		.cfi_offset 10, -4
 200 0006 BF92      		push r11
 201               	.LCFI8:
 202               		.cfi_def_cfa_offset 6
 203               		.cfi_offset 11, -5
 204 0008 CF92      		push r12
 205               	.LCFI9:
 206               		.cfi_def_cfa_offset 7
 207               		.cfi_offset 12, -6
 208 000a DF92      		push r13
 209               	.LCFI10:
 210               		.cfi_def_cfa_offset 8
 211               		.cfi_offset 13, -7
 212 000c EF92      		push r14
 213               	.LCFI11:
 214               		.cfi_def_cfa_offset 9
 215               		.cfi_offset 14, -8
 216 000e FF92      		push r15
 217               	.LCFI12:
 218               		.cfi_def_cfa_offset 10
 219               		.cfi_offset 15, -9
 220 0010 0F93      		push r16
 221               	.LCFI13:
 222               		.cfi_def_cfa_offset 11
 223               		.cfi_offset 16, -10
 224 0012 1F93      		push r17
 225               	.LCFI14:
 226               		.cfi_def_cfa_offset 12
 227               		.cfi_offset 17, -11
 228 0014 CF93      		push r28
 229               	.LCFI15:
 230               		.cfi_def_cfa_offset 13
 231               		.cfi_offset 28, -12
 232 0016 DF93      		push r29
 233               	.LCFI16:
 234               		.cfi_def_cfa_offset 14
 235               		.cfi_offset 29, -13
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 12 */
 239               	.L__stack_usage = 12
 240               	.LBB166:
 241               	.LBB167:
 242               	.LBB168:
 243               	.LBB169:
 244               	.LBB170:
 245               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 246               		.loc 2 437 0
 247               	/* #APP */
 248               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 249 0018 F894      		cli
 250               	 ;  0 "" 2
 251               	/* #NOAPP */
 252               	.LBE170:
 253               	.LBE169:
 254               	.LBE168:
 255               	.LBB171:
 256               	.LBB172:
 257               		.file 3 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 258               		.loc 3 118 0
 259 001a 8090 0000 		lds r8,ch+19
 260 001e 9090 0000 		lds r9,ch+19+1
 261               	.LBE172:
 262               	.LBE171:
 263               	.LBB173:
 264               	.LBB174:
 265               	.LBB175:
 266               	.LBB176:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 267               		.loc 2 447 0
 268               	/* #APP */
 269               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 270 0022 7894      		sei
 271               	 ;  0 "" 2
 272               	.LVL16:
 273               	/* #NOAPP */
 274               	.LBE176:
 275               	.LBE175:
 276               	.LBE174:
 277               	.LBE173:
 278               	.LBE167:
 279               	.LBE166:
 205:W_M.c         ****   systime_t agora = chVTGetSystemTime();
 206:W_M.c         ****   rodar_e rd = GIRA_R;
 207:W_M.c         ****   systime_t ls_report,init_time;
 208:W_M.c         **** 
 209:W_M.c         ****   ls_report = agora;
 210:W_M.c         ****   init_time = agora;
 211:W_M.c         ****   while(1){
 212:W_M.c         ****     agora = chVTGetSystemTime();
 213:W_M.c         ****     switch(rd){
 214:W_M.c         ****       case(GIRA_R):
 215:W_M.c         ****       // palClearPad(IOPORT3, MOTOR_DIR);
 216:W_M.c         ****         if(lavar == EMERGENCIA){
 217:W_M.c         ****           return;
 218:W_M.c         ****         } // verifcar emergência
 219:W_M.c         ****         palClearPad(IOPORT3, MOTOR_DIR);
 220:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 221:W_M.c         ****           // printf("Girando pra Esqueda\n");
 222:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Gira Esqueda\n\r");
 223:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 224:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 225:W_M.c         ****           ls_report = agora;
 226:W_M.c         ****           rd = GIRA_L;
 227:W_M.c         ****           }
 228:W_M.c         ****         if(agora - init_time > TIME_MS2I(timer)){
 229:W_M.c         ****           // printf("Fim do Giro\n");
 230:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 231:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 232:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
 233:W_M.c         ****           return;
 234:W_M.c         ****         }
 235:W_M.c         ****         break;
 236:W_M.c         ****       case(GIRA_L):
 237:W_M.c         ****       palClearPad(IOPORT3, MOTOR_ESQ);
 238:W_M.c         ****         if(lavar == EMERGENCIA){
 239:W_M.c         ****           return;
 240:W_M.c         ****         } // verifcar emergência
 241:W_M.c         ****         // palClearPad(IOPORT3, MOTOR_ESQ);
 242:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 243:W_M.c         ****           // printf("Girando pra Direita\n");
 244:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 245:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Gira Direita\n\r");
 246:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 247:W_M.c         ****           ls_report = agora;
 248:W_M.c         ****           rd = GIRA_R;
 249:W_M.c         ****           }
 250:W_M.c         ****         if(agora - init_time > TIME_MS2I(timer)){
 280               		.loc 1 250 0
 281 0024 28E0      		ldi r18,lo8(8)
 282 0026 3DE3      		ldi r19,lo8(61)
 283 0028 DC01      		movw r26,r24
 284 002a 0E94 0000 		call __usmulhisi3
 285 002e 6951      		subi r22,25
 286 0030 7C4F      		sbci r23,-4
 287 0032 8F4F      		sbci r24,-1
 288 0034 9F4F      		sbci r25,-1
 289 0036 28EE      		ldi r18,lo8(-24)
 290 0038 33E0      		ldi r19,lo8(3)
 291 003a 40E0      		ldi r20,0
 292 003c 50E0      		ldi r21,0
 293 003e 0E94 0000 		call __udivmodsi4
 294 0042 8901      		movw r16,r18
 209:W_M.c         ****   init_time = agora;
 295               		.loc 1 209 0
 296 0044 9401      		movw r18,r8
 206:W_M.c         ****   systime_t ls_report,init_time;
 297               		.loc 1 206 0
 298 0046 80E0      		ldi r24,0
 299               	.LVL17:
 245:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 300               		.loc 1 245 0
 301 0048 90E0      		ldi r25,lo8(.LC3)
 302 004a A92E      		mov r10,r25
 303 004c 90E0      		ldi r25,hi8(.LC3)
 304 004e B92E      		mov r11,r25
 305 0050 40E0      		ldi r20,lo8(SD1)
 306 0052 E42E      		mov r14,r20
 307 0054 40E0      		ldi r20,hi8(SD1)
 308 0056 F42E      		mov r15,r20
 222:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 309               		.loc 1 222 0
 310 0058 50E0      		ldi r21,lo8(.LC1)
 311 005a C52E      		mov r12,r21
 312 005c 50E0      		ldi r21,hi8(.LC1)
 313 005e D52E      		mov r13,r21
 314               	.LVL18:
 315               	.L3:
 316               	.LBB177:
 317               	.LBB178:
 318               	.LBB179:
 319               	.LBB180:
 320               	.LBB181:
 437:../../../os/common/ports/AVR/chcore.h **** }
 321               		.loc 2 437 0
 322               	/* #APP */
 323               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 324 0060 F894      		cli
 325               	 ;  0 "" 2
 326               	/* #NOAPP */
 327               	.LBE181:
 328               	.LBE180:
 329               	.LBE179:
 330               	.LBB182:
 331               	.LBB183:
 332               		.loc 3 118 0
 333 0062 C091 0000 		lds r28,ch+19
 334 0066 D091 0000 		lds r29,ch+19+1
 335               	.LVL19:
 336               	.LBE183:
 337               	.LBE182:
 338               	.LBB186:
 339               	.LBB187:
 340               	.LBB188:
 341               	.LBB189:
 342               		.loc 2 447 0
 343               	/* #APP */
 344               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 345 006a 7894      		sei
 346               	 ;  0 "" 2
 347               	/* #NOAPP */
 348               	.LBE189:
 349               	.LBE188:
 350               	.LBE187:
 351               	.LBE186:
 352               	.LBE178:
 353               	.LBE177:
 213:W_M.c         ****       case(GIRA_R):
 354               		.loc 1 213 0
 355 006c 8130      		cpi r24,lo8(1)
 356 006e 01F0      		breq .L5
 216:W_M.c         ****           return;
 357               		.loc 1 216 0
 358 0070 8091 0000 		lds r24,lavar
 359               	.LVL20:
 360 0074 8530      		cpi r24,lo8(5)
 361 0076 01F0      		breq .L2
 219:W_M.c         ****         if(agora - ls_report >= TIME_MS2I(GIRO_TEMPO)){
 362               		.loc 1 219 0
 363 0078 4098      		cbi 0x8,0
 220:W_M.c         ****           // printf("Girando pra Esqueda\n");
 364               		.loc 1 220 0
 365 007a CE01      		movw r24,r28
 366 007c 821B      		sub r24,r18
 367 007e 930B      		sbc r25,r19
 368 0080 8438      		cpi r24,-124
 369 0082 9E41      		sbci r25,30
 370 0084 00F4      		brsh .L18
 371 0086 80E0      		ldi r24,0
 372               	.L8:
 373               	.LVL21:
 228:W_M.c         ****           // printf("Fim do Giro\n");
 374               		.loc 1 228 0
 375 0088 C819      		sub r28,r8
 376 008a D909      		sbc r29,r9
 377 008c 0C17      		cp r16,r28
 378 008e 1D07      		cpc r17,r29
 379 0090 00F4      		brsh .L3
 230:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 380               		.loc 1 230 0
 381 0092 409A      		sbi 0x8,0
 231:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "saindo \n\r");
 382               		.loc 1 231 0
 383 0094 419A      		sbi 0x8,1
 232:W_M.c         ****           return;
 384               		.loc 1 232 0
 385 0096 80E0      		ldi r24,lo8(.LC2)
 386 0098 90E0      		ldi r25,hi8(.LC2)
 387               	.LVL22:
 388 009a 00C0      		rjmp .L16
 389               	.LVL23:
 390               	.L5:
 237:W_M.c         ****         if(lavar == EMERGENCIA){
 391               		.loc 1 237 0
 392 009c 4198      		cbi 0x8,1
 238:W_M.c         ****           return;
 393               		.loc 1 238 0
 394 009e 9091 0000 		lds r25,lavar
 395 00a2 9530      		cpi r25,lo8(5)
 396 00a4 01F0      		breq .L2
 242:W_M.c         ****           // printf("Girando pra Direita\n");
 397               		.loc 1 242 0
 398 00a6 AE01      		movw r20,r28
 399 00a8 421B      		sub r20,r18
 400 00aa 530B      		sbc r21,r19
 401 00ac 4438      		cpi r20,-124
 402 00ae 5E41      		sbci r21,30
 403 00b0 00F4      		brsh .L19
 404               	.LVL24:
 405               	.L11:
 406               		.loc 1 250 0
 407 00b2 C819      		sub r28,r8
 408 00b4 D909      		sbc r29,r9
 409 00b6 0C17      		cp r16,r28
 410 00b8 1D07      		cpc r17,r29
 411 00ba 00F4      		brsh .L3
 251:W_M.c         ****           // printf("saindo\n");
 252:W_M.c         ****           palSetPad(IOPORT3, MOTOR_DIR);
 412               		.loc 1 252 0
 413 00bc 409A      		sbi 0x8,0
 253:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 414               		.loc 1 253 0
 415 00be 419A      		sbi 0x8,1
 254:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Fim Giro\n\r");
 416               		.loc 1 254 0
 417 00c0 80E0      		ldi r24,lo8(.LC4)
 418 00c2 90E0      		ldi r25,hi8(.LC4)
 419               	.LVL25:
 420               	.L16:
 421 00c4 9F93      		push r25
 422               	.LCFI17:
 423               		.cfi_def_cfa_offset 15
 424 00c6 8F93      		push r24
 425               	.LCFI18:
 426               		.cfi_def_cfa_offset 16
 427 00c8 80E0      		ldi r24,lo8(SD1)
 428 00ca 90E0      		ldi r25,hi8(SD1)
 429 00cc 9F93      		push r25
 430               	.LCFI19:
 431               		.cfi_def_cfa_offset 17
 432 00ce 8F93      		push r24
 433               	.LCFI20:
 434               		.cfi_def_cfa_offset 18
 435 00d0 0E94 0000 		call chprintf
 436               	.LVL26:
 255:W_M.c         ****           return;
 437               		.loc 1 255 0
 438 00d4 0F90      		pop __tmp_reg__
 439 00d6 0F90      		pop __tmp_reg__
 440 00d8 0F90      		pop __tmp_reg__
 441 00da 0F90      		pop __tmp_reg__
 442               	.LCFI21:
 443               		.cfi_def_cfa_offset 14
 444               	.L2:
 445               	/* epilogue start */
 256:W_M.c         ****           }
 257:W_M.c         ****         break;
 258:W_M.c         ****         }
 259:W_M.c         ****      }
 260:W_M.c         ****   }
 446               		.loc 1 260 0
 447 00dc DF91      		pop r29
 448 00de CF91      		pop r28
 449 00e0 1F91      		pop r17
 450 00e2 0F91      		pop r16
 451 00e4 FF90      		pop r15
 452 00e6 EF90      		pop r14
 453 00e8 DF90      		pop r13
 454 00ea CF90      		pop r12
 455 00ec BF90      		pop r11
 456 00ee AF90      		pop r10
 457 00f0 9F90      		pop r9
 458 00f2 8F90      		pop r8
 459               	.LVL27:
 460 00f4 0895      		ret
 461               	.LVL28:
 462               	.L18:
 222:W_M.c         ****           // chprintf((BaseSequentialStream *)&SD1, "Agora: %d\n\r",agora);
 463               		.loc 1 222 0
 464 00f6 DF92      		push r13
 465               	.LCFI22:
 466               		.cfi_def_cfa_offset 15
 467 00f8 CF92      		push r12
 468               	.LCFI23:
 469               		.cfi_def_cfa_offset 16
 470 00fa FF92      		push r15
 471               	.LCFI24:
 472               		.cfi_def_cfa_offset 17
 473 00fc EF92      		push r14
 474               	.LCFI25:
 475               		.cfi_def_cfa_offset 18
 476 00fe 0E94 0000 		call chprintf
 477               	.LVL29:
 224:W_M.c         ****           ls_report = agora;
 478               		.loc 1 224 0
 479 0102 409A      		sbi 0x8,0
 480               	.LVL30:
 481 0104 0F90      		pop __tmp_reg__
 482 0106 0F90      		pop __tmp_reg__
 483 0108 0F90      		pop __tmp_reg__
 484 010a 0F90      		pop __tmp_reg__
 485               	.LCFI26:
 486               		.cfi_def_cfa_offset 14
 487               	.LBB194:
 488               	.LBB192:
 489               	.LBB190:
 490               	.LBB184:
 491               		.loc 3 118 0
 492 010c 9E01      		movw r18,r28
 493               	.LBE184:
 494               	.LBE190:
 495               	.LBE192:
 496               	.LBE194:
 226:W_M.c         ****           }
 497               		.loc 1 226 0
 498 010e 81E0      		ldi r24,lo8(1)
 499 0110 00C0      		rjmp .L8
 500               	.LVL31:
 501               	.L19:
 245:W_M.c         ****           palSetPad(IOPORT3, MOTOR_ESQ);
 502               		.loc 1 245 0
 503 0112 BF92      		push r11
 504               	.LCFI27:
 505               		.cfi_def_cfa_offset 15
 506 0114 AF92      		push r10
 507               	.LCFI28:
 508               		.cfi_def_cfa_offset 16
 509 0116 FF92      		push r15
 510               	.LCFI29:
 511               		.cfi_def_cfa_offset 17
 512 0118 EF92      		push r14
 513               	.LCFI30:
 514               		.cfi_def_cfa_offset 18
 515 011a 0E94 0000 		call chprintf
 516               	.LVL32:
 246:W_M.c         ****           ls_report = agora;
 517               		.loc 1 246 0
 518 011e 419A      		sbi 0x8,1
 519               	.LVL33:
 520 0120 0F90      		pop __tmp_reg__
 521 0122 0F90      		pop __tmp_reg__
 522 0124 0F90      		pop __tmp_reg__
 523 0126 0F90      		pop __tmp_reg__
 524               	.LCFI31:
 525               		.cfi_def_cfa_offset 14
 526               	.LBB195:
 527               	.LBB193:
 528               	.LBB191:
 529               	.LBB185:
 530               		.loc 3 118 0
 531 0128 9E01      		movw r18,r28
 532               	.LBE185:
 533               	.LBE191:
 534               	.LBE193:
 535               	.LBE195:
 248:W_M.c         ****           }
 536               		.loc 1 248 0
 537 012a 80E0      		ldi r24,0
 538 012c 00C0      		rjmp .L11
 539               		.cfi_endproc
 540               	.LFE174:
 542               		.section	.rodata.str1.1
 543               	.LC5:
 544 0046 5365 6C65 		.string	"Selecione o estado inicial\n\r"
 544      6369 6F6E 
 544      6520 6F20 
 544      6573 7461 
 544      646F 2069 
 545               	.LC6:
 546 0063 4D6F 646F 		.string	"Modo inicial: Molho\n\r"
 546      2069 6E69 
 546      6369 616C 
 546      3A20 4D6F 
 546      6C68 6F0A 
 547               	.LC7:
 548 0079 4D6F 646F 		.string	"Modo inicial: Lavagem \n\r"
 548      2069 6E69 
 548      6369 616C 
 548      3A20 4C61 
 548      7661 6765 
 549               	.LC8:
 550 0092 4D6F 646F 		.string	"Modo inicial: Enxague\n\r"
 550      2069 6E69 
 550      6369 616C 
 550      3A20 456E 
 550      7861 6775 
 551               	.LC9:
 552 00aa 4D6F 646F 		.string	"Modo inicial: Centrifuga\n\r"
 552      2069 6E69 
 552      6369 616C 
 552      3A20 4365 
 552      6E74 7269 
 553               	.LC10:
 554 00c5 496E 6963 		.string	"Inicio do processo\n\r"
 554      696F 2064 
 554      6F20 7072 
 554      6F63 6573 
 554      736F 0A0D 
 555               	.LC11:
 556 00da 456E 6368 		.string	"Enchendo para o Molho \n\r"
 556      656E 646F 
 556      2070 6172 
 556      6120 6F20 
 556      4D6F 6C68 
 557               	.LC12:
 558 00f3 456E 6368 		.string	"Enchendo para o enxague\n\r"
 558      656E 646F 
 558      2070 6172 
 558      6120 6F20 
 558      656E 7861 
 559               	.LC13:
 560 010d 5365 6E73 		.string	"Sensor cheio\n\r"
 560      6F72 2063 
 560      6865 696F 
 560      0A0D 00
 561               	.LC14:
 562 011c 4769 726F 		.string	"Giros Molho\n\r"
 562      7320 4D6F 
 562      6C68 6F0A 
 562      0D00 
 563               	.LC15:
 564 012a 4649 4D20 		.string	"FIM Molho\n\r"
 564      4D6F 6C68 
 564      6F0A 0D00 
 565               	.LC16:
 566 0136 496E 6963 		.string	"Inicio LAVAGEM\n\r"
 566      696F 204C 
 566      4156 4147 
 566      454D 0A0D 
 566      00
 567               	.LC17:
 568 0147 4769 726F 		.string	"Giros Lavagem\n\r"
 568      7320 4C61 
 568      7661 6765 
 568      6D0A 0D00 
 569               	.LC18:
 570 0157 4573 7065 		.string	"Espera Lavagem\n\r"
 570      7261 204C 
 570      6176 6167 
 570      656D 0A0D 
 570      00
 571               	.LC19:
 572 0168 4573 7661 		.string	"Esvazia Lavagem \n\r"
 572      7A69 6120 
 572      4C61 7661 
 572      6765 6D20 
 572      0A0D 00
 573               	.LC20:
 574 017b 4669 6D20 		.string	"Fim Lavagem\n\r"
 574      4C61 7661 
 574      6765 6D0A 
 574      0D00 
 575               	.LC21:
 576 0189 496E 6963 		.string	"Inicio Enxague\n\r"
 576      696F 2045 
 576      6E78 6167 
 576      7565 0A0D 
 576      00
 577               	.LC22:
 578 019a 456E 6368 		.string	"Enche Enxague\n\r"
 578      6520 456E 
 578      7861 6775 
 578      650A 0D00 
 579               	.LC23:
 580 01aa 526F 6461 		.string	"Rodar Enxague\n\r"
 580      7220 456E 
 580      7861 6775 
 580      650A 0D00 
 581               	.LC24:
 582 01ba 4573 7661 		.string	"Esvazia Enxague\n\r"
 582      7A69 6120 
 582      456E 7861 
 582      6775 650A 
 582      0D00 
 583               	.LC25:
 584 01cc 4669 6D20 		.string	"Fim Enxague\n\r"
 584      456E 7861 
 584      6775 650A 
 584      0D00 
 585               	.LC26:
 586 01da 496E 6963 		.string	"Inicio Centrifuga\n\r"
 586      696F 2043 
 586      656E 7472 
 586      6966 7567 
 586      610A 0D00 
 587               	.LC27:
 588 01ee 4649 4D20 		.string	"FIM DO PROCESSO\n\r"
 588      444F 2050 
 588      524F 4345 
 588      5353 4F0A 
 588      0D00 
 589               		.section	.text.lavar_maquina,"ax",@progbits
 590               	.global	lavar_maquina
 592               	lavar_maquina:
 593               	.LFB175:
 261:W_M.c         **** 
 262:W_M.c         **** /* Main Machine */
 263:W_M.c         **** 
 264:W_M.c         **** void lavar_maquina(){
 594               		.loc 1 264 0
 595               		.cfi_startproc
 596 0000 2F92      		push r2
 597               	.LCFI32:
 598               		.cfi_def_cfa_offset 3
 599               		.cfi_offset 2, -2
 600 0002 3F92      		push r3
 601               	.LCFI33:
 602               		.cfi_def_cfa_offset 4
 603               		.cfi_offset 3, -3
 604 0004 4F92      		push r4
 605               	.LCFI34:
 606               		.cfi_def_cfa_offset 5
 607               		.cfi_offset 4, -4
 608 0006 5F92      		push r5
 609               	.LCFI35:
 610               		.cfi_def_cfa_offset 6
 611               		.cfi_offset 5, -5
 612 0008 6F92      		push r6
 613               	.LCFI36:
 614               		.cfi_def_cfa_offset 7
 615               		.cfi_offset 6, -6
 616 000a 7F92      		push r7
 617               	.LCFI37:
 618               		.cfi_def_cfa_offset 8
 619               		.cfi_offset 7, -7
 620 000c 8F92      		push r8
 621               	.LCFI38:
 622               		.cfi_def_cfa_offset 9
 623               		.cfi_offset 8, -8
 624 000e 9F92      		push r9
 625               	.LCFI39:
 626               		.cfi_def_cfa_offset 10
 627               		.cfi_offset 9, -9
 628 0010 AF92      		push r10
 629               	.LCFI40:
 630               		.cfi_def_cfa_offset 11
 631               		.cfi_offset 10, -10
 632 0012 BF92      		push r11
 633               	.LCFI41:
 634               		.cfi_def_cfa_offset 12
 635               		.cfi_offset 11, -11
 636 0014 CF92      		push r12
 637               	.LCFI42:
 638               		.cfi_def_cfa_offset 13
 639               		.cfi_offset 12, -12
 640 0016 DF92      		push r13
 641               	.LCFI43:
 642               		.cfi_def_cfa_offset 14
 643               		.cfi_offset 13, -13
 644 0018 EF92      		push r14
 645               	.LCFI44:
 646               		.cfi_def_cfa_offset 15
 647               		.cfi_offset 14, -14
 648 001a FF92      		push r15
 649               	.LCFI45:
 650               		.cfi_def_cfa_offset 16
 651               		.cfi_offset 15, -15
 652 001c 0F93      		push r16
 653               	.LCFI46:
 654               		.cfi_def_cfa_offset 17
 655               		.cfi_offset 16, -16
 656 001e 1F93      		push r17
 657               	.LCFI47:
 658               		.cfi_def_cfa_offset 18
 659               		.cfi_offset 17, -17
 660 0020 CF93      		push r28
 661               	.LCFI48:
 662               		.cfi_def_cfa_offset 19
 663               		.cfi_offset 28, -18
 664 0022 DF93      		push r29
 665               	.LCFI49:
 666               		.cfi_def_cfa_offset 20
 667               		.cfi_offset 29, -19
 668               	/* prologue: function */
 669               	/* frame size = 0 */
 670               	/* stack size = 18 */
 671               	.L__stack_usage = 18
 265:W_M.c         ****   // int t_cheio;
 266:W_M.c         ****   // chprintf((BaseSequentialStream *)&SD1, "ENtrei na maquina");
 267:W_M.c         ****   switch(lavar){
 672               		.loc 1 267 0
 673 0024 8091 0000 		lds r24,lavar
 674 0028 8230      		cpi r24,lo8(2)
 675 002a 01F4      		brne .+2
 676 002c 00C0      		rjmp .L22
 677 002e 00F0      		brlo .L83
 678 0030 8430      		cpi r24,lo8(4)
 679 0032 01F4      		brne .+2
 680 0034 00C0      		rjmp .L26
 681 0036 00F4      		brsh .+2
 682 0038 00C0      		rjmp .L27
 683 003a 8530      		cpi r24,lo8(5)
 684 003c 01F0      		breq .+2
 685 003e 00C0      		rjmp .L20
 686               	.L81:
 687 0040 00C0      		rjmp .L81
 688               	.L83:
 689 0042 8823      		tst r24
 690 0044 01F4      		brne .+2
 691 0046 00C0      		rjmp .L24
 692 0048 8130      		cpi r24,lo8(1)
 693 004a 01F0      		breq .+2
 694 004c 00C0      		rjmp .L20
 268:W_M.c         **** 
 269:W_M.c         ****     case(PARADA):
 270:W_M.c         ****       if(lavar == EMERGENCIA){
 271:W_M.c         ****         break;
 272:W_M.c         ****       } // verifcar emergência
 273:W_M.c         ****       // printf("Inicio da Parada\n");
 274:W_M.c         ****       // printf("Escolha o estado inicial:\n");
 275:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Selecione o estado inicial\n\r");
 276:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 277:W_M.c         ****       // scanf("%d", &fsm_prd.select_init);
 278:W_M.c         ****       while(1){
 279:W_M.c         ****         if(fsm_prd.select_init == 0){
 280:W_M.c         ****           palSetPad(IOPORT4, PARADA_ID);
 281:W_M.c         ****           palSetPad(IOPORT2, MOLHO_ID);
 282:W_M.c         ****           palSetPad(IOPORT2, LAVAGEM_ID);
 283:W_M.c         ****           palSetPad(IOPORT2, ENXAGUE_ID);
 284:W_M.c         ****           palSetPad(IOPORT2, CENTRI_ID);
 285:W_M.c         ****           lavar = MOLHO;
 286:W_M.c         ****           fsm_molho_init(&fsm_ml);
 287:W_M.c         ****         }
 288:W_M.c         **** 
 289:W_M.c         ****         if(fsm_prd.select_init == 0 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 290:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 291:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 292:W_M.c         ****           // printf("Inicio MOLHO\n");
 293:W_M.c         ****           lavar = LAVAGEM;
 294:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 295:W_M.c         ****           fsm_prd.select_init = 1;
 296:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 297:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 298:W_M.c         ****         }
 299:W_M.c         **** 
 300:W_M.c         ****         if(fsm_prd.select_init == 1 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 301:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 302:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 303:W_M.c         ****           lavar = ENXAGUE;
 304:W_M.c         ****           fsm_enxague_init(&fsm_exg);
 305:W_M.c         ****           fsm_prd.select_init = 2;
 306:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
 307:W_M.c         ****           palClearPad(IOPORT2, LAVAGEM_ID);
 308:W_M.c         **** 
 309:W_M.c         ****         }
 310:W_M.c         ****         if(fsm_prd.select_init == 2 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 311:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 312:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 313:W_M.c         ****           lavar = CENTRIFUGA;
 314:W_M.c         ****           fsm_centrifuga_init(&fsm_cen);
 315:W_M.c         ****           fsm_prd.select_init = 3;
 316:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
 317:W_M.c         ****           palClearPad(IOPORT2, ENXAGUE_ID);
 318:W_M.c         ****           // printf("Inicio ENXAGUE\n");
 319:W_M.c         ****         }
 320:W_M.c         ****         if(fsm_prd.select_init == 3 && palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH){
 321:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 322:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 323:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 324:W_M.c         ****           fsm_prd.select_init = 0;
 325:W_M.c         ****         }
 326:W_M.c         ****         if(palReadPad(IOPORT4,BOT_INIT) == PAL_HIGH){
 327:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 328:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
 329:W_M.c         ****           if(fsm_prd.select_init == 0){
 330:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
 331:W_M.c         ****           }
 332:W_M.c         ****           if(fsm_prd.select_init == 2){
 333:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o enxague\n\r");
 334:W_M.c         ****           }
 335:W_M.c         ****           return;
 336:W_M.c         ****         }
 337:W_M.c         ****       }// end of PARADA loop
 338:W_M.c         **** 
 339:W_M.c         ****     break;
 340:W_M.c         **** 
 341:W_M.c         **** 
 342:W_M.c         ****     case(MOLHO):
 343:W_M.c         ****     // printf("Inicio Molho\n");
 344:W_M.c         ****     // chprintf((BaseSequentialStream *)&SD1, "Inicio MOLHO \n\r");
 345:W_M.c         ****     palSetPad(IOPORT2, MOLHO_ID);
 695               		.loc 1 345 0
 696 004e 289A      		sbi 0x5,0
 346:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 697               		.loc 1 346 0
 698 0050 2998      		cbi 0x5,1
 347:W_M.c         ****     palClearPad(IOPORT2, ENXAGUE_ID);
 699               		.loc 1 347 0
 700 0052 2A98      		cbi 0x5,2
 348:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 701               		.loc 1 348 0
 702 0054 2B98      		cbi 0x5,3
 349:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 703               		.loc 1 349 0
 704 0056 5F98      		cbi 0xb,7
 350:W_M.c         **** 
 351:W_M.c         ****       switch(fsm_ml.ml){
 705               		.loc 1 351 0
 706 0058 8091 0000 		lds r24,fsm_ml
 707 005c 8630      		cpi r24,lo8(6)
 708 005e 01F4      		brne .+2
 709 0060 00C0      		rjmp .L42
 710 0062 8730      		cpi r24,lo8(7)
 711 0064 01F0      		breq .+2
 712 0066 00C0      		rjmp .L20
 352:W_M.c         ****         case(ENCHER_ML):
 353:W_M.c         ****           if(lavar == EMERGENCIA){
 354:W_M.c         ****             break;
 355:W_M.c         ****           } // verifcar emergência
 356:W_M.c         ****           // printf("DEBUG: Super MOLHO - estado ENCHER_ML\n");
 357:W_M.c         ****           // printf("Abrir água\n");
 358:W_M.c         ****           palSetPad(IOPORT2, ENCHE_ID);
 359:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 360:W_M.c         ****             // printf("Sensor Cheio\n");
 361:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Sensor cheio\n\r");
 362:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 363:W_M.c         ****             fsm_ml.ml = RODAR_ML;
 364:W_M.c         ****             // printf("Início Giros Molho\n");
 365:W_M.c         ****           }
 366:W_M.c         ****           break;
 367:W_M.c         **** 
 368:W_M.c         ****         case(RODAR_ML):
 369:W_M.c         ****           if(lavar == EMERGENCIA){
 370:W_M.c         ****             break;
 371:W_M.c         ****           } // verifcar emergência
 372:W_M.c         ****           // printf("DEBUG: Super MOLHO - estado RODAR_ML\n");
 373:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Giros Molho\n\r");
 713               		.loc 1 373 0
 714 0068 80E0      		ldi r24,lo8(.LC14)
 715 006a 90E0      		ldi r25,hi8(.LC14)
 716 006c 9F93      		push r25
 717               	.LCFI50:
 718               		.cfi_def_cfa_offset 21
 719 006e 8F93      		push r24
 720               	.LCFI51:
 721               		.cfi_def_cfa_offset 22
 722 0070 C0E0      		ldi r28,lo8(SD1)
 723 0072 D0E0      		ldi r29,hi8(SD1)
 724 0074 DF93      		push r29
 725               	.LCFI52:
 726               		.cfi_def_cfa_offset 23
 727 0076 CF93      		push r28
 728               	.LCFI53:
 729               		.cfi_def_cfa_offset 24
 730 0078 0E94 0000 		call chprintf
 374:W_M.c         ****           spinning(fsm_ml.t_giro);
 731               		.loc 1 374 0
 732 007c 8091 0000 		lds r24,fsm_ml+1
 733 0080 9091 0000 		lds r25,fsm_ml+1+1
 734 0084 0E94 0000 		call spinning
 375:W_M.c         ****           lavar = LAVAGEM;
 735               		.loc 1 375 0
 736 0088 82E0      		ldi r24,lo8(2)
 737 008a 8093 0000 		sts lavar,r24
 738               	.LBB196:
 739               	.LBB197:
 129:W_M.c         ****   st->turns = 0;
 740               		.loc 1 129 0
 741 008e 88E0      		ldi r24,lo8(8)
 742 0090 8093 0000 		sts fsm_lvg,r24
 130:W_M.c         ****   st->t_espera = 1000;
 743               		.loc 1 130 0
 744 0094 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 745 0098 1092 0000 		sts fsm_lvg+5,__zero_reg__
 131:W_M.c         ****   st->t_giros = 2400;
 746               		.loc 1 131 0
 747 009c 88EE      		ldi r24,lo8(-24)
 748 009e 93E0      		ldi r25,lo8(3)
 749 00a0 9093 0000 		sts fsm_lvg+7+1,r25
 750 00a4 8093 0000 		sts fsm_lvg+7,r24
 132:W_M.c         ****   st->instante = chVTGetSystemTime();
 751               		.loc 1 132 0
 752 00a8 80E6      		ldi r24,lo8(96)
 753 00aa 99E0      		ldi r25,lo8(9)
 754 00ac 9093 0000 		sts fsm_lvg+9+1,r25
 755 00b0 8093 0000 		sts fsm_lvg+9,r24
 756               	.LBB198:
 757               	.LBB199:
 758               	.LBB200:
 759               	.LBB201:
 760               	.LBB202:
 437:../../../os/common/ports/AVR/chcore.h **** }
 761               		.loc 2 437 0
 762               	/* #APP */
 763               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 764 00b4 F894      		cli
 765               	 ;  0 "" 2
 766               	/* #NOAPP */
 767               	.LBE202:
 768               	.LBE201:
 769               	.LBE200:
 770               	.LBB203:
 771               	.LBB204:
 772               		.loc 3 118 0
 773 00b6 8091 0000 		lds r24,ch+19
 774 00ba 9091 0000 		lds r25,ch+19+1
 775               	.LBE204:
 776               	.LBE203:
 777               	.LBB205:
 778               	.LBB206:
 779               	.LBB207:
 780               	.LBB208:
 781               		.loc 2 447 0
 782               	/* #APP */
 783               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 784 00be 7894      		sei
 785               	 ;  0 "" 2
 786               	/* #NOAPP */
 787               	.LBE208:
 788               	.LBE207:
 789               	.LBE206:
 790               	.LBE205:
 791               	.LBE199:
 792               	.LBE198:
 133:W_M.c         ****   st->ul_espera = st->instante;
 793               		.loc 1 133 0
 794 00c0 9093 0000 		sts fsm_lvg+1+1,r25
 795 00c4 8093 0000 		sts fsm_lvg+1,r24
 134:W_M.c         **** }
 796               		.loc 1 134 0
 797 00c8 9093 0000 		sts fsm_lvg+3+1,r25
 798 00cc 8093 0000 		sts fsm_lvg+3,r24
 799               	.LBE197:
 800               	.LBE196:
 376:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 377:W_M.c         ****           // printf("Fim Molho\n");
 378:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "FIM Molho\n\r");
 801               		.loc 1 378 0
 802 00d0 80E0      		ldi r24,lo8(.LC15)
 803 00d2 90E0      		ldi r25,hi8(.LC15)
 804 00d4 9F93      		push r25
 805               	.LCFI54:
 806               		.cfi_def_cfa_offset 25
 807 00d6 8F93      		push r24
 808               	.LCFI55:
 809               		.cfi_def_cfa_offset 26
 810 00d8 DF93      		push r29
 811               	.LCFI56:
 812               		.cfi_def_cfa_offset 27
 813 00da CF93      		push r28
 814               	.LCFI57:
 815               		.cfi_def_cfa_offset 28
 816 00dc 0E94 0000 		call chprintf
 379:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 817               		.loc 1 379 0
 818 00e0 2898      		cbi 0x5,0
 380:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, ("Inicio LAVAGEM\n\r"));
 819               		.loc 1 380 0
 820 00e2 80E0      		ldi r24,lo8(.LC16)
 821 00e4 90E0      		ldi r25,hi8(.LC16)
 822 00e6 9F93      		push r25
 823               	.LCFI58:
 824               		.cfi_def_cfa_offset 29
 825 00e8 8F93      		push r24
 826               	.LCFI59:
 827               		.cfi_def_cfa_offset 30
 828 00ea DF93      		push r29
 829               	.LCFI60:
 830               		.cfi_def_cfa_offset 31
 831 00ec CF93      		push r28
 832               	.LCFI61:
 833               		.cfi_def_cfa_offset 32
 834 00ee 0E94 0000 		call chprintf
 381:W_M.c         ****           // printf("Inicio LAVAGEM\n");
 382:W_M.c         ****           break;
 835               		.loc 1 382 0
 836 00f2 8DB7      		in r24,__SP_L__
 837 00f4 9EB7      		in r25,__SP_H__
 838 00f6 0C96      		adiw r24,12
 839 00f8 0FB6      		in __tmp_reg__,__SREG__
 840 00fa F894      		cli
 841 00fc 9EBF      		out __SP_H__,r25
 842 00fe 0FBE      		out __SREG__,__tmp_reg__
 843 0100 8DBF      		out __SP_L__,r24
 844               	.LCFI62:
 845               		.cfi_def_cfa_offset 20
 846               	.L20:
 847               	/* epilogue start */
 383:W_M.c         ****       }
 384:W_M.c         ****       break;
 385:W_M.c         **** 
 386:W_M.c         **** 
 387:W_M.c         ****     case(LAVAGEM):
 388:W_M.c         ****       // printf("Inicio Lavagem\n");
 389:W_M.c         ****       palClearPad(IOPORT2, MOLHO_ID);
 390:W_M.c         ****       palSetPad(IOPORT2, LAVAGEM_ID);
 391:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 392:W_M.c         ****       palClearPad(IOPORT2, CENTRI_ID);
 393:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 394:W_M.c         **** 
 395:W_M.c         ****       switch(fsm_lvg.lvg){
 396:W_M.c         ****         case(RODAR_LVG):
 397:W_M.c         ****           if(lavar == EMERGENCIA){
 398:W_M.c         ****             break;
 399:W_M.c         ****           } // verifcar emergência
 400:W_M.c         ****           // printf("DEBUG Super LAVAGEM - estado RODAR_LVG\n");
 401:W_M.c         ****           // printf("Inicio giros Lavagem\n");
 402:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Giros Lavagem\n\r");
 403:W_M.c         ****           spinning(fsm_lvg.t_giros);
 404:W_M.c         ****           fsm_lvg.ul_espera = chVTGetSystemTime();
 405:W_M.c         ****           fsm_lvg.lvg = ESPERA_LVG;
 406:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
 407:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");
 408:W_M.c         **** 
 409:W_M.c         ****           break;
 410:W_M.c         **** 
 411:W_M.c         ****         case(ESPERA_LVG):
 412:W_M.c         ****           if(lavar == EMERGENCIA){
 413:W_M.c         ****             break;
 414:W_M.c         ****           } // verifcar emergência
 415:W_M.c         ****           fsm_lvg.instante = chVTGetSystemTime();
 416:W_M.c         ****           if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
 417:W_M.c         ****             fsm_lvg.ul_espera = chVTGetSystemTime();
 418:W_M.c         ****             if(fsm_lvg.turns >= 3){
 419:W_M.c         ****               fsm_lvg.turns = 0;
 420:W_M.c         ****               fsm_lvg.lvg = ESVAZIA_LVG;
 421:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
 422:W_M.c         ****               // printf("Fim giros Lavagem\n");
 423:W_M.c         **** 
 424:W_M.c         ****             } else {
 425:W_M.c         ****               fsm_lvg.turns ++;
 426:W_M.c         ****               fsm_lvg.lvg = RODAR_LVG;
 427:W_M.c         ****             } // fim if voltas
 428:W_M.c         ****           } // fim if tempo
 429:W_M.c         ****           break;
 430:W_M.c         **** 
 431:W_M.c         **** 
 432:W_M.c         ****         case(ESVAZIA_LVG):
 433:W_M.c         ****           if(lavar == EMERGENCIA){
 434:W_M.c         ****             break;
 435:W_M.c         ****           } // verificar emergência
 436:W_M.c         ****           palSetPad(IOPORT2, SECA_ID);
 437:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
 438:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 439:W_M.c         ****             // printf("Sensor Vazio: ON\n");
 440:W_M.c         ****             palClearPad(IOPORT2, SECA_ID);
 441:W_M.c         ****             // printf("Fim LAVAGEM\n");
 442:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Fim Lavagem\n\r");
 443:W_M.c         ****             palClearPad(IOPORT2, LAVAGEM_ID);
 444:W_M.c         **** 
 445:W_M.c         ****             // printf("Inicio ENXAGUE\n");
 446:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Inicio Enxague\n\r");
 447:W_M.c         ****               lavar = ENXAGUE;
 448:W_M.c         **** 
 449:W_M.c         ****               fsm_enxague_init(&fsm_exg);
 450:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Enche Enxague\n\r");
 451:W_M.c         ****             } // fim "if" sensor vazio
 452:W_M.c         ****             break;
 453:W_M.c         ****           } // fim switch LAVAGEM
 454:W_M.c         ****           break;
 455:W_M.c         **** 
 456:W_M.c         **** 
 457:W_M.c         ****     case(ENXAGUE):
 458:W_M.c         ****     palClearPad(IOPORT2, MOLHO_ID);
 459:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 460:W_M.c         ****     palSetPad(IOPORT2, ENXAGUE_ID);
 461:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 462:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 463:W_M.c         **** 
 464:W_M.c         ****       switch(fsm_exg.exg){
 465:W_M.c         ****         case(ENCHER_EXG):
 466:W_M.c         ****           if(lavar == EMERGENCIA){
 467:W_M.c         ****             break;
 468:W_M.c         ****           } // verificar emergência
 469:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estado ENCHER_EXG\n");
 470:W_M.c         ****           palSetPad(IOPORT2, ENCHE_ID);
 471:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 472:W_M.c         ****             // printf("Sensor Cheio: ON\n");
 473:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 474:W_M.c         ****             fsm_exg.exg = RODAR_EXG;
 475:W_M.c         **** 
 476:W_M.c         ****           } // fim "if" Sensor cheio
 477:W_M.c         ****           break;
 478:W_M.c         **** 
 479:W_M.c         ****         case(RODAR_EXG):
 480:W_M.c         ****           if(lavar == EMERGENCIA){
 481:W_M.c         ****             break;
 482:W_M.c         ****           } // verificar emergência
 483:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estado RODAR_EXG\n");
 484:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Rodar Enxague\n\r");
 485:W_M.c         ****           spinning(fsm_exg.t_giro);
 486:W_M.c         ****           fsm_exg.exg = ESVAZIA_EXG;
 487:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
 488:W_M.c         **** 
 489:W_M.c         ****         break;
 490:W_M.c         **** 
 491:W_M.c         ****         case(ESVAZIA_EXG):
 492:W_M.c         ****           if(lavar == EMERGENCIA){
 493:W_M.c         ****             break;
 494:W_M.c         ****           } //  verificar a emergência
 495:W_M.c         **** 
 496:W_M.c         ****           // printf("DEBUG: Super ENXAGUE - estados ESVAZIA_EXG\n");
 497:W_M.c         ****           palSetPad(IOPORT2, SECA_ID);
 498:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 499:W_M.c         ****              // printf("Sensor Vazio: ON\n");
 500:W_M.c         ****              palClearPad(IOPORT2, SECA_ID);
 501:W_M.c         ****              lavar = CENTRIFUGA;
 502:W_M.c         ****              fsm_centrifuga_init(&fsm_cen);
 503:W_M.c         ****              chprintf((BaseSequentialStream *)&SD1, "Fim Enxague\n\r");
 504:W_M.c         ****              // printf("Fim Enxágue\n");
 505:W_M.c         ****              palClearPad(IOPORT2, ENXAGUE_ID);
 506:W_M.c         ****              // printf("Inicio CENTRIFUGA\n");
 507:W_M.c         ****              chprintf((BaseSequentialStream *)&SD1, "Inicio Centrifuga\n\r");
 508:W_M.c         ****           }// fim "if" sensor vazio
 509:W_M.c         ****         break;
 510:W_M.c         ****       } // fim switch ENXAGUE
 511:W_M.c         ****       break;
 512:W_M.c         **** 
 513:W_M.c         **** 
 514:W_M.c         ****       case(CENTRIFUGA):
 515:W_M.c         ****       // printf("Inicio Centrifuga\n");
 516:W_M.c         ****       palClearPad(IOPORT2, MOLHO_ID);
 517:W_M.c         ****       palClearPad(IOPORT2, LAVAGEM_ID);
 518:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 519:W_M.c         ****       palSetPad(IOPORT2, CENTRI_ID);
 520:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 521:W_M.c         **** 
 522:W_M.c         ****         switch(fsm_cen.cen){
 523:W_M.c         ****           case(GIRA_R_CENTRI):
 524:W_M.c         ****             if(lavar == EMERGENCIA){
 525:W_M.c         ****               break;
 526:W_M.c         ****             }
 527:W_M.c         ****             palClearPad(IOPORT3, MOTOR_DIR);
 528:W_M.c         ****             // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
 529:W_M.c         ****             fsm_cen.tempo = chVTGetSystemTime();
 530:W_M.c         ****             // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
 531:W_M.c         ****             // printf("CENTRIFUGA: %ld - %ld\n", fsm_cen.instante, fsm_cen.ul_espera);
 532:W_M.c         ****             if(fsm_cen.tempo - fsm_cen.ul_centri > TIME_MS2I(fsm_cen.t_centri)){
 533:W_M.c         ****               palSetPad(IOPORT3, MOTOR_DIR);
 534:W_M.c         ****               lavar = PARADA;
 535:W_M.c         ****               fsm_parada_init(&fsm_prd);
 536:W_M.c         ****               palClearPad(IOPORT2, CENTRI_ID);
 537:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "FIM DO PROCESSO\n\r");
 538:W_M.c         ****               // printf("FIM DA Máquina\n");
 539:W_M.c         ****             }
 540:W_M.c         ****           break; // break de GIRA_R_CENTRI
 541:W_M.c         ****         } // fim switch CENTRIFUGA
 542:W_M.c         ****     break; // break de centrífuga.
 543:W_M.c         **** 
 544:W_M.c         **** 
 545:W_M.c         ****     case(EMERGENCIA):
 546:W_M.c         ****       // printf("PORTA ABERTA. ERRO !!\n");
 547:W_M.c         ****       while(1);
 548:W_M.c         **** 
 549:W_M.c         ****     break; // break de emergência
 550:W_M.c         ****   } // fim switch máquina principal
 551:W_M.c         **** } // fim função da máquina principal.
 848               		.loc 1 551 0
 849 0102 DF91      		pop r29
 850 0104 CF91      		pop r28
 851 0106 1F91      		pop r17
 852 0108 0F91      		pop r16
 853 010a FF90      		pop r15
 854 010c EF90      		pop r14
 855 010e DF90      		pop r13
 856 0110 CF90      		pop r12
 857 0112 BF90      		pop r11
 858 0114 AF90      		pop r10
 859 0116 9F90      		pop r9
 860 0118 8F90      		pop r8
 861 011a 7F90      		pop r7
 862 011c 6F90      		pop r6
 863 011e 5F90      		pop r5
 864 0120 4F90      		pop r4
 865 0122 3F90      		pop r3
 866 0124 2F90      		pop r2
 867 0126 0895      		ret
 868               	.L26:
 516:W_M.c         ****       palClearPad(IOPORT2, LAVAGEM_ID);
 869               		.loc 1 516 0
 870 0128 2898      		cbi 0x5,0
 517:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 871               		.loc 1 517 0
 872 012a 2998      		cbi 0x5,1
 518:W_M.c         ****       palSetPad(IOPORT2, CENTRI_ID);
 873               		.loc 1 518 0
 874 012c 2A98      		cbi 0x5,2
 519:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 875               		.loc 1 519 0
 876 012e 2B9A      		sbi 0x5,3
 520:W_M.c         **** 
 877               		.loc 1 520 0
 878 0130 5F98      		cbi 0xb,7
 522:W_M.c         ****           case(GIRA_R_CENTRI):
 879               		.loc 1 522 0
 880 0132 8091 0000 		lds r24,fsm_cen
 881 0136 8E30      		cpi r24,lo8(14)
 882 0138 01F4      		brne .L20
 527:W_M.c         ****             // printf("DEBUG: Super CENTRIFUGA - estado GIRA_R_CENTRI\n");
 883               		.loc 1 527 0
 884 013a 4098      		cbi 0x8,0
 885               	.LBB209:
 886               	.LBB210:
 887               	.LBB211:
 888               	.LBB212:
 889               	.LBB213:
 437:../../../os/common/ports/AVR/chcore.h **** }
 890               		.loc 2 437 0
 891               	/* #APP */
 892               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 893 013c F894      		cli
 894               	 ;  0 "" 2
 895               	/* #NOAPP */
 896               	.LBE213:
 897               	.LBE212:
 898               	.LBE211:
 899               	.LBB214:
 900               	.LBB215:
 901               		.loc 3 118 0
 902 013e 8091 0000 		lds r24,ch+19
 903 0142 9091 0000 		lds r25,ch+19+1
 904               	.LBE215:
 905               	.LBE214:
 906               	.LBB216:
 907               	.LBB217:
 908               	.LBB218:
 909               	.LBB219:
 910               		.loc 2 447 0
 911               	/* #APP */
 912               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 913 0146 7894      		sei
 914               	 ;  0 "" 2
 915               	/* #NOAPP */
 916               	.LBE219:
 917               	.LBE218:
 918               	.LBE217:
 919               	.LBE216:
 920               	.LBE210:
 921               	.LBE209:
 529:W_M.c         ****             // printf("Super:%d - estado:%d\n ",lavar, fsm_cen.cen);
 922               		.loc 1 529 0
 923 0148 9093 0000 		sts fsm_cen+1+1,r25
 924 014c 8093 0000 		sts fsm_cen+1,r24
 532:W_M.c         ****               palSetPad(IOPORT3, MOTOR_DIR);
 925               		.loc 1 532 0
 926 0150 A091 0000 		lds r26,fsm_cen+5
 927 0154 B091 0000 		lds r27,fsm_cen+5+1
 928 0158 2091 0000 		lds r18,fsm_cen+3
 929 015c 3091 0000 		lds r19,fsm_cen+3+1
 930 0160 EC01      		movw r28,r24
 931 0162 C21B      		sub r28,r18
 932 0164 D30B      		sbc r29,r19
 933 0166 28E0      		ldi r18,lo8(8)
 934 0168 3DE3      		ldi r19,lo8(61)
 935 016a 0E94 0000 		call __usmulhisi3
 936 016e 6951      		subi r22,25
 937 0170 7C4F      		sbci r23,-4
 938 0172 8F4F      		sbci r24,-1
 939 0174 9F4F      		sbci r25,-1
 940 0176 28EE      		ldi r18,lo8(-24)
 941 0178 33E0      		ldi r19,lo8(3)
 942 017a 40E0      		ldi r20,0
 943 017c 50E0      		ldi r21,0
 944 017e 0E94 0000 		call __udivmodsi4
 945 0182 2C17      		cp r18,r28
 946 0184 3D07      		cpc r19,r29
 947 0186 00F0      		brlo .+2
 948 0188 00C0      		rjmp .L20
 533:W_M.c         ****               lavar = PARADA;
 949               		.loc 1 533 0
 950 018a 409A      		sbi 0x8,0
 534:W_M.c         ****               fsm_parada_init(&fsm_prd);
 951               		.loc 1 534 0
 952 018c 1092 0000 		sts lavar,__zero_reg__
 953               	.LBB220:
 954               	.LBB221:
 118:W_M.c         **** }
 955               		.loc 1 118 0
 956 0190 1092 0000 		sts fsm_prd+1,__zero_reg__
 957 0194 1092 0000 		sts fsm_prd,__zero_reg__
 958               	.LBE221:
 959               	.LBE220:
 536:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "FIM DO PROCESSO\n\r");
 960               		.loc 1 536 0
 961 0198 2B98      		cbi 0x5,3
 537:W_M.c         ****               // printf("FIM DA Máquina\n");
 962               		.loc 1 537 0
 963 019a 80E0      		ldi r24,lo8(.LC27)
 964 019c 90E0      		ldi r25,hi8(.LC27)
 965 019e 00C0      		rjmp .L82
 966               	.L24:
 275:W_M.c         ****       chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 967               		.loc 1 275 0
 968 01a0 80E0      		ldi r24,lo8(.LC5)
 969 01a2 90E0      		ldi r25,hi8(.LC5)
 970 01a4 9F93      		push r25
 971               	.LCFI63:
 972               		.cfi_def_cfa_offset 21
 973 01a6 8F93      		push r24
 974               	.LCFI64:
 975               		.cfi_def_cfa_offset 22
 976 01a8 C0E0      		ldi r28,lo8(SD1)
 977 01aa D0E0      		ldi r29,hi8(SD1)
 978 01ac DF93      		push r29
 979               	.LCFI65:
 980               		.cfi_def_cfa_offset 23
 981 01ae CF93      		push r28
 982               	.LCFI66:
 983               		.cfi_def_cfa_offset 24
 984 01b0 0E94 0000 		call chprintf
 276:W_M.c         ****       // scanf("%d", &fsm_prd.select_init);
 985               		.loc 1 276 0
 986 01b4 80E0      		ldi r24,lo8(.LC6)
 987 01b6 90E0      		ldi r25,hi8(.LC6)
 988 01b8 9F93      		push r25
 989               	.LCFI67:
 990               		.cfi_def_cfa_offset 25
 991 01ba 8F93      		push r24
 992               	.LCFI68:
 993               		.cfi_def_cfa_offset 26
 994 01bc DF93      		push r29
 995               	.LCFI69:
 996               		.cfi_def_cfa_offset 27
 997 01be CF93      		push r28
 998               	.LCFI70:
 999               		.cfi_def_cfa_offset 28
 1000 01c0 0E94 0000 		call chprintf
 1001 01c4 8DB7      		in r24,__SP_L__
 1002 01c6 9EB7      		in r25,__SP_H__
 1003 01c8 0896      		adiw r24,8
 1004 01ca 0FB6      		in __tmp_reg__,__SREG__
 1005 01cc F894      		cli
 1006 01ce 9EBF      		out __SP_H__,r25
 1007 01d0 0FBE      		out __SREG__,__tmp_reg__
 1008 01d2 8DBF      		out __SP_L__,r24
 1009               	.LCFI71:
 1010               		.cfi_def_cfa_offset 20
 316:W_M.c         ****           palClearPad(IOPORT2, ENXAGUE_ID);
 1011               		.loc 1 316 0
 1012 01d4 00E0      		ldi r16,lo8(.LC9)
 1013 01d6 10E0      		ldi r17,hi8(.LC9)
 305:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
 1014               		.loc 1 305 0
 1015 01d8 82E0      		ldi r24,lo8(2)
 1016 01da 282E      		mov r2,r24
 1017 01dc 312C      		mov r3,__zero_reg__
 306:W_M.c         ****           palClearPad(IOPORT2, LAVAGEM_ID);
 1018               		.loc 1 306 0
 1019 01de 90E0      		ldi r25,lo8(.LC8)
 1020 01e0 492E      		mov r4,r25
 1021 01e2 90E0      		ldi r25,hi8(.LC8)
 1022 01e4 592E      		mov r5,r25
 1023               	.LBB222:
 1024               	.LBB223:
 124:W_M.c         **** }
 1025               		.loc 1 124 0
 1026 01e6 20ED      		ldi r18,lo8(-48)
 1027 01e8 622E      		mov r6,r18
 1028 01ea 27E0      		ldi r18,lo8(7)
 1029 01ec 722E      		mov r7,r18
 1030               	.LBE223:
 1031               	.LBE222:
 1032               	.LBB225:
 1033               	.LBB226:
 131:W_M.c         ****   st->t_giros = 2400;
 1034               		.loc 1 131 0
 1035 01ee 38EE      		ldi r19,lo8(-24)
 1036 01f0 832E      		mov r8,r19
 1037 01f2 33E0      		ldi r19,lo8(3)
 1038 01f4 932E      		mov r9,r19
 132:W_M.c         ****   st->instante = chVTGetSystemTime();
 1039               		.loc 1 132 0
 1040 01f6 40E6      		ldi r20,lo8(96)
 1041 01f8 A42E      		mov r10,r20
 1042 01fa 49E0      		ldi r20,lo8(9)
 1043 01fc B42E      		mov r11,r20
 1044               	.LBE226:
 1045               	.LBE225:
 295:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 1046               		.loc 1 295 0
 1047 01fe CC24      		clr r12
 1048 0200 C394      		inc r12
 1049 0202 D12C      		mov r13,__zero_reg__
 296:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 1050               		.loc 1 296 0
 1051 0204 60E0      		ldi r22,lo8(.LC7)
 1052 0206 E62E      		mov r14,r22
 1053 0208 60E0      		ldi r22,hi8(.LC7)
 1054 020a F62E      		mov r15,r22
 1055 020c 00C0      		rjmp .L39
 1056               	.L86:
 280:W_M.c         ****           palSetPad(IOPORT2, MOLHO_ID);
 1057               		.loc 1 280 0
 1058 020e 5F9A      		sbi 0xb,7
 281:W_M.c         ****           palSetPad(IOPORT2, LAVAGEM_ID);
 1059               		.loc 1 281 0
 1060 0210 289A      		sbi 0x5,0
 282:W_M.c         ****           palSetPad(IOPORT2, ENXAGUE_ID);
 1061               		.loc 1 282 0
 1062 0212 299A      		sbi 0x5,1
 283:W_M.c         ****           palSetPad(IOPORT2, CENTRI_ID);
 1063               		.loc 1 283 0
 1064 0214 2A9A      		sbi 0x5,2
 284:W_M.c         ****           lavar = MOLHO;
 1065               		.loc 1 284 0
 1066 0216 2B9A      		sbi 0x5,3
 285:W_M.c         ****           fsm_molho_init(&fsm_ml);
 1067               		.loc 1 285 0
 1068 0218 81E0      		ldi r24,lo8(1)
 1069 021a 8093 0000 		sts lavar,r24
 1070               	.LBB239:
 1071               	.LBB224:
 123:W_M.c         ****   st->t_giro = 2000;
 1072               		.loc 1 123 0
 1073 021e 86E0      		ldi r24,lo8(6)
 1074 0220 8093 0000 		sts fsm_ml,r24
 124:W_M.c         **** }
 1075               		.loc 1 124 0
 1076 0224 7092 0000 		sts fsm_ml+1+1,r7
 1077 0228 6092 0000 		sts fsm_ml+1,r6
 1078               	.LBE224:
 1079               	.LBE239:
 289:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1080               		.loc 1 289 0
 1081 022c 4E99      		sbic 0x9,6
 1082 022e 00C0      		rjmp .L84
 1083               	.L36:
 326:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1084               		.loc 1 326 0
 1085 0230 4D99      		sbic 0x9,5
 1086 0232 00C0      		rjmp .L85
 1087               	.L39:
 279:W_M.c         ****           palSetPad(IOPORT4, PARADA_ID);
 1088               		.loc 1 279 0
 1089 0234 8091 0000 		lds r24,fsm_prd
 1090 0238 9091 0000 		lds r25,fsm_prd+1
 1091 023c 0097      		sbiw r24,0
 1092 023e 01F0      		breq .L86
 1093               	.L29:
 300:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1094               		.loc 1 300 0
 1095 0240 8130      		cpi r24,1
 1096 0242 9105      		cpc r25,__zero_reg__
 1097 0244 01F4      		brne .+2
 1098 0246 00C0      		rjmp .L87
 1099               	.L32:
 310:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1100               		.loc 1 310 0
 1101 0248 8230      		cpi r24,2
 1102 024a 9105      		cpc r25,__zero_reg__
 1103 024c 01F4      		brne .L34
 310:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1104               		.loc 1 310 0 is_stmt 0 discriminator 1
 1105 024e 4E9B      		sbis 0x9,6
 1106 0250 00C0      		rjmp .L36
 311:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1107               		.loc 1 311 0 is_stmt 1
 1108 0252 89E3      		ldi r24,lo8(57)
 1109 0254 91E0      		ldi r25,lo8(1)
 1110 0256 0E94 0000 		call chThdSleep
 1111               	.L37:
 312:W_M.c         ****           lavar = CENTRIFUGA;
 1112               		.loc 1 312 0 discriminator 1
 1113 025a 4E99      		sbic 0x9,6
 1114 025c 00C0      		rjmp .L37
 313:W_M.c         ****           fsm_centrifuga_init(&fsm_cen);
 1115               		.loc 1 313 0
 1116 025e 84E0      		ldi r24,lo8(4)
 1117 0260 8093 0000 		sts lavar,r24
 1118               	.LBB240:
 1119               	.LBB241:
 145:W_M.c         ****   st->tempo = chVTGetSystemTime();
 1120               		.loc 1 145 0
 1121 0264 8EE0      		ldi r24,lo8(14)
 1122 0266 8093 0000 		sts fsm_cen,r24
 1123               	.LBB242:
 1124               	.LBB243:
 1125               	.LBB244:
 1126               	.LBB245:
 1127               	.LBB246:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1128               		.loc 2 437 0
 1129               	/* #APP */
 1130               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1131 026a F894      		cli
 1132               	 ;  0 "" 2
 1133               	/* #NOAPP */
 1134               	.LBE246:
 1135               	.LBE245:
 1136               	.LBE244:
 1137               	.LBB247:
 1138               	.LBB248:
 1139               		.loc 3 118 0
 1140 026c 8091 0000 		lds r24,ch+19
 1141 0270 9091 0000 		lds r25,ch+19+1
 1142               	.LBE248:
 1143               	.LBE247:
 1144               	.LBB249:
 1145               	.LBB250:
 1146               	.LBB251:
 1147               	.LBB252:
 1148               		.loc 2 447 0
 1149               	/* #APP */
 1150               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1151 0274 7894      		sei
 1152               	 ;  0 "" 2
 1153               	/* #NOAPP */
 1154               	.LBE252:
 1155               	.LBE251:
 1156               	.LBE250:
 1157               	.LBE249:
 1158               	.LBE243:
 1159               	.LBE242:
 146:W_M.c         ****   st->ul_centri = st->tempo;
 1160               		.loc 1 146 0
 1161 0276 9093 0000 		sts fsm_cen+1+1,r25
 1162 027a 8093 0000 		sts fsm_cen+1,r24
 147:W_M.c         ****   st->t_centri = 4000;
 1163               		.loc 1 147 0
 1164 027e 9093 0000 		sts fsm_cen+3+1,r25
 1165 0282 8093 0000 		sts fsm_cen+3,r24
 148:W_M.c         **** }
 1166               		.loc 1 148 0
 1167 0286 80EA      		ldi r24,lo8(-96)
 1168 0288 9FE0      		ldi r25,lo8(15)
 1169 028a 9093 0000 		sts fsm_cen+5+1,r25
 1170 028e 8093 0000 		sts fsm_cen+5,r24
 1171               	.LBE241:
 1172               	.LBE240:
 315:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Centrifuga\n\r");
 1173               		.loc 1 315 0
 1174 0292 83E0      		ldi r24,lo8(3)
 1175 0294 90E0      		ldi r25,0
 1176 0296 9093 0000 		sts fsm_prd+1,r25
 1177 029a 8093 0000 		sts fsm_prd,r24
 316:W_M.c         ****           palClearPad(IOPORT2, ENXAGUE_ID);
 1178               		.loc 1 316 0
 1179 029e 1F93      		push r17
 1180               	.LCFI72:
 1181               		.cfi_def_cfa_offset 21
 1182 02a0 0F93      		push r16
 1183               	.LCFI73:
 1184               		.cfi_def_cfa_offset 22
 1185 02a2 DF93      		push r29
 1186               	.LCFI74:
 1187               		.cfi_def_cfa_offset 23
 1188 02a4 CF93      		push r28
 1189               	.LCFI75:
 1190               		.cfi_def_cfa_offset 24
 1191 02a6 0E94 0000 		call chprintf
 317:W_M.c         ****           // printf("Inicio ENXAGUE\n");
 1192               		.loc 1 317 0
 1193 02aa 2A98      		cbi 0x5,2
 1194 02ac 8091 0000 		lds r24,fsm_prd
 1195 02b0 9091 0000 		lds r25,fsm_prd+1
 1196 02b4 0F90      		pop __tmp_reg__
 1197 02b6 0F90      		pop __tmp_reg__
 1198 02b8 0F90      		pop __tmp_reg__
 1199 02ba 0F90      		pop __tmp_reg__
 1200               	.LCFI76:
 1201               		.cfi_def_cfa_offset 20
 1202               	.L34:
 320:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1203               		.loc 1 320 0
 1204 02bc 0397      		sbiw r24,3
 1205 02be 01F0      		breq .+2
 1206 02c0 00C0      		rjmp .L36
 320:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1207               		.loc 1 320 0 is_stmt 0 discriminator 1
 1208 02c2 4E9B      		sbis 0x9,6
 1209 02c4 00C0      		rjmp .L36
 321:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1210               		.loc 1 321 0 is_stmt 1
 1211 02c6 89E3      		ldi r24,lo8(57)
 1212 02c8 91E0      		ldi r25,lo8(1)
 1213 02ca 0E94 0000 		call chThdSleep
 1214               	.L38:
 322:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Molho\n\r");
 1215               		.loc 1 322 0 discriminator 1
 1216 02ce 4E99      		sbic 0x9,6
 1217 02d0 00C0      		rjmp .L38
 323:W_M.c         ****           fsm_prd.select_init = 0;
 1218               		.loc 1 323 0
 1219 02d2 80E0      		ldi r24,lo8(.LC6)
 1220 02d4 90E0      		ldi r25,hi8(.LC6)
 1221 02d6 9F93      		push r25
 1222               	.LCFI77:
 1223               		.cfi_def_cfa_offset 21
 1224 02d8 8F93      		push r24
 1225               	.LCFI78:
 1226               		.cfi_def_cfa_offset 22
 1227 02da DF93      		push r29
 1228               	.LCFI79:
 1229               		.cfi_def_cfa_offset 23
 1230 02dc CF93      		push r28
 1231               	.LCFI80:
 1232               		.cfi_def_cfa_offset 24
 1233 02de 0E94 0000 		call chprintf
 324:W_M.c         ****         }
 1234               		.loc 1 324 0
 1235 02e2 1092 0000 		sts fsm_prd+1,__zero_reg__
 1236 02e6 1092 0000 		sts fsm_prd,__zero_reg__
 1237 02ea 0F90      		pop __tmp_reg__
 1238 02ec 0F90      		pop __tmp_reg__
 1239 02ee 0F90      		pop __tmp_reg__
 1240 02f0 0F90      		pop __tmp_reg__
 1241               	.LCFI81:
 1242               		.cfi_def_cfa_offset 20
 326:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1243               		.loc 1 326 0
 1244 02f2 4D9B      		sbis 0x9,5
 1245 02f4 00C0      		rjmp .L39
 1246               	.L85:
 327:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Inicio do processo\n\r");
 1247               		.loc 1 327 0
 1248 02f6 89E3      		ldi r24,lo8(57)
 1249 02f8 91E0      		ldi r25,lo8(1)
 1250 02fa 0E94 0000 		call chThdSleep
 328:W_M.c         ****           if(fsm_prd.select_init == 0){
 1251               		.loc 1 328 0
 1252 02fe 80E0      		ldi r24,lo8(.LC10)
 1253 0300 90E0      		ldi r25,hi8(.LC10)
 1254 0302 9F93      		push r25
 1255               	.LCFI82:
 1256               		.cfi_def_cfa_offset 21
 1257 0304 8F93      		push r24
 1258               	.LCFI83:
 1259               		.cfi_def_cfa_offset 22
 1260 0306 C0E0      		ldi r28,lo8(SD1)
 1261 0308 D0E0      		ldi r29,hi8(SD1)
 1262 030a DF93      		push r29
 1263               	.LCFI84:
 1264               		.cfi_def_cfa_offset 23
 1265 030c CF93      		push r28
 1266               	.LCFI85:
 1267               		.cfi_def_cfa_offset 24
 1268 030e 0E94 0000 		call chprintf
 329:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o Molho \n\r");
 1269               		.loc 1 329 0
 1270 0312 8091 0000 		lds r24,fsm_prd
 1271 0316 9091 0000 		lds r25,fsm_prd+1
 1272 031a 0F90      		pop __tmp_reg__
 1273 031c 0F90      		pop __tmp_reg__
 1274 031e 0F90      		pop __tmp_reg__
 1275 0320 0F90      		pop __tmp_reg__
 1276               	.LCFI86:
 1277               		.cfi_def_cfa_offset 20
 1278 0322 0097      		sbiw r24,0
 1279 0324 01F4      		brne .+2
 1280 0326 00C0      		rjmp .L88
 1281               	.L40:
 332:W_M.c         ****             chprintf((BaseSequentialStream *)&SD1, "Enchendo para o enxague\n\r");
 1282               		.loc 1 332 0
 1283 0328 0297      		sbiw r24,2
 1284 032a 01F0      		breq .+2
 1285 032c 00C0      		rjmp .L20
 333:W_M.c         ****           }
 1286               		.loc 1 333 0
 1287 032e 80E0      		ldi r24,lo8(.LC12)
 1288 0330 90E0      		ldi r25,hi8(.LC12)
 1289               	.L82:
 421:W_M.c         ****               // printf("Fim giros Lavagem\n");
 1290               		.loc 1 421 0
 1291 0332 9F93      		push r25
 1292               	.LCFI87:
 1293               		.cfi_def_cfa_offset 21
 1294 0334 8F93      		push r24
 1295               	.LCFI88:
 1296               		.cfi_def_cfa_offset 22
 1297 0336 80E0      		ldi r24,lo8(SD1)
 1298 0338 90E0      		ldi r25,hi8(SD1)
 1299 033a 9F93      		push r25
 1300               	.LCFI89:
 1301               		.cfi_def_cfa_offset 23
 1302 033c 8F93      		push r24
 1303               	.LCFI90:
 1304               		.cfi_def_cfa_offset 24
 1305 033e 0E94 0000 		call chprintf
 1306 0342 0F90      		pop __tmp_reg__
 1307 0344 0F90      		pop __tmp_reg__
 1308 0346 0F90      		pop __tmp_reg__
 1309 0348 0F90      		pop __tmp_reg__
 1310               	.LCFI91:
 1311               		.cfi_def_cfa_offset 20
 1312 034a 00C0      		rjmp .L20
 1313               	.L87:
 300:W_M.c         ****           chThdSleepMilliseconds(20); // Debouncing time
 1314               		.loc 1 300 0 discriminator 1
 1315 034c 4E9B      		sbis 0x9,6
 1316 034e 00C0      		rjmp .L36
 301:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1317               		.loc 1 301 0
 1318 0350 89E3      		ldi r24,lo8(57)
 1319 0352 91E0      		ldi r25,lo8(1)
 1320 0354 0E94 0000 		call chThdSleep
 1321               	.L33:
 302:W_M.c         ****           lavar = ENXAGUE;
 1322               		.loc 1 302 0 discriminator 1
 1323 0358 4E99      		sbic 0x9,6
 1324 035a 00C0      		rjmp .L33
 303:W_M.c         ****           fsm_enxague_init(&fsm_exg);
 1325               		.loc 1 303 0
 1326 035c 83E0      		ldi r24,lo8(3)
 1327 035e 8093 0000 		sts lavar,r24
 1328               	.LBB253:
 1329               	.LBB254:
 139:W_M.c         ****   st->t_giro = 3000;
 1330               		.loc 1 139 0
 1331 0362 8BE0      		ldi r24,lo8(11)
 1332 0364 8093 0000 		sts fsm_exg,r24
 140:W_M.c         **** }
 1333               		.loc 1 140 0
 1334 0368 88EB      		ldi r24,lo8(-72)
 1335 036a 9BE0      		ldi r25,lo8(11)
 1336 036c 9093 0000 		sts fsm_exg+1+1,r25
 1337 0370 8093 0000 		sts fsm_exg+1,r24
 1338               	.LBE254:
 1339               	.LBE253:
 305:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Enxague\n\r");
 1340               		.loc 1 305 0
 1341 0374 3092 0000 		sts fsm_prd+1,r3
 1342 0378 2092 0000 		sts fsm_prd,r2
 306:W_M.c         ****           palClearPad(IOPORT2, LAVAGEM_ID);
 1343               		.loc 1 306 0
 1344 037c 5F92      		push r5
 1345               	.LCFI92:
 1346               		.cfi_def_cfa_offset 21
 1347 037e 4F92      		push r4
 1348               	.LCFI93:
 1349               		.cfi_def_cfa_offset 22
 1350 0380 DF93      		push r29
 1351               	.LCFI94:
 1352               		.cfi_def_cfa_offset 23
 1353 0382 CF93      		push r28
 1354               	.LCFI95:
 1355               		.cfi_def_cfa_offset 24
 1356 0384 0E94 0000 		call chprintf
 307:W_M.c         **** 
 1357               		.loc 1 307 0
 1358 0388 2998      		cbi 0x5,1
 1359 038a 8091 0000 		lds r24,fsm_prd
 1360 038e 9091 0000 		lds r25,fsm_prd+1
 1361 0392 0F90      		pop __tmp_reg__
 1362 0394 0F90      		pop __tmp_reg__
 1363 0396 0F90      		pop __tmp_reg__
 1364 0398 0F90      		pop __tmp_reg__
 1365               	.LCFI96:
 1366               		.cfi_def_cfa_offset 20
 1367 039a 00C0      		rjmp .L32
 1368               	.L27:
 458:W_M.c         ****     palClearPad(IOPORT2, LAVAGEM_ID);
 1369               		.loc 1 458 0
 1370 039c 2898      		cbi 0x5,0
 459:W_M.c         ****     palSetPad(IOPORT2, ENXAGUE_ID);
 1371               		.loc 1 459 0
 1372 039e 2998      		cbi 0x5,1
 460:W_M.c         ****     palClearPad(IOPORT2, CENTRI_ID);
 1373               		.loc 1 460 0
 1374 03a0 2A9A      		sbi 0x5,2
 461:W_M.c         ****     palClearPad(IOPORT4, PARADA_ID);
 1375               		.loc 1 461 0
 1376 03a2 2B98      		cbi 0x5,3
 462:W_M.c         **** 
 1377               		.loc 1 462 0
 1378 03a4 5F98      		cbi 0xb,7
 464:W_M.c         ****         case(ENCHER_EXG):
 1379               		.loc 1 464 0
 1380 03a6 8091 0000 		lds r24,fsm_exg
 1381 03aa 8C30      		cpi r24,lo8(12)
 1382 03ac 01F4      		brne .+2
 1383 03ae 00C0      		rjmp .L49
 1384 03b0 8D30      		cpi r24,lo8(13)
 1385 03b2 01F4      		brne .+2
 1386 03b4 00C0      		rjmp .L50
 1387 03b6 8B30      		cpi r24,lo8(11)
 1388 03b8 01F0      		breq .+2
 1389 03ba 00C0      		rjmp .L20
 470:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 1390               		.loc 1 470 0
 1391 03bc 2C9A      		sbi 0x5,4
 471:W_M.c         ****             // printf("Sensor Cheio: ON\n");
 1392               		.loc 1 471 0
 1393 03be 4C9B      		sbis 0x9,4
 1394 03c0 00C0      		rjmp .L20
 473:W_M.c         ****             fsm_exg.exg = RODAR_EXG;
 1395               		.loc 1 473 0
 1396 03c2 2C98      		cbi 0x5,4
 474:W_M.c         **** 
 1397               		.loc 1 474 0
 1398 03c4 8CE0      		ldi r24,lo8(12)
 1399 03c6 8093 0000 		sts fsm_exg,r24
 1400 03ca 00C0      		rjmp .L20
 1401               	.L22:
 389:W_M.c         ****       palSetPad(IOPORT2, LAVAGEM_ID);
 1402               		.loc 1 389 0
 1403 03cc 2898      		cbi 0x5,0
 390:W_M.c         ****       palClearPad(IOPORT2, ENXAGUE_ID);
 1404               		.loc 1 390 0
 1405 03ce 299A      		sbi 0x5,1
 391:W_M.c         ****       palClearPad(IOPORT2, CENTRI_ID);
 1406               		.loc 1 391 0
 1407 03d0 2A98      		cbi 0x5,2
 392:W_M.c         ****       palClearPad(IOPORT4, PARADA_ID);
 1408               		.loc 1 392 0
 1409 03d2 2B98      		cbi 0x5,3
 393:W_M.c         **** 
 1410               		.loc 1 393 0
 1411 03d4 5F98      		cbi 0xb,7
 395:W_M.c         ****         case(RODAR_LVG):
 1412               		.loc 1 395 0
 1413 03d6 8091 0000 		lds r24,fsm_lvg
 1414 03da 8930      		cpi r24,lo8(9)
 1415 03dc 01F4      		brne .+2
 1416 03de 00C0      		rjmp .L45
 1417 03e0 8A30      		cpi r24,lo8(10)
 1418 03e2 01F4      		brne .+2
 1419 03e4 00C0      		rjmp .L46
 1420 03e6 8830      		cpi r24,lo8(8)
 1421 03e8 01F0      		breq .+2
 1422 03ea 00C0      		rjmp .L20
 402:W_M.c         ****           spinning(fsm_lvg.t_giros);
 1423               		.loc 1 402 0
 1424 03ec 80E0      		ldi r24,lo8(.LC17)
 1425 03ee 90E0      		ldi r25,hi8(.LC17)
 1426 03f0 9F93      		push r25
 1427               	.LCFI97:
 1428               		.cfi_def_cfa_offset 21
 1429 03f2 8F93      		push r24
 1430               	.LCFI98:
 1431               		.cfi_def_cfa_offset 22
 1432 03f4 C0E0      		ldi r28,lo8(SD1)
 1433 03f6 D0E0      		ldi r29,hi8(SD1)
 1434 03f8 DF93      		push r29
 1435               	.LCFI99:
 1436               		.cfi_def_cfa_offset 23
 1437 03fa CF93      		push r28
 1438               	.LCFI100:
 1439               		.cfi_def_cfa_offset 24
 1440 03fc 0E94 0000 		call chprintf
 403:W_M.c         ****           fsm_lvg.ul_espera = chVTGetSystemTime();
 1441               		.loc 1 403 0
 1442 0400 8091 0000 		lds r24,fsm_lvg+9
 1443 0404 9091 0000 		lds r25,fsm_lvg+9+1
 1444 0408 0E94 0000 		call spinning
 1445               	.LBB255:
 1446               	.LBB256:
 1447               	.LBB257:
 1448               	.LBB258:
 1449               	.LBB259:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1450               		.loc 2 437 0
 1451               	/* #APP */
 1452               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1453 040c F894      		cli
 1454               	 ;  0 "" 2
 1455               	/* #NOAPP */
 1456               	.LBE259:
 1457               	.LBE258:
 1458               	.LBE257:
 1459               	.LBB260:
 1460               	.LBB261:
 1461               		.loc 3 118 0
 1462 040e 8091 0000 		lds r24,ch+19
 1463 0412 9091 0000 		lds r25,ch+19+1
 1464               	.LBE261:
 1465               	.LBE260:
 1466               	.LBB262:
 1467               	.LBB263:
 1468               	.LBB264:
 1469               	.LBB265:
 1470               		.loc 2 447 0
 1471               	/* #APP */
 1472               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1473 0416 7894      		sei
 1474               	 ;  0 "" 2
 1475               	/* #NOAPP */
 1476               	.LBE265:
 1477               	.LBE264:
 1478               	.LBE263:
 1479               	.LBE262:
 1480               	.LBE256:
 1481               	.LBE255:
 404:W_M.c         ****           fsm_lvg.lvg = ESPERA_LVG;
 1482               		.loc 1 404 0
 1483 0418 9093 0000 		sts fsm_lvg+3+1,r25
 1484 041c 8093 0000 		sts fsm_lvg+3,r24
 405:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Espera Lavagem\n\r");
 1485               		.loc 1 405 0
 1486 0420 89E0      		ldi r24,lo8(9)
 1487 0422 8093 0000 		sts fsm_lvg,r24
 406:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESPERA\n");
 1488               		.loc 1 406 0
 1489 0426 80E0      		ldi r24,lo8(.LC18)
 1490 0428 90E0      		ldi r25,hi8(.LC18)
 1491 042a 9F93      		push r25
 1492               	.LCFI101:
 1493               		.cfi_def_cfa_offset 25
 1494 042c 8F93      		push r24
 1495               	.LCFI102:
 1496               		.cfi_def_cfa_offset 26
 1497 042e DF93      		push r29
 1498               	.LCFI103:
 1499               		.cfi_def_cfa_offset 27
 1500 0430 CF93      		push r28
 1501               	.LCFI104:
 1502               		.cfi_def_cfa_offset 28
 1503 0432 0E94 0000 		call chprintf
 409:W_M.c         **** 
 1504               		.loc 1 409 0
 1505 0436 8DB7      		in r24,__SP_L__
 1506 0438 9EB7      		in r25,__SP_H__
 1507 043a 0896      		adiw r24,8
 1508 043c 0FB6      		in __tmp_reg__,__SREG__
 1509 043e F894      		cli
 1510 0440 9EBF      		out __SP_H__,r25
 1511 0442 0FBE      		out __SREG__,__tmp_reg__
 1512 0444 8DBF      		out __SP_L__,r24
 1513               	.LCFI105:
 1514               		.cfi_def_cfa_offset 20
 1515 0446 00C0      		rjmp .L20
 1516               	.L84:
 290:W_M.c         ****           while(palReadPad(IOPORT4, BOT_SELECT) == PAL_HIGH);
 1517               		.loc 1 290 0
 1518 0448 89E3      		ldi r24,lo8(57)
 1519 044a 91E0      		ldi r25,lo8(1)
 1520 044c 0E94 0000 		call chThdSleep
 1521               	.L31:
 291:W_M.c         ****           // printf("Inicio MOLHO\n");
 1522               		.loc 1 291 0 discriminator 1
 1523 0450 4E99      		sbic 0x9,6
 1524 0452 00C0      		rjmp .L31
 293:W_M.c         ****           fsm_lavagem_init(&fsm_lvg);
 1525               		.loc 1 293 0
 1526 0454 82E0      		ldi r24,lo8(2)
 1527 0456 8093 0000 		sts lavar,r24
 1528               	.LBB266:
 1529               	.LBB238:
 129:W_M.c         ****   st->turns = 0;
 1530               		.loc 1 129 0
 1531 045a 88E0      		ldi r24,lo8(8)
 1532 045c 8093 0000 		sts fsm_lvg,r24
 130:W_M.c         ****   st->t_espera = 1000;
 1533               		.loc 1 130 0
 1534 0460 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 1535 0464 1092 0000 		sts fsm_lvg+5,__zero_reg__
 131:W_M.c         ****   st->t_giros = 2400;
 1536               		.loc 1 131 0
 1537 0468 9092 0000 		sts fsm_lvg+7+1,r9
 1538 046c 8092 0000 		sts fsm_lvg+7,r8
 132:W_M.c         ****   st->instante = chVTGetSystemTime();
 1539               		.loc 1 132 0
 1540 0470 B092 0000 		sts fsm_lvg+9+1,r11
 1541 0474 A092 0000 		sts fsm_lvg+9,r10
 1542               	.LBB227:
 1543               	.LBB228:
 1544               	.LBB229:
 1545               	.LBB230:
 1546               	.LBB231:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1547               		.loc 2 437 0
 1548               	/* #APP */
 1549               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1550 0478 F894      		cli
 1551               	 ;  0 "" 2
 1552               	/* #NOAPP */
 1553               	.LBE231:
 1554               	.LBE230:
 1555               	.LBE229:
 1556               	.LBB232:
 1557               	.LBB233:
 1558               		.loc 3 118 0
 1559 047a 8091 0000 		lds r24,ch+19
 1560 047e 9091 0000 		lds r25,ch+19+1
 1561               	.LBE233:
 1562               	.LBE232:
 1563               	.LBB234:
 1564               	.LBB235:
 1565               	.LBB236:
 1566               	.LBB237:
 1567               		.loc 2 447 0
 1568               	/* #APP */
 1569               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1570 0482 7894      		sei
 1571               	 ;  0 "" 2
 1572               	/* #NOAPP */
 1573               	.LBE237:
 1574               	.LBE236:
 1575               	.LBE235:
 1576               	.LBE234:
 1577               	.LBE228:
 1578               	.LBE227:
 133:W_M.c         ****   st->ul_espera = st->instante;
 1579               		.loc 1 133 0
 1580 0484 9093 0000 		sts fsm_lvg+1+1,r25
 1581 0488 8093 0000 		sts fsm_lvg+1,r24
 134:W_M.c         **** }
 1582               		.loc 1 134 0
 1583 048c 9093 0000 		sts fsm_lvg+3+1,r25
 1584 0490 8093 0000 		sts fsm_lvg+3,r24
 1585               	.LBE238:
 1586               	.LBE266:
 295:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Modo inicial: Lavagem \n\r");
 1587               		.loc 1 295 0
 1588 0494 D092 0000 		sts fsm_prd+1,r13
 1589 0498 C092 0000 		sts fsm_prd,r12
 296:W_M.c         ****           palClearPad(IOPORT2, MOLHO_ID);
 1590               		.loc 1 296 0
 1591 049c FF92      		push r15
 1592               	.LCFI106:
 1593               		.cfi_def_cfa_offset 21
 1594 049e EF92      		push r14
 1595               	.LCFI107:
 1596               		.cfi_def_cfa_offset 22
 1597 04a0 DF93      		push r29
 1598               	.LCFI108:
 1599               		.cfi_def_cfa_offset 23
 1600 04a2 CF93      		push r28
 1601               	.LCFI109:
 1602               		.cfi_def_cfa_offset 24
 1603 04a4 0E94 0000 		call chprintf
 297:W_M.c         ****         }
 1604               		.loc 1 297 0
 1605 04a8 2898      		cbi 0x5,0
 1606 04aa 8091 0000 		lds r24,fsm_prd
 1607 04ae 9091 0000 		lds r25,fsm_prd+1
 1608 04b2 0F90      		pop __tmp_reg__
 1609 04b4 0F90      		pop __tmp_reg__
 1610 04b6 0F90      		pop __tmp_reg__
 1611 04b8 0F90      		pop __tmp_reg__
 1612               	.LCFI110:
 1613               		.cfi_def_cfa_offset 20
 1614 04ba 00C0      		rjmp .L29
 1615               	.L42:
 358:W_M.c         ****           if(palReadPad(IOPORT4, SEN_CHEIO) == PAL_HIGH){
 1616               		.loc 1 358 0
 1617 04bc 2C9A      		sbi 0x5,4
 359:W_M.c         ****             // printf("Sensor Cheio\n");
 1618               		.loc 1 359 0
 1619 04be 4C9B      		sbis 0x9,4
 1620 04c0 00C0      		rjmp .L20
 361:W_M.c         ****             palClearPad(IOPORT2, ENCHE_ID);
 1621               		.loc 1 361 0
 1622 04c2 80E0      		ldi r24,lo8(.LC13)
 1623 04c4 90E0      		ldi r25,hi8(.LC13)
 1624 04c6 9F93      		push r25
 1625               	.LCFI111:
 1626               		.cfi_def_cfa_offset 21
 1627 04c8 8F93      		push r24
 1628               	.LCFI112:
 1629               		.cfi_def_cfa_offset 22
 1630 04ca 80E0      		ldi r24,lo8(SD1)
 1631 04cc 90E0      		ldi r25,hi8(SD1)
 1632 04ce 9F93      		push r25
 1633               	.LCFI113:
 1634               		.cfi_def_cfa_offset 23
 1635 04d0 8F93      		push r24
 1636               	.LCFI114:
 1637               		.cfi_def_cfa_offset 24
 1638 04d2 0E94 0000 		call chprintf
 362:W_M.c         ****             fsm_ml.ml = RODAR_ML;
 1639               		.loc 1 362 0
 1640 04d6 2C98      		cbi 0x5,4
 363:W_M.c         ****             // printf("Início Giros Molho\n");
 1641               		.loc 1 363 0
 1642 04d8 87E0      		ldi r24,lo8(7)
 1643 04da 8093 0000 		sts fsm_ml,r24
 1644 04de 0F90      		pop __tmp_reg__
 1645 04e0 0F90      		pop __tmp_reg__
 1646 04e2 0F90      		pop __tmp_reg__
 1647 04e4 0F90      		pop __tmp_reg__
 1648               	.LCFI115:
 1649               		.cfi_def_cfa_offset 20
 1650 04e6 00C0      		rjmp .L20
 1651               	.L88:
 330:W_M.c         ****           }
 1652               		.loc 1 330 0
 1653 04e8 80E0      		ldi r24,lo8(.LC11)
 1654 04ea 90E0      		ldi r25,hi8(.LC11)
 1655 04ec 9F93      		push r25
 1656               	.LCFI116:
 1657               		.cfi_def_cfa_offset 21
 1658 04ee 8F93      		push r24
 1659               	.LCFI117:
 1660               		.cfi_def_cfa_offset 22
 1661 04f0 DF93      		push r29
 1662               	.LCFI118:
 1663               		.cfi_def_cfa_offset 23
 1664 04f2 CF93      		push r28
 1665               	.LCFI119:
 1666               		.cfi_def_cfa_offset 24
 1667 04f4 0E94 0000 		call chprintf
 1668 04f8 8091 0000 		lds r24,fsm_prd
 1669 04fc 9091 0000 		lds r25,fsm_prd+1
 1670 0500 0F90      		pop __tmp_reg__
 1671 0502 0F90      		pop __tmp_reg__
 1672 0504 0F90      		pop __tmp_reg__
 1673 0506 0F90      		pop __tmp_reg__
 1674               	.LCFI120:
 1675               		.cfi_def_cfa_offset 20
 1676 0508 00C0      		rjmp .L40
 1677               	.L46:
 436:W_M.c         ****           // printf("DEBUG: Super LAVAGEM - estado ESVAZIA_LVG\n");
 1678               		.loc 1 436 0
 1679 050a 2D9A      		sbi 0x5,5
 438:W_M.c         ****             // printf("Sensor Vazio: ON\n");
 1680               		.loc 1 438 0
 1681 050c 4B9B      		sbis 0x9,3
 1682 050e 00C0      		rjmp .L20
 440:W_M.c         ****             // printf("Fim LAVAGEM\n");
 1683               		.loc 1 440 0
 1684 0510 2D98      		cbi 0x5,5
 442:W_M.c         ****             palClearPad(IOPORT2, LAVAGEM_ID);
 1685               		.loc 1 442 0
 1686 0512 80E0      		ldi r24,lo8(.LC20)
 1687 0514 90E0      		ldi r25,hi8(.LC20)
 1688 0516 9F93      		push r25
 1689               	.LCFI121:
 1690               		.cfi_def_cfa_offset 21
 1691 0518 8F93      		push r24
 1692               	.LCFI122:
 1693               		.cfi_def_cfa_offset 22
 1694 051a C0E0      		ldi r28,lo8(SD1)
 1695 051c D0E0      		ldi r29,hi8(SD1)
 1696 051e DF93      		push r29
 1697               	.LCFI123:
 1698               		.cfi_def_cfa_offset 23
 1699 0520 CF93      		push r28
 1700               	.LCFI124:
 1701               		.cfi_def_cfa_offset 24
 1702 0522 0E94 0000 		call chprintf
 443:W_M.c         **** 
 1703               		.loc 1 443 0
 1704 0526 2998      		cbi 0x5,1
 446:W_M.c         ****               lavar = ENXAGUE;
 1705               		.loc 1 446 0
 1706 0528 80E0      		ldi r24,lo8(.LC21)
 1707 052a 90E0      		ldi r25,hi8(.LC21)
 1708 052c 9F93      		push r25
 1709               	.LCFI125:
 1710               		.cfi_def_cfa_offset 25
 1711 052e 8F93      		push r24
 1712               	.LCFI126:
 1713               		.cfi_def_cfa_offset 26
 1714 0530 DF93      		push r29
 1715               	.LCFI127:
 1716               		.cfi_def_cfa_offset 27
 1717 0532 CF93      		push r28
 1718               	.LCFI128:
 1719               		.cfi_def_cfa_offset 28
 1720 0534 0E94 0000 		call chprintf
 447:W_M.c         **** 
 1721               		.loc 1 447 0
 1722 0538 83E0      		ldi r24,lo8(3)
 1723 053a 8093 0000 		sts lavar,r24
 1724               	.LBB267:
 1725               	.LBB268:
 139:W_M.c         ****   st->t_giro = 3000;
 1726               		.loc 1 139 0
 1727 053e 8BE0      		ldi r24,lo8(11)
 1728 0540 8093 0000 		sts fsm_exg,r24
 140:W_M.c         **** }
 1729               		.loc 1 140 0
 1730 0544 88EB      		ldi r24,lo8(-72)
 1731 0546 9BE0      		ldi r25,lo8(11)
 1732 0548 9093 0000 		sts fsm_exg+1+1,r25
 1733 054c 8093 0000 		sts fsm_exg+1,r24
 1734               	.LBE268:
 1735               	.LBE267:
 450:W_M.c         ****             } // fim "if" sensor vazio
 1736               		.loc 1 450 0
 1737 0550 80E0      		ldi r24,lo8(.LC22)
 1738 0552 90E0      		ldi r25,hi8(.LC22)
 1739 0554 9F93      		push r25
 1740               	.LCFI129:
 1741               		.cfi_def_cfa_offset 29
 1742 0556 8F93      		push r24
 1743               	.LCFI130:
 1744               		.cfi_def_cfa_offset 30
 1745 0558 DF93      		push r29
 1746               	.LCFI131:
 1747               		.cfi_def_cfa_offset 31
 1748 055a CF93      		push r28
 1749               	.LCFI132:
 1750               		.cfi_def_cfa_offset 32
 1751 055c 0E94 0000 		call chprintf
 1752 0560 8DB7      		in r24,__SP_L__
 1753 0562 9EB7      		in r25,__SP_H__
 1754 0564 0C96      		adiw r24,12
 1755 0566 0FB6      		in __tmp_reg__,__SREG__
 1756 0568 F894      		cli
 1757 056a 9EBF      		out __SP_H__,r25
 1758 056c 0FBE      		out __SREG__,__tmp_reg__
 1759 056e 8DBF      		out __SP_L__,r24
 1760               	.LCFI133:
 1761               		.cfi_def_cfa_offset 20
 1762 0570 00C0      		rjmp .L20
 1763               	.L45:
 1764               	.LBB269:
 1765               	.LBB270:
 1766               	.LBB271:
 1767               	.LBB272:
 1768               	.LBB273:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1769               		.loc 2 437 0
 1770               	/* #APP */
 1771               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1772 0572 F894      		cli
 1773               	 ;  0 "" 2
 1774               	/* #NOAPP */
 1775               	.LBE273:
 1776               	.LBE272:
 1777               	.LBE271:
 1778               	.LBB274:
 1779               	.LBB275:
 1780               		.loc 3 118 0
 1781 0574 8091 0000 		lds r24,ch+19
 1782 0578 9091 0000 		lds r25,ch+19+1
 1783               	.LBE275:
 1784               	.LBE274:
 1785               	.LBB276:
 1786               	.LBB277:
 1787               	.LBB278:
 1788               	.LBB279:
 1789               		.loc 2 447 0
 1790               	/* #APP */
 1791               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1792 057c 7894      		sei
 1793               	 ;  0 "" 2
 1794               	/* #NOAPP */
 1795               	.LBE279:
 1796               	.LBE278:
 1797               	.LBE277:
 1798               	.LBE276:
 1799               	.LBE270:
 1800               	.LBE269:
 415:W_M.c         ****           if(fsm_lvg.instante - fsm_lvg.ul_espera > TIME_MS2I(fsm_lvg.t_espera)){
 1801               		.loc 1 415 0
 1802 057e 9093 0000 		sts fsm_lvg+1+1,r25
 1803 0582 8093 0000 		sts fsm_lvg+1,r24
 416:W_M.c         ****             fsm_lvg.ul_espera = chVTGetSystemTime();
 1804               		.loc 1 416 0
 1805 0586 A091 0000 		lds r26,fsm_lvg+7
 1806 058a B091 0000 		lds r27,fsm_lvg+7+1
 1807 058e 2091 0000 		lds r18,fsm_lvg+3
 1808 0592 3091 0000 		lds r19,fsm_lvg+3+1
 1809 0596 EC01      		movw r28,r24
 1810 0598 C21B      		sub r28,r18
 1811 059a D30B      		sbc r29,r19
 1812 059c 28E0      		ldi r18,lo8(8)
 1813 059e 3DE3      		ldi r19,lo8(61)
 1814 05a0 0E94 0000 		call __usmulhisi3
 1815 05a4 6951      		subi r22,25
 1816 05a6 7C4F      		sbci r23,-4
 1817 05a8 8F4F      		sbci r24,-1
 1818 05aa 9F4F      		sbci r25,-1
 1819 05ac 28EE      		ldi r18,lo8(-24)
 1820 05ae 33E0      		ldi r19,lo8(3)
 1821 05b0 40E0      		ldi r20,0
 1822 05b2 50E0      		ldi r21,0
 1823 05b4 0E94 0000 		call __udivmodsi4
 1824 05b8 2C17      		cp r18,r28
 1825 05ba 3D07      		cpc r19,r29
 1826 05bc 00F0      		brlo .+2
 1827 05be 00C0      		rjmp .L20
 1828               	.LBB280:
 1829               	.LBB281:
 1830               	.LBB282:
 1831               	.LBB283:
 1832               	.LBB284:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1833               		.loc 2 437 0
 1834               	/* #APP */
 1835               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1836 05c0 F894      		cli
 1837               	 ;  0 "" 2
 1838               	/* #NOAPP */
 1839               	.LBE284:
 1840               	.LBE283:
 1841               	.LBE282:
 1842               	.LBB285:
 1843               	.LBB286:
 1844               		.loc 3 118 0
 1845 05c2 8091 0000 		lds r24,ch+19
 1846 05c6 9091 0000 		lds r25,ch+19+1
 1847               	.LBE286:
 1848               	.LBE285:
 1849               	.LBB287:
 1850               	.LBB288:
 1851               	.LBB289:
 1852               	.LBB290:
 1853               		.loc 2 447 0
 1854               	/* #APP */
 1855               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1856 05ca 7894      		sei
 1857               	 ;  0 "" 2
 1858               	/* #NOAPP */
 1859               	.LBE290:
 1860               	.LBE289:
 1861               	.LBE288:
 1862               	.LBE287:
 1863               	.LBE281:
 1864               	.LBE280:
 417:W_M.c         ****             if(fsm_lvg.turns >= 3){
 1865               		.loc 1 417 0
 1866 05cc 9093 0000 		sts fsm_lvg+3+1,r25
 1867 05d0 8093 0000 		sts fsm_lvg+3,r24
 418:W_M.c         ****               fsm_lvg.turns = 0;
 1868               		.loc 1 418 0
 1869 05d4 8091 0000 		lds r24,fsm_lvg+5
 1870 05d8 9091 0000 		lds r25,fsm_lvg+5+1
 1871 05dc 8330      		cpi r24,3
 1872 05de 9105      		cpc r25,__zero_reg__
 1873 05e0 04F0      		brlt .+2
 1874 05e2 00C0      		rjmp .L89
 425:W_M.c         ****               fsm_lvg.lvg = RODAR_LVG;
 1875               		.loc 1 425 0
 1876 05e4 0196      		adiw r24,1
 1877 05e6 9093 0000 		sts fsm_lvg+5+1,r25
 1878 05ea 8093 0000 		sts fsm_lvg+5,r24
 426:W_M.c         ****             } // fim if voltas
 1879               		.loc 1 426 0
 1880 05ee 88E0      		ldi r24,lo8(8)
 1881 05f0 8093 0000 		sts fsm_lvg,r24
 1882 05f4 00C0      		rjmp .L20
 1883               	.L49:
 484:W_M.c         ****           spinning(fsm_exg.t_giro);
 1884               		.loc 1 484 0
 1885 05f6 80E0      		ldi r24,lo8(.LC23)
 1886 05f8 90E0      		ldi r25,hi8(.LC23)
 1887 05fa 9F93      		push r25
 1888               	.LCFI134:
 1889               		.cfi_def_cfa_offset 21
 1890 05fc 8F93      		push r24
 1891               	.LCFI135:
 1892               		.cfi_def_cfa_offset 22
 1893 05fe C0E0      		ldi r28,lo8(SD1)
 1894 0600 D0E0      		ldi r29,hi8(SD1)
 1895 0602 DF93      		push r29
 1896               	.LCFI136:
 1897               		.cfi_def_cfa_offset 23
 1898 0604 CF93      		push r28
 1899               	.LCFI137:
 1900               		.cfi_def_cfa_offset 24
 1901 0606 0E94 0000 		call chprintf
 485:W_M.c         ****           fsm_exg.exg = ESVAZIA_EXG;
 1902               		.loc 1 485 0
 1903 060a 8091 0000 		lds r24,fsm_exg+1
 1904 060e 9091 0000 		lds r25,fsm_exg+1+1
 1905 0612 0E94 0000 		call spinning
 486:W_M.c         ****           chprintf((BaseSequentialStream *)&SD1, "Esvazia Enxague\n\r");
 1906               		.loc 1 486 0
 1907 0616 8DE0      		ldi r24,lo8(13)
 1908 0618 8093 0000 		sts fsm_exg,r24
 487:W_M.c         **** 
 1909               		.loc 1 487 0
 1910 061c 80E0      		ldi r24,lo8(.LC24)
 1911 061e 90E0      		ldi r25,hi8(.LC24)
 1912 0620 9F93      		push r25
 1913               	.LCFI138:
 1914               		.cfi_def_cfa_offset 25
 1915 0622 8F93      		push r24
 1916               	.LCFI139:
 1917               		.cfi_def_cfa_offset 26
 1918 0624 DF93      		push r29
 1919               	.LCFI140:
 1920               		.cfi_def_cfa_offset 27
 1921 0626 CF93      		push r28
 1922               	.LCFI141:
 1923               		.cfi_def_cfa_offset 28
 1924 0628 0E94 0000 		call chprintf
 489:W_M.c         **** 
 1925               		.loc 1 489 0
 1926 062c 8DB7      		in r24,__SP_L__
 1927 062e 9EB7      		in r25,__SP_H__
 1928 0630 0896      		adiw r24,8
 1929 0632 0FB6      		in __tmp_reg__,__SREG__
 1930 0634 F894      		cli
 1931 0636 9EBF      		out __SP_H__,r25
 1932 0638 0FBE      		out __SREG__,__tmp_reg__
 1933 063a 8DBF      		out __SP_L__,r24
 1934               	.LCFI142:
 1935               		.cfi_def_cfa_offset 20
 1936 063c 00C0      		rjmp .L20
 1937               	.L50:
 497:W_M.c         ****           if(palReadPad(IOPORT4, SEN_VAZIO) == PAL_HIGH){
 1938               		.loc 1 497 0
 1939 063e 2D9A      		sbi 0x5,5
 498:W_M.c         ****              // printf("Sensor Vazio: ON\n");
 1940               		.loc 1 498 0
 1941 0640 4B9B      		sbis 0x9,3
 1942 0642 00C0      		rjmp .L20
 500:W_M.c         ****              lavar = CENTRIFUGA;
 1943               		.loc 1 500 0
 1944 0644 2D98      		cbi 0x5,5
 501:W_M.c         ****              fsm_centrifuga_init(&fsm_cen);
 1945               		.loc 1 501 0
 1946 0646 84E0      		ldi r24,lo8(4)
 1947 0648 8093 0000 		sts lavar,r24
 1948               	.LBB291:
 1949               	.LBB292:
 145:W_M.c         ****   st->tempo = chVTGetSystemTime();
 1950               		.loc 1 145 0
 1951 064c 8EE0      		ldi r24,lo8(14)
 1952 064e 8093 0000 		sts fsm_cen,r24
 1953               	.LBB293:
 1954               	.LBB294:
 1955               	.LBB295:
 1956               	.LBB296:
 1957               	.LBB297:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1958               		.loc 2 437 0
 1959               	/* #APP */
 1960               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1961 0652 F894      		cli
 1962               	 ;  0 "" 2
 1963               	/* #NOAPP */
 1964               	.LBE297:
 1965               	.LBE296:
 1966               	.LBE295:
 1967               	.LBB298:
 1968               	.LBB299:
 1969               		.loc 3 118 0
 1970 0654 8091 0000 		lds r24,ch+19
 1971 0658 9091 0000 		lds r25,ch+19+1
 1972               	.LBE299:
 1973               	.LBE298:
 1974               	.LBB300:
 1975               	.LBB301:
 1976               	.LBB302:
 1977               	.LBB303:
 1978               		.loc 2 447 0
 1979               	/* #APP */
 1980               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1981 065c 7894      		sei
 1982               	 ;  0 "" 2
 1983               	/* #NOAPP */
 1984               	.LBE303:
 1985               	.LBE302:
 1986               	.LBE301:
 1987               	.LBE300:
 1988               	.LBE294:
 1989               	.LBE293:
 146:W_M.c         ****   st->ul_centri = st->tempo;
 1990               		.loc 1 146 0
 1991 065e 9093 0000 		sts fsm_cen+1+1,r25
 1992 0662 8093 0000 		sts fsm_cen+1,r24
 147:W_M.c         ****   st->t_centri = 4000;
 1993               		.loc 1 147 0
 1994 0666 9093 0000 		sts fsm_cen+3+1,r25
 1995 066a 8093 0000 		sts fsm_cen+3,r24
 148:W_M.c         **** }
 1996               		.loc 1 148 0
 1997 066e 80EA      		ldi r24,lo8(-96)
 1998 0670 9FE0      		ldi r25,lo8(15)
 1999 0672 9093 0000 		sts fsm_cen+5+1,r25
 2000 0676 8093 0000 		sts fsm_cen+5,r24
 2001               	.LBE292:
 2002               	.LBE291:
 503:W_M.c         ****              // printf("Fim Enxágue\n");
 2003               		.loc 1 503 0
 2004 067a 80E0      		ldi r24,lo8(.LC25)
 2005 067c 90E0      		ldi r25,hi8(.LC25)
 2006 067e 9F93      		push r25
 2007               	.LCFI143:
 2008               		.cfi_def_cfa_offset 21
 2009 0680 8F93      		push r24
 2010               	.LCFI144:
 2011               		.cfi_def_cfa_offset 22
 2012 0682 C0E0      		ldi r28,lo8(SD1)
 2013 0684 D0E0      		ldi r29,hi8(SD1)
 2014 0686 DF93      		push r29
 2015               	.LCFI145:
 2016               		.cfi_def_cfa_offset 23
 2017 0688 CF93      		push r28
 2018               	.LCFI146:
 2019               		.cfi_def_cfa_offset 24
 2020 068a 0E94 0000 		call chprintf
 505:W_M.c         ****              // printf("Inicio CENTRIFUGA\n");
 2021               		.loc 1 505 0
 2022 068e 2A98      		cbi 0x5,2
 507:W_M.c         ****           }// fim "if" sensor vazio
 2023               		.loc 1 507 0
 2024 0690 80E0      		ldi r24,lo8(.LC26)
 2025 0692 90E0      		ldi r25,hi8(.LC26)
 2026 0694 9F93      		push r25
 2027               	.LCFI147:
 2028               		.cfi_def_cfa_offset 25
 2029 0696 8F93      		push r24
 2030               	.LCFI148:
 2031               		.cfi_def_cfa_offset 26
 2032 0698 DF93      		push r29
 2033               	.LCFI149:
 2034               		.cfi_def_cfa_offset 27
 2035 069a CF93      		push r28
 2036               	.LCFI150:
 2037               		.cfi_def_cfa_offset 28
 2038 069c 0E94 0000 		call chprintf
 2039 06a0 8DB7      		in r24,__SP_L__
 2040 06a2 9EB7      		in r25,__SP_H__
 2041 06a4 0896      		adiw r24,8
 2042 06a6 0FB6      		in __tmp_reg__,__SREG__
 2043 06a8 F894      		cli
 2044 06aa 9EBF      		out __SP_H__,r25
 2045 06ac 0FBE      		out __SREG__,__tmp_reg__
 2046 06ae 8DBF      		out __SP_L__,r24
 2047               	.LCFI151:
 2048               		.cfi_def_cfa_offset 20
 2049 06b0 00C0      		rjmp .L20
 2050               	.L89:
 419:W_M.c         ****               fsm_lvg.lvg = ESVAZIA_LVG;
 2051               		.loc 1 419 0
 2052 06b2 1092 0000 		sts fsm_lvg+5+1,__zero_reg__
 2053 06b6 1092 0000 		sts fsm_lvg+5,__zero_reg__
 420:W_M.c         ****               chprintf((BaseSequentialStream *)&SD1, "Esvazia Lavagem \n\r");
 2054               		.loc 1 420 0
 2055 06ba 8AE0      		ldi r24,lo8(10)
 2056 06bc 8093 0000 		sts fsm_lvg,r24
 421:W_M.c         ****               // printf("Fim giros Lavagem\n");
 2057               		.loc 1 421 0
 2058 06c0 80E0      		ldi r24,lo8(.LC19)
 2059 06c2 90E0      		ldi r25,hi8(.LC19)
 2060 06c4 00C0      		rjmp .L82
 2061               		.cfi_endproc
 2062               	.LFE175:
 2064               		.section	.rodata.str1.1
 2065               	.LC28:
 2066 0200 494E 4943 		.string	"INICIO M\303\201QUINA\n\r"
 2066      494F 204D 
 2066      C381 5155 
 2066      494E 410A 
 2066      0D00 
 2067               	.LC29:
 2068 0212 2564 200A 		.string	"%d \n\r"
 2068      0D00 
 2069               		.section	.text.startup.main,"ax",@progbits
 2070               	.global	main
 2072               	main:
 2073               	.LFB176:
 552:W_M.c         **** 
 553:W_M.c         **** 
 554:W_M.c         **** int main(void) {
 2074               		.loc 1 554 0
 2075               		.cfi_startproc
 2076               	/* prologue: function */
 2077               	/* frame size = 0 */
 2078               	/* stack size = 0 */
 2079               	.L__stack_usage = 0
 555:W_M.c         ****   halInit();
 2080               		.loc 1 555 0
 2081 0000 0E94 0000 		call halInit
 2082               	.LVL34:
 556:W_M.c         ****   chSysInit();
 2083               		.loc 1 556 0
 2084 0004 0E94 0000 		call chSysInit
 2085               	.LVL35:
 557:W_M.c         **** 
 558:W_M.c         ****   sdStart(&SD1, 0);
 2086               		.loc 1 558 0
 2087 0008 60E0      		ldi r22,0
 2088 000a 70E0      		ldi r23,0
 2089 000c 80E0      		ldi r24,lo8(SD1)
 2090 000e 90E0      		ldi r25,hi8(SD1)
 2091 0010 0E94 0000 		call sdStart
 2092               	.LVL36:
 559:W_M.c         ****   chprintf((BaseSequentialStream *)&SD1, "INICIO MÁQUINA\n\r");
 2093               		.loc 1 559 0
 2094 0014 80E0      		ldi r24,lo8(.LC28)
 2095 0016 90E0      		ldi r25,hi8(.LC28)
 2096 0018 9F93      		push r25
 2097               	.LCFI152:
 2098               		.cfi_def_cfa_offset 3
 2099 001a 8F93      		push r24
 2100               	.LCFI153:
 2101               		.cfi_def_cfa_offset 4
 2102 001c C0E0      		ldi r28,lo8(SD1)
 2103 001e D0E0      		ldi r29,hi8(SD1)
 2104 0020 DF93      		push r29
 2105               	.LCFI154:
 2106               		.cfi_def_cfa_offset 5
 2107 0022 CF93      		push r28
 2108               	.LCFI155:
 2109               		.cfi_def_cfa_offset 6
 2110 0024 0E94 0000 		call chprintf
 2111               	.LVL37:
 560:W_M.c         ****   starting();
 2112               		.loc 1 560 0
 2113 0028 0E94 0000 		call starting
 2114               	.LVL38:
 561:W_M.c         ****   lavar = PARADA;
 2115               		.loc 1 561 0
 2116 002c 1092 0000 		sts lavar,__zero_reg__
 2117               	.LVL39:
 2118               	.LBB304:
 2119               	.LBB305:
 118:W_M.c         **** }
 2120               		.loc 1 118 0
 2121 0030 1092 0000 		sts fsm_prd+1,__zero_reg__
 2122 0034 1092 0000 		sts fsm_prd,__zero_reg__
 2123               	.LVL40:
 2124               	.LBE305:
 2125               	.LBE304:
 562:W_M.c         ****   fsm_parada_init(&fsm_prd);
 563:W_M.c         ****   chprintf((BaseSequentialStream *)&SD1, "%d \n\r", lavar);
 2126               		.loc 1 563 0
 2127 0038 1F92      		push __zero_reg__
 2128               	.LCFI156:
 2129               		.cfi_def_cfa_offset 7
 2130 003a 1F92      		push __zero_reg__
 2131               	.LCFI157:
 2132               		.cfi_def_cfa_offset 8
 2133 003c 80E0      		ldi r24,lo8(.LC29)
 2134 003e 90E0      		ldi r25,hi8(.LC29)
 2135 0040 9F93      		push r25
 2136               	.LCFI158:
 2137               		.cfi_def_cfa_offset 9
 2138 0042 8F93      		push r24
 2139               	.LCFI159:
 2140               		.cfi_def_cfa_offset 10
 2141 0044 DF93      		push r29
 2142               	.LCFI160:
 2143               		.cfi_def_cfa_offset 11
 2144 0046 CF93      		push r28
 2145               	.LCFI161:
 2146               		.cfi_def_cfa_offset 12
 2147 0048 0E94 0000 		call chprintf
 2148               	.LVL41:
 2149 004c 8DB7      		in r24,__SP_L__
 2150 004e 9EB7      		in r25,__SP_H__
 2151 0050 0A96      		adiw r24,10
 2152 0052 0FB6      		in __tmp_reg__,__SREG__
 2153 0054 F894      		cli
 2154 0056 9EBF      		out __SP_H__,r25
 2155 0058 0FBE      		out __SREG__,__tmp_reg__
 2156 005a 8DBF      		out __SP_L__,r24
 2157               	.LCFI162:
 2158               		.cfi_def_cfa_offset 2
 2159               	.L91:
 564:W_M.c         **** 
 565:W_M.c         ****   while(1){
 566:W_M.c         ****     lavar_maquina();
 2160               		.loc 1 566 0 discriminator 1
 2161 005c 0E94 0000 		call lavar_maquina
 2162               	.LVL42:
 2163 0060 00C0      		rjmp .L91
 2164               		.cfi_endproc
 2165               	.LFE176:
 2167               		.comm	fsm_cen,7,1
 2168               		.comm	fsm_exg,3,1
 2169               		.comm	fsm_lvg,11,1
 2170               		.comm	fsm_ml,3,1
 2171               		.comm	fsm_prd,2,1
 2172               	.global	lavar
 2173               		.section	.bss.lavar,"aw",@nobits
 2176               	lavar:
 2177 0000 00        		.zero	1
 2178               		.text
 2179               	.Letext0:
 2180               		.file 4 "/usr/lib/avr/include/stdint.h"
 2181               		.file 5 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2182               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2183               		.file 7 "../../../os/rt/include/chsystypes.h"
 2184               		.file 8 "../../../os/rt/include/chschd.h"
 2185               		.file 9 "../../../os/rt/include/chtime.h"
 2186               		.file 10 "../../../os/rt/include/chsem.h"
 2187               		.file 11 "../../../os/rt/include/chmtx.h"
 2188               		.file 12 "../../../os/rt/include/chevents.h"
 2189               		.file 13 "../../../os/hal/include/hal_streams.h"
 2190               		.file 14 "../../../os/hal/include/hal_queues.h"
 2191               		.file 15 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2192               		.file 16 "../../../os/hal/include/hal_serial.h"
 2193               		.file 17 "../../../os/rt/include/chsys.h"
 2194               		.file 18 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2195               		.file 19 "../../../os/hal/lib/streams/chprintf.h"
 2196               		.file 20 "../../../os/hal/include/hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 W_M.c
     /tmp/cc1MlH5P.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1MlH5P.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1MlH5P.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1MlH5P.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1MlH5P.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1MlH5P.s:16     .text.starting:0000000000000000 starting
     /tmp/cc1MlH5P.s:183    .text.spinning:0000000000000000 spinning
     /tmp/cc1MlH5P.s:2176   .bss.lavar:0000000000000000 lavar
     /tmp/cc1MlH5P.s:592    .text.lavar_maquina:0000000000000000 lavar_maquina
                            *COM*:0000000000000003 fsm_ml
                            *COM*:000000000000000b fsm_lvg
                            *COM*:0000000000000007 fsm_cen
                            *COM*:0000000000000002 fsm_prd
                            *COM*:0000000000000003 fsm_exg
     /tmp/cc1MlH5P.s:2072   .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
SD1
chprintf
ch
__usmulhisi3
__udivmodsi4
chThdSleep
halInit
chSysInit
sdStart
__do_copy_data
__do_clear_bss
