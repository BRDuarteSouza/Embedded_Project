   1               		.file	"chevents.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chEvtRegisterMaskWithFlags,"ax",@progbits
  11               	.global	chEvtRegisterMaskWithFlags
  13               	chEvtRegisterMaskWithFlags:
  14               	.LFB130:
  15               		.file 1 "../../../os/rt/src/chevents.c"
   1:../../../os/rt/src/chevents.c **** /*
   2:../../../os/rt/src/chevents.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chevents.c **** 
   4:../../../os/rt/src/chevents.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chevents.c **** 
   6:../../../os/rt/src/chevents.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chevents.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chevents.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chevents.c ****     (at your option) any later version.
  10:../../../os/rt/src/chevents.c **** 
  11:../../../os/rt/src/chevents.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chevents.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chevents.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chevents.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chevents.c **** 
  16:../../../os/rt/src/chevents.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chevents.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chevents.c **** */
  19:../../../os/rt/src/chevents.c **** /*
  20:../../../os/rt/src/chevents.c ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/src/chevents.c ****  */
  22:../../../os/rt/src/chevents.c **** 
  23:../../../os/rt/src/chevents.c **** /**
  24:../../../os/rt/src/chevents.c ****  * @file    chevents.c
  25:../../../os/rt/src/chevents.c ****  * @brief   Events code.
  26:../../../os/rt/src/chevents.c ****  *
  27:../../../os/rt/src/chevents.c ****  * @addtogroup events
  28:../../../os/rt/src/chevents.c ****  * @details Event Flags, Event Sources and Event Listeners.
  29:../../../os/rt/src/chevents.c ****  *          <h2>Operation mode</h2>
  30:../../../os/rt/src/chevents.c ****  *          Each thread has a mask of pending events inside its
  31:../../../os/rt/src/chevents.c ****  *          @p thread_t structure.
  32:../../../os/rt/src/chevents.c ****  *          Operations defined for events:
  33:../../../os/rt/src/chevents.c ****  *          - <b>Wait</b>, the invoking thread goes to sleep until a certain
  34:../../../os/rt/src/chevents.c ****  *            AND/OR combination of events become pending.
  35:../../../os/rt/src/chevents.c ****  *          - <b>Clear</b>, a mask of events is cleared from the pending
  36:../../../os/rt/src/chevents.c ****  *            events, the cleared events mask is returned (only the
  37:../../../os/rt/src/chevents.c ****  *            events that were actually pending and then cleared).
  38:../../../os/rt/src/chevents.c ****  *          - <b>Signal</b>, an events mask is directly ORed to the mask of the
  39:../../../os/rt/src/chevents.c ****  *            signaled thread.
  40:../../../os/rt/src/chevents.c ****  *          - <b>Broadcast</b>, each thread registered on an Event Source is
  41:../../../os/rt/src/chevents.c ****  *            signaled with the events specified in its Event Listener.
  42:../../../os/rt/src/chevents.c ****  *          - <b>Dispatch</b>, an events mask is scanned and for each bit set
  43:../../../os/rt/src/chevents.c ****  *            to one an associated handler function is invoked. Bit masks are
  44:../../../os/rt/src/chevents.c ****  *            scanned from bit zero upward.
  45:../../../os/rt/src/chevents.c ****  *          .
  46:../../../os/rt/src/chevents.c ****  *          An Event Source is a special object that can be "broadcasted" by
  47:../../../os/rt/src/chevents.c ****  *          a thread or an interrupt service routine. Broadcasting an Event
  48:../../../os/rt/src/chevents.c ****  *          Source has the effect that all the threads registered on the
  49:../../../os/rt/src/chevents.c ****  *          Event Source will be signaled with an events mask.<br>
  50:../../../os/rt/src/chevents.c ****  *          An unlimited number of Event Sources can exists in a system and
  51:../../../os/rt/src/chevents.c ****  *          each thread can be listening on an unlimited number of
  52:../../../os/rt/src/chevents.c ****  *          them.
  53:../../../os/rt/src/chevents.c ****  * @pre     In order to use the Events APIs the @p CH_CFG_USE_EVENTS option must be
  54:../../../os/rt/src/chevents.c ****  *          enabled in @p chconf.h.
  55:../../../os/rt/src/chevents.c ****  * @post    Enabling events requires 1-4 (depending on the architecture)
  56:../../../os/rt/src/chevents.c ****  *          extra bytes in the @p thread_t structure.
  57:../../../os/rt/src/chevents.c ****  * @{
  58:../../../os/rt/src/chevents.c ****  */
  59:../../../os/rt/src/chevents.c **** 
  60:../../../os/rt/src/chevents.c **** #include "ch.h"
  61:../../../os/rt/src/chevents.c **** 
  62:../../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  63:../../../os/rt/src/chevents.c **** 
  64:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  65:../../../os/rt/src/chevents.c **** /* Module local definitions.                                                 */
  66:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  67:../../../os/rt/src/chevents.c **** 
  68:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  69:../../../os/rt/src/chevents.c **** /* Module exported variables.                                                */
  70:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  71:../../../os/rt/src/chevents.c **** 
  72:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  73:../../../os/rt/src/chevents.c **** /* Module local types.                                                       */
  74:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  75:../../../os/rt/src/chevents.c **** 
  76:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  77:../../../os/rt/src/chevents.c **** /* Module local variables.                                                   */
  78:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  79:../../../os/rt/src/chevents.c **** 
  80:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  81:../../../os/rt/src/chevents.c **** /* Module local functions.                                                   */
  82:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  83:../../../os/rt/src/chevents.c **** 
  84:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  85:../../../os/rt/src/chevents.c **** /* Module exported functions.                                                */
  86:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  87:../../../os/rt/src/chevents.c **** 
  88:../../../os/rt/src/chevents.c **** /**
  89:../../../os/rt/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
  90:../../../os/rt/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
  91:../../../os/rt/src/chevents.c ****  *          will be notified of all events broadcasted there.
  92:../../../os/rt/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
  93:../../../os/rt/src/chevents.c ****  *          different threads.
  94:../../../os/rt/src/chevents.c ****  *
  95:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
  96:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
  97:../../../os/rt/src/chevents.c ****  * @param[in] events    events to be ORed to the thread when
  98:../../../os/rt/src/chevents.c ****  *                      the event source is broadcasted
  99:../../../os/rt/src/chevents.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
 100:../../../os/rt/src/chevents.c ****  *
 101:../../../os/rt/src/chevents.c ****  * @api
 102:../../../os/rt/src/chevents.c ****  */
 103:../../../os/rt/src/chevents.c **** void chEvtRegisterMaskWithFlags(event_source_t *esp,
 104:../../../os/rt/src/chevents.c ****                                 event_listener_t *elp,
 105:../../../os/rt/src/chevents.c ****                                 eventmask_t events,
 106:../../../os/rt/src/chevents.c ****                                 eventflags_t wflags) {
  16               		.loc 1 106 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FB01      		movw r30,r22
  24               	.LBB138:
  25               	.LBB139:
  26               	.LBB140:
  27               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  28               		.loc 2 437 0
  29               	/* #APP */
  30               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  31 0002 F894      		cli
  32               	 ;  0 "" 2
  33               	/* #NOAPP */
  34               	.LBE140:
  35               	.LBE139:
  36               	.LBE138:
 107:../../../os/rt/src/chevents.c **** 
 108:../../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 109:../../../os/rt/src/chevents.c **** 
 110:../../../os/rt/src/chevents.c ****   chSysLock();
 111:../../../os/rt/src/chevents.c ****   elp->next     = esp->next;
  37               		.loc 1 111 0
  38 0004 DC01      		movw r26,r24
  39 0006 6D91      		ld r22,X+
  40 0008 7C91      		ld r23,X
  41 000a 1197      		sbiw r26,1
  42               	.LVL1:
  43 000c 7183      		std Z+1,r23
  44 000e 6083      		st Z,r22
 112:../../../os/rt/src/chevents.c ****   esp->next     = elp;
  45               		.loc 1 112 0
  46 0010 ED93      		st X+,r30
  47 0012 FC93      		st X,r31
 113:../../../os/rt/src/chevents.c ****   elp->listener = currp;
  48               		.loc 1 113 0
  49 0014 8091 0000 		lds r24,ch+11
  50 0018 9091 0000 		lds r25,ch+11+1
  51               	.LVL2:
  52 001c 9383      		std Z+3,r25
  53 001e 8283      		std Z+2,r24
 114:../../../os/rt/src/chevents.c ****   elp->events   = events;
  54               		.loc 1 114 0
  55 0020 4483      		std Z+4,r20
 115:../../../os/rt/src/chevents.c ****   elp->flags    = (eventflags_t)0;
  56               		.loc 1 115 0
  57 0022 1582      		std Z+5,__zero_reg__
 116:../../../os/rt/src/chevents.c ****   elp->wflags   = wflags;
  58               		.loc 1 116 0
  59 0024 2683      		std Z+6,r18
  60               	.LBB141:
  61               	.LBB142:
  62               	.LBB143:
  63               	.LBB144:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  64               		.loc 2 447 0
  65               	/* #APP */
  66               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
  67 0026 7894      		sei
  68               	 ;  0 "" 2
  69               	/* #NOAPP */
  70 0028 0895      		ret
  71               	.LBE144:
  72               	.LBE143:
  73               	.LBE142:
  74               	.LBE141:
  75               		.cfi_endproc
  76               	.LFE130:
  78               		.section	.text.chEvtUnregister,"ax",@progbits
  79               	.global	chEvtUnregister
  81               	chEvtUnregister:
  82               	.LFB131:
 117:../../../os/rt/src/chevents.c ****   chSysUnlock();
 118:../../../os/rt/src/chevents.c **** }
 119:../../../os/rt/src/chevents.c **** 
 120:../../../os/rt/src/chevents.c **** /**
 121:../../../os/rt/src/chevents.c ****  * @brief   Unregisters an Event Listener from its Event Source.
 122:../../../os/rt/src/chevents.c ****  * @note    If the event listener is not registered on the specified event
 123:../../../os/rt/src/chevents.c ****  *          source then the function does nothing.
 124:../../../os/rt/src/chevents.c ****  * @note    For optimal performance it is better to perform the unregister
 125:../../../os/rt/src/chevents.c ****  *          operations in inverse order of the register operations (elements
 126:../../../os/rt/src/chevents.c ****  *          are found on top of the list).
 127:../../../os/rt/src/chevents.c ****  *
 128:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
 129:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 130:../../../os/rt/src/chevents.c ****  *
 131:../../../os/rt/src/chevents.c ****  * @api
 132:../../../os/rt/src/chevents.c ****  */
 133:../../../os/rt/src/chevents.c **** void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  83               		.loc 1 133 0
  84               		.cfi_startproc
  85               	.LVL3:
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               	.LBB145:
  91               	.LBB146:
  92               	.LBB147:
 437:../../../os/common/ports/AVR/chcore.h **** }
  93               		.loc 2 437 0
  94               	/* #APP */
  95               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  96 0000 F894      		cli
  97               	 ;  0 "" 2
  98               	/* #NOAPP */
  99               	.LBE147:
 100               	.LBE146:
 101               	.LBE145:
 134:../../../os/rt/src/chevents.c ****   event_listener_t *p;
 135:../../../os/rt/src/chevents.c **** 
 136:../../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 137:../../../os/rt/src/chevents.c **** 
 138:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 139:../../../os/rt/src/chevents.c ****   p = (event_listener_t *)esp;
 102               		.loc 1 139 0
 103 0002 FC01      		movw r30,r24
 104 0004 00C0      		rjmp .L3
 105               	.LVL4:
 106               	.L5:
 140:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 141:../../../os/rt/src/chevents.c ****   chSysLock();
 142:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 143:../../../os/rt/src/chevents.c ****   while (p->next != (event_listener_t *)esp) {
 144:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 145:../../../os/rt/src/chevents.c ****     if (p->next == elp) {
 107               		.loc 1 145 0
 108 0006 2617      		cp r18,r22
 109 0008 3707      		cpc r19,r23
 110 000a 01F0      		breq .L8
 111 000c F901      		movw r30,r18
 112               	.LVL5:
 113               	.L3:
 143:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 114               		.loc 1 143 0
 115 000e 2081      		ld r18,Z
 116 0010 3181      		ldd r19,Z+1
 117 0012 8217      		cp r24,r18
 118 0014 9307      		cpc r25,r19
 119 0016 01F4      		brne .L5
 120               	.LBB148:
 121               	.LBB149:
 122               	.LBB150:
 123               	.LBB151:
 124               		.loc 2 447 0
 125               	/* #APP */
 126               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 127 0018 7894      		sei
 128               	 ;  0 "" 2
 129               	/* #NOAPP */
 130 001a 0895      		ret
 131               	.L8:
 132               	.LBE151:
 133               	.LBE150:
 134               	.LBE149:
 135               	.LBE148:
 146:../../../os/rt/src/chevents.c ****       p->next = elp->next;
 136               		.loc 1 146 0
 137 001c DB01      		movw r26,r22
 138 001e 8D91      		ld r24,X+
 139 0020 9C91      		ld r25,X
 140               	.LVL6:
 141 0022 9183      		std Z+1,r25
 142 0024 8083      		st Z,r24
 143               	.LBB155:
 144               	.LBB154:
 145               	.LBB153:
 146               	.LBB152:
 147               		.loc 2 447 0
 148               	/* #APP */
 149               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 150 0026 7894      		sei
 151               	 ;  0 "" 2
 152               	/* #NOAPP */
 153 0028 0895      		ret
 154               	.LBE152:
 155               	.LBE153:
 156               	.LBE154:
 157               	.LBE155:
 158               		.cfi_endproc
 159               	.LFE131:
 161               		.section	.text.chEvtGetAndClearEventsI,"ax",@progbits
 162               	.global	chEvtGetAndClearEventsI
 164               	chEvtGetAndClearEventsI:
 165               	.LFB132:
 147:../../../os/rt/src/chevents.c ****       break;
 148:../../../os/rt/src/chevents.c ****     }
 149:../../../os/rt/src/chevents.c ****     p = p->next;
 150:../../../os/rt/src/chevents.c ****   }
 151:../../../os/rt/src/chevents.c ****   chSysUnlock();
 152:../../../os/rt/src/chevents.c **** }
 153:../../../os/rt/src/chevents.c **** 
 154:../../../os/rt/src/chevents.c **** /**
 155:../../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 156:../../../os/rt/src/chevents.c ****  *
 157:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 158:../../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 159:../../../os/rt/src/chevents.c ****  *
 160:../../../os/rt/src/chevents.c ****  * @iclass
 161:../../../os/rt/src/chevents.c ****  */
 162:../../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
 166               		.loc 1 162 0
 167               		.cfi_startproc
 168               	.LVL7:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 163:../../../os/rt/src/chevents.c ****   eventmask_t m;
 164:../../../os/rt/src/chevents.c **** 
 165:../../../os/rt/src/chevents.c ****   m = currp->epending & events;
 173               		.loc 1 165 0
 174 0000 E091 0000 		lds r30,ch+11
 175 0004 F091 0000 		lds r31,ch+11+1
 176 0008 208D      		ldd r18,Z+24
 177               	.LVL8:
 166:../../../os/rt/src/chevents.c ****   currp->epending &= ~events;
 178               		.loc 1 166 0
 179 000a 982F      		mov r25,r24
 180 000c 9095      		com r25
 181 000e 9223      		and r25,r18
 182 0010 908F      		std Z+24,r25
 167:../../../os/rt/src/chevents.c **** 
 168:../../../os/rt/src/chevents.c ****   return m;
 169:../../../os/rt/src/chevents.c **** }
 183               		.loc 1 169 0
 184 0012 8223      		and r24,r18
 185               	.LVL9:
 186 0014 0895      		ret
 187               		.cfi_endproc
 188               	.LFE132:
 190               		.section	.text.chEvtGetAndClearEvents,"ax",@progbits
 191               	.global	chEvtGetAndClearEvents
 193               	chEvtGetAndClearEvents:
 194               	.LFB133:
 170:../../../os/rt/src/chevents.c **** 
 171:../../../os/rt/src/chevents.c **** /**
 172:../../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 173:../../../os/rt/src/chevents.c ****  *
 174:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 175:../../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 176:../../../os/rt/src/chevents.c ****  *
 177:../../../os/rt/src/chevents.c ****  * @api
 178:../../../os/rt/src/chevents.c ****  */
 179:../../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 195               		.loc 1 179 0
 196               		.cfi_startproc
 197               	.LVL10:
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
 202               	.LBB156:
 203               	.LBB157:
 204               	.LBB158:
 437:../../../os/common/ports/AVR/chcore.h **** }
 205               		.loc 2 437 0
 206               	/* #APP */
 207               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 208 0000 F894      		cli
 209               	 ;  0 "" 2
 210               	.LVL11:
 211               	/* #NOAPP */
 212               	.LBE158:
 213               	.LBE157:
 214               	.LBE156:
 215               	.LBB159:
 216               	.LBB160:
 165:../../../os/rt/src/chevents.c ****   currp->epending &= ~events;
 217               		.loc 1 165 0
 218 0002 E091 0000 		lds r30,ch+11
 219 0006 F091 0000 		lds r31,ch+11+1
 220 000a 208D      		ldd r18,Z+24
 221               	.LVL12:
 166:../../../os/rt/src/chevents.c **** 
 222               		.loc 1 166 0
 223 000c 982F      		mov r25,r24
 224 000e 9095      		com r25
 225 0010 9223      		and r25,r18
 226 0012 908F      		std Z+24,r25
 227               	.LVL13:
 228               	.LBE160:
 229               	.LBE159:
 230               	.LBB161:
 231               	.LBB162:
 232               	.LBB163:
 233               	.LBB164:
 234               		.loc 2 447 0
 235               	/* #APP */
 236               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 237 0014 7894      		sei
 238               	 ;  0 "" 2
 239               	/* #NOAPP */
 240               	.LBE164:
 241               	.LBE163:
 242               	.LBE162:
 243               	.LBE161:
 180:../../../os/rt/src/chevents.c ****   eventmask_t m;
 181:../../../os/rt/src/chevents.c **** 
 182:../../../os/rt/src/chevents.c ****   chSysLock();
 183:../../../os/rt/src/chevents.c ****   m = chEvtGetAndClearEventsI(events);
 184:../../../os/rt/src/chevents.c ****   chSysUnlock();
 185:../../../os/rt/src/chevents.c **** 
 186:../../../os/rt/src/chevents.c ****   return m;
 187:../../../os/rt/src/chevents.c **** }
 244               		.loc 1 187 0
 245 0016 8223      		and r24,r18
 246               	.LVL14:
 247 0018 0895      		ret
 248               		.cfi_endproc
 249               	.LFE133:
 251               		.section	.text.chEvtAddEvents,"ax",@progbits
 252               	.global	chEvtAddEvents
 254               	chEvtAddEvents:
 255               	.LFB134:
 188:../../../os/rt/src/chevents.c **** 
 189:../../../os/rt/src/chevents.c **** /**
 190:../../../os/rt/src/chevents.c ****  * @brief   Adds (OR) a set of events to the current thread, this is
 191:../../../os/rt/src/chevents.c ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 192:../../../os/rt/src/chevents.c ****  *
 193:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be added
 194:../../../os/rt/src/chevents.c ****  * @return              The mask of currently pending events.
 195:../../../os/rt/src/chevents.c ****  *
 196:../../../os/rt/src/chevents.c ****  * @api
 197:../../../os/rt/src/chevents.c ****  */
 198:../../../os/rt/src/chevents.c **** eventmask_t chEvtAddEvents(eventmask_t events) {
 256               		.loc 1 198 0
 257               		.cfi_startproc
 258               	.LVL15:
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 0 */
 262               	.L__stack_usage = 0
 263               	.LBB165:
 264               	.LBB166:
 265               	.LBB167:
 437:../../../os/common/ports/AVR/chcore.h **** }
 266               		.loc 2 437 0
 267               	/* #APP */
 268               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 269 0000 F894      		cli
 270               	 ;  0 "" 2
 271               	.LVL16:
 272               	/* #NOAPP */
 273               	.LBE167:
 274               	.LBE166:
 275               	.LBE165:
 276               	.LBB168:
 277               	.LBB169:
 278               		.file 3 "../../../os/rt/include/chevents.h"
   1:../../../os/rt/include/chevents.h **** /*
   2:../../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chevents.h **** 
   4:../../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chevents.h **** 
   6:../../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chevents.h ****     (at your option) any later version.
  10:../../../os/rt/include/chevents.h **** 
  11:../../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chevents.h **** 
  16:../../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chevents.h **** */
  19:../../../os/rt/include/chevents.h **** /*
  20:../../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/include/chevents.h ****  */
  22:../../../os/rt/include/chevents.h **** 
  23:../../../os/rt/include/chevents.h **** /**
  24:../../../os/rt/include/chevents.h ****  * @file    chevents.h
  25:../../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../../os/rt/include/chevents.h ****  *
  27:../../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../../os/rt/include/chevents.h ****  * @{
  29:../../../os/rt/include/chevents.h ****  */
  30:../../../os/rt/include/chevents.h **** 
  31:../../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../../os/rt/include/chevents.h **** 
  34:../../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../../os/rt/include/chevents.h **** 
  36:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../../os/rt/include/chevents.h **** 
  40:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../../os/rt/include/chevents.h **** 
  44:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../../os/rt/include/chevents.h **** 
  48:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../../os/rt/include/chevents.h **** 
  52:../../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../../os/rt/include/chevents.h **** 
  54:../../../os/rt/include/chevents.h **** /**
  55:../../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../../os/rt/include/chevents.h ****  */
  57:../../../os/rt/include/chevents.h **** struct event_listener {
  58:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../../os/rt/include/chevents.h **** };
  70:../../../os/rt/include/chevents.h **** 
  71:../../../os/rt/include/chevents.h **** /**
  72:../../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../../os/rt/include/chevents.h ****  */
  74:../../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../../os/rt/include/chevents.h **** } event_source_t;
  79:../../../os/rt/include/chevents.h **** 
  80:../../../os/rt/include/chevents.h **** /**
  81:../../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../../os/rt/include/chevents.h ****  */
  83:../../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../../os/rt/include/chevents.h **** 
  85:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../../os/rt/include/chevents.h **** 
  89:../../../os/rt/include/chevents.h **** /**
  90:../../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../../os/rt/include/chevents.h ****  */
  92:../../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../../os/rt/include/chevents.h **** 
  94:../../../os/rt/include/chevents.h **** /**
  95:../../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../../os/rt/include/chevents.h ****  */
  97:../../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../../os/rt/include/chevents.h **** 
  99:../../../os/rt/include/chevents.h **** /**
 100:../../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../../os/rt/include/chevents.h ****  */
 105:../../../os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 106:../../../os/rt/include/chevents.h **** 
 107:../../../os/rt/include/chevents.h **** /**
 108:../../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../../os/rt/include/chevents.h ****  *
 112:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../../os/rt/include/chevents.h ****  */
 114:../../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:../../../os/rt/include/chevents.h **** 
 116:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../../os/rt/include/chevents.h **** 
 120:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../../os/rt/include/chevents.h **** extern "C" {
 122:../../../os/rt/include/chevents.h **** #endif
 123:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:../../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:../../../os/rt/include/chevents.h ****                                   eventmask_t events,
 126:../../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:../../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEventsI(eventmask_t events);
 129:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 130:../../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 131:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 132:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 133:../../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 134:../../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 135:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 136:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 137:../../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 138:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 139:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 140:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 141:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 142:../../../os/rt/include/chevents.h **** #endif
 143:../../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 144:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout);
 145:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout);
 146:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout);
 147:../../../os/rt/include/chevents.h **** #endif
 148:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 149:../../../os/rt/include/chevents.h **** }
 150:../../../os/rt/include/chevents.h **** #endif
 151:../../../os/rt/include/chevents.h **** 
 152:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 153:../../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 154:../../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 155:../../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 156:../../../os/rt/include/chevents.h **** #endif
 157:../../../os/rt/include/chevents.h **** 
 158:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 159:../../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 160:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 161:../../../os/rt/include/chevents.h **** 
 162:../../../os/rt/include/chevents.h **** /**
 163:../../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 164:../../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 165:../../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 166:../../../os/rt/include/chevents.h ****  *
 167:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 168:../../../os/rt/include/chevents.h ****  *
 169:../../../os/rt/include/chevents.h ****  * @init
 170:../../../os/rt/include/chevents.h ****  */
 171:../../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 172:../../../os/rt/include/chevents.h **** 
 173:../../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 174:../../../os/rt/include/chevents.h **** }
 175:../../../os/rt/include/chevents.h **** 
 176:../../../os/rt/include/chevents.h **** /**
 177:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 178:../../../os/rt/include/chevents.h ****  * @details Once a thread has registered as listener on an event source it
 179:../../../os/rt/include/chevents.h ****  *          will be notified of all events broadcasted there.
 180:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 181:../../../os/rt/include/chevents.h ****  *          different threads.
 182:../../../os/rt/include/chevents.h ****  *
 183:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 184:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 185:../../../os/rt/include/chevents.h ****  * @param[in] events    the mask of events to be ORed to the thread when
 186:../../../os/rt/include/chevents.h ****  *                      the event source is broadcasted
 187:../../../os/rt/include/chevents.h ****  *
 188:../../../os/rt/include/chevents.h ****  * @api
 189:../../../os/rt/include/chevents.h ****  */
 190:../../../os/rt/include/chevents.h **** static inline void chEvtRegisterMask(event_source_t *esp,
 191:../../../os/rt/include/chevents.h ****                                      event_listener_t *elp,
 192:../../../os/rt/include/chevents.h ****                                      eventmask_t events) {
 193:../../../os/rt/include/chevents.h **** 
 194:../../../os/rt/include/chevents.h ****   chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 195:../../../os/rt/include/chevents.h **** }
 196:../../../os/rt/include/chevents.h **** 
 197:../../../os/rt/include/chevents.h **** /**
 198:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 199:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can use the same event identifier, the
 200:../../../os/rt/include/chevents.h ****  *          listener will share the callback function.
 201:../../../os/rt/include/chevents.h ****  *
 202:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the  @p event_source_t structure
 203:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 204:../../../os/rt/include/chevents.h ****  * @param[in] event     numeric identifier assigned to the Event Listener.
 205:../../../os/rt/include/chevents.h ****  *                      The value must range between zero and the size, in bit,
 206:../../../os/rt/include/chevents.h ****  *                      of the @p eventmask_t type minus one.
 207:../../../os/rt/include/chevents.h ****  *
 208:../../../os/rt/include/chevents.h ****  * @api
 209:../../../os/rt/include/chevents.h ****  */
 210:../../../os/rt/include/chevents.h **** static inline void chEvtRegister(event_source_t *esp,
 211:../../../os/rt/include/chevents.h ****                                  event_listener_t *elp,
 212:../../../os/rt/include/chevents.h ****                                  eventid_t event) {
 213:../../../os/rt/include/chevents.h **** 
 214:../../../os/rt/include/chevents.h ****   chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 215:../../../os/rt/include/chevents.h **** }
 216:../../../os/rt/include/chevents.h **** 
 217:../../../os/rt/include/chevents.h **** /**
 218:../../../os/rt/include/chevents.h ****  * @brief   Verifies if there is at least one @p event_listener_t registered.
 219:../../../os/rt/include/chevents.h ****  *
 220:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 221:../../../os/rt/include/chevents.h ****  * @return              The event source status.
 222:../../../os/rt/include/chevents.h ****  *
 223:../../../os/rt/include/chevents.h ****  * @iclass
 224:../../../os/rt/include/chevents.h ****  */
 225:../../../os/rt/include/chevents.h **** static inline bool chEvtIsListeningI(event_source_t *esp) {
 226:../../../os/rt/include/chevents.h **** 
 227:../../../os/rt/include/chevents.h ****   return (bool)(esp != (event_source_t *)esp->next);
 228:../../../os/rt/include/chevents.h **** }
 229:../../../os/rt/include/chevents.h **** 
 230:../../../os/rt/include/chevents.h **** /**
 231:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 232:../../../os/rt/include/chevents.h ****  *          Source.
 233:../../../os/rt/include/chevents.h ****  *
 234:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 235:../../../os/rt/include/chevents.h ****  *
 236:../../../os/rt/include/chevents.h ****  * @api
 237:../../../os/rt/include/chevents.h ****  */
 238:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcast(event_source_t *esp) {
 239:../../../os/rt/include/chevents.h **** 
 240:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlags(esp, (eventflags_t)0);
 241:../../../os/rt/include/chevents.h **** }
 242:../../../os/rt/include/chevents.h **** 
 243:../../../os/rt/include/chevents.h **** /**
 244:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 245:../../../os/rt/include/chevents.h ****  *          Source.
 246:../../../os/rt/include/chevents.h ****  * @post    This function does not reschedule so a call to a rescheduling
 247:../../../os/rt/include/chevents.h ****  *          function must be performed before unlocking the kernel. Note that
 248:../../../os/rt/include/chevents.h ****  *          interrupt handlers always reschedule on exit so an explicit
 249:../../../os/rt/include/chevents.h ****  *          reschedule must not be performed in ISRs.
 250:../../../os/rt/include/chevents.h ****  *
 251:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 252:../../../os/rt/include/chevents.h ****  *
 253:../../../os/rt/include/chevents.h ****  * @iclass
 254:../../../os/rt/include/chevents.h ****  */
 255:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcastI(event_source_t *esp) {
 256:../../../os/rt/include/chevents.h **** 
 257:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 258:../../../os/rt/include/chevents.h **** }
 259:../../../os/rt/include/chevents.h **** 
 260:../../../os/rt/include/chevents.h **** /**
 261:../../../os/rt/include/chevents.h ****  * @brief   Adds (OR) a set of events to the current thread, this is
 262:../../../os/rt/include/chevents.h ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 263:../../../os/rt/include/chevents.h ****  *
 264:../../../os/rt/include/chevents.h ****  * @param[in] events    the events to be added
 265:../../../os/rt/include/chevents.h ****  * @return              The mask of currently pending events.
 266:../../../os/rt/include/chevents.h ****  *
 267:../../../os/rt/include/chevents.h ****  * @iclass
 268:../../../os/rt/include/chevents.h ****  */
 269:../../../os/rt/include/chevents.h **** static inline eventmask_t chEvtAddEventsI(eventmask_t events) {
 270:../../../os/rt/include/chevents.h **** 
 271:../../../os/rt/include/chevents.h ****   return currp->epending |= events;
 279               		.loc 3 271 0
 280 0002 E091 0000 		lds r30,ch+11
 281 0006 F091 0000 		lds r31,ch+11+1
 282 000a 908D      		ldd r25,Z+24
 283 000c 892B      		or r24,r25
 284               	.LVL17:
 285 000e 808F      		std Z+24,r24
 286               	.LVL18:
 287               	.LBE169:
 288               	.LBE168:
 289               	.LBB170:
 290               	.LBB171:
 291               	.LBB172:
 292               	.LBB173:
 293               		.loc 2 447 0
 294               	/* #APP */
 295               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 296 0010 7894      		sei
 297               	 ;  0 "" 2
 298               	/* #NOAPP */
 299               	.LBE173:
 300               	.LBE172:
 301               	.LBE171:
 302               	.LBE170:
 199:../../../os/rt/src/chevents.c ****   eventmask_t newevt;
 200:../../../os/rt/src/chevents.c **** 
 201:../../../os/rt/src/chevents.c ****   chSysLock();
 202:../../../os/rt/src/chevents.c ****   newevt = chEvtAddEventsI(events);
 203:../../../os/rt/src/chevents.c ****   chSysUnlock();
 204:../../../os/rt/src/chevents.c **** 
 205:../../../os/rt/src/chevents.c ****   return newevt;
 206:../../../os/rt/src/chevents.c **** }
 303               		.loc 1 206 0
 304 0012 0895      		ret
 305               		.cfi_endproc
 306               	.LFE134:
 308               		.section	.text.chEvtGetAndClearFlags,"ax",@progbits
 309               	.global	chEvtGetAndClearFlags
 311               	chEvtGetAndClearFlags:
 312               	.LFB136:
 207:../../../os/rt/src/chevents.c **** 
 208:../../../os/rt/src/chevents.c **** /**
 209:../../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 210:../../../os/rt/src/chevents.c ****  *          Source.
 211:../../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 212:../../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 213:../../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 214:../../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 215:../../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 216:../../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 217:../../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 218:../../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 219:../../../os/rt/src/chevents.c ****  *
 220:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 221:../../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 222:../../../os/rt/src/chevents.c ****  *
 223:../../../os/rt/src/chevents.c ****  * @iclass
 224:../../../os/rt/src/chevents.c ****  */
 225:../../../os/rt/src/chevents.c **** void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 226:../../../os/rt/src/chevents.c ****   event_listener_t *elp;
 227:../../../os/rt/src/chevents.c **** 
 228:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 229:../../../os/rt/src/chevents.c ****   chDbgCheck(esp != NULL);
 230:../../../os/rt/src/chevents.c **** 
 231:../../../os/rt/src/chevents.c ****   elp = esp->next;
 232:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 233:../../../os/rt/src/chevents.c ****   while (elp != (event_listener_t *)esp) {
 234:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 235:../../../os/rt/src/chevents.c ****     elp->flags |= flags;
 236:../../../os/rt/src/chevents.c ****     /* When flags == 0 the thread will always be signaled because the
 237:../../../os/rt/src/chevents.c ****        source does not emit any flag.*/
 238:../../../os/rt/src/chevents.c ****     if ((flags == (eventflags_t)0) ||
 239:../../../os/rt/src/chevents.c ****         ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 240:../../../os/rt/src/chevents.c ****       chEvtSignalI(elp->listener, elp->events);
 241:../../../os/rt/src/chevents.c ****     }
 242:../../../os/rt/src/chevents.c ****     elp = elp->next;
 243:../../../os/rt/src/chevents.c ****   }
 244:../../../os/rt/src/chevents.c **** }
 245:../../../os/rt/src/chevents.c **** 
 246:../../../os/rt/src/chevents.c **** /**
 247:../../../os/rt/src/chevents.c ****  * @brief   Returns the flags associated to an @p event_listener_t.
 248:../../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 249:../../../os/rt/src/chevents.c ****  *          cleared.
 250:../../../os/rt/src/chevents.c ****  *
 251:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 252:../../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 253:../../../os/rt/src/chevents.c ****  *                      event source.
 254:../../../os/rt/src/chevents.c ****  *
 255:../../../os/rt/src/chevents.c ****  * @api
 256:../../../os/rt/src/chevents.c ****  */
 257:../../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 313               		.loc 1 257 0
 314               		.cfi_startproc
 315               	.LVL19:
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320 0000 FC01      		movw r30,r24
 321               	.LBB174:
 322               	.LBB175:
 323               	.LBB176:
 437:../../../os/common/ports/AVR/chcore.h **** }
 324               		.loc 2 437 0
 325               	/* #APP */
 326               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 327 0002 F894      		cli
 328               	 ;  0 "" 2
 329               	/* #NOAPP */
 330               	.LBE176:
 331               	.LBE175:
 332               	.LBE174:
 258:../../../os/rt/src/chevents.c ****   eventflags_t flags;
 259:../../../os/rt/src/chevents.c **** 
 260:../../../os/rt/src/chevents.c ****   chSysLock();
 261:../../../os/rt/src/chevents.c ****   flags = elp->flags;
 333               		.loc 1 261 0
 334 0004 8581      		ldd r24,Z+5
 335               	.LVL20:
 262:../../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 336               		.loc 1 262 0
 337 0006 1582      		std Z+5,__zero_reg__
 338               	.LBB177:
 339               	.LBB178:
 340               	.LBB179:
 341               	.LBB180:
 342               		.loc 2 447 0
 343               	/* #APP */
 344               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 345 0008 7894      		sei
 346               	 ;  0 "" 2
 347               	/* #NOAPP */
 348               	.LBE180:
 349               	.LBE179:
 350               	.LBE178:
 351               	.LBE177:
 263:../../../os/rt/src/chevents.c ****   chSysUnlock();
 264:../../../os/rt/src/chevents.c **** 
 265:../../../os/rt/src/chevents.c ****   return flags;
 266:../../../os/rt/src/chevents.c **** }
 352               		.loc 1 266 0
 353 000a 0895      		ret
 354               		.cfi_endproc
 355               	.LFE136:
 357               		.section	.text.chEvtSignalI,"ax",@progbits
 358               	.global	chEvtSignalI
 360               	chEvtSignalI:
 361               	.LFB138:
 267:../../../os/rt/src/chevents.c **** 
 268:../../../os/rt/src/chevents.c **** /**
 269:../../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 270:../../../os/rt/src/chevents.c ****  *
 271:../../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 272:../../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 273:../../../os/rt/src/chevents.c ****  *
 274:../../../os/rt/src/chevents.c ****  * @api
 275:../../../os/rt/src/chevents.c ****  */
 276:../../../os/rt/src/chevents.c **** void chEvtSignal(thread_t *tp, eventmask_t events) {
 277:../../../os/rt/src/chevents.c **** 
 278:../../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 279:../../../os/rt/src/chevents.c **** 
 280:../../../os/rt/src/chevents.c ****   chSysLock();
 281:../../../os/rt/src/chevents.c ****   chEvtSignalI(tp, events);
 282:../../../os/rt/src/chevents.c ****   chSchRescheduleS();
 283:../../../os/rt/src/chevents.c ****   chSysUnlock();
 284:../../../os/rt/src/chevents.c **** }
 285:../../../os/rt/src/chevents.c **** 
 286:../../../os/rt/src/chevents.c **** /**
 287:../../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 288:../../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 289:../../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 290:../../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 291:../../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 292:../../../os/rt/src/chevents.c ****  *
 293:../../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 294:../../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 295:../../../os/rt/src/chevents.c ****  *
 296:../../../os/rt/src/chevents.c ****  * @iclass
 297:../../../os/rt/src/chevents.c ****  */
 298:../../../os/rt/src/chevents.c **** void chEvtSignalI(thread_t *tp, eventmask_t events) {
 362               		.loc 1 298 0
 363               		.cfi_startproc
 364               	.LVL21:
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 369 0000 FC01      		movw r30,r24
 299:../../../os/rt/src/chevents.c **** 
 300:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 301:../../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 302:../../../os/rt/src/chevents.c **** 
 303:../../../os/rt/src/chevents.c ****   tp->epending |= events;
 370               		.loc 1 303 0
 371 0002 908D      		ldd r25,Z+24
 372 0004 692B      		or r22,r25
 373               	.LVL22:
 374 0006 608F      		std Z+24,r22
 304:../../../os/rt/src/chevents.c ****   /* Test on the AND/OR conditions wait states.*/
 305:../../../os/rt/src/chevents.c ****   if (((tp->state == CH_STATE_WTOREVT) &&
 375               		.loc 1 305 0
 376 0008 8585      		ldd r24,Z+13
 377               	.LVL23:
 378 000a 8A30      		cpi r24,lo8(10)
 379 000c 01F0      		breq .L17
 306:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 380               		.loc 1 306 0
 381 000e 8B30      		cpi r24,lo8(11)
 382 0010 01F0      		breq .L18
 383               	.L13:
 384 0012 0895      		ret
 385               	.L18:
 307:../../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 308:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 386               		.loc 1 308 0
 387 0014 8089      		ldd r24,Z+16
 307:../../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 388               		.loc 1 307 0
 389 0016 6823      		and r22,r24
 390 0018 8613      		cpse r24,r22
 391 001a 00C0      		rjmp .L13
 392               	.L15:
 309:../../../os/rt/src/chevents.c ****     tp->u.rdymsg = MSG_OK;
 393               		.loc 1 309 0
 394 001c 118A      		std Z+17,__zero_reg__
 395 001e 108A      		std Z+16,__zero_reg__
 310:../../../os/rt/src/chevents.c ****     (void) chSchReadyI(tp);
 396               		.loc 1 310 0
 397 0020 CF01      		movw r24,r30
 398 0022 0C94 0000 		jmp chSchReadyI
 399               	.LVL24:
 400               	.L17:
 305:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 401               		.loc 1 305 0 discriminator 1
 402 0026 8089      		ldd r24,Z+16
 403 0028 6823      		and r22,r24
 404 002a 01F4      		brne .L15
 405 002c 0895      		ret
 406               		.cfi_endproc
 407               	.LFE138:
 409               		.section	.text.chEvtBroadcastFlagsI,"ax",@progbits
 410               	.global	chEvtBroadcastFlagsI
 412               	chEvtBroadcastFlagsI:
 413               	.LFB135:
 225:../../../os/rt/src/chevents.c ****   event_listener_t *elp;
 414               		.loc 1 225 0
 415               		.cfi_startproc
 416               	.LVL25:
 417 0000 EF92      		push r14
 418               	.LCFI0:
 419               		.cfi_def_cfa_offset 3
 420               		.cfi_offset 14, -2
 421 0002 FF92      		push r15
 422               	.LCFI1:
 423               		.cfi_def_cfa_offset 4
 424               		.cfi_offset 15, -3
 425 0004 1F93      		push r17
 426               	.LCFI2:
 427               		.cfi_def_cfa_offset 5
 428               		.cfi_offset 17, -4
 429 0006 CF93      		push r28
 430               	.LCFI3:
 431               		.cfi_def_cfa_offset 6
 432               		.cfi_offset 28, -5
 433 0008 DF93      		push r29
 434               	.LCFI4:
 435               		.cfi_def_cfa_offset 7
 436               		.cfi_offset 29, -6
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439               	/* stack size = 5 */
 440               	.L__stack_usage = 5
 441 000a 7C01      		movw r14,r24
 442 000c 162F      		mov r17,r22
 231:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 443               		.loc 1 231 0
 444 000e FC01      		movw r30,r24
 445 0010 C081      		ld r28,Z
 446 0012 D181      		ldd r29,Z+1
 447               	.LVL26:
 233:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 448               		.loc 1 233 0
 449 0014 8C17      		cp r24,r28
 450 0016 9D07      		cpc r25,r29
 451 0018 01F0      		breq .L19
 452               	.LVL27:
 453               	.L29:
 235:../../../os/rt/src/chevents.c ****     /* When flags == 0 the thread will always be signaled because the
 454               		.loc 1 235 0
 455 001a 8D81      		ldd r24,Y+5
 456 001c 812B      		or r24,r17
 457 001e 8D83      		std Y+5,r24
 238:../../../os/rt/src/chevents.c ****         ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 458               		.loc 1 238 0
 459 0020 1123      		tst r17
 460 0022 01F0      		breq .L21
 238:../../../os/rt/src/chevents.c ****         ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 461               		.loc 1 238 0 is_stmt 0 discriminator 1
 462 0024 9E81      		ldd r25,Y+6
 463 0026 8923      		and r24,r25
 464 0028 01F0      		breq .L22
 465               	.L21:
 240:../../../os/rt/src/chevents.c ****     }
 466               		.loc 1 240 0 is_stmt 1
 467 002a 6C81      		ldd r22,Y+4
 468 002c 8A81      		ldd r24,Y+2
 469 002e 9B81      		ldd r25,Y+3
 470 0030 0E94 0000 		call chEvtSignalI
 471               	.LVL28:
 472               	.L22:
 242:../../../os/rt/src/chevents.c ****   }
 473               		.loc 1 242 0
 474 0034 0990      		ld __tmp_reg__,Y+
 475 0036 D881      		ld r29,Y
 476 0038 C02D      		mov r28,__tmp_reg__
 477               	.LVL29:
 233:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 478               		.loc 1 233 0
 479 003a EC16      		cp r14,r28
 480 003c FD06      		cpc r15,r29
 481 003e 01F4      		brne .L29
 482               	.L19:
 483               	/* epilogue start */
 244:../../../os/rt/src/chevents.c **** 
 484               		.loc 1 244 0
 485 0040 DF91      		pop r29
 486 0042 CF91      		pop r28
 487               	.LVL30:
 488 0044 1F91      		pop r17
 489               	.LVL31:
 490 0046 FF90      		pop r15
 491 0048 EF90      		pop r14
 492               	.LVL32:
 493 004a 0895      		ret
 494               		.cfi_endproc
 495               	.LFE135:
 497               		.section	.text.chEvtSignal,"ax",@progbits
 498               	.global	chEvtSignal
 500               	chEvtSignal:
 501               	.LFB137:
 276:../../../os/rt/src/chevents.c **** 
 502               		.loc 1 276 0
 503               		.cfi_startproc
 504               	.LVL33:
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 509               	.LBB181:
 510               	.LBB182:
 511               	.LBB183:
 437:../../../os/common/ports/AVR/chcore.h **** }
 512               		.loc 2 437 0
 513               	/* #APP */
 514               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 515 0000 F894      		cli
 516               	 ;  0 "" 2
 517               	/* #NOAPP */
 518               	.LBE183:
 519               	.LBE182:
 520               	.LBE181:
 281:../../../os/rt/src/chevents.c ****   chSchRescheduleS();
 521               		.loc 1 281 0
 522 0002 0E94 0000 		call chEvtSignalI
 523               	.LVL34:
 282:../../../os/rt/src/chevents.c ****   chSysUnlock();
 524               		.loc 1 282 0
 525 0006 0E94 0000 		call chSchRescheduleS
 526               	.LVL35:
 527               	.LBB184:
 528               	.LBB185:
 529               	.LBB186:
 530               	.LBB187:
 531               		.loc 2 447 0
 532               	/* #APP */
 533               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 534 000a 7894      		sei
 535               	 ;  0 "" 2
 536               	/* #NOAPP */
 537 000c 0895      		ret
 538               	.LBE187:
 539               	.LBE186:
 540               	.LBE185:
 541               	.LBE184:
 542               		.cfi_endproc
 543               	.LFE137:
 545               		.section	.text.chEvtBroadcastFlags,"ax",@progbits
 546               	.global	chEvtBroadcastFlags
 548               	chEvtBroadcastFlags:
 549               	.LFB139:
 311:../../../os/rt/src/chevents.c ****   }
 312:../../../os/rt/src/chevents.c **** }
 313:../../../os/rt/src/chevents.c **** 
 314:../../../os/rt/src/chevents.c **** /**
 315:../../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 316:../../../os/rt/src/chevents.c ****  *          Source.
 317:../../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 318:../../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 319:../../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 320:../../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 321:../../../os/rt/src/chevents.c ****  *
 322:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 323:../../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 324:../../../os/rt/src/chevents.c ****  *
 325:../../../os/rt/src/chevents.c ****  * @api
 326:../../../os/rt/src/chevents.c ****  */
 327:../../../os/rt/src/chevents.c **** void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 550               		.loc 1 327 0
 551               		.cfi_startproc
 552               	.LVL36:
 553               	/* prologue: function */
 554               	/* frame size = 0 */
 555               	/* stack size = 0 */
 556               	.L__stack_usage = 0
 557               	.LBB188:
 558               	.LBB189:
 559               	.LBB190:
 437:../../../os/common/ports/AVR/chcore.h **** }
 560               		.loc 2 437 0
 561               	/* #APP */
 562               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 563 0000 F894      		cli
 564               	 ;  0 "" 2
 565               	/* #NOAPP */
 566               	.LBE190:
 567               	.LBE189:
 568               	.LBE188:
 328:../../../os/rt/src/chevents.c **** 
 329:../../../os/rt/src/chevents.c ****   chSysLock();
 330:../../../os/rt/src/chevents.c ****   chEvtBroadcastFlagsI(esp, flags);
 569               		.loc 1 330 0
 570 0002 0E94 0000 		call chEvtBroadcastFlagsI
 571               	.LVL37:
 331:../../../os/rt/src/chevents.c ****   chSchRescheduleS();
 572               		.loc 1 331 0
 573 0006 0E94 0000 		call chSchRescheduleS
 574               	.LVL38:
 575               	.LBB191:
 576               	.LBB192:
 577               	.LBB193:
 578               	.LBB194:
 579               		.loc 2 447 0
 580               	/* #APP */
 581               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 582 000a 7894      		sei
 583               	 ;  0 "" 2
 584               	/* #NOAPP */
 585 000c 0895      		ret
 586               	.LBE194:
 587               	.LBE193:
 588               	.LBE192:
 589               	.LBE191:
 590               		.cfi_endproc
 591               	.LFE139:
 593               		.section	.text.chEvtGetAndClearFlagsI,"ax",@progbits
 594               	.global	chEvtGetAndClearFlagsI
 596               	chEvtGetAndClearFlagsI:
 597               	.LFB140:
 332:../../../os/rt/src/chevents.c ****   chSysUnlock();
 333:../../../os/rt/src/chevents.c **** }
 334:../../../os/rt/src/chevents.c **** 
 335:../../../os/rt/src/chevents.c **** /**
 336:../../../os/rt/src/chevents.c ****  * @brief   Returns the flags associated to an @p event_listener_t.
 337:../../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 338:../../../os/rt/src/chevents.c ****  *          cleared.
 339:../../../os/rt/src/chevents.c ****  *
 340:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 341:../../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 342:../../../os/rt/src/chevents.c ****  *                      event source.
 343:../../../os/rt/src/chevents.c ****  *
 344:../../../os/rt/src/chevents.c ****  * @iclass
 345:../../../os/rt/src/chevents.c ****  */
 346:../../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
 598               		.loc 1 346 0
 599               		.cfi_startproc
 600               	.LVL39:
 601               	/* prologue: function */
 602               	/* frame size = 0 */
 603               	/* stack size = 0 */
 604               	.L__stack_usage = 0
 605 0000 FC01      		movw r30,r24
 347:../../../os/rt/src/chevents.c ****   eventflags_t flags;
 348:../../../os/rt/src/chevents.c **** 
 349:../../../os/rt/src/chevents.c ****   flags = elp->flags;
 606               		.loc 1 349 0
 607 0002 8581      		ldd r24,Z+5
 608               	.LVL40:
 350:../../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 609               		.loc 1 350 0
 610 0004 1582      		std Z+5,__zero_reg__
 351:../../../os/rt/src/chevents.c **** 
 352:../../../os/rt/src/chevents.c ****   return flags;
 353:../../../os/rt/src/chevents.c **** }
 611               		.loc 1 353 0
 612 0006 0895      		ret
 613               		.cfi_endproc
 614               	.LFE140:
 616               		.section	.text.chEvtDispatch,"ax",@progbits
 617               	.global	chEvtDispatch
 619               	chEvtDispatch:
 620               	.LFB141:
 354:../../../os/rt/src/chevents.c **** 
 355:../../../os/rt/src/chevents.c **** /**
 356:../../../os/rt/src/chevents.c ****  * @brief   Invokes the event handlers associated to an event flags mask.
 357:../../../os/rt/src/chevents.c ****  *
 358:../../../os/rt/src/chevents.c ****  * @param[in] events    mask of events to be dispatched
 359:../../../os/rt/src/chevents.c ****  * @param[in] handlers  an array of @p evhandler_t. The array must have size
 360:../../../os/rt/src/chevents.c ****  *                      equal to the number of bits in eventmask_t.
 361:../../../os/rt/src/chevents.c ****  *
 362:../../../os/rt/src/chevents.c ****  * @api
 363:../../../os/rt/src/chevents.c ****  */
 364:../../../os/rt/src/chevents.c **** void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 621               		.loc 1 364 0
 622               		.cfi_startproc
 623               	.LVL41:
 624 0000 BF92      		push r11
 625               	.LCFI5:
 626               		.cfi_def_cfa_offset 3
 627               		.cfi_offset 11, -2
 628 0002 CF92      		push r12
 629               	.LCFI6:
 630               		.cfi_def_cfa_offset 4
 631               		.cfi_offset 12, -3
 632 0004 DF92      		push r13
 633               	.LCFI7:
 634               		.cfi_def_cfa_offset 5
 635               		.cfi_offset 13, -4
 636 0006 EF92      		push r14
 637               	.LCFI8:
 638               		.cfi_def_cfa_offset 6
 639               		.cfi_offset 14, -5
 640 0008 FF92      		push r15
 641               	.LCFI9:
 642               		.cfi_def_cfa_offset 7
 643               		.cfi_offset 15, -6
 644 000a 0F93      		push r16
 645               	.LCFI10:
 646               		.cfi_def_cfa_offset 8
 647               		.cfi_offset 16, -7
 648 000c 1F93      		push r17
 649               	.LCFI11:
 650               		.cfi_def_cfa_offset 9
 651               		.cfi_offset 17, -8
 652 000e CF93      		push r28
 653               	.LCFI12:
 654               		.cfi_def_cfa_offset 10
 655               		.cfi_offset 28, -9
 656 0010 DF93      		push r29
 657               	.LCFI13:
 658               		.cfi_def_cfa_offset 11
 659               		.cfi_offset 29, -10
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 9 */
 663               	.L__stack_usage = 9
 664 0012 B62E      		mov r11,r22
 665               	.LVL42:
 365:../../../os/rt/src/chevents.c ****   eventid_t eid;
 366:../../../os/rt/src/chevents.c **** 
 367:../../../os/rt/src/chevents.c ****   chDbgCheck(handlers != NULL);
 368:../../../os/rt/src/chevents.c **** 
 369:../../../os/rt/src/chevents.c ****   eid = (eventid_t)0;
 370:../../../os/rt/src/chevents.c ****   while (events != (eventmask_t)0) {
 666               		.loc 1 370 0
 667 0014 6623      		tst r22
 668 0016 01F0      		breq .L36
 669 0018 EC01      		movw r28,r24
 670 001a C12C      		mov r12,__zero_reg__
 671 001c D12C      		mov r13,__zero_reg__
 672 001e 7601      		movw r14,r12
 673 0020 462F      		mov r20,r22
 674 0022 50E0      		ldi r21,0
 371:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 372:../../../os/rt/src/chevents.c ****       chDbgAssert(handlers[eid] != NULL, "null handler");
 373:../../../os/rt/src/chevents.c ****       events &= ~EVENT_MASK(eid);
 675               		.loc 1 373 0
 676 0024 01E0      		ldi r16,lo8(1)
 677 0026 10E0      		ldi r17,0
 678               	.LVL43:
 679               	.L38:
 371:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 680               		.loc 1 371 0
 681 0028 9A01      		movw r18,r20
 682 002a 0C2C      		mov r0,r12
 683 002c 00C0      		rjmp 2f
 684               		1:
 685 002e 3595      		asr r19
 686 0030 2795      		ror r18
 687               		2:
 688 0032 0A94      		dec r0
 689 0034 02F4      		brpl 1b
 690 0036 20FD      		sbrc r18,0
 691 0038 00C0      		rjmp .L43
 374:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 375:../../../os/rt/src/chevents.c ****     }
 376:../../../os/rt/src/chevents.c ****     eid++;
 692               		.loc 1 376 0
 693 003a 8FEF      		ldi r24,-1
 694 003c C81A      		sub r12,r24
 695 003e D80A      		sbc r13,r24
 696 0040 E80A      		sbc r14,r24
 697 0042 F80A      		sbc r15,r24
 698               	.LVL44:
 699 0044 2296      		adiw r28,2
 700 0046 00C0      		rjmp .L38
 701               	.L43:
 373:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 702               		.loc 1 373 0
 703 0048 9801      		movw r18,r16
 704 004a 0C2C      		mov r0,r12
 705 004c 00C0      		rjmp 2f
 706               		1:
 707 004e 220F      		lsl r18
 708 0050 331F      		rol r19
 709               		2:
 710 0052 0A94      		dec r0
 711 0054 02F4      		brpl 1b
 712 0056 C901      		movw r24,r18
 713 0058 8095      		com r24
 714 005a B822      		and r11,r24
 715               	.LVL45:
 374:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 716               		.loc 1 374 0
 717 005c E991      		ld r30,Y+
 718 005e F991      		ld r31,Y+
 719 0060 C701      		movw r24,r14
 720 0062 B601      		movw r22,r12
 721 0064 0995      		icall
 722               	.LVL46:
 723               		.loc 1 376 0
 724 0066 3FEF      		ldi r19,-1
 725 0068 C31A      		sub r12,r19
 726 006a D30A      		sbc r13,r19
 727 006c E30A      		sbc r14,r19
 728 006e F30A      		sbc r15,r19
 729               	.LVL47:
 370:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 730               		.loc 1 370 0
 731 0070 BB20      		tst r11
 732 0072 01F0      		breq .L36
 733 0074 4B2D      		mov r20,r11
 734 0076 50E0      		ldi r21,0
 735 0078 00C0      		rjmp .L38
 736               	.LVL48:
 737               	.L36:
 738               	/* epilogue start */
 377:../../../os/rt/src/chevents.c ****   }
 378:../../../os/rt/src/chevents.c **** }
 739               		.loc 1 378 0
 740 007a DF91      		pop r29
 741 007c CF91      		pop r28
 742 007e 1F91      		pop r17
 743 0080 0F91      		pop r16
 744 0082 FF90      		pop r15
 745 0084 EF90      		pop r14
 746 0086 DF90      		pop r13
 747 0088 CF90      		pop r12
 748 008a BF90      		pop r11
 749               	.LVL49:
 750 008c 0895      		ret
 751               		.cfi_endproc
 752               	.LFE141:
 754               		.section	.text.chEvtWaitOne,"ax",@progbits
 755               	.global	chEvtWaitOne
 757               	chEvtWaitOne:
 758               	.LFB142:
 379:../../../os/rt/src/chevents.c **** 
 380:../../../os/rt/src/chevents.c **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) ||                                      \
 381:../../../os/rt/src/chevents.c ****     (CH_CFG_USE_EVENTS_TIMEOUT == FALSE) ||                                 \
 382:../../../os/rt/src/chevents.c ****     defined(__DOXYGEN__)
 383:../../../os/rt/src/chevents.c **** /**
 384:../../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 385:../../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 386:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 387:../../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 388:../../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop in
 389:../../../os/rt/src/chevents.c ****  *          order to serve all the pending events.<br>
 390:../../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 391:../../../os/rt/src/chevents.c ****  *          an higher priority.
 392:../../../os/rt/src/chevents.c ****  *
 393:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 394:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 395:../../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 396:../../../os/rt/src/chevents.c ****  *
 397:../../../os/rt/src/chevents.c ****  * @api
 398:../../../os/rt/src/chevents.c ****  */
 399:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOne(eventmask_t events) {
 759               		.loc 1 399 0
 760               		.cfi_startproc
 761               	.LVL50:
 762 0000 1F93      		push r17
 763               	.LCFI14:
 764               		.cfi_def_cfa_offset 3
 765               		.cfi_offset 17, -2
 766 0002 CF93      		push r28
 767               	.LCFI15:
 768               		.cfi_def_cfa_offset 4
 769               		.cfi_offset 28, -3
 770 0004 DF93      		push r29
 771               	.LCFI16:
 772               		.cfi_def_cfa_offset 5
 773               		.cfi_offset 29, -4
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 3 */
 777               	.L__stack_usage = 3
 400:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 778               		.loc 1 400 0
 779 0006 C091 0000 		lds r28,ch+11
 780 000a D091 0000 		lds r29,ch+11+1
 781               	.LVL51:
 782               	.LBB195:
 783               	.LBB196:
 784               	.LBB197:
 437:../../../os/common/ports/AVR/chcore.h **** }
 785               		.loc 2 437 0
 786               	/* #APP */
 787               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 788 000e F894      		cli
 789               	 ;  0 "" 2
 790               	/* #NOAPP */
 791               	.LBE197:
 792               	.LBE196:
 793               	.LBE195:
 401:../../../os/rt/src/chevents.c ****   eventmask_t m;
 402:../../../os/rt/src/chevents.c **** 
 403:../../../os/rt/src/chevents.c ****   chSysLock();
 404:../../../os/rt/src/chevents.c ****   m = ctp->epending & events;
 794               		.loc 1 404 0
 795 0010 288D      		ldd r18,Y+24
 796 0012 922F      		mov r25,r18
 797 0014 9823      		and r25,r24
 798               	.LVL52:
 405:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 799               		.loc 1 405 0
 800 0016 01F4      		brne .L45
 801 0018 182F      		mov r17,r24
 406:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 802               		.loc 1 406 0
 803 001a 888B      		std Y+16,r24
 407:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 804               		.loc 1 407 0
 805 001c 8AE0      		ldi r24,lo8(10)
 806               	.LVL53:
 807 001e 0E94 0000 		call chSchGoSleepS
 808               	.LVL54:
 408:../../../os/rt/src/chevents.c ****     m = ctp->epending & events;
 809               		.loc 1 408 0
 810 0022 288D      		ldd r18,Y+24
 811 0024 912F      		mov r25,r17
 812 0026 9223      		and r25,r18
 813               	.LVL55:
 814               	.L45:
 409:../../../os/rt/src/chevents.c ****   }
 410:../../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 815               		.loc 1 410 0
 816 0028 892F      		mov r24,r25
 817 002a 8195      		neg r24
 818 002c 8923      		and r24,r25
 819               	.LVL56:
 411:../../../os/rt/src/chevents.c ****   ctp->epending &= ~m;
 820               		.loc 1 411 0
 821 002e 982F      		mov r25,r24
 822 0030 9095      		com r25
 823 0032 2923      		and r18,r25
 824 0034 288F      		std Y+24,r18
 825               	.LBB198:
 826               	.LBB199:
 827               	.LBB200:
 828               	.LBB201:
 829               		.loc 2 447 0
 830               	/* #APP */
 831               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 832 0036 7894      		sei
 833               	 ;  0 "" 2
 834               	/* epilogue start */
 835               	/* #NOAPP */
 836               	.LBE201:
 837               	.LBE200:
 838               	.LBE199:
 839               	.LBE198:
 412:../../../os/rt/src/chevents.c ****   chSysUnlock();
 413:../../../os/rt/src/chevents.c **** 
 414:../../../os/rt/src/chevents.c ****   return m;
 415:../../../os/rt/src/chevents.c **** }
 840               		.loc 1 415 0
 841 0038 DF91      		pop r29
 842 003a CF91      		pop r28
 843               	.LVL57:
 844 003c 1F91      		pop r17
 845 003e 0895      		ret
 846               		.cfi_endproc
 847               	.LFE142:
 849               		.section	.text.chEvtWaitAny,"ax",@progbits
 850               	.global	chEvtWaitAny
 852               	chEvtWaitAny:
 853               	.LFB143:
 416:../../../os/rt/src/chevents.c **** 
 417:../../../os/rt/src/chevents.c **** /**
 418:../../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 419:../../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 420:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 421:../../../os/rt/src/chevents.c ****  *          returned.
 422:../../../os/rt/src/chevents.c ****  *
 423:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 424:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 425:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 426:../../../os/rt/src/chevents.c ****  *
 427:../../../os/rt/src/chevents.c ****  * @api
 428:../../../os/rt/src/chevents.c ****  */
 429:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAny(eventmask_t events) {
 854               		.loc 1 429 0
 855               		.cfi_startproc
 856               	.LVL58:
 857 0000 1F93      		push r17
 858               	.LCFI17:
 859               		.cfi_def_cfa_offset 3
 860               		.cfi_offset 17, -2
 861 0002 CF93      		push r28
 862               	.LCFI18:
 863               		.cfi_def_cfa_offset 4
 864               		.cfi_offset 28, -3
 865 0004 DF93      		push r29
 866               	.LCFI19:
 867               		.cfi_def_cfa_offset 5
 868               		.cfi_offset 29, -4
 869               	/* prologue: function */
 870               	/* frame size = 0 */
 871               	/* stack size = 3 */
 872               	.L__stack_usage = 3
 873 0006 282F      		mov r18,r24
 430:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 874               		.loc 1 430 0
 875 0008 C091 0000 		lds r28,ch+11
 876 000c D091 0000 		lds r29,ch+11+1
 877               	.LVL59:
 878               	.LBB202:
 879               	.LBB203:
 880               	.LBB204:
 437:../../../os/common/ports/AVR/chcore.h **** }
 881               		.loc 2 437 0
 882               	/* #APP */
 883               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 884 0010 F894      		cli
 885               	 ;  0 "" 2
 886               	/* #NOAPP */
 887               	.LBE204:
 888               	.LBE203:
 889               	.LBE202:
 431:../../../os/rt/src/chevents.c ****   eventmask_t m;
 432:../../../os/rt/src/chevents.c **** 
 433:../../../os/rt/src/chevents.c ****   chSysLock();
 434:../../../os/rt/src/chevents.c ****   m = ctp->epending & events;
 890               		.loc 1 434 0
 891 0012 988D      		ldd r25,Y+24
 892 0014 892F      		mov r24,r25
 893               	.LVL60:
 894 0016 8223      		and r24,r18
 895               	.LVL61:
 435:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 896               		.loc 1 435 0
 897 0018 01F4      		brne .L47
 898 001a 122F      		mov r17,r18
 436:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 899               		.loc 1 436 0
 900 001c 288B      		std Y+16,r18
 437:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 901               		.loc 1 437 0
 902 001e 8AE0      		ldi r24,lo8(10)
 903               	.LVL62:
 904 0020 0E94 0000 		call chSchGoSleepS
 905               	.LVL63:
 438:../../../os/rt/src/chevents.c ****     m = ctp->epending & events;
 906               		.loc 1 438 0
 907 0024 988D      		ldd r25,Y+24
 908 0026 812F      		mov r24,r17
 909 0028 8923      		and r24,r25
 910               	.LVL64:
 911               	.L47:
 439:../../../os/rt/src/chevents.c ****   }
 440:../../../os/rt/src/chevents.c ****   ctp->epending &= ~m;
 912               		.loc 1 440 0
 913 002a 282F      		mov r18,r24
 914 002c 2095      		com r18
 915 002e 9223      		and r25,r18
 916 0030 988F      		std Y+24,r25
 917               	.LBB205:
 918               	.LBB206:
 919               	.LBB207:
 920               	.LBB208:
 921               		.loc 2 447 0
 922               	/* #APP */
 923               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 924 0032 7894      		sei
 925               	 ;  0 "" 2
 926               	/* epilogue start */
 927               	/* #NOAPP */
 928               	.LBE208:
 929               	.LBE207:
 930               	.LBE206:
 931               	.LBE205:
 441:../../../os/rt/src/chevents.c ****   chSysUnlock();
 442:../../../os/rt/src/chevents.c **** 
 443:../../../os/rt/src/chevents.c ****   return m;
 444:../../../os/rt/src/chevents.c **** }
 932               		.loc 1 444 0
 933 0034 DF91      		pop r29
 934 0036 CF91      		pop r28
 935               	.LVL65:
 936 0038 1F91      		pop r17
 937 003a 0895      		ret
 938               		.cfi_endproc
 939               	.LFE143:
 941               		.section	.text.chEvtWaitAll,"ax",@progbits
 942               	.global	chEvtWaitAll
 944               	chEvtWaitAll:
 945               	.LFB144:
 445:../../../os/rt/src/chevents.c **** 
 446:../../../os/rt/src/chevents.c **** /**
 447:../../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 448:../../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 449:../../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 450:../../../os/rt/src/chevents.c ****  *
 451:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 452:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 453:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 454:../../../os/rt/src/chevents.c ****  *
 455:../../../os/rt/src/chevents.c ****  * @api
 456:../../../os/rt/src/chevents.c ****  */
 457:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAll(eventmask_t events) {
 946               		.loc 1 457 0
 947               		.cfi_startproc
 948               	.LVL66:
 949 0000 0F93      		push r16
 950               	.LCFI20:
 951               		.cfi_def_cfa_offset 3
 952               		.cfi_offset 16, -2
 953 0002 1F93      		push r17
 954               	.LCFI21:
 955               		.cfi_def_cfa_offset 4
 956               		.cfi_offset 17, -3
 957 0004 CF93      		push r28
 958               	.LCFI22:
 959               		.cfi_def_cfa_offset 5
 960               		.cfi_offset 28, -4
 961               	/* prologue: function */
 962               	/* frame size = 0 */
 963               	/* stack size = 3 */
 964               	.L__stack_usage = 3
 965 0006 C82F      		mov r28,r24
 458:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 966               		.loc 1 458 0
 967 0008 0091 0000 		lds r16,ch+11
 968 000c 1091 0000 		lds r17,ch+11+1
 969               	.LVL67:
 970               	.LBB209:
 971               	.LBB210:
 972               	.LBB211:
 437:../../../os/common/ports/AVR/chcore.h **** }
 973               		.loc 2 437 0
 974               	/* #APP */
 975               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 976 0010 F894      		cli
 977               	 ;  0 "" 2
 978               	/* #NOAPP */
 979               	.LBE211:
 980               	.LBE210:
 981               	.LBE209:
 459:../../../os/rt/src/chevents.c **** 
 460:../../../os/rt/src/chevents.c ****   chSysLock();
 461:../../../os/rt/src/chevents.c ****   if ((ctp->epending & events) != events) {
 982               		.loc 1 461 0
 983 0012 F801      		movw r30,r16
 984 0014 808D      		ldd r24,Z+24
 985               	.LVL68:
 986 0016 982F      		mov r25,r24
 987 0018 9C23      		and r25,r28
 988 001a C917      		cp r28,r25
 989 001c 01F0      		breq .L49
 462:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 990               		.loc 1 462 0
 991 001e C08B      		std Z+16,r28
 463:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTANDEVT);
 992               		.loc 1 463 0
 993 0020 8BE0      		ldi r24,lo8(11)
 994 0022 0E94 0000 		call chSchGoSleepS
 995               	.LVL69:
 996 0026 F801      		movw r30,r16
 997 0028 808D      		ldd r24,Z+24
 998               	.L49:
 464:../../../os/rt/src/chevents.c ****   }
 465:../../../os/rt/src/chevents.c ****   ctp->epending &= ~events;
 999               		.loc 1 465 0
 1000 002a 9C2F      		mov r25,r28
 1001 002c 9095      		com r25
 1002 002e 8923      		and r24,r25
 1003 0030 F801      		movw r30,r16
 1004 0032 808F      		std Z+24,r24
 1005               	.LBB212:
 1006               	.LBB213:
 1007               	.LBB214:
 1008               	.LBB215:
 1009               		.loc 2 447 0
 1010               	/* #APP */
 1011               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1012 0034 7894      		sei
 1013               	 ;  0 "" 2
 1014               	/* #NOAPP */
 1015               	.LBE215:
 1016               	.LBE214:
 1017               	.LBE213:
 1018               	.LBE212:
 466:../../../os/rt/src/chevents.c ****   chSysUnlock();
 467:../../../os/rt/src/chevents.c **** 
 468:../../../os/rt/src/chevents.c ****   return events;
 469:../../../os/rt/src/chevents.c **** }
 1019               		.loc 1 469 0
 1020 0036 8C2F      		mov r24,r28
 1021               	/* epilogue start */
 1022 0038 CF91      		pop r28
 1023               	.LVL70:
 1024 003a 1F91      		pop r17
 1025 003c 0F91      		pop r16
 1026               	.LVL71:
 1027 003e 0895      		ret
 1028               		.cfi_endproc
 1029               	.LFE144:
 1031               		.section	.text.chEvtWaitOneTimeout,"ax",@progbits
 1032               	.global	chEvtWaitOneTimeout
 1034               	chEvtWaitOneTimeout:
 1035               	.LFB145:
 470:../../../os/rt/src/chevents.c **** #endif /* CH_CFG_OPTIMIZE_SPEED || !CH_CFG_USE_EVENTS_TIMEOUT */
 471:../../../os/rt/src/chevents.c **** 
 472:../../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 473:../../../os/rt/src/chevents.c **** /**
 474:../../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 475:../../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 476:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 477:../../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 478:../../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop
 479:../../../os/rt/src/chevents.c ****  *          in order to serve all the pending events.<br>
 480:../../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 481:../../../os/rt/src/chevents.c ****  *          an higher priority.
 482:../../../os/rt/src/chevents.c ****  *
 483:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 484:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 485:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 486:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 487:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 488:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 489:../../../os/rt/src/chevents.c ****  *                      .
 490:../../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 491:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 492:../../../os/rt/src/chevents.c ****  *
 493:../../../os/rt/src/chevents.c ****  * @api
 494:../../../os/rt/src/chevents.c ****  */
 495:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 1036               		.loc 1 495 0
 1037               		.cfi_startproc
 1038               	.LVL72:
 1039 0000 1F93      		push r17
 1040               	.LCFI23:
 1041               		.cfi_def_cfa_offset 3
 1042               		.cfi_offset 17, -2
 1043 0002 CF93      		push r28
 1044               	.LCFI24:
 1045               		.cfi_def_cfa_offset 4
 1046               		.cfi_offset 28, -3
 1047 0004 DF93      		push r29
 1048               	.LCFI25:
 1049               		.cfi_def_cfa_offset 5
 1050               		.cfi_offset 29, -4
 1051               	/* prologue: function */
 1052               	/* frame size = 0 */
 1053               	/* stack size = 3 */
 1054               	.L__stack_usage = 3
 496:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 1055               		.loc 1 496 0
 1056 0006 C091 0000 		lds r28,ch+11
 1057 000a D091 0000 		lds r29,ch+11+1
 1058               	.LVL73:
 1059               	.LBB216:
 1060               	.LBB217:
 1061               	.LBB218:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1062               		.loc 2 437 0
 1063               	/* #APP */
 1064               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1065 000e F894      		cli
 1066               	 ;  0 "" 2
 1067               	/* #NOAPP */
 1068               	.LBE218:
 1069               	.LBE217:
 1070               	.LBE216:
 497:../../../os/rt/src/chevents.c ****   eventmask_t m;
 498:../../../os/rt/src/chevents.c **** 
 499:../../../os/rt/src/chevents.c ****   chSysLock();
 500:../../../os/rt/src/chevents.c ****   m = ctp->epending & events;
 1071               		.loc 1 500 0
 1072 0010 288D      		ldd r18,Y+24
 1073 0012 922F      		mov r25,r18
 1074 0014 9823      		and r25,r24
 1075               	.LVL74:
 501:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1076               		.loc 1 501 0
 1077 0016 01F4      		brne .L51
 502:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1078               		.loc 1 502 0
 1079 0018 6115      		cp r22,__zero_reg__
 1080 001a 7105      		cpc r23,__zero_reg__
 1081 001c 01F4      		brne .L56
 1082               	.LVL75:
 1083               	.L55:
 1084               	.LBB219:
 1085               	.LBB220:
 1086               	.LBB221:
 1087               	.LBB222:
 1088               		.loc 2 447 0
 1089               	/* #APP */
 1090               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1091 001e 7894      		sei
 1092               	 ;  0 "" 2
 1093               	/* #NOAPP */
 1094               	.LBE222:
 1095               	.LBE221:
 1096               	.LBE220:
 1097               	.LBE219:
 503:../../../os/rt/src/chevents.c ****       chSysUnlock();
 504:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 505:../../../os/rt/src/chevents.c ****     }
 506:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 507:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 508:../../../os/rt/src/chevents.c ****       chSysUnlock();
 509:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1098               		.loc 1 509 0
 1099 0020 80E0      		ldi r24,0
 1100               	/* epilogue start */
 510:../../../os/rt/src/chevents.c ****     }
 511:../../../os/rt/src/chevents.c ****     m = ctp->epending & events;
 512:../../../os/rt/src/chevents.c ****   }
 513:../../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 514:../../../os/rt/src/chevents.c ****   ctp->epending &= ~m;
 515:../../../os/rt/src/chevents.c ****   chSysUnlock();
 516:../../../os/rt/src/chevents.c **** 
 517:../../../os/rt/src/chevents.c ****   return m;
 518:../../../os/rt/src/chevents.c **** }
 1101               		.loc 1 518 0
 1102 0022 DF91      		pop r29
 1103 0024 CF91      		pop r28
 1104               	.LVL76:
 1105 0026 1F91      		pop r17
 1106 0028 0895      		ret
 1107               	.LVL77:
 1108               	.L56:
 1109 002a 182F      		mov r17,r24
 506:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1110               		.loc 1 506 0
 1111 002c 888B      		std Y+16,r24
 507:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1112               		.loc 1 507 0
 1113 002e 8AE0      		ldi r24,lo8(10)
 1114               	.LVL78:
 1115 0030 0E94 0000 		call chSchGoSleepTimeoutS
 1116               	.LVL79:
 1117 0034 97FD      		sbrc r25,7
 1118 0036 00C0      		rjmp .L55
 511:../../../os/rt/src/chevents.c ****   }
 1119               		.loc 1 511 0
 1120 0038 288D      		ldd r18,Y+24
 1121 003a 912F      		mov r25,r17
 1122 003c 9223      		and r25,r18
 1123               	.LVL80:
 1124               	.L51:
 513:../../../os/rt/src/chevents.c ****   ctp->epending &= ~m;
 1125               		.loc 1 513 0
 1126 003e 892F      		mov r24,r25
 1127 0040 8195      		neg r24
 1128 0042 8923      		and r24,r25
 1129               	.LVL81:
 514:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1130               		.loc 1 514 0
 1131 0044 982F      		mov r25,r24
 1132 0046 9095      		com r25
 1133 0048 2923      		and r18,r25
 1134 004a 288F      		std Y+24,r18
 1135               	.LBB223:
 1136               	.LBB224:
 1137               	.LBB225:
 1138               	.LBB226:
 1139               		.loc 2 447 0
 1140               	/* #APP */
 1141               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1142 004c 7894      		sei
 1143               	 ;  0 "" 2
 1144               	/* epilogue start */
 1145               	/* #NOAPP */
 1146               	.LBE226:
 1147               	.LBE225:
 1148               	.LBE224:
 1149               	.LBE223:
 1150               		.loc 1 518 0
 1151 004e DF91      		pop r29
 1152 0050 CF91      		pop r28
 1153               	.LVL82:
 1154 0052 1F91      		pop r17
 1155 0054 0895      		ret
 1156               		.cfi_endproc
 1157               	.LFE145:
 1159               		.section	.text.chEvtWaitAnyTimeout,"ax",@progbits
 1160               	.global	chEvtWaitAnyTimeout
 1162               	chEvtWaitAnyTimeout:
 1163               	.LFB146:
 519:../../../os/rt/src/chevents.c **** 
 520:../../../os/rt/src/chevents.c **** /**
 521:../../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 522:../../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 523:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 524:../../../os/rt/src/chevents.c ****  *          returned.
 525:../../../os/rt/src/chevents.c ****  *
 526:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 527:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 528:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 529:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 530:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 531:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 532:../../../os/rt/src/chevents.c ****  *                      .
 533:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 534:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 535:../../../os/rt/src/chevents.c ****  *
 536:../../../os/rt/src/chevents.c ****  * @api
 537:../../../os/rt/src/chevents.c ****  */
 538:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 1164               		.loc 1 538 0
 1165               		.cfi_startproc
 1166               	.LVL83:
 1167 0000 1F93      		push r17
 1168               	.LCFI26:
 1169               		.cfi_def_cfa_offset 3
 1170               		.cfi_offset 17, -2
 1171 0002 CF93      		push r28
 1172               	.LCFI27:
 1173               		.cfi_def_cfa_offset 4
 1174               		.cfi_offset 28, -3
 1175 0004 DF93      		push r29
 1176               	.LCFI28:
 1177               		.cfi_def_cfa_offset 5
 1178               		.cfi_offset 29, -4
 1179               	/* prologue: function */
 1180               	/* frame size = 0 */
 1181               	/* stack size = 3 */
 1182               	.L__stack_usage = 3
 539:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 1183               		.loc 1 539 0
 1184 0006 C091 0000 		lds r28,ch+11
 1185 000a D091 0000 		lds r29,ch+11+1
 1186               	.LVL84:
 1187               	.LBB227:
 1188               	.LBB228:
 1189               	.LBB229:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1190               		.loc 2 437 0
 1191               	/* #APP */
 1192               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1193 000e F894      		cli
 1194               	 ;  0 "" 2
 1195               	/* #NOAPP */
 1196               	.LBE229:
 1197               	.LBE228:
 1198               	.LBE227:
 540:../../../os/rt/src/chevents.c ****   eventmask_t m;
 541:../../../os/rt/src/chevents.c **** 
 542:../../../os/rt/src/chevents.c ****   chSysLock();
 543:../../../os/rt/src/chevents.c ****   m = ctp->epending & events;
 1199               		.loc 1 543 0
 1200 0010 288D      		ldd r18,Y+24
 1201 0012 922F      		mov r25,r18
 1202 0014 9823      		and r25,r24
 1203               	.LVL85:
 544:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1204               		.loc 1 544 0
 1205 0016 01F4      		brne .L58
 545:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1206               		.loc 1 545 0
 1207 0018 6115      		cp r22,__zero_reg__
 1208 001a 7105      		cpc r23,__zero_reg__
 1209 001c 01F4      		brne .L63
 1210               	.LVL86:
 1211               	.L62:
 1212               	.LBB230:
 1213               	.LBB231:
 1214               	.LBB232:
 1215               	.LBB233:
 1216               		.loc 2 447 0
 1217               	/* #APP */
 1218               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1219 001e 7894      		sei
 1220               	 ;  0 "" 2
 1221               	/* #NOAPP */
 1222               	.LBE233:
 1223               	.LBE232:
 1224               	.LBE231:
 1225               	.LBE230:
 546:../../../os/rt/src/chevents.c ****       chSysUnlock();
 547:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 548:../../../os/rt/src/chevents.c ****     }
 549:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 550:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 551:../../../os/rt/src/chevents.c ****       chSysUnlock();
 552:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1226               		.loc 1 552 0
 1227 0020 80E0      		ldi r24,0
 1228               	/* epilogue start */
 553:../../../os/rt/src/chevents.c ****     }
 554:../../../os/rt/src/chevents.c ****     m = ctp->epending & events;
 555:../../../os/rt/src/chevents.c ****   }
 556:../../../os/rt/src/chevents.c ****   ctp->epending &= ~m;
 557:../../../os/rt/src/chevents.c ****   chSysUnlock();
 558:../../../os/rt/src/chevents.c **** 
 559:../../../os/rt/src/chevents.c ****   return m;
 560:../../../os/rt/src/chevents.c **** }
 1229               		.loc 1 560 0
 1230 0022 DF91      		pop r29
 1231 0024 CF91      		pop r28
 1232               	.LVL87:
 1233 0026 1F91      		pop r17
 1234 0028 0895      		ret
 1235               	.LVL88:
 1236               	.L63:
 1237 002a 182F      		mov r17,r24
 549:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1238               		.loc 1 549 0
 1239 002c 888B      		std Y+16,r24
 550:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1240               		.loc 1 550 0
 1241 002e 8AE0      		ldi r24,lo8(10)
 1242               	.LVL89:
 1243 0030 0E94 0000 		call chSchGoSleepTimeoutS
 1244               	.LVL90:
 1245 0034 97FD      		sbrc r25,7
 1246 0036 00C0      		rjmp .L62
 554:../../../os/rt/src/chevents.c ****   }
 1247               		.loc 1 554 0
 1248 0038 288D      		ldd r18,Y+24
 1249 003a 912F      		mov r25,r17
 1250 003c 9223      		and r25,r18
 1251               	.LVL91:
 1252               	.L58:
 556:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1253               		.loc 1 556 0
 1254 003e 892F      		mov r24,r25
 1255 0040 8095      		com r24
 1256 0042 2823      		and r18,r24
 1257 0044 288F      		std Y+24,r18
 1258               	.LBB234:
 1259               	.LBB235:
 1260               	.LBB236:
 1261               	.LBB237:
 1262               		.loc 2 447 0
 1263               	/* #APP */
 1264               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1265 0046 7894      		sei
 1266               	 ;  0 "" 2
 1267               	/* #NOAPP */
 1268               	.LBE237:
 1269               	.LBE236:
 1270               	.LBE235:
 1271               	.LBE234:
 559:../../../os/rt/src/chevents.c **** }
 1272               		.loc 1 559 0
 1273 0048 892F      		mov r24,r25
 1274               	/* epilogue start */
 1275               		.loc 1 560 0
 1276 004a DF91      		pop r29
 1277 004c CF91      		pop r28
 1278               	.LVL92:
 1279 004e 1F91      		pop r17
 1280 0050 0895      		ret
 1281               		.cfi_endproc
 1282               	.LFE146:
 1284               		.section	.text.chEvtWaitAllTimeout,"ax",@progbits
 1285               	.global	chEvtWaitAllTimeout
 1287               	chEvtWaitAllTimeout:
 1288               	.LFB147:
 561:../../../os/rt/src/chevents.c **** 
 562:../../../os/rt/src/chevents.c **** /**
 563:../../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 564:../../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 565:../../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 566:../../../os/rt/src/chevents.c ****  *
 567:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 568:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 569:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 570:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 571:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 572:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 573:../../../os/rt/src/chevents.c ****  *                      .
 574:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 575:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 576:../../../os/rt/src/chevents.c ****  *
 577:../../../os/rt/src/chevents.c ****  * @api
 578:../../../os/rt/src/chevents.c ****  */
 579:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 1289               		.loc 1 579 0
 1290               		.cfi_startproc
 1291               	.LVL93:
 1292 0000 0F93      		push r16
 1293               	.LCFI29:
 1294               		.cfi_def_cfa_offset 3
 1295               		.cfi_offset 16, -2
 1296 0002 1F93      		push r17
 1297               	.LCFI30:
 1298               		.cfi_def_cfa_offset 4
 1299               		.cfi_offset 17, -3
 1300 0004 CF93      		push r28
 1301               	.LCFI31:
 1302               		.cfi_def_cfa_offset 5
 1303               		.cfi_offset 28, -4
 1304               	/* prologue: function */
 1305               	/* frame size = 0 */
 1306               	/* stack size = 3 */
 1307               	.L__stack_usage = 3
 1308 0006 C82F      		mov r28,r24
 580:../../../os/rt/src/chevents.c ****   thread_t *ctp = currp;
 1309               		.loc 1 580 0
 1310 0008 0091 0000 		lds r16,ch+11
 1311 000c 1091 0000 		lds r17,ch+11+1
 1312               	.LVL94:
 1313               	.LBB238:
 1314               	.LBB239:
 1315               	.LBB240:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1316               		.loc 2 437 0
 1317               	/* #APP */
 1318               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1319 0010 F894      		cli
 1320               	 ;  0 "" 2
 1321               	/* #NOAPP */
 1322               	.LBE240:
 1323               	.LBE239:
 1324               	.LBE238:
 581:../../../os/rt/src/chevents.c **** 
 582:../../../os/rt/src/chevents.c ****   chSysLock();
 583:../../../os/rt/src/chevents.c ****   if ((ctp->epending & events) != events) {
 1325               		.loc 1 583 0
 1326 0012 F801      		movw r30,r16
 1327 0014 808D      		ldd r24,Z+24
 1328               	.LVL95:
 1329 0016 982F      		mov r25,r24
 1330 0018 9C23      		and r25,r28
 1331 001a C917      		cp r28,r25
 1332 001c 01F0      		breq .L65
 584:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1333               		.loc 1 584 0
 1334 001e 6115      		cp r22,__zero_reg__
 1335 0020 7105      		cpc r23,__zero_reg__
 1336 0022 01F4      		brne .L69
 1337               	.LVL96:
 1338               	.L68:
 1339               	.LBB241:
 1340               	.LBB242:
 1341               	.LBB243:
 1342               	.LBB244:
 1343               		.loc 2 447 0
 1344               	/* #APP */
 1345               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1346 0024 7894      		sei
 1347               	 ;  0 "" 2
 1348               	/* #NOAPP */
 1349               	.LBE244:
 1350               	.LBE243:
 1351               	.LBE242:
 1352               	.LBE241:
 585:../../../os/rt/src/chevents.c ****       chSysUnlock();
 586:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 587:../../../os/rt/src/chevents.c ****     }
 588:../../../os/rt/src/chevents.c ****     ctp->u.ewmask = events;
 589:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 590:../../../os/rt/src/chevents.c ****       chSysUnlock();
 591:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1353               		.loc 1 591 0
 1354 0026 80E0      		ldi r24,0
 1355               	/* epilogue start */
 592:../../../os/rt/src/chevents.c ****     }
 593:../../../os/rt/src/chevents.c ****   }
 594:../../../os/rt/src/chevents.c ****   ctp->epending &= ~events;
 595:../../../os/rt/src/chevents.c ****   chSysUnlock();
 596:../../../os/rt/src/chevents.c **** 
 597:../../../os/rt/src/chevents.c ****   return events;
 598:../../../os/rt/src/chevents.c **** }
 1356               		.loc 1 598 0
 1357 0028 CF91      		pop r28
 1358               	.LVL97:
 1359 002a 1F91      		pop r17
 1360 002c 0F91      		pop r16
 1361               	.LVL98:
 1362 002e 0895      		ret
 1363               	.LVL99:
 1364               	.L69:
 588:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 1365               		.loc 1 588 0
 1366 0030 F801      		movw r30,r16
 1367 0032 C08B      		std Z+16,r28
 589:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1368               		.loc 1 589 0
 1369 0034 8BE0      		ldi r24,lo8(11)
 1370 0036 0E94 0000 		call chSchGoSleepTimeoutS
 1371               	.LVL100:
 1372 003a 97FD      		sbrc r25,7
 1373 003c 00C0      		rjmp .L68
 1374 003e F801      		movw r30,r16
 1375 0040 808D      		ldd r24,Z+24
 1376               	.L65:
 594:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1377               		.loc 1 594 0
 1378 0042 9C2F      		mov r25,r28
 1379 0044 9095      		com r25
 1380 0046 8923      		and r24,r25
 1381 0048 F801      		movw r30,r16
 1382 004a 808F      		std Z+24,r24
 1383               	.LBB245:
 1384               	.LBB246:
 1385               	.LBB247:
 1386               	.LBB248:
 1387               		.loc 2 447 0
 1388               	/* #APP */
 1389               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1390 004c 7894      		sei
 1391               	 ;  0 "" 2
 1392               	/* #NOAPP */
 1393               	.LBE248:
 1394               	.LBE247:
 1395               	.LBE246:
 1396               	.LBE245:
 597:../../../os/rt/src/chevents.c **** }
 1397               		.loc 1 597 0
 1398 004e 8C2F      		mov r24,r28
 1399               	/* epilogue start */
 1400               		.loc 1 598 0
 1401 0050 CF91      		pop r28
 1402               	.LVL101:
 1403 0052 1F91      		pop r17
 1404 0054 0F91      		pop r16
 1405               	.LVL102:
 1406 0056 0895      		ret
 1407               		.cfi_endproc
 1408               	.LFE147:
 1410               		.text
 1411               	.Letext0:
 1412               		.file 4 "/usr/lib/avr/include/stdint.h"
 1413               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1414               		.file 6 "../../../os/rt/include/chsystypes.h"
 1415               		.file 7 "../../../os/rt/include/chschd.h"
 1416               		.file 8 "../../../os/rt/include/chtime.h"
 1417               		.file 9 "../../../os/rt/include/chsem.h"
 1418               		.file 10 "../../../os/rt/include/chmtx.h"
 1419               		.file 11 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chevents.c
     /tmp/ccgf8xtr.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgf8xtr.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgf8xtr.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgf8xtr.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgf8xtr.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgf8xtr.s:13     .text.chEvtRegisterMaskWithFlags:0000000000000000 chEvtRegisterMaskWithFlags
     /tmp/ccgf8xtr.s:81     .text.chEvtUnregister:0000000000000000 chEvtUnregister
     /tmp/ccgf8xtr.s:164    .text.chEvtGetAndClearEventsI:0000000000000000 chEvtGetAndClearEventsI
     /tmp/ccgf8xtr.s:193    .text.chEvtGetAndClearEvents:0000000000000000 chEvtGetAndClearEvents
     /tmp/ccgf8xtr.s:254    .text.chEvtAddEvents:0000000000000000 chEvtAddEvents
     /tmp/ccgf8xtr.s:311    .text.chEvtGetAndClearFlags:0000000000000000 chEvtGetAndClearFlags
     /tmp/ccgf8xtr.s:360    .text.chEvtSignalI:0000000000000000 chEvtSignalI
     /tmp/ccgf8xtr.s:412    .text.chEvtBroadcastFlagsI:0000000000000000 chEvtBroadcastFlagsI
     /tmp/ccgf8xtr.s:500    .text.chEvtSignal:0000000000000000 chEvtSignal
     /tmp/ccgf8xtr.s:548    .text.chEvtBroadcastFlags:0000000000000000 chEvtBroadcastFlags
     /tmp/ccgf8xtr.s:596    .text.chEvtGetAndClearFlagsI:0000000000000000 chEvtGetAndClearFlagsI
     /tmp/ccgf8xtr.s:619    .text.chEvtDispatch:0000000000000000 chEvtDispatch
     /tmp/ccgf8xtr.s:757    .text.chEvtWaitOne:0000000000000000 chEvtWaitOne
     /tmp/ccgf8xtr.s:852    .text.chEvtWaitAny:0000000000000000 chEvtWaitAny
     /tmp/ccgf8xtr.s:944    .text.chEvtWaitAll:0000000000000000 chEvtWaitAll
     /tmp/ccgf8xtr.s:1034   .text.chEvtWaitOneTimeout:0000000000000000 chEvtWaitOneTimeout
     /tmp/ccgf8xtr.s:1162   .text.chEvtWaitAnyTimeout:0000000000000000 chEvtWaitAnyTimeout
     /tmp/ccgf8xtr.s:1287   .text.chEvtWaitAllTimeout:0000000000000000 chEvtWaitAllTimeout

UNDEFINED SYMBOLS
ch
chSchReadyI
chSchRescheduleS
chSchGoSleepS
chSchGoSleepTimeoutS
